Here is the input problem:
  Axiom 1 (sub_cancel): minus(X, X) = zero.
  Axiom 2 (pow_one): pow(X, one) = X.
  Axiom 3 (add_comm): plus(X, Y) = plus(Y, X).
  Axiom 4 (add_zero_right): plus(X, zero) = X.
  Axiom 5 (add_zero_left): X = plus(X, zero).
  Axiom 6 (pow_two): pow(X, two) = times(X, X).
  Axiom 7 (mul_comm): times(X, Y) = times(Y, X).
  Axiom 8 (mul_one_right): times(X, one) = X.
  Axiom 9 (mul_one_left): X = times(X, one).
  Axiom 10 (mul_zero_right): times(X, zero) = zero.
  Axiom 11 (sub_to_add): minus(X, Y) = plus(X, times(minus_one, Y)).
  Axiom 12 (add_assoc): plus(X, plus(Y, Z)) = plus(plus(X, Y), Z).
  Axiom 13 (mul_assoc): times(X, times(Y, Z)) = times(times(X, Y), Z).
  Axiom 14 (distribute): times(X, plus(Y, Z)) = plus(times(X, Y), times(X, Z)).
  Axiom 15 (factor): plus(times(X, Y), times(X, Z)) = times(X, plus(Y, Z)).
  Axiom 16 (pow_mul_merge): times(pow(X, Y), pow(X, Z)) = pow(X, plus(Y, Z)).
  Goal 1 (goal): true = false.

1. minus(X, X) -> zero
2. pow(X, one) -> X
3. plus(X, Y) <-> plus(Y, X)
4. plus(X, zero) -> X
5. times(X, X) -> pow(X, two)
6. times(X, Y) <-> times(Y, X)
7. times(X, one) -> X
8. times(X, zero) -> zero
9. plus(X, times(minus_one, Y)) -> minus(X, Y)
10. plus(plus(X, Y), Z) -> plus(X, plus(Y, Z))
11. times(times(X, Y), Z) -> times(X, times(Y, Z))
12. plus(times(X, Y), times(X, Z)) -> times(X, plus(Y, Z))
13. times(pow(X, Y), pow(X, Z)) -> pow(X, plus(Y, Z))
14. plus(zero, X) -> X
15. times(one, X) -> X
16. minus(X, zero) -> X
17. times(zero, X) -> zero
18. pow(one, two) -> one
19. pow(zero, two) -> zero
20. plus(X, minus_one) -> minus(X, one)
21. minus(zero, one) -> minus_one
22. times(X, minus_one) -> minus(zero, X)
23. plus(minus_one, X) -> minus(X, one)
24. times(minus_one, X) -> minus(zero, X)
25. pow(minus_one, two) -> minus(zero, minus_one)
26. plus(X, minus(zero, Y)) -> minus(X, Y)
27. pow(zero, plus(X, two)) -> zero
28. plus(X, plus(Y, Z)) <-> plus(Y, plus(X, Z))
29. times(X, times(Y, Z)) <-> times(Y, times(X, Z))
30. times(X, times(X, Y)) = times(pow(X, two), Y)
31. times(X, plus(Y, one)) = plus(X, times(X, Y))
32. times(X, pow(X, Y)) -> pow(X, plus(Y, one))
33. pow(zero, plus(X, one)) -> zero
34. pow(zero, zero) -> zero
35. pow(zero, X) -> zero
36. pow(one, plus(two, one)) -> one
37. pow(X, plus(Y, Y)) = pow(pow(X, Y), two)
38. pow(one, plus(two, two)) -> one
39. minus(minus(zero, X), Y) -> minus(zero, plus(X, Y))
40. plus(minus(zero, X), Y) -> minus(Y, X)
41. times(X, plus(one, one)) = plus(X, X)
42. pow(one, plus(X, two)) -> pow(one, X)
43. pow(one, zero) -> one
44. minus(zero, plus(X, one)) -> minus(minus_one, X)
45. pow(X, plus(one, one)) -> pow(X, two)
46. pow(one, plus(X, one)) -> pow(one, X)
47. pow(one, minus_one) -> one
48. times(X, times(Y, X)) = times(Y, pow(X, two))
49. times(X, pow(Y, two)) = times(Y, times(Y, X))
50. plus(X, times(X, Y)) = times(X, plus(one, Y))
51. plus(X, times(X, Y)) = times(plus(Y, one), X)
52. times(X, plus(Y, one)) = plus(X, times(Y, X))
53. plus(X, minus(Y, one)) -> minus(plus(X, Y), one)
54. minus(plus(X, one), one) -> X
55. plus(minus(X, one), Y) -> minus(plus(X, Y), one)
56. times(X, plus(X, one)) -> plus(X, pow(X, two))
57. plus(X, X) = times(plus(one, one), X)
58. pow(one, plus(two, X)) -> pow(one, X)
59. minus(zero, plus(one, X)) -> minus(minus_one, X)
60. pow(one, plus(one, X)) -> pow(one, X)
61. minus(plus(one, X), one) -> X
62. pow(one, minus(two, one)) -> one
63. pow(one, minus(minus_one, one)) -> one
64. times(plus(one, X), Y) = plus(Y, times(Y, X))
65. times(X, plus(one, Y)) = plus(X, times(Y, X))
66. times(plus(X, one), Y) = plus(Y, times(X, Y))
67. times(X, minus(zero, Y)) -> minus(zero, times(X, Y))
68. times(minus(zero, X), Y) -> minus(zero, times(X, Y))
69. plus(X, minus(minus_one, Y)) -> minus(X, plus(Y, one))
70. times(X, plus(one, X)) -> plus(X, pow(X, two))
  (hard) times(Y, plus(one, X)) = times(plus(X, one), Y)
71. pow(one, minus(zero, X)) -> pow(one, minus(two, X))
72. minus(zero, minus(one, X)) -> minus(minus_one, minus(zero, X))
73. pow(one, minus(one, X)) -> pow(one, minus(two, X))
74. pow(one, minus(X, one)) -> pow(one, X)
75. minus(minus(one, X), one) -> minus(zero, X)
76. times(plus(one, X), Y) = plus(Y, times(X, Y))
  (hard) times(plus(one, X), Y) = times(Y, plus(X, one))
77. plus(minus(minus_one, X), Y) -> minus(Y, plus(X, one))
78. pow(minus_one, plus(X, one)) -> minus(zero, pow(minus_one, X))
79. minus(zero, pow(minus_one, zero)) -> minus_one
80. minus(minus(minus_one, X), one) -> minus(minus_one, plus(X, one))
81. minus(minus(X, one), one) -> minus(X, plus(one, one))
82. minus(one, plus(one, one)) -> minus_one
83. pow(minus(zero, minus_one), two) -> pow(minus_one, plus(two, two))
84. minus(zero, pow(minus_one, minus_one)) -> pow(minus_one, zero)
85. pow(minus_one, plus(one, X)) -> minus(zero, pow(minus_one, X))
86. minus(X, pow(minus_one, zero)) -> minus(X, one)
87. minus(pow(minus_one, zero), one) -> zero
88. plus(X, pow(minus_one, zero)) -> minus(X, pow(minus_one, minus_one))
89. minus(minus_one, pow(minus_one, minus_one)) -> zero
90. pow(one, pow(minus_one, zero)) -> one
91. plus(pow(minus_one, zero), X) -> minus(X, pow(minus_one, minus_one))

Gave up on reaching the given resource limit.
Here is the final rewrite system:
  plus(X, X) = times(plus(one, one), X)
  plus(X, Y) <-> plus(Y, X)
  plus(X, minus_one) -> minus(X, one)
  plus(X, zero) -> X
  plus(minus_one, X) -> minus(X, one)
  plus(zero, X) -> X
  times(X, X) -> pow(X, two)
  times(X, Y) <-> times(Y, X)
  times(X, minus_one) -> minus(zero, X)
  times(X, zero) -> zero
  times(X, one) -> X
  times(minus_one, X) -> minus(zero, X)
  times(zero, X) -> zero
  times(one, X) -> X
  minus(X, X) -> zero
  minus(X, zero) -> X
  minus(zero, one) -> minus_one
  pow(X, one) -> X
  pow(minus_one, two) -> minus(zero, minus_one)
  pow(zero, X) -> zero
  pow(one, minus_one) -> one
  pow(one, zero) -> one
  pow(one, two) -> one
  plus(X, times(X, Y)) = times(X, plus(one, Y))
  plus(X, minus(Y, one)) -> minus(plus(X, Y), one)
  plus(X, minus(minus_one, Y)) -> minus(X, plus(Y, one))
  plus(X, minus(zero, Y)) -> minus(X, Y)
  plus(X, pow(minus_one, zero)) -> minus(X, pow(minus_one, minus_one))
  plus(X, plus(Y, Z)) <-> plus(Y, plus(X, Z))
  plus(plus(X, Y), Z) -> plus(X, plus(Y, Z))
  plus(minus(X, one), Y) -> minus(plus(X, Y), one)
  plus(minus(minus_one, X), Y) -> minus(Y, plus(X, one))
  plus(minus(zero, X), Y) -> minus(Y, X)
  plus(pow(minus_one, zero), X) -> minus(X, pow(minus_one, minus_one))
  times(X, plus(Y, one)) = plus(X, times(Y, X))
  times(X, plus(one, X)) -> plus(X, pow(X, two))
  times(X, plus(one, Y)) = plus(X, times(Y, X))
  times(X, plus(one, one)) = plus(X, X)
  times(X, times(X, Y)) = times(pow(X, two), Y)
  times(X, times(Y, Z)) <-> times(Y, times(X, Z))
  times(X, minus(zero, Y)) -> minus(zero, times(X, Y))
  times(X, pow(X, Y)) -> pow(X, plus(Y, one))
  times(X, pow(Y, two)) = times(Y, times(Y, X))
  times(plus(X, one), Y) = plus(Y, times(X, Y))
  times(plus(one, X), Y) = plus(Y, times(X, Y))
  times(times(X, Y), Z) -> times(X, times(Y, Z))
  times(minus(zero, X), Y) -> minus(zero, times(X, Y))
  minus(X, pow(minus_one, zero)) -> minus(X, one)
  minus(minus_one, pow(minus_one, minus_one)) -> zero
  minus(zero, plus(X, one)) -> minus(minus_one, X)
  minus(zero, plus(one, X)) -> minus(minus_one, X)
  minus(zero, minus(one, X)) -> minus(minus_one, minus(zero, X))
  minus(zero, pow(minus_one, minus_one)) -> pow(minus_one, zero)
  minus(one, plus(one, one)) -> minus_one
  minus(plus(X, one), one) -> X
  minus(plus(one, X), one) -> X
  minus(minus(X, one), one) -> minus(X, plus(one, one))
  minus(minus(minus_one, X), one) -> minus(minus_one, plus(X, one))
  minus(minus(zero, X), Y) -> minus(zero, plus(X, Y))
  minus(minus(one, X), one) -> minus(zero, X)
  minus(pow(minus_one, zero), one) -> zero
  pow(X, plus(Y, Y)) = pow(pow(X, Y), two)
  pow(X, plus(one, one)) -> pow(X, two)
  pow(minus_one, plus(X, one)) -> minus(zero, pow(minus_one, X))
  pow(minus_one, plus(one, X)) -> minus(zero, pow(minus_one, X))
  pow(one, plus(X, one)) -> pow(one, X)
  pow(one, plus(X, two)) -> pow(one, X)
  pow(one, plus(one, X)) -> pow(one, X)
  pow(one, plus(two, X)) -> pow(one, X)
  pow(one, minus(X, one)) -> pow(one, X)
  pow(one, minus(zero, X)) -> pow(one, minus(two, X))
  pow(one, minus(one, X)) -> pow(one, minus(two, X))
  pow(one, pow(minus_one, zero)) -> one
  pow(minus(zero, minus_one), two) -> pow(minus_one, plus(two, two))
  plus(times(X, Y), times(X, Z)) -> times(X, plus(Y, Z))
  times(pow(X, Y), pow(X, Z)) -> pow(X, plus(Y, Z))

RESULT: GaveUp (couldn't solve the problem).

Execution time: 0.049346 seconds

