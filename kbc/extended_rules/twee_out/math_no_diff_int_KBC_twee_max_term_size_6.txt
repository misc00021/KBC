Here is the input problem:
  Axiom 1 (cancel_sub): X - X = 0.
  Axiom 2 (pow1): pow(X, 1) = X.
  Axiom 3 (comm_add): X + Y = Y + X.
  Axiom 4 (zero_add): X + 0 = X.
  Axiom 5 (add_zero): X = X + 0.
  Axiom 6 (pow2): pow(X, 2) = X * X.
  Axiom 7 (comm_mul): X * Y = Y * X.
  Axiom 8 (zero_mul): X * 0 = 0.
  Axiom 9 (one_mul): X * 1 = X.
  Axiom 10 (mul_one): X = X * 1.
  Axiom 11 (ifeq_axiom): ifeq(X, X, Y, Z) = Y.
  Axiom 12 (assoc_add): X + (Y + Z) = (X + Y) + Z.
  Axiom 13 (assoc_mul): X * (Y * Z) = (X * Y) * Z.
  Axiom 14 (sub_canon): X - Y = X + (neg(1) * Y).
  Axiom 15 (cancel_div): ifeq(is_not_zero(X), true2, X / X, 1) = 1.
  Axiom 16 (pow0): ifeq(is_not_zero(X), true2, pow(X, 0), 1) = 1.
  Axiom 17 (distribute): X * (Y + Z) = (X * Y) + (X * Z).
  Axiom 18 (factor): (X * Y) + (X * Z) = X * (Y + Z).
  Axiom 19 (recip_mul_div): ifeq(is_not_zero(X), true2, X * (1 / X), 1) = 1.
  Axiom 20 (pow_recip): ifeq(is_not_zero(X), true2, pow(X, neg(1)), 1 / X) = 1 / X.
  Axiom 21 (div_canon): ifeq(is_not_zero(X), true2, Y * pow(X, neg(1)), Y / X) = Y / X.
  Axiom 22 (pow_mul): ifeq(is_not_zero(X), true2, pow(X, Y) * pow(X, Z), pow(X, Y + Z)) = pow(X, Y + Z).
  Goal 1 (goal): true = false.

1. X - X -> 0
2. pow(X, 1) -> X
3. X + Y <-> Y + X
4. X + 0 -> X
5. X * X -> pow(X, 2)
6. X * Y <-> Y * X
7. X * 0 -> 0
8. X * 1 -> X
9. ifeq(X, X, Y, Z) -> Y
10. (X + Y) + Z -> X + (Y + Z)
11. (X * Y) * Z -> X * (Y * Z)
12. X + (neg(1) * Y) -> X - Y
13. ifeq(is_not_zero(X), true2, X / X, 1) -> 1
14. ifeq(is_not_zero(X), true2, pow(X, 0), 1) -> 1
15. (X * Y) + (X * Z) -> X * (Y + Z)
16. ifeq(is_not_zero(X), true2, X * (1 / X), 1) -> 1
17. ifeq(is_not_zero(X), true2, pow(X, neg(1)), 1 / X) -> 1 / X
18. ifeq(is_not_zero(X), true2, Y * pow(X, neg(1)), Y / X) -> Y / X
19. ifeq(is_not_zero(X), true2, pow(X, Y) * pow(X, Z), pow(X, Y + Z)) -> pow(X, Y + Z)
20. 0 + X -> X
21. 1 * X -> X
22. X - 0 -> X
23. 0 * X -> 0
24. pow(0, 2) -> 0
25. pow(1, 2) -> 1
26. X + neg(1) -> X - 1
27. 0 - 1 -> neg(1)
28. X * neg(1) -> 0 - X
29. neg(1) + X -> X - 1
30. X + (Y + Z) <-> Y + (X + Z)
31. X * (Y * Z) <-> Y * (X * Z)
32. neg(1) * X -> 0 - X
33. X * (X * Y) = pow(X, 2) * Y
34. X * (Y + 1) = X + (X * Y)
35. X * (1 + 1) = X + X
36. X + (0 - X) -> 0
37. pow(neg(1), 2) -> 0 - neg(1)
38. X + (0 - Y) -> X - Y
39. (0 - X) + Y -> Y - X
40. 0 - (X + 1) -> neg(1) - X
41. X * (Y * X) = Y * pow(X, 2)
42. X * pow(Y, 2) = Y * (Y * X)
43. X + (X * Y) = X * (1 + Y)
44. X + (X * Y) = (Y + 1) * X
45. X * (Y + 1) = X + (Y * X)
46. X + (Y - 1) -> (X + Y) - 1
47. (X + 1) - 1 -> X
48. X * (X + 1) -> X + pow(X, 2)
49. X + X = (1 + 1) * X
50. (1 + X) - 1 -> X
51. ifeq(is_not_zero(0), true2, 0, 1) -> 1
52. (0 - X) - 1 -> neg(1) - X
53. 0 - (1 + X) -> neg(1) - X
54. (1 + X) * Y = Y + (Y * X)
55. X * (1 + Y) = X + (Y * X)
56. (X + 1) * Y = Y + (X * Y)
57. X * (0 - Y) -> 0 - (X * Y)
58. (0 - X) - Y <-> (0 - Y) - X
59. X * (1 + X) -> X + pow(X, 2)
  (hard) Y * (1 + X) = (X + 1) * Y
60. (X - 1) + Y -> (X + Y) - 1
61. (0 - X) - Y -> 0 - (X + Y)
62. (1 - X) - 1 -> 0 - X
63. (1 + X) * Y = Y + (X * Y)
  (hard) (1 + X) * Y = Y * (X + 1)
64. (0 - X) * Y -> 0 - (X * Y)
65. X + (neg(1) - Y) -> X - (Y + 1)
66. (X - 1) - 1 -> X - (1 + 1)
67. 1 - (1 + 1) -> neg(1)
68. neg(1) - (0 - X) -> 0 - (1 - X)
69. (neg(1) - X) + Y -> Y - (X + 1)
70. (neg(1) - X) - 1 -> neg(1) - (X + 1)

Gave up on reaching the given resource limit.
Here is the final rewrite system:
  X + X = (1 + 1) * X
  X + Y <-> Y + X
  X + 0 -> X
  0 + X -> X
  X * X -> pow(X, 2)
  X * Y <-> Y * X
  X * 1 -> X
  X * 0 -> 0
  1 * X -> X
  0 * X -> 0
  X - X -> 0
  X - 0 -> X
  0 - 1 -> neg(1)
  pow(X, 1) -> X
  pow(1, 2) -> 1
  pow(0, 2) -> 0
  X + neg(1) -> X - 1
  neg(1) + X -> X - 1
  X * neg(1) -> 0 - X
  neg(1) * X -> 0 - X
  pow(neg(1), 2) -> 0 - neg(1)
  ifeq(X, X, Y, Z) -> Y
  X + (X * Y) = X * (1 + Y)
  X + (Y - 1) -> (X + Y) - 1
  X + (0 - X) -> 0
  X + (0 - Y) -> X - Y
  X + (Y + Z) <-> Y + (X + Z)
  (X + Y) + Z -> X + (Y + Z)
  (X - 1) + Y -> (X + Y) - 1
  (0 - X) + Y -> Y - X
  X * (Y + 1) = X + (Y * X)
  X * (1 + X) -> X + pow(X, 2)
  X * (1 + Y) = X + (Y * X)
  X * (1 + 1) = X + X
  X * (X * Y) = pow(X, 2) * Y
  X * (Y * Z) <-> Y * (X * Z)
  X * (0 - Y) -> 0 - (X * Y)
  X * pow(Y, 2) = Y * (Y * X)
  (X + 1) * Y = Y + (X * Y)
  (1 + X) * Y = Y + (X * Y)
  (X * Y) * Z -> X * (Y * Z)
  (0 - X) * Y -> 0 - (X * Y)
  1 - (1 + 1) -> neg(1)
  0 - (X + 1) -> neg(1) - X
  0 - (1 + X) -> neg(1) - X
  (X + 1) - 1 -> X
  (1 + X) - 1 -> X
  (X - 1) - 1 -> X - (1 + 1)
  (1 - X) - 1 -> 0 - X
  (0 - X) - Y -> 0 - (X + Y)
  ifeq(is_not_zero(0), true2, 0, 1) -> 1
  X + (neg(1) - Y) -> X - (Y + 1)
  (neg(1) - X) + Y -> Y - (X + 1)
  neg(1) - (0 - X) -> 0 - (1 - X)
  (neg(1) - X) - 1 -> neg(1) - (X + 1)
  (X * Y) + (X * Z) -> X * (Y + Z)
  ifeq(is_not_zero(X), true2, pow(X, 0), 1) -> 1
  ifeq(is_not_zero(X), true2, X / X, 1) -> 1
  ifeq(is_not_zero(X), true2, X * (1 / X), 1) -> 1
  ifeq(is_not_zero(X), true2, pow(X, neg(1)), 1 / X) -> 1 / X
  ifeq(is_not_zero(X), true2, Y * pow(X, neg(1)), Y / X) -> Y / X
  ifeq(is_not_zero(X), true2, pow(X, Y) * pow(X, Z), pow(X, Y + Z)) -> pow(X, Y + Z)

RESULT: GaveUp (couldn't solve the problem).
