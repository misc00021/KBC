[
  {
    "base_term": "(+ (pow (+ (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (* (/ 0 (/ a -1)) (+ -1 c))) (pow (* (/ a 0) 0) (- 0 c))) (* (pow (- 1 -1) 0) (pow c a))) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (* (/ (* (pow 0 a) (* -1 (pow 1 a))) 0) c) (pow 0 (- 0 c))) (pow c a)) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.014196664
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100251447)",
      "output_term": "(+ (pow (+ (* (/ (- 0 (* (pow 0 a) (pow 1 a))) 0) c) (pow 0 (- 0 c))) (pow c a)) (/ (pow (- b e) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.10208057999999999
    },
    "speedup": 0.13907311263317665,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (* (- (* (* (pow (pow -1 1) 1) (pow -1 a)) (- b b)) (/ (- 0 d) -1)) (- (+ 1 -1) 0)) (- (* 1 (pow e c)) (+ b 1))) (- (+ (* -1 -1) 1) (* b -1))) (* (- (pow (* d c) a) (* 0 b)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.015645611
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.09263318899999999
    },
    "speedup": 0.1688985467184985,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (* (- (* (* (/ (* 1 0) -1) (+ -1 -1)) (pow 1 a)) (pow (- 0 a) 0)) 1) (- (pow a a) (/ 0 1))) (+ (- (pow 1 (* c -1)) (- 0 b)) (/ d a))) (+ (pow (+ (+ 1 0) -1) (- c d)) (+ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* -1 (pow a a)) (+ (pow 1 (* -1 c)) (+ (/ d a) b))) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 20,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.012674121
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (+ (pow 0 (- c d)) 2) (/ (pow a a) (+ (pow 1 (- 0 c)) (+ (/ d a) b))))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.045052059000000005
    },
    "speedup": 0.28132168165721344,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (pow (pow (* (pow (+ 0 (pow a (+ 1 a))) (/ 1 1)) (/ (pow 1 1) b)) (pow (* c 1) 0)) (- (+ -1 (- d 0)) (* a e))) (* (* (- -1 d) 1) (pow 0 0))) (* (* (pow (+ 0 c) 0) (/ c 0)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (pow (* (pow a (+ a 1)) (/ 1 b)) (- (+ -1 d) (* a e))) (* (pow 0 0) (+ 1 d))) (* -1 (/ c 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.023888935999999996
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (pow (/ (pow a (+ a 1)) b) (+ -1 (- d (* a e)))) (* (pow 0 0) (+ 1 d))) (- 0 (/ c 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.080594832
    },
    "speedup": 0.29640778952178964,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (- (* (* (pow (pow 1 0) (pow -1 a)) (/ 0 0)) -1) (+ (* (pow 1 b) b) (- 0 0))) (/ (* (- a -1) a) (- c 0))) (* (pow -1 (+ -1 c)) (+ 1 0))) (/ (+ (/ d (+ 0 a)) (- c c)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (- (* (pow 1 (pow -1 a)) (* -1 (/ 0 0))) (* b (pow 1 b))) (/ (+ a (* a a)) c)) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.031177578
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100163116)",
      "output_term": "(+ (pow (- (* a (/ (+ 1 a) c)) (+ (* (pow 1 (pow -1 a)) (/ 0 0)) (* b (pow 1 b)))) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.102217461
    },
    "speedup": 0.3050122522608931,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (* (pow 1 (pow (- (pow (pow a 1) 1) 0) (+ 1 0))) (pow (- (pow a a) a) (+ 1 b))) (pow (+ (/ 0 1) 1) (- 1 b))) (- (* (- a -1) b) (+ a -1))) (/ (pow (- b (- 1 1)) (/ c 1)) (- c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ a (- 1 b)))) (+ 1 (+ b (* a (+ b -1))))) (/ (pow b c) (- c b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.031516963
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100148212)",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ 1 (- a b)))) (+ 1 (- (* b (+ 1 a)) a))) (/ (pow b c) (- c b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.10089399599999999
    },
    "speedup": 0.31237699218494636,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (/ (- (pow (- (- 1 (+ (/ a 1) b)) (/ 0 b)) (- (pow 0 a) a)) (+ (- 0 0) 0)) (/ -1 (- a 0))) (+ (- (+ (* -1 1) 1) (/ 1 1)) (- 0 0))) (pow (- (pow (+ a a) b) (+ -1 0)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (* -1 (/ (pow (- 1 (+ a b)) (- (pow 0 a) a)) (/ -1 a))) (pow (+ 1 (pow (+ a a) b)) (/ 1 e)))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.016279270999999998
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (- 1 (+ a b)) (- (pow 0 a) a)) (* (pow (+ 1 (pow (+ a a) b)) (/ 1 e)) (/ -1 (/ -1 a))))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.052102739999999995
    },
    "speedup": 0.31244558347603213,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (pow (- (/ (/ (- a a) (+ 0 a)) (- 0 -1)) -1) (/ (/ (* a a) 1) (* 1 b))) (- (pow (pow a a) b) (/ d -1))) (/ (- (- -1 0) b) (/ 0 -1))) (/ (pow (- (- 0 1) d) (- c c)) (* c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow 1 (/ (* a a) b)) (+ (pow (pow a a) b) d)) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.011425695
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow 1 (* a (/ a b))) (+ (pow (pow a a) b) d)) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.036285825
    },
    "speedup": 0.31488039751059815,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (/ (pow (/ (+ (/ (pow a b) 1) 0) (/ 0 1)) (pow (pow -1 1) 0)) a) (- (pow (* a -1) 1) (- c 1))) (/ (+ (+ (+ 1 -1) -1) (* d 0)) (+ a b))) (pow (* (pow (+ 0 -1) e) (+ 0 e)) (- e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (/ (/ (pow a b) 0) a) (* -1 (+ c (+ a -1)))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.024410010000000003
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (/ (pow a b) 0) a) (- 1 (+ a c))) (/ (/ -1 (+ a b)) (pow (* e (pow -1 e)) (- e a))))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 6,
      "simplification_time": 0.07702699099999999
    },
    "speedup": 0.3169020324317226,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (pow (/ (pow (pow (- (/ (* 1 0) a) (* 1 -1)) (- -1 -1)) (/ a (+ 1 -1))) (* (+ a 1) a)) (pow (* (pow -1 1) 0) (+ a a))) (pow (pow (/ a 0) a) (* 1 a))) (- (pow (* (* a 1) a) (- 1 b)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (- (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (pow (pow (/ a 0) a) a)) (+ -1 (pow (* a a) (- 1 b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.022950381000000002
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (- (- 1 (pow (pow (/ a 0) a) a)) (pow (* a a) (- 1 b))))",
      "output_weight_simple": 19,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.071553319
    },
    "speedup": 0.3207451634773224,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (* (pow (+ (/ (/ (* -1 (/ a 1)) (pow 0 a)) -1) (/ a (* a a))) a) (/ (+ b (- c c)) (- 0 c))) (- (* (+ (- b -1) 0) (/ 0 1)) (/ 1 1))) (- (pow (- (+ a -1) b) (* 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(* (/ 1 (* (pow (+ (* a (/ 1 (pow 0 a))) (/ a (* a a))) a) (/ b (- 0 c)))) (- 1 (pow -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.036848427
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.103407602)",
      "output_term": "(/ (- 1 (pow -1 b)) (* (pow (+ (/ a (* a a)) (/ a (pow 0 a))) a) (/ b (- 0 c))))",
      "output_weight_simple": 18,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.10801086900000001
    },
    "speedup": 0.3411548054483295,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 2
  },
  {
    "base_term": "(- (* (+ (pow (* (/ (/ (+ 1 (/ a -1)) (+ -1 1)) (* a b)) (+ (pow b b) b)) (/ 0 (- c d))) (/ (* (* 0 e) -1) (- 0 -1))) (+ c (/ (/ 0 -1) 0))) (+ (- (/ (* 1 a) a) (* e d)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (* d e) (+ c (+ -1 (/ 0 0))))",
      "output_weight_simple": 10,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.030266663999999995
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ -1 (+ c (+ (/ 0 0) (* d e))))",
      "output_weight_simple": 10,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.085231221
    },
    "speedup": 0.35511240652061055,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (/ (pow (+ (+ (+ (- (/ -1 a) a) (* 1 1)) (pow 1 a)) (* -1 (* a 1))) (/ (pow 1 a) b)) (pow (+ (pow a c) c) b)) (/ (- (pow a 0) -1) (/ b c))) (+ (pow (- (pow -1 1) 1) (+ 1 1)) (pow b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow (+ (/ -1 a) (+ 1 (+ (pow 1 a) (* a -2)))) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) -5)",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.036252589
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100108106)",
      "output_term": "(+ (pow (/ (pow (+ (/ -1 a) (- (- (pow 1 a) a) (+ -1 a))) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) (- -1 (pow -2 2)))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.101114931
    },
    "speedup": 0.3585285441177822,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (pow (+ (/ (+ (* (+ (pow a a) 0) (* -1 b)) (+ -1 a)) (- (pow -1 1) 0)) (* (/ 1 -1) b)) (/ (pow (- -1 c) b) (+ 1 0))) (/ (pow a (/ -1 1)) (pow 1 1))) (/ (pow a (pow (/ -1 d) 1)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (+ (* (pow a a) b) (+ 1 (* -1 (+ a b)))) (pow (- -1 c) b)) (/ 1 a)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.03809427
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (pow (- 1 (- (+ a b) (* (pow a a) b))) (pow (- -1 c) b)) (/ -1 a)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.10050002
    },
    "speedup": 0.3790473872542513,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (pow (+ (- (pow (* (pow (+ a 1) a) (* b 0)) (* b a)) (/ (- a a) b)) (pow (/ -1 -1) b)) (- (- (/ 0 -1) e) (- 1 a))) (- (pow -1 (pow 1 1)) (+ c a))) (pow (+ (+ d (* 1 0)) a) (* 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (+ (pow 0 (* a b)) (pow 1 b)) (+ a (+ -1 (- 0 e)))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.04243066299999999
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100037483)",
      "output_term": "(/ (/ (pow (+ (pow 0 (* a b)) (pow 1 b)) (+ a (- -1 e))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.100667018
    },
    "speedup": 0.42149518127178454,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (pow (* (- (* (* (+ (/ a -1) a) (/ 0 1)) (* b b)) (+ (+ b b) 0)) (pow 0 (/ b d))) (- (pow (* -1 -1) -1) 0)) (pow (* (+ -1 b) 1) (/ 0 e))) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (* b (* (pow 0 (/ b d)) -2)) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 6,
      "simplification_time": 0.031499174
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (* b (* (pow 0 (/ b d)) -2)) (/ (pow (+ d (- e a)) (- 0 e)) (/ c b)))",
      "output_weight_simple": 18,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.069181378
    },
    "speedup": 0.45531290226684984,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (* (pow (* (* (/ (* a a) -1) b) (* b 1)) (* d (* 0 b))) (+ (+ e 1) c)) (pow (+ (pow a d) c) (/ b 0))) (- (pow (- e -1) -1) (* a e))) (pow (- (+ (/ a a) 0) (* 1 1)) (* d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ e (+ 1 c)) (pow (+ c (pow a d)) (/ b 0))) (+ (- (/ 1 (+ 1 e)) (* a e)) (pow 0 (* b d))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.029450513999999997
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ 1 (+ e c)) (pow (+ c (pow a d)) (/ b 0))) (+ (/ 1 (+ 1 e)) (- (pow 0 (* b d)) (* a e))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.061414727
    },
    "speedup": 0.4795350470254471,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (- (pow (pow (- (/ (pow (/ a 1) a) (- -1 b)) a) (/ c (/ 0 1))) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ (/ (+ 0 a) 1) (/ 0 0))) (pow (/ (* (/ e e) d) (+ 0 e)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow a a) (- -1 b)) a) (/ c 0)) (+ a 1)) (pow (/ (* b b) c) (pow e d))) (+ a (/ 0 0))) (pow (/ d e) (* a a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.028170489
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow a a) (- -1 b)) a) (/ c 0)) (+ a 1)) (pow (/ (* b b) c) (pow e d))) (+ a (/ 0 0))) (pow (/ d e) (* a a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.05596008
    },
    "speedup": 0.5034033010674752,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (+ a (- (- (/ -1 (pow (/ 0 a) 1)) (+ 0 0)) (pow (* a b) 1))) (/ (- (pow a c) 0) (* -1 0))) (/ (pow (* a (- c 0)) (+ d b)) (/ 1 b))) (- (* (- a (* c c)) (* a 0)) (pow e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (- (/ -1 0) (* a b)) (+ a (/ (pow a c) 0))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (- 0 (pow e d)))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.030663405
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (/ -1 0) (+ a (- (/ (pow a c) 0) (* a b)))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (pow e d))",
      "output_weight_simple": 23,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.06011884099999999
    },
    "speedup": 0.510046509379647,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (pow (* (- (* (+ (pow (* (+ a 1) -1) (+ 1 a)) (- 1 1)) (+ 0 0)) (+ (pow a 1) 0)) (/ (pow (* -1 c) a) (/ 1 b))) (* (- (/ a -1) e) (+ d 0))) (pow (/ (pow (- d -1) c) (- 0 a)) (- b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* -1 (* a (/ (pow (* -1 c) a) (/ 1 b)))) (* -1 (* d (+ a e)))) (pow (/ (pow (+ 1 d) c) (- 0 a)) (+ -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.027554681
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (pow (- 0 c) a) (- 0 (/ a (/ 1 b)))) (* -1 (* d (+ a e)))) (pow (/ (pow (+ 1 d) c) (* a -1)) (+ -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.053460957
    },
    "speedup": 0.5154169050883245,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (- (- (* (pow (pow (* (/ -1 a) a) -1) (pow 1 -1)) (* (pow 1 a) a)) (- (pow 1 0) 0)) (- (/ (+ b -1) 0) (/ a -1))) (/ (+ b (* 1 a)) (- 0 d))) (pow (/ (pow (/ 1 1) -1) (+ a 0)) (/ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ -1 (* -1 (+ (/ (+ -1 b) 0) (* a (+ 1 (pow 1 a)))))) (/ (+ a b) (- 0 d))) (pow (/ 1 a) (/ b 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.055156561
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100182977)",
      "output_term": "(- (pow (- -1 (- (/ (+ -1 b) 0) (* a (- -1 (pow 1 a))))) (/ (+ a b) (- 0 d))) (pow (/ 1 a) (/ b 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.10085427100000001
    },
    "speedup": 0.5468936560951394,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (+ (/ (+ (/ (- (+ (pow a 1) 0) 0) (* a 1)) (- (pow a 1) -1)) (pow (- 0 a) 0)) (pow (pow (- a a) a) (+ a a))) (* (pow -1 (* b 1)) (pow 1 0))) (/ (- (/ (- b 1) a) (pow c c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (+ (pow (pow 0 a) (+ a a)) 2)) (pow -1 b)) (/ (- (/ (+ -1 b) a) (pow c c)) 0))",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.017573875
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (+ (pow (pow 0 a) (+ a a)) 2)) (pow -1 b)) (/ (- (/ (+ -1 b) a) (pow c c)) 0))",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.031285815
    },
    "speedup": 0.5617202236860378,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (/ (- (/ (pow (/ (- (/ a 0) a) (- -1 1)) (/ -1 a)) (pow (pow b c) 0)) (* (/ -1 1) 0)) (pow (pow (- b d) 1) (- -1 b))) (+ (/ (/ a 1) b) (* b b))) (/ d (pow (+ (- 1 e) 0) (pow 1 1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (+ (/ (pow (* (- (/ a 0) a) -0.5) (/ -1 a)) (pow (- b d) (- -1 b))) (+ (/ a b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.023283947
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (pow (* (- (/ a 0) a) -0.5) (/ -1 a)) (pow (- b d) (- -1 b))) (- (+ (/ a b) (* b b)) (/ d (- 1 e))))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.041071388
    },
    "speedup": 0.5669140521864028,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (/ (/ (/ 0 (- (* a (* a (pow a a))) (pow a c))) (* 1 (/ (/ 0 -1) 0))) (/ (- 1 1) (- 0 1))) (* (pow (* 1 (* b 1)) (* 1 d)) (/ c -1))) (* (/ (- b (/ a 1)) (* -1 0)) (pow -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 0 0) (* c (* -1 (pow b d)))) (* -1 (/ (- b a) 0)))",
      "output_weight_simple": 15,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.017128864
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 0 0) (- 0 (* c (pow b d)))) (- 0 (/ (- b a) 0)))",
      "output_weight_simple": 14,
      "output_weight_complex": 37,
      "output_depth": 6,
      "simplification_time": 0.029689550000000002
    },
    "speedup": 0.576932422350625,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (* (+ (pow (+ (* -1 (- 0 a)) (* a b)) (- 1 b)) (+ 1 (* -1 1))) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ (* 0 (* a 0)) (+ 0 b))) (pow (+ (+ (pow a d) e) (+ e d)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (* (pow (+ a (* a b)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) 0) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.058689312
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100024678)",
      "output_term": "(pow (/ (pow (* b (/ (pow (* a (+ b 1)) (- 1 b)) (pow b c))) (/ d (- 1 (pow d b)))) 0) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.10087258299999999
    },
    "speedup": 0.5818162899625561,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(* (/ (pow (pow (* (/ a (- (* (pow a b) 1) (pow b 1))) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow (pow (pow 1 -1) 0) (- d c))) (/ (* (pow c -1) 1) (- a 0))) (pow (+ (+ (* e b) b) (+ a c)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (* (/ a (- (pow a b) b)) (pow 0 b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (/ 1 c) a))",
      "output_weight_simple": 20,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.021832246
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (/ (* a (pow 0 b)) (- (pow a b) b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (/ 1 c) a))",
      "output_weight_simple": 20,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.036421484000000004
    },
    "speedup": 0.5994331807018077,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (/ (- (pow (+ 1 (pow (pow (+ -1 1) a) (pow 0 1))) (/ (/ a a) a)) -1) (/ (- b (- b b)) (+ b 0))) (* (pow (+ (* a d) c) (+ -1 1)) (/ b 1))) (+ (* (* (+ -1 a) -1) (/ 0 1)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (+ 1 (pow 2 (/ 1 a))) b) d)",
      "output_weight_simple": 10,
      "output_weight_complex": 24,
      "output_depth": 6,
      "simplification_time": 0.018049134
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (pow 2 (/ 1 a)) (+ -1 b)) d)",
      "output_weight_simple": 11,
      "output_weight_complex": 25,
      "output_depth": 5,
      "simplification_time": 0.02913504
    },
    "speedup": 0.6194992009621405,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (/ (/ (pow (pow (pow (- (* 1 a) -1) (+ a a)) (* 1 1)) (/ (- c 1) 1)) -1) (- -1 (* (/ -1 c) 0))) (+ (* (pow (/ -1 0) a) (* 0 c)) (+ 0 1))) (pow (+ (* (* b 1) a) (* c 1)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ -1 (pow (pow (+ 1 a) (+ a a)) (+ -1 c))) (+ c (* a b)))",
      "output_weight_simple": 14,
      "output_weight_complex": 28,
      "output_depth": 6,
      "simplification_time": 0.025237848
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ -1 (pow (pow (+ 1 a) (+ a a)) (+ -1 c))) (+ c (* a b)))",
      "output_weight_simple": 14,
      "output_weight_complex": 28,
      "output_depth": 6,
      "simplification_time": 0.039704114
    },
    "speedup": 0.6356481849714617,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (* (pow (- 1 (pow (pow (* 0 a) (pow a b)) (- c -1))) (/ 1 (* (pow a d) 0))) (pow (* (* a d) -1) a)) (+ (pow (* (* 1 0) e) (- -1 e)) (* 1 b))) (- (- (pow 0 (* c 1)) (* d c)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (* a (* -1 d)) a)) (+ b (pow 0 (- -1 e)))) (- (- (pow 0 c) (* c d)) d))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.02853692
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (* a (- 0 d)) a)) (+ b (pow 0 (- -1 e)))) (+ (pow 0 c) (* d (- -1 c))))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.043567932999999996
    },
    "speedup": 0.6549982529582021,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (- (/ (+ a (* (- (* 0 a) -1) (* b a))) (+ (/ a c) c)) (pow (* 1 c) 0)) (+ (* (* -1 a) 1) (/ 0 0))) (/ (+ (pow c 1) 0) (- -1 d))) (/ (pow (+ (/ e 1) -1) (- a c)) (- -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (+ -1 (/ (+ a (* a b)) (+ c (/ a c)))) (+ (* a -1) (/ 0 0))) (/ c (- -1 d))) (/ (pow (+ -1 e) (- a c)) (- -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.031483634999999996
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ -1 (* a (/ (+ b 1) (+ c (/ a c))))) (- (/ 0 0) a)) (/ (/ c (- -1 d)) (/ (pow (+ -1 e) (- a c)) (- -1 b))))",
      "output_weight_simple": 26,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.047830097
    },
    "speedup": 0.6582389954174669,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (pow (- (pow a (+ b (pow a (- (pow c d) b)))) (- (* (pow -1 -1) d) 1)) (* (pow (* b a) -1) (* 0 1))) (- (pow (* (* c 1) b) (* d 1)) (/ 1 -1))) (+ (- (/ (- 1 e) b) (* 0 a)) (* 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.04416107
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.06570688599999999
    },
    "speedup": 0.6720919630858782,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (- (* (* (pow (pow (+ -1 (/ 0 a)) (/ -1 1)) 0) (+ (/ -1 -1) 0)) (+ a (pow 0 -1))) (/ (- a (- a a)) (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ (pow (/ a a) e) (pow -1 1)) (/ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ -1 (pow 1 e)) (/ 1 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 6,
      "simplification_time": 0.019559076
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (+ a (- (pow 0 -1) (/ a (+ -1 a)))) (/ (pow d e) (* b b))) (* (+ -1 (pow 1 e)) (/ 1 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.028955514999999998
    },
    "speedup": 0.6754870704250987,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (/ (pow (pow a (/ (pow (* a (pow (- a b) b)) (- d c)) (- (* 0 0) -1))) (/ (+ a (- -1 1)) (* 1 d))) (* (+ (+ (pow 0 c) -1) (* d d)) (pow d a))) (pow (pow (/ -1 (+ 1 -1)) (/ c c)) (+ c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow a (pow (* a (pow (- a b) b)) (- d c))) (/ (+ a -2) d)) (* (+ -1 (+ (pow 0 c) (* d d))) (pow d a))) (pow (/ -1 0) (+ c e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.023348766
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow a (pow (* a (pow (- a b) b)) (- d c))) (/ (+ a -2) d)) (pow (/ -1 0) (+ c e))) (* (+ (pow 0 c) (+ -1 (* d d))) (pow d a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.034087732
    },
    "speedup": 0.6849609707093449,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (/ (+ (pow (- a (+ (pow -1 0) b)) (pow a c)) (* (* 1 a) -1)) (- -1 (* 0 1))) (+ 1 (* -1 1))) (pow (pow (* (+ 1 c) -1) (- 0 a)) (* e e))) (+ (* (* (* e -1) 1) (+ b 0)) (/ -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (pow (pow (+ -1 (* -1 c)) (- 0 a)) (* e e))) (+ (* b e) (* -1 (/ -1 0))))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.025980924000000002
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (pow 0 (pow (pow (- -1 c) (- 0 a)) (* e e))) (- (/ -1 0) (* b e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 6,
      "simplification_time": 0.037898896999999994
    },
    "speedup": 0.6855324575804939,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (/ (- (- (pow (+ a (* 0 (* b 0))) (+ -1 b)) (pow (- -1 0) b)) 0) (+ (pow (/ a c) a) (/ e 1))) (- (/ (/ (+ b -1) c) (pow -1 0)) (/ 1 -1))) (- (* (- 0 (pow -1 a)) (/ 0 b)) (/ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ (pow (/ a c) a) e)) (+ 1 (/ (+ b -1) c))) (- 0 (/ 1 a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.03448361899999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ 1 (/ (+ b -1) c))) (+ (pow (/ a c) a) e)) (/ -1 a))",
      "output_weight_simple": 19,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.048483219
    },
    "speedup": 0.7112485456050266,
    "weight_simple_diff": 2,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (/ (- (+ (* a (- -1 (* (+ 1 b) 1))) (pow (+ a b) b)) (/ (* -1 a) 0)) (pow (* b a) (* c 0))) (- (/ (/ (pow a c) 1) (* -1 -1)) (+ a c))) (- (+ (* -1 (/ c 1)) (/ -1 b)) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ c (+ (pow (+ (pow (+ a b) b) (* -1 (+ (/ (* a -1) 0) (* a (+ b 2))))) (- (pow a c) (+ a c))) (+ (/ 1 a) (/ 1 b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.059725178000000004
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (* a (- -2 b)) (- (pow (+ a b) b) (/ (- 0 a) 0))) (- (pow a c) (+ a c))) (+ c (+ (/ 1 a) (/ 1 b))))",
      "output_weight_simple": 23,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.08291457399999999
    },
    "speedup": 0.7203218338913495,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (* (+ (pow (pow (pow (pow (+ (pow a 1) 0) (- a -1)) (- 1 a)) (- (- 1 0) -1)) (- (* -1 1) -1)) (/ (- a (* a 0)) (- 0 b))) (pow 1 (pow 1 (pow c -1)))) (/ (/ (+ (pow 0 -1) -1) (pow a 1)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ 1 (/ a (- 0 b))) (pow 1 (pow 1 (/ 1 c)))) (* -1 (/ (+ -1 (pow 0 -1)) a)))",
      "output_weight_simple": 18,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.038936121000000004
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(* (+ 1 (/ a (- 0 b))) (/ (pow 1 (pow 1 (/ 1 c))) (/ (- 1 (pow 0 -1)) a)))",
      "output_weight_simple": 17,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.051811892
    },
    "speedup": 0.7514900440230982,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (- (+ (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (pow (* d 1) 0)) (/ b (+ 0 0))) (+ (* 0 (/ -1 -1)) (pow e c))) (/ (pow (pow 0 c) -1) (/ e a))) (pow 1 (/ (pow (/ 1 1) c) (pow 0 -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ 1 (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (/ b 0))) (pow e c)) (/ (/ 1 (pow 0 c)) (/ e a))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 79,
      "output_depth": 10,
      "simplification_time": 0.039862653
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (/ (+ (pow (+ a b) c) (* c c)) a) (+ 1 (- (/ b 0) (pow e c)))) (/ (/ 1 (/ e a)) (pow 0 c))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 27,
      "output_weight_complex": 77,
      "output_depth": 8,
      "simplification_time": 0.051873259000000005
    },
    "speedup": 0.768462475049042,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (/ (pow (pow (pow (pow (/ (* (pow a 1) a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c (/ 1 -1))) (+ (+ (/ e a) c) (pow -1 d))) (- (- (pow -1 a) -1) 0)) (/ (+ (+ (/ e a) -1) (* -1 e)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (* -1 c)) (+ c (+ (/ e a) (pow -1 d)))) (+ 1 (pow -1 a))) (/ (+ -1 (+ (/ e a) (* -1 e))) 0))",
      "output_weight_simple": 30,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.044053359
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (- 0 c)) (+ c (+ (/ e a) (pow -1 d)))) (+ 1 (pow -1 a))) (/ (+ -1 (- (/ e a) e)) 0))",
      "output_weight_simple": 29,
      "output_weight_complex": 76,
      "output_depth": 9,
      "simplification_time": 0.056947663
    },
    "speedup": 0.7735762396430561,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (+ (+ (+ (+ (* (pow (/ -1 1) 0) (/ 0 -1)) (+ a 0)) (pow (pow a a) b)) (/ (+ c b) -1)) (/ (pow 1 a) (/ -1 1))) (pow (- (pow 0 a) 0) (* 1 b))) (pow (/ (* (pow -1 e) c) (pow 1 c)) (pow e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (+ a (pow (pow a a) b)) (* -1 (+ b (+ c (pow 1 a))))) (pow (pow 0 a) b)) (/ (* c (pow -1 e)) (pow 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.04114538
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (- (pow (pow a a) b) (+ b (+ c (pow 1 a))))) (pow (pow 0 a) b)) (* c (/ (pow -1 e) (pow 1 c))))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.051100832
    },
    "speedup": 0.8051802365957564,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (* (/ (- 1 (pow (/ (/ 1 a) 0) (/ 0 1))) (/ (/ a 1) 0)) (* (- a b) b)) (/ (pow c (/ 0 a)) (pow c d))) (+ (- (+ c b) 0) (pow a e))) (/ (/ (+ d (/ 1 -1)) (pow e c)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 143,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (pow 0 (/ 1 (pow c d))) (+ b (+ c (pow a e)))) (/ (/ (+ d -1) (pow e c)) (- e b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 54,
      "output_depth": 6,
      "simplification_time": 0.042375525000000004
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (pow 0 (/ 1 (pow c d))) (+ b (+ c (pow a e)))) (/ (/ (- d 1) (- e b)) (pow e c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 53,
      "output_depth": 6,
      "simplification_time": 0.051589085
    },
    "speedup": 0.821404857248389,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (- (/ (pow (* (pow (+ a -1) a) (* b a)) (+ e a)) (+ (* 0 1) 1)) (+ (- 1 1) 0)) (/ c (* (* -1 a) d))) (- (- (- a -1) -1) (* d e))) (- (- (/ (+ a -1) 0) (- -1 e)) (* d a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 15,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (* a (* (pow (+ a -1) a) b)) (+ a e)) (/ c (* a (* -1 d)))) (- (+ a 2) (* e d))) (- (+ e (+ 1 (/ (+ a -1) 0))) (* a d)))",
      "output_weight_simple": 29,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.084405981
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100491008)",
      "output_term": "(pow (/ (pow (pow (* a (* (pow (- a 1) a) b)) (+ a e)) (/ c (- 0 (* a d)))) (+ a (- 2 (* e d)))) (+ e (+ (/ (- a 1) 0) (- 1 (* a d)))))",
      "output_weight_simple": 27,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.10144152299999999
    },
    "speedup": 0.8320653959424487,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (/ (pow (pow (/ (/ (/ (pow a 1) b) (/ 0 b)) (+ c c)) (/ -1 (+ -1 b))) (/ 0 (pow e c))) (+ 0 (/ d (pow e 1)))) (+ (- (+ b e) d) (* 1 e))) (/ (* (pow 1 (pow c -1)) (pow c 0)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ 1 (/ d e)) (+ e (- (+ b e) d))) (/ (pow 1 (pow c -1)) (* a -1)))",
      "output_weight_simple": 18,
      "output_weight_complex": 45,
      "output_depth": 6,
      "simplification_time": 0.056581907
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ 1 (/ d e)) (+ b (+ e (- e d)))) (/ (pow 1 (/ 1 c)) (- 0 a)))",
      "output_weight_simple": 18,
      "output_weight_complex": 45,
      "output_depth": 6,
      "simplification_time": 0.06350764700000001
    },
    "speedup": 0.890946361152382,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (/ (pow (/ (- (pow (* (- 0 1) a) (* b c)) (* c -1)) (+ (* d d) d)) (/ (- d 1) 0)) (- (- (pow -1 0) c) (+ -1 -1))) (- a (pow (* c c) 0))) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (pow (/ (+ c (pow (* -1 a) (* c b))) (+ d (* d d))) (/ (+ -1 d) 0)) (+ (* -1 c) 3)) (+ -1 a)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.062003077999999996
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (pow (/ (+ c (pow (- 0 a) (* b c))) (+ d (* d d))) (/ (+ -1 d) 0)) (/ (+ -1 a) (- 3 c))) (pow (+ (/ a e) (- (/ b 0) c)) (/ a 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.06924443
    },
    "speedup": 0.8954233286345198,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (* (- (+ (- (- (- -1 (/ 1 (- 0 0))) (pow 1 -1)) (* (/ 0 -1) 1)) a) (pow (pow (pow 0 1) 0) (/ 0 0))) (pow (pow (pow (- -1 1) b) (pow 1 0)) (* b -1))) (* (+ (- (- a 0) 0) (- e e)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100382058)",
      "output_term": "(pow (* (- (+ (* -1 (/ 1 0)) (+ -2 a)) (pow 1 (/ 0 0))) (pow (pow -2 b) (* -1 b))) (* -1 (* a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.10199845599999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.104105331)",
      "output_term": "(pow (* (+ (- -2 (/ 1 0)) (- a (pow (pow 0 0) (/ 0 0)))) (pow (pow -2 b) (- 0 b))) (- 0 (* a c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.112698324
    },
    "speedup": 0.9050574345719639,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (- (pow (- (/ (/ (/ (- 1 1) 0) (- -1 a)) (+ -1 a)) (* (- 0 c) a)) (+ (/ d c) 1)) (pow (pow -1 (- d d)) (+ e e))) (- (/ 1 (* 1 c)) d)) (- (* (- (- 1 e) 0) (pow 1 e)) (+ e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ e (+ (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (+ -1 a)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (* (pow 1 e) (+ -1 e))))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.080649767
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ e (+ (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (+ -1 a)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (* (pow 1 e) (+ -1 e))))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.08906169400000001
    },
    "speedup": 0.9055494385723225,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (/ (/ (pow (pow (* (+ (* a a) b) (* c d)) c) (* 0 (pow e c))) a) (+ (/ 0 (- a d)) (* c b))) (/ (* (/ (pow b 1) b) (+ 1 1)) (+ e 0))) (pow (- (* (/ -1 1) a) (- 0 -1)) (pow e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (pow a -1) (* b c)) (/ 2 e)) (pow (+ -1 (* a -1)) (pow e b)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 5,
      "simplification_time": 0.025546814
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (pow a -1) (* b c)) (/ 2 e)) (pow (- -1 a) (pow e b)))",
      "output_weight_simple": 15,
      "output_weight_complex": 41,
      "output_depth": 5,
      "simplification_time": 0.027240348999999997
    },
    "speedup": 0.9378299081263608,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (+ (* (pow (* (pow (pow 0 -1) a) (- -1 a)) (/ a a)) (- 0 (- 0 1))) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) (pow b 1))) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ e a)) (/ 0 b)) (+ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (pow (+ (* (pow (pow 0 -1) a) (- -1 a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (+ -1 d))",
      "output_weight_simple": 24,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.02838924
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (pow (+ (* (pow (pow 0 -1) a) (- -1 a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (+ -1 d))",
      "output_weight_simple": 24,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.030031479
    },
    "speedup": 0.9453160798374266,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (- (- (- 0 (* (+ (+ (- -1 -1) 0) -1) (/ a b))) (pow (- (pow a c) -1) (* -1 a))) (- (+ (pow a a) 1) (- 0 -1))) (/ (- c (* b 1)) (- b -1))) (- (- (+ d (pow -1 1)) (+ -1 b)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 100,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100997235)",
      "output_term": "(/ (pow (- (- (/ a b) (pow (+ (pow a c) 1) (* -1 a))) (pow a a)) (/ (- c b) (+ b 1))) (+ -1 (* -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.10822455
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.1065847)",
      "output_term": "(/ (pow (- (- (/ a b) (pow a a)) (pow (+ (pow a c) 1) (- 0 a))) (/ (- c b) (+ b 1))) (- -1 b))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.113986935
    },
    "speedup": 0.9494469695145326,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (* (* (pow (pow (+ (* (* -1 a) -1) (pow 0 0)) (/ a 0)) (pow (+ 0 1) -1)) (* (pow 1 1) a)) (- (+ (- 0 b) 1) 0)) (- (- (+ 0 0) a) (/ -1 b))) (* (* (* (- 0 b) b) (- 1 d)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100302948)",
      "output_term": "(pow (/ (* -1 (* (pow (+ a (pow 0 0)) (/ a 0)) (* a (+ -1 b)))) (+ (- 0 a) (/ 1 b))) (* a (* b (+ -1 d))))",
      "output_weight_simple": 22,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.103213957
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.103251417)",
      "output_term": "(pow (* (pow (+ a (pow 0 0)) (/ a 0)) (* a (/ (- 1 b) (- (/ 1 b) a)))) (- 0 (* (- 1 d) (* a b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.10867175800000001
    },
    "speedup": 0.9497771905005897,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (+ (* (* (pow (pow (+ -1 (/ a a)) (+ 1 a)) (pow 1 a)) (pow (+ -1 b) a)) (/ (* 1 0) -1)) (- (- (pow 0 0) 1) (- 1 b))) (pow 1 (/ (pow 0 d) d))) (* (* (pow (- -1 0) c) (/ b d)) (- d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (pow 0 0) (+ b -2)) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.09628832999999999
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100185883)",
      "output_term": "(* (+ (pow 0 0) (+ b -2)) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.10088734799999999
    },
    "speedup": 0.954414323587929,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (- (- (pow (* (+ (+ (/ a a) -1) (/ a b)) (pow 0 0)) (* (pow a -1) 1)) (- 1 a)) (+ a (* d b))) (/ (- (+ (- -1 -1) 0) (pow c 0)) (/ 0 d))) (/ (pow (+ (- 1 c) 1) (+ b 1)) (+ e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.102276918)",
      "output_term": "(+ -1 (+ (pow (* (/ a b) (pow 0 0)) (/ 1 a)) (+ (/ (pow (+ 1 (- 1 c)) (+ b 1)) (+ 1 e)) (+ (/ 1 0) (* b (* -1 d))))))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.102264367
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.101370234)",
      "output_term": "(+ (- -1 (* b d)) (+ (/ (pow (- 2 c) (+ b 1)) (+ 1 e)) (+ (pow (* a (/ (pow 0 0) b)) (/ 1 a)) (pow 0 -1))))",
      "output_weight_simple": 25,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.106097082
    },
    "speedup": 0.9638753966862161,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (pow (pow (* (pow (+ (pow a 1) a) (+ a b)) (- -1 a)) (+ a (+ 1 0))) (/ (+ 0 b) 0)) (- (/ (- 0 a) d) (- a -1))) (* (/ (* 1 a) -1) 1)) (pow (* (- (* 1 0) c) (+ -1 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100345028)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.105726145
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.10533177)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.10944716900000001
    },
    "speedup": 0.9660016423083542,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (+ (+ (pow 1 (/ (/ a (/ (- 0 1) 0)) (/ 0 1))) (pow (/ (+ -1 b) 1) (- -1 b))) (/ (/ (/ -1 b) 1) (/ b a))) (+ (/ (- 1 -1) b) (* 1 1))) (* (pow (- a (+ 0 -1)) (pow b a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100143381)",
      "output_term": "(+ -1 (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (+ (pow (+ -1 b) (- -1 b)) (* (/ 1 b) (+ (pow (+ 1 a) (pow b a)) (+ -2 (* -1 (/ 1 (/ b a)))))))))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.10012728200000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100668932)",
      "output_term": "(+ (pow 1 (/ (/ a (/ -1 0)) 0)) (+ (/ (pow (+ 1 a) (pow b a)) b) (+ -1 (- (- (pow (+ -1 b) (- -1 b)) (/ 2 b)) (/ (/ 1 b) (/ b a))))))",
      "output_weight_simple": 26,
      "output_weight_complex": 72,
      "output_depth": 8,
      "simplification_time": 0.10342569300000001
    },
    "speedup": 0.9681083983648048,
    "weight_simple_diff": 0,
    "weight_complex_diff": -6,
    "depth_diff": 2
  },
  {
    "base_term": "(* (/ (- (- (- (- (pow (/ (* -1 a) a) (- -1 1)) (/ a -1)) (pow (* 1 0) 1)) (/ (+ b -1) -1)) (* -1 (+ (- 0 a) 1))) (/ (* (/ 0 0) 0) (* b 1))) (* (* (- (pow b 1) a) (* a 1)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.105701775)",
      "output_term": "(* (/ (+ (pow -1 -2) b) 0) (* a (- b a)))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 5,
      "simplification_time": 0.105691046
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.101354425)",
      "output_term": "(* (/ (+ (pow -1 -2) b) 0) (* a (- b a)))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 5,
      "simplification_time": 0.10797469100000001
    },
    "speedup": 0.9788501825858431,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (/ (+ (* (pow (pow (+ (- a b) b) (pow -1 1)) (* -1 a)) (+ (- 1 -1) -1)) (* (pow -1 b) 1)) (pow -1 1)) (+ (- (+ (/ c 1) -1) (* 0 -1)) (pow 1 -1))) (/ (pow (/ (* d 1) 1) (pow -1 -1)) (+ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.101861995)",
      "output_term": "(pow (/ (* -1 (+ (pow (/ 1 a) (* a -1)) (pow -1 b))) c) (/ (/ 1 d) (+ -1 e)))",
      "output_weight_simple": 18,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.10601527599999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.103943137)",
      "output_term": "(pow (- 0 (/ (+ (pow (/ 1 a) (- 0 a)) (pow -1 b)) c)) (/ (/ 1 d) (+ -1 e)))",
      "output_weight_simple": 19,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.108278034
    },
    "speedup": 0.9791023357516816,
    "weight_simple_diff": -1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (/ (- (+ (+ (/ (* (pow 1 0) a) (- 1 -1)) (- a a)) (* (/ a c) d)) (/ (/ e 1) 0)) (/ (* (pow 0 b) e) (pow b c))) (* (pow (pow c 0) 1) (+ 0 b))) (+ (/ -1 (pow (pow a 0) -1)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.101528118)",
      "output_term": "(+ (* (/ (- (+ (* a 0.5) (* (/ a c) d)) (/ e 0)) (/ (* e (pow 0 b)) (pow b c))) b) (+ -1 d))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.103387315
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.102632106)",
      "output_term": "(+ -1 (+ d (* (- (* a (+ 0.5 (/ d c))) (/ e 0)) (/ b (* e (/ (pow 0 b) (pow b c)))))))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.10554083
    },
    "speedup": 0.9795954324027961,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (+ (/ (/ (/ (* (pow -1 a) b) b) (/ a -1)) a) (- b (+ (/ -1 c) c))) (* (* (* 1 -1) 0) 1)) (pow (/ (pow (* c b) b) (* -1 b)) (pow 1 a))) (+ (* (/ (* b 1) d) (* 1 b)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100755356)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (* -1 b)) (pow 1 a)) (+ -1 (* b (/ b d))))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.103945552
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100347626)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (* -1 b)) (pow 1 a)) (+ -1 (* b (/ b d))))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.1059744
    },
    "speedup": 0.9808553009028596,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (/ (/ (/ (- (pow (- a (pow b 1)) (pow b -1)) (/ 1 -1)) (/ (- b b) 0)) (- (/ 1 1) d)) (+ (pow 0 (* 0 -1)) (/ -1 -1))) (- (- (* b b) 0) 0)) (- (* (* (* 1 0) a) (pow e e)) (/ a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ a (/ (/ (/ (/ (+ 1 (pow (- a b) (/ 1 b))) (/ 0 0)) (- 1 d)) (+ 1 (pow 0 0))) (* b b)))",
      "output_weight_simple": 19,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.09918618800000001
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100012935)",
      "output_term": "(+ a (/ (/ (/ (/ (+ 1 (pow (- a b) (/ 1 b))) (/ 0 0)) (- 1 d)) (+ 1 (pow 0 0))) (* b b)))",
      "output_weight_simple": 19,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.101086478
    },
    "speedup": 0.9812013432696707,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (* (+ (/ (+ (* (- (- a b) 0) (/ -1 1)) (* c c)) (- (pow -1 -1) -1)) (- (* a a) a)) (- (- 0 (- -1 0)) (+ c 1))) (/ (/ (- a b) d) (* 1 -1))) (pow (pow a (+ d 1)) (* (* c 1) b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100560802)",
      "output_term": "(* (* -1 c) (* (* -1 (/ (- a b) d)) (* (+ (/ (+ (* (- a b) -1) (* c c)) 0) (- (* a a) a)) (pow (pow a (+ 1 d)) (* b c)))))",
      "output_weight_simple": 25,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.10954466300000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.106974325)",
      "output_term": "(* (+ (/ (- (* c c) (- a b)) 0) (- (* a a) a)) (* c (* (/ (- a b) d) (pow (pow a (+ 1 d)) (* b c)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.110986043
    },
    "speedup": 0.9870129616207689,
    "weight_simple_diff": 4,
    "weight_complex_diff": 7,
    "depth_diff": 2
  },
  {
    "base_term": "(* (pow (pow (/ (* (/ 1 (* (- (- 0 1) a) (- b b))) (pow (pow 0 -1) 1)) (/ (* a b) b)) (/ (- (pow 1 0) a) (pow b e))) (/ (/ (* 0 1) -1) (pow d 0))) (- (- (+ (- b b) -1) (+ 0 c)) (- c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.101935256)",
      "output_term": "(+ -1 (* c -2))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.105380475
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.103299065)",
      "output_term": "(+ -1 (* c -2))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.106236498
    },
    "speedup": 0.9919422889862202,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (/ (/ (* (+ 0 (* -1 a)) (- (+ a a) -1)) (pow (+ -1 (/ a a)) -1)) (- (/ (+ a -1) a) (- c 0))) (pow (+ (pow (pow -1 1) -1) (pow -1 e)) (* a c))) (- (- (* c (pow e -1)) (+ -1 b)) (/ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 8,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.105606518)",
      "output_term": "(* (/ (/ (* a (+ -1 (* a -2))) (/ 1 0)) (- (/ (+ -1 a) a) c)) (* (pow (+ -1 (pow -1 e)) (* a c)) (- (* c (/ 1 e)) (+ -1 b))))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.11534956099999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.109017354)",
      "output_term": "(/ (* (* a (/ (- -1 (+ a a)) (/ 1 0))) (* (pow (+ -1 (pow -1 e)) (* a c)) (+ (/ c e) (- 1 b)))) (- (/ (+ -1 a) a) c))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.116281144
    },
    "speedup": 0.9919885291118222,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (* (* (* (/ (pow (+ (* a 0) 0) (* -1 0)) (+ 1 0)) (+ (+ 0 b) b)) (- (+ 0 0) c)) (* (* (- a d) c) (+ b -1))) (* 0 (/ (- e -1) d))) (pow (* (+ (+ 0 c) c) (+ d d)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.102663914)",
      "output_term": "(- (* (pow 0 0) (* (+ -1 b) (* (* (- a d) (* b (* c -2))) c))) (* c (* d 4)))",
      "output_weight_simple": 20,
      "output_weight_complex": 35,
      "output_depth": 8,
      "simplification_time": 0.110212964
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.10238603)",
      "output_term": "(* c (+ (* (pow 0 0) (* b (* (* (- a d) (+ -1 b)) (* c -2)))) (* d -4)))",
      "output_weight_simple": 19,
      "output_weight_complex": 33,
      "output_depth": 8,
      "simplification_time": 0.111102306
    },
    "speedup": 0.9919952876585658,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (- (- (+ (- (+ (pow (* a a) b) (* b a)) (+ c -1)) (+ b (pow c -1))) (* -1 (/ a d))) (+ (- (- a d) -1) (- b 1))) (- (pow (pow -1 -1) 0) (+ e c))) (- (- a (* (pow e a) c)) (* 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.103453701)",
      "output_term": "(+ (* (- (+ b (+ (- (+ (pow (* a a) b) (* a b)) (+ c -1)) (+ (/ 1 c) (/ a d)))) (+ b (- a d))) (- 1 (+ c e))) (- (- a (* c (pow e a))) b))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 10,
      "simplification_time": 0.114190049
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.10398413)",
      "output_term": "(+ a (- (* (- (+ (* a b) (+ (/ 1 c) (+ (pow (* a a) b) (- 1 c)))) (- (- a (/ a d)) d)) (- 1 (+ c e))) (+ b (* c (pow e a)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 49,
      "output_depth": 10,
      "simplification_time": 0.115078498
    },
    "speedup": 0.9922796263816374,
    "weight_simple_diff": 3,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (/ (/ (/ (* (- (pow -1 a) b) b) (* b b)) 1) (* (/ (+ 0 b) b) (/ 0 0))) (/ (+ a (* 1 0)) (- b -1))) (pow (pow (* d a) -1) (- 1 -1))) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100962975)",
      "output_term": "(pow (/ (pow (/ (+ -1 (* (pow -1 a) (pow b -1))) (/ 0 0)) (/ a (- b -1))) (pow (* a d) -2)) (- (pow (pow (/ -1 0) d) (pow d -1)) (+ 1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 75,
      "output_depth": 8,
      "simplification_time": 0.10727931700000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.104514394)",
      "output_term": "(pow (/ (pow (* b (/ (/ (- (pow -1 a) b) (* b b)) (/ 0 0))) (/ a (+ b 1))) (pow (/ 1 (* a d)) 2)) (+ -1 (- (pow (pow (/ -1 0) d) (/ 1 d)) d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 84,
      "output_depth": 9,
      "simplification_time": 0.10802616400000001
    },
    "speedup": 0.993086424877588,
    "weight_simple_diff": -2,
    "weight_complex_diff": -9,
    "depth_diff": -1
  },
  {
    "base_term": "(* (pow (pow (pow (* (- (pow (+ (pow 0 1) a) (pow 1 a)) (- 0 a)) (* (pow 1 0) 1)) (* (- -1 -1) 0)) (/ (+ (+ a -1) -1) (+ a 1))) (+ (/ (pow a a) b) 0)) (+ (+ (* (pow b 0) 1) (/ c 0)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.108023247)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.108009231
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.106010421)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.10854317100000001
    },
    "speedup": 0.9950808512863513,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (- (* a (+ (/ (+ (pow -1 -1) 1) (+ a 0)) 1)) (/ (+ 0 (/ -1 1)) (/ b b))) (+ (* 1 (pow b c)) (pow b 0))) (pow (* (* -1 -1) -1) (- b c))) (+ (+ (* (+ -1 a) a) (* a c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.11226979)",
      "output_term": "(+ (pow -1 (- b c)) (+ a (* -1 (+ (+ -1 (+ (* a (+ c (+ a -1))) d)) (pow b c)))))",
      "output_weight_simple": 17,
      "output_weight_complex": 29,
      "output_depth": 10,
      "simplification_time": 0.12030907500000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.111912771)",
      "output_term": "(+ a (+ (- 1 (+ (- (* a (+ a c)) a) d)) (- (pow -1 (- b c)) (pow b c))))",
      "output_weight_simple": 17,
      "output_weight_complex": 28,
      "output_depth": 8,
      "simplification_time": 0.120695314
    },
    "speedup": 0.9967998840452084,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (pow (pow (+ (/ (+ (+ (+ a a) b) (+ -1 b)) (pow b c)) (- -1 (pow c c))) (* (/ -1 b) a)) (- (* (+ 0 -1) c) (/ 0 1))) (- a (* (- e 0) e))) (+ (+ (/ (pow 1 -1) 1) (+ c c)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100877439)",
      "output_term": "(+ c (+ (- (pow (pow (+ (/ (+ -1 (* (+ a b) 2)) (pow b c)) (- -1 (pow c c))) (* a (/ -1 b))) (* -1 c)) (- a (* e e))) (+ c 1)))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 11,
      "simplification_time": 0.104318031
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.101603217)",
      "output_term": "(+ c (+ c (+ (pow (pow (+ -1 (- (/ (+ -1 (* 2 (+ a b))) (pow b c)) (pow c c))) (/ (- 0 a) b)) (- 0 c)) (- 1 (- a (* e e))))))",
      "output_weight_simple": 27,
      "output_weight_complex": 53,
      "output_depth": 12,
      "simplification_time": 0.10449403099999999
    },
    "speedup": 0.9983156932667285,
    "weight_simple_diff": -1,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (+ (* (/ (pow (* a (* (- 1 b) -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (- (* (- 0 e) 1) (/ d e))) (+ (pow (pow 1 b) 1) (/ 1 c))) (pow (* (+ (- 1 c) a) (/ a -1)) (pow c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (/ (pow (* a (+ b -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (* -1 (+ (+ (/ d e) (/ 1 c)) (+ e (pow 1 b))))) (pow (* a (+ c (* -1 (+ a 1)))) (pow c e)))",
      "output_weight_simple": 33,
      "output_weight_complex": 84,
      "output_depth": 8,
      "simplification_time": 0.10108761499999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100047889)",
      "output_term": "(pow (- (* (pow (* a (+ b -1)) (/ 1 0)) (/ (pow b (* d e)) (pow (pow c a) b))) (+ (/ d e) (+ (pow 1 b) (+ e (/ 1 c))))) (pow (* a (- -1 (- a c))) (pow c e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 80,
      "output_depth": 7,
      "simplification_time": 0.10102601
    },
    "speedup": 1.0006097934581402,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (- (/ (/ (* (- 1 (pow (+ 0 a) 1)) (* -1 a)) (/ (/ 0 a) 0)) (/ b (* 1 -1))) (/ (+ (/ 0 0) a) (* a 1))) (+ (pow (- 0 b) 0) (* 0 0))) (/ (- (* (pow d c) 1) (pow a a)) (- e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.102103997)",
      "output_term": "(+ (/ (/ (* a (+ a -1)) (/ 0 0)) (- 0 b)) (* -1 (+ (/ (- (pow d c) (pow a a)) (- e d)) (* (/ 0 0) (/ 1 a)))))",
      "output_weight_simple": 24,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.102091596
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100117075)",
      "output_term": "(+ 1 (- (* a (/ (/ (+ a -1) (/ 0 0)) (* -1 b))) (+ (/ (+ a (/ 0 0)) a) (/ (- (pow d c) (pow a a)) (- e d)))))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.101703766
    },
    "speedup": 1.003813329783678,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (* (/ (/ (- (+ 0 (- (- 1 -1) a)) (/ b 0)) (+ (pow a a) -1)) c) (+ (+ 0 (* c d)) (* -1 c))) (- (* (pow (pow c 0) c) (/ 1 -1)) (* -1 -1))) (- (pow (- 1 (+ e b)) (/ a e)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.102663406)",
      "output_term": "(* (pow (* (/ (- (- 2 a) (/ b 0)) (+ -1 (pow a a))) (+ -1 d)) (+ -1 (* -1 (pow 1 c)))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.10265274499999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100219398)",
      "output_term": "(* (pow (* (- 2 (+ a (/ b 0))) (/ (+ -1 d) (+ -1 (pow a a)))) (- -1 (pow 1 c))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.101960788
    },
    "speedup": 1.0067865011007957,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (pow (pow (/ (+ (pow (* a -1) 0) (- 0 a)) (/ 0 b)) (+ (+ b 1) b)) -1) (* 1 (/ (* -1 -1) 1))) (/ (/ (/ (pow 0 a) 0) (* 0 -1)) (pow c a))) (pow (pow (- (/ a c) b) (/ d d)) (- 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (/ 1 (pow (/ (+ (- 0 a) 1) 0) (+ b (+ b 1)))) (+ -1 (/ (/ (/ (pow 0 a) 0) 0) (pow c a)))) (/ 1 (- (/ a c) b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.026818077
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ 1 (pow (/ (- 1 a) 0) (+ b (+ b 1)))) (+ -1 (/ (/ (/ (pow 0 a) 0) 0) (pow c a)))) (- (/ a c) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.026607930000000002
    },
    "speedup": 1.0078979086309983,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (+ (* (- (/ (* (pow (+ a -1) a) (- b 1)) 1) (pow (/ 0 a) b)) -1) (* (- (+ 1 1) a) (+ 0 0))) (pow (pow (- (- -1 1) a) (/ c 0)) (* 0 1))) (/ (* (* (+ 0 c) b) (pow 0 a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100984151)",
      "output_term": "(- (+ -1 (+ (pow 0 b) (* (pow (+ a -1) a) (+ 1 (* -1 b))))) (/ (* b (* c (pow 0 a))) (/ 1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.102984525
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100917492)",
      "output_term": "(- -1 (+ (* (pow (- a 1) a) (+ -1 b)) (- (* b (/ (* c (pow 0 a)) (/ 1 b))) (pow 0 b))))",
      "output_weight_simple": 19,
      "output_weight_complex": 42,
      "output_depth": 8,
      "simplification_time": 0.102103782
    },
    "speedup": 1.0086259586349111,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (/ (pow (+ (* (pow (/ (pow (* a -1) 0) (- -1 b)) (+ b a)) (* 1 (pow 1 a))) (pow (pow 1 0) b)) (pow (* (/ e b) b) (* c c))) (* (* (+ b c) 1) 1)) (- (pow (pow d (pow -1 0)) (* c -1)) (+ -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100488209)",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow e (* c c))) (+ b c)) (- (pow d (* -1 c)) (+ -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.103431698
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100690989)",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow e (* c c))) (+ b c)) (+ 1 (- (pow d (- 0 c)) b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.10235172
    },
    "speedup": 1.0105516350873245,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (* a (/ (* (* (pow (pow 1 b) -1) 1) (/ 0 a)) (+ (- c b) -1))) (* (pow d (+ 1 a)) (- e b))) (* (+ (- (+ -1 d) -1) (* -1 b)) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100559065)",
      "output_term": "(pow (* (+ d (* b -1)) (/ c e)) (/ (+ (/ a (+ 1 e)) (pow -1 e)) (* -1 c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.10489501899999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100412504)",
      "output_term": "(pow (* c (/ (- d b) e)) (/ (+ (/ a (- e -1)) (pow -1 e)) (- 0 c)))",
      "output_weight_simple": 17,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.103736985
    },
    "speedup": 1.011163173867064,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (/ (* (/ (- (- (- (* 0 a) a) (pow a -1)) (+ 0 -1)) (* (pow 1 a) 0)) (/ a (- -1 c))) (* (/ (pow d b) c) 1)) (/ (pow -1 (/ e 1)) (pow -1 e))) (- (+ (pow 1 (+ 1 a)) (+ d -1)) (* -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.101090856)",
      "output_term": "(+ (/ (* (/ (+ (- (- 0 a) (/ 1 a)) 1) 0) (/ a (- -1 c))) (/ (pow d b) c)) (+ d (pow 1 (+ a 1))))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.10613112499999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.10085544)",
      "output_term": "(+ d (+ (* (/ a (- -1 c)) (/ (/ (+ (/ -1 a) (- 1 a)) 0) (/ (pow d b) c))) (pow 1 (+ a 1))))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.104912742
    },
    "speedup": 1.0116132986019943,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (* (+ (/ (* (pow (* (* 0 0) 0) (+ 0 -1)) a) a) (- (pow (pow a a) b) (/ a e))) (* (* (* 1 0) d) (* a 1))) (- (/ (pow a 1) b) (+ -1 b))) (pow (* (* (+ 0 1) b) (pow 1 -1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100473248)",
      "output_term": "(+ (* -1 a) (* b (+ -1 b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.105491715
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100558555)",
      "output_term": "(* b (- -1 (- (/ a b) b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 14,
      "output_depth": 5,
      "simplification_time": 0.10418838300000001
    },
    "speedup": 1.0125093792846367,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (* (* (+ (/ (pow a (* (* (* -1 0) 1) b)) 0) (pow (pow (- a a) 0) (/ 0 0))) (/ (+ c (* -1 b)) c)) (* (/ (pow (- a -1) a) (* -1 1)) (/ b 0))) (/ (- (/ (pow 0 -1) 0) (- 0 0)) (- a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.103413265)",
      "output_term": "(pow (* -1 (* (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (/ b 0)) (* (/ (+ c (* -1 b)) c) (pow (- a -1) a)))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 72,
      "output_depth": 8,
      "simplification_time": 0.10340192200000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.10030683)",
      "output_term": "(pow (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (- 0 (* (pow (+ a 1) a) (* (- c b) (/ (/ b 0) c))))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.10211883299999999
    },
    "speedup": 1.0125646657164602,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (pow (/ (pow (pow (- (- (+ -1 0) a) (pow 1 a)) (* a a)) (pow (- 0 1) a)) (- (- 1 0) 0)) (+ 1 (/ a (/ b 0)))) (+ (pow (- a d) a) (* 0 1))) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.101464715)",
      "output_term": "(+ (/ (pow (pow (pow (- (- -1 a) (pow 1 a)) (* a a)) (pow -1 a)) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (* (/ 1 (/ 0 0)) (+ d (+ c -2))))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 8,
      "simplification_time": 0.102495112
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100110486)",
      "output_term": "(+ (/ (pow (pow (pow (- -1 (+ a (pow 1 a))) (* a a)) (pow -1 a)) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (/ (+ d (+ c -2)) (/ 0 0)))",
      "output_weight_simple": 27,
      "output_weight_complex": 70,
      "output_depth": 9,
      "simplification_time": 0.101011908
    },
    "speedup": 1.0146834569247023,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (+ (pow (- (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) (- (- 0 c) 1)) (pow (- a 1) b)) (- (* (/ 0 -1) b) (/ 1 b))) (+ -1 (/ (/ a 0) c))) (/ (- (/ (+ a 0) 1) (pow b b)) (+ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100856612)",
      "output_term": "(+ (pow (+ 1 (+ (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) c)) (pow (+ a -1) b)) (+ 1 (+ (/ (- a (pow b b)) (+ 1 a)) (* -1 (+ (/ 1 b) (/ (/ a 0) c))))))",
      "output_weight_simple": 29,
      "output_weight_complex": 76,
      "output_depth": 9,
      "simplification_time": 0.103211877
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100197215)",
      "output_term": "(+ 1 (+ (pow (+ 1 (+ (/ (/ (- (/ 1 a) a) (pow 0 b)) (pow a a)) c)) (pow (+ a -1) b)) (+ (/ -1 b) (- (/ (- a (pow b b)) (+ 1 a)) (/ (/ a 0) c)))))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.10134768200000002
    },
    "speedup": 1.018394056609997,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (pow (/ (/ (/ (+ (pow (+ 1 -1) a) (* 1 a)) (+ a a)) (- (+ a b) 1)) (- (- 1 1) -1)) (/ (- (/ 0 1) -1) (pow a 0))) (/ (* (* 1 -1) 1) b)) (+ (/ (* (- 0 a) -1) (+ -1 0)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.109703574)",
      "output_term": "(/ (* (/ (/ (+ a (pow 0 a)) (+ a a)) (+ -1 (+ a b))) (/ -1 b)) (- 0 a))",
      "output_weight_simple": 15,
      "output_weight_complex": 37,
      "output_depth": 7,
      "simplification_time": 0.109691021
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.105168667)",
      "output_term": "(* (+ a (pow 0 a)) (/ (/ (/ (/ -1 b) (+ a (+ -1 b))) (+ a a)) (- 0 a)))",
      "output_weight_simple": 15,
      "output_weight_complex": 37,
      "output_depth": 7,
      "simplification_time": 0.10769759500000001
    },
    "speedup": 1.0185094755365707,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (- 1 (- (* a (+ (pow 1 (/ a a)) (- 1 a))) (- (- 1 0) b))) (/ (+ (* 0 b) 0) (/ b -1))) (+ (+ (* (* d 1) 0) (/ e a)) (/ c e))) (pow (/ (pow (+ 1 -1) 1) (+ 1 c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100650083)",
      "output_term": "(+ (pow (+ 1 (+ (- 1 b) (* a (+ a -2)))) (+ (/ e a) (/ c e))) (pow 0 (+ -1 d)))",
      "output_weight_simple": 21,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.102564614
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.100013819)",
      "output_term": "(+ (pow (+ 2 (- (* a (+ a -2)) b)) (+ (/ e a) (/ c e))) (pow 0 (+ -1 d)))",
      "output_weight_simple": 20,
      "output_weight_complex": 40,
      "output_depth": 7,
      "simplification_time": 0.100639266
    },
    "speedup": 1.0191311808653294,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (- (pow (/ (+ (pow (pow (- a a) -1) -1) (* 0 b)) (- b (* d a))) (pow (+ 0 0) -1)) (- (* (pow d 1) 0) (* a c))) (/ (- (- a b) 0) (pow -1 c))) (/ (- (+ (+ 0 -1) d) (/ a e)) (- e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.101712303)",
      "output_term": "(- (pow (+ (pow (/ (/ 1 (pow 0 -1)) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- (+ -1 d) (/ a e)) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.102703532
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100081154)",
      "output_term": "(- (pow (+ (pow (/ (/ 1 (pow 0 -1)) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (+ d (- -1 (/ a e))) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.100764147
    },
    "speedup": 1.0192467763360316,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (* (- (* (/ (/ (pow (* -1 1) 1) (* -1 1)) (- 1 -1)) (/ (* a a) 0)) (pow (- b -1) 1)) (pow (- (+ c a) a) (* b c))) (/ (pow (/ b 1) b) (/ 0 d))) (+ (* (* e d) -1) (pow (/ b -1) d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100875316)",
      "output_term": "(/ (* (- (* 0.5 (/ (* a a) 0)) (+ 1 b)) (* (pow c (* b c)) (/ (pow b b) 0))) (+ (* -1 (* d e)) (pow (* -1 b) d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.10654024200000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.101740039)",
      "output_term": "(* (+ -1 (- (* 0.5 (/ (* a a) 0)) b)) (* (pow c (* b c)) (/ (/ (pow b b) 0) (- (pow (- 0 b) d) (* d e)))))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.104465926
    },
    "speedup": 1.0198563883883058,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (/ (- (/ (* a b) a) (- a (+ b (* 0 1)))) (- 1 (pow (/ 1 c) 0))) (+ (- (* b 0) 1) -1)) (/ (* (* (* -1 0) c) (/ a 1)) (/ 0 -1))) (* (* (- (+ -1 1) d) (/ d c)) (pow c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.101420894)",
      "output_term": "(pow (+ (/ (- b (- a b)) 0) (+ -2 (/ 0 0))) (* (- 0 d) (* d (pow c (+ c -1)))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.105288603
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100842186)",
      "output_term": "(pow (+ (/ (- b (- a b)) 0) (+ -2 (/ 0 0))) (* d (* d (- 0 (/ (pow c c) c)))))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.102647687
    },
    "speedup": 1.0257279640407289,
    "weight_simple_diff": 1,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (- (/ (- (* (* a (pow (/ (- 0 a) 1) (pow a a))) (- (/ 1 -1) b)) (+ -1 (+ 0 b))) (* (pow (* c c) b) (* -1 -1))) (pow (/ (* 1 c) a) (+ 0 d))) (- (/ (/ (* 1 -1) -1) (- 1 e)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.103650172)",
      "output_term": "(/ (- (/ (- (* (pow (- 0 a) (pow a a)) (* a (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.10363797999999999
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.10015671)",
      "output_term": "(/ (- (/ (+ 1 (- (* (pow (- 0 a) (pow a a)) (* a (- -1 b))) b)) (pow (* c c) b)) (pow (/ c a) d)) (+ (/ 1 (- 1 e)) (/ -1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.10088925500000001
    },
    "speedup": 1.0272449727178576,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (* (- (* (pow (/ (+ 0 (/ a a)) a) (pow 1 a)) (+ (* -1 a) 1)) (pow (* 1 1) -1)) (+ (pow (+ 1 -1) -1) (pow a 1))) (* (/ 0 (+ d d)) (/ e c))) (- (* (+ (/ d b) a) (* e -1)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.106526163)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.10651534300000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.101269642)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.103616989
    },
    "speedup": 1.0279718029637013,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (* (pow (* (+ (+ (+ (pow 0 a) 1) (- a a)) (pow c b)) (pow (pow 1 b) a)) (+ -1 -1)) (* (/ (+ 0 e) c) (- c -1))) (* (- (pow b -1) 1) (/ d d))) (/ (* (- (+ b -1) b) (- 0 -1)) (pow -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.101593739)",
      "output_term": "(/ (* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (+ e (/ e c))) (+ -1 (/ 1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.105955779
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100022323)",
      "output_term": "(* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (* e (/ (/ (+ 1 c) c) (+ -1 (/ 1 b)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.102994959
    },
    "speedup": 1.0287472321824993,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (/ (pow (* (- (* (pow -1 (/ a a)) (pow a b)) (- 0 a)) (+ (- 1 0) b)) (* (pow 0 a) a)) (pow c (/ (- -1 1) a))) (+ (+ (* 0 c) c) (pow a 1))) (pow (/ (- (- a 1) c) (/ d c)) (* 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.100051174)",
      "output_term": "(+ (pow (/ (pow (* (+ a (* -1 (pow a b))) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (/ 1 (/ (- (+ -1 a) c) (/ d c))))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.10121145000000001
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow (* (- a (pow a b)) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (/ 1 (/ (+ -1 (- a c)) (/ d c))))",
      "output_weight_simple": 26,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.098057243
    },
    "speedup": 1.0321669965777032,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (+ (* (+ (+ (* a (/ (/ a 0) a)) (* a a)) (+ (pow -1 a) -1)) (* (- 0 a) c)) (- (pow (* -1 a) b) (+ a a))) (* (* (/ 0 b) 0) (+ a 0))) (+ (/ (* (+ -1 b) 0) (/ -1 -1)) (* d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100286494)",
      "output_term": "(pow (+ (pow (- 0 a) b) (* (- 0 a) (+ (* (+ (/ a 0) (+ -1 (+ (* a a) (pow -1 a)))) c) 2))) (* c d))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 10,
      "simplification_time": 0.104874875
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100125864)",
      "output_term": "(pow (- (pow (- 0 a) b) (* a (+ 2 (* (+ (/ a 0) (+ -1 (+ (* a a) (pow -1 a)))) c)))) (* c d))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 10,
      "simplification_time": 0.101531858
    },
    "speedup": 1.032925793596725,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (+ (- (+ (- (* (pow (/ -1 a) 1) (* 1 -1)) (* -1 -1)) (pow (* b -1) 1)) (* (/ a b) b)) (- (+ (+ b 0) c) (+ 0 1))) (- (* (pow 0 b) 0) (/ d d))) (+ (* (- (- 0 a) c) d) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.101034545)",
      "output_term": "(+ a (* -1 (+ (* d (+ a c)) (+ (/ 1 a) (+ -2 c)))))",
      "output_weight_simple": 14,
      "output_weight_complex": 23,
      "output_depth": 6,
      "simplification_time": 0.107609761
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100019521)",
      "output_term": "(- (- 1 (+ (/ 1 a) (+ -1 (- c a)))) (* d (+ a c)))",
      "output_weight_simple": 13,
      "output_weight_complex": 21,
      "output_depth": 6,
      "simplification_time": 0.10416952
    },
    "speedup": 1.0330254089679975,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (/ (+ (pow (+ (/ (/ (/ a a) a) (* 1 -1)) (* c b)) (- 0 (/ 1 1))) (+ (* d 1) -1)) (pow (+ (pow 1 a) 1) (pow 1 -1))) (+ (- b (- 1 b)) (/ 0 0))) (+ (/ (- (* c -1) 1) (/ d d)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100457181)",
      "output_term": "(+ -1 (+ (/ (+ -1 (+ (/ 1 (+ (* (/ 1 a) -1) (* c b))) d)) (+ 1 (pow 1 a))) (+ b (+ (+ (* -1 (+ c (/ 0 0))) (* b -2)) 1))))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 10,
      "simplification_time": 0.10813979900000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.102138879)",
      "output_term": "(- (/ (+ -1 (+ (/ 1 (+ (/ -1 a) (* c b))) d)) (+ 1 (pow 1 a))) (+ c (+ b (/ 0 0))))",
      "output_weight_simple": 20,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.104639698
    },
    "speedup": 1.0334490739833748,
    "weight_simple_diff": 7,
    "weight_complex_diff": 10,
    "depth_diff": 2
  },
  {
    "base_term": "(- (/ (* (+ (* (pow (* (* 1 (* a a)) (+ a 1)) (/ a a)) (+ (pow b a) -1)) (+ (/ -1 a) b)) (* (- (/ a c) 0) (* 0 0))) (+ (pow (- -1 d) e) (+ b a))) (* (- a (+ (+ a e) -1)) (+ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100222239)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.10512292
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100178525)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.101567624
    },
    "speedup": 1.035004225362208,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (* (+ (- (pow (pow (+ (* 1 a) 1) (- a a)) (pow a -1)) (* b (/ a b))) (pow d (- b -1))) (+ (pow (* d c) -1) (pow c b))) (+ (+ e (+ 0 -1)) (/ -1 1))) (- (+ (pow (pow -1 a) d) -1) (pow e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100358619)",
      "output_term": "(pow (- (* (+ (- (pow 1 (/ 1 a)) a) (pow d (+ 1 b))) (+ (/ 1 (* d c)) (pow c b))) (+ e -2)) (- (+ -1 (pow (pow -1 a) d)) (pow e c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.10616583800000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100671182)",
      "output_term": "(pow (- (* (+ (pow 1 (/ 1 a)) (- (pow d (+ 1 b)) a)) (+ (/ 1 (* d c)) (pow c b))) (+ e -2)) (+ -1 (- (pow (pow -1 a) d) (pow e c))))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.102555902
    },
    "speedup": 1.0351996904088465,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (pow 1 (* (/ (* (pow (* a -1) a) (+ a 0)) (pow 1 -1)) (* (- b 0) 0))) (- (+ 1 b) (* b a))) (pow (+ (+ (/ b d) c) (/ 1 -1)) (+ 1 d))) (* (- (+ (/ -1 a) b) (+ 1 b)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.106986569)",
      "output_term": "(* (+ (* b (+ a -1)) (pow (+ (/ b d) (+ -1 c)) (+ 1 d))) (+ -1 (/ -1 a)))",
      "output_weight_simple": 17,
      "output_weight_complex": 34,
      "output_depth": 6,
      "simplification_time": 0.106976062
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100164002)",
      "output_term": "(* (- (pow (+ (/ b d) (+ -1 c)) (+ 1 d)) (- b (* a b))) (- -1 (/ 1 a)))",
      "output_weight_simple": 17,
      "output_weight_complex": 34,
      "output_depth": 6,
      "simplification_time": 0.103324764
    },
    "speedup": 1.035338072487637,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (* (/ -1 (/ (/ (* (/ a (/ b -1)) (- a c)) d) (+ 0 (pow b a)))) (- (pow (pow 0 d) 0) (- a 0))) (/ (- (+ b (- a e)) (pow 1 -1)) (pow 1 0))) (pow (/ (/ (+ -1 0) 1) (pow -1 0)) (/ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 134,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10084118)",
      "output_term": "(/ (+ -1 (+ (* (/ 1 (/ (/ (* (/ a (* -1 b)) (- a c)) d) (pow b a))) (+ -1 a)) (+ b (- a e)))) (pow -1 (/ e a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 11,
      "simplification_time": 0.105732961
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100033695)",
      "output_term": "(/ (- (+ -1 (+ a (- b e))) (/ (- 1 a) (* a (/ (/ (/ (- a c) (- 0 b)) d) (pow b a))))) (pow -1 (/ e a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.101908187
    },
    "speedup": 1.0375315675079178,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 2
  },
  {
    "base_term": "(- (* (- (- (/ (/ (/ (pow (+ -1 a) 1) (* -1 a)) (- 0 1)) (pow (- b a) b)) (* (pow 0 -1) 0)) (pow (/ b (+ c a)) (/ 1 a))) (pow (+ (+ 1 a) -1) c)) (pow (- (+ -1 (- 0 -1)) (/ -1 0)) (* 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10094886)",
      "output_term": "(+ (* (- (/ (+ 1 (/ 1 (* -1 a))) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.106570303
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100005273)",
      "output_term": "(+ (* (- (/ (/ (- 1 a) (- 0 a)) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.102698262
    },
    "speedup": 1.0377030820638427,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(* (- (/ (pow (/ (/ (- (- 0 (- -1 a)) (* a b)) (* a b)) (+ (/ b d) d)) (/ (- b -1) -1)) (/ (* (+ d -1) 1) (pow d b))) (/ (- (+ 0 b) d) (/ d b))) (pow (+ (/ (+ 1 e) 1) 1) (/ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100859711)",
      "output_term": "(* (- (/ (pow (/ (+ -1 (* (+ a 1) (/ 1 (* a b)))) (+ d (/ b d))) (+ -1 (* -1 b))) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ e 2) (* -1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.104880057
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100029797)",
      "output_term": "(* (- (/ (pow (/ (/ (+ 1 (- a (* a b))) (* a b)) (+ d (/ b d))) (- -1 b)) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ e 2) (- 0 d)))",
      "output_weight_simple": 29,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.101037238
    },
    "speedup": 1.0380336901133422,
    "weight_simple_diff": 1,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (pow (+ (* a (* (/ (/ 1 1) -1) a)) (/ (/ -1 a) b)) (+ (/ b b) -1)) (/ 1 (- (+ c a) c))) (* (* (+ (+ -1 d) -1) (- d c)) (/ c d))) (* (+ (/ (- 1 c) 1) (* 1 -1)) (/ b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100312796)",
      "output_term": "(* (+ 1 (+ (pow a -1) (* (+ d -2) (* (- d c) (/ c d))))) (* c (* -1 (/ b c))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.109514062
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.102274985)",
      "output_term": "(* (+ 1 (+ (/ 1 a) (* (+ d -2) (* (- d c) (/ c d))))) (- 0 b))",
      "output_weight_simple": 17,
      "output_weight_complex": 32,
      "output_depth": 7,
      "simplification_time": 0.10540453
    },
    "speedup": 1.0389881914942365,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (- (- (- (- (* (* (/ a a) b) (pow a 0)) (/ 1 b)) (pow (/ d b) c)) (+ (/ a a) 1)) (- (pow c (pow 0 1)) (/ -1 a))) (/ (pow (- -1 -1) 0) e)) (- (- (pow -1 (+ b 0)) (/ e 1)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.104088612)",
      "output_term": "(+ (pow (+ (- (- b (/ 1 b)) (pow (/ d b) c)) (+ (/ -1 a) -3)) (/ (pow 0 0) e)) (+ a (- (pow -1 b) e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.105998726
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.101822778)",
      "output_term": "(+ (pow (+ b (- (/ -1 b) (+ (pow (/ d b) c) (+ (pow a -1) 3)))) (/ (pow 0 0) e)) (+ (pow -1 b) (- a e)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.101813473
    },
    "speedup": 1.0411070644844813,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": -1
  },
  {
    "base_term": "(* (* (/ (/ (/ (+ (/ (pow (- a 0) a) (/ a a)) (pow a 1)) (pow (/ 0 0) b)) (pow -1 (+ -1 a))) (/ (* (pow -1 -1) d) (* b 1))) (+ (+ (- -1 c) 1) (pow c -1))) (/ a (/ (pow (/ 0 b) 1) (- 0 d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.121054682)",
      "output_term": "(* (/ (/ (/ (+ a (pow a a)) (pow (/ 0 0) b)) (pow -1 (+ a -1))) (/ (- 0 d) b)) (* (+ (* -1 c) (/ 1 c)) (/ a 0)))",
      "output_weight_simple": 24,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.12797330299999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.114337723)",
      "output_term": "(* (/ (+ a (pow a a)) (pow (/ 0 0) b)) (* (/ (- (pow c -1) c) (pow -1 (+ a -1))) (/ (/ a 0) (- 0 (/ d b)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 64,
      "output_depth": 6,
      "simplification_time": 0.12261828
    },
    "speedup": 1.043672305630123,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (pow (- (* (* (* (+ (/ a 0) a) (/ b a)) (+ -1 a)) (+ (- 1 1) c)) (- (pow 1 a) 1)) (- (* (* d -1) c) (pow c c))) (- (+ a (pow d -1)) (/ 0 1))) (+ 1 (- (pow (/ d 1) c) (/ 0 e))))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.105663008)",
      "output_term": "(+ 1 (+ (pow (pow (- (* (+ a (/ a 0)) (* (/ b a) (* (+ a -1) c))) (+ -1 (pow 1 a))) (- (* -1 (* c d)) (pow c c))) (+ a (/ 1 d))) (pow d c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 10,
      "simplification_time": 0.105652146
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100128093)",
      "output_term": "(+ 1 (+ (pow (pow (+ (* (+ a (/ a 0)) (* (/ b a) (* (- a 1) c))) (- 1 (pow 1 a))) (- 0 (+ (pow c c) (* c d)))) (+ a (/ 1 d))) (pow d c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.101204445
    },
    "speedup": 1.0439476843136681,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (/ (- (- (pow (+ (* (/ 1 a) a) (/ -1 -1)) (pow 0 1)) (pow 1 (- a 1))) (pow (* b -1) 0)) (- -1 (pow (- a a) 1))) (pow (+ (- 1 a) c) (- b d))) (/ (/ (- (pow 0 d) -1) (- 1 e)) (- 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.102750707)",
      "output_term": "(pow (- (pow 1 (+ a -1)) (pow (+ (- 1 a) c) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 6,
      "simplification_time": 0.107207093
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100102845)",
      "output_term": "(pow (- (pow 1 (+ 1 a)) (pow (- (+ 1 c) a) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.10235992799999999
    },
    "speedup": 1.0473541267047395,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (/ (+ (+ (/ (+ (* (/ a 0) a) (* 1 a)) (- -1 b)) (- (- b b) 0)) d) (/ e (- (/ c e) d))) (+ (- (* (* 0 d) d) (/ 1 a)) (+ b 0))) (- (* (pow (pow e b) 0) (/ e -1)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.101854037)",
      "output_term": "(+ (/ (+ (/ (+ a (* a (/ a 0))) (- -1 b)) d) (/ e (- (/ c e) d))) (+ (pow a -1) (* -1 b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.10777529599999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100135543)",
      "output_term": "(- (/ (+ (* (+ (/ a 0) 1) (/ a (- -1 b))) d) (/ e (- (/ c e) d))) (+ b (/ -1 a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 7,
      "simplification_time": 0.10278073400000001
    },
    "speedup": 1.048594340647538,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (+ (/ (/ (* (- (- -1 (/ 0 -1)) (+ a 0)) (+ a a)) (+ (+ a a) -1)) (pow (pow -1 0) 0)) (/ (- (pow 0 1) a) (- 0 b))) (* (pow (- b -1) b) (pow 1 0))) (+ (* 0 (/ (pow a 0) c)) (- -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.102345721)",
      "output_term": "(/ (- (+ (/ (* a (* (- -1 a) 2)) (+ -1 (+ a a))) (/ (- 0 a) (- 0 b))) (pow (+ 1 b) b)) (- -1 a))",
      "output_weight_simple": 20,
      "output_weight_complex": 39,
      "output_depth": 8,
      "simplification_time": 0.10661775899999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100102131)",
      "output_term": "(/ (- (* a (* (- -1 a) (/ 2 (+ -1 (+ a a))))) (+ (pow (+ 1 b) b) (/ a (- 0 b)))) (- -1 a))",
      "output_weight_simple": 19,
      "output_weight_complex": 38,
      "output_depth": 8,
      "simplification_time": 0.101345107
    },
    "speedup": 1.0520267051471957,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (- (- (* 1 (+ (/ 1 (pow (+ a 1) b)) -1)) (/ (- (+ a a) d) 0)) (pow (+ (+ -1 e) -1) (* 1 e))) (/ (- (+ (pow -1 c) -1) (- 0 d)) (- e c))) (/ (* (pow (* -1 1) e) (- c a)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.102155024)",
      "output_term": "(pow (+ (- (- (+ (/ 1 (pow (+ 1 a) b)) -1) (/ (- (+ a a) d) 0)) (pow (+ e -2) e)) (/ (+ (pow -1 c) (+ -1 d)) (- e c))) (/ (* (pow -1 e) (- c a)) (- c d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.106820966
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100271427)",
      "output_term": "(pow (+ (/ 1 (pow (+ 1 a) b)) (- (- (/ (+ -1 (+ (pow -1 c) d)) (- e c)) (pow (+ e -2) e)) (+ 1 (/ (+ a (- a d)) 0)))) (* (- c a) (/ (pow -1 e) (- c d))))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.101320218
    },
    "speedup": 1.0542907240882564,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (+ (/ (/ (+ (- (+ 1 1) 1) (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow (- 0 1) a)) (- (/ (+ c 1) b) (/ e c))) (- (/ (- d b) -1) (- 0 -1))) (* (+ (pow -1 c) (* b -1)) (- 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.102352511)",
      "output_term": "(/ (+ 1 (+ (/ (+ (/ (/ (- 1 a) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (- d b))) (* (+ (pow -1 c) (* -1 b)) (- 1 a)))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.106417892
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100064153)",
      "output_term": "(/ (+ (/ (+ (/ (/ (- 1 a) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (+ 1 (- d b))) (* (- 1 a) (- (pow -1 c) b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.100888184
    },
    "speedup": 1.0548102640047519,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (pow (- (pow (pow (pow (/ (/ 1 a) a) (* -1 -1)) (/ -1 a)) (pow (pow a -1) 1)) (- (* b 0) a)) (+ c (+ (- a d) d))) (* (+ (pow 1 1) e) (/ 1 b))) (- (* (* (* 1 -1) b) (pow 0 a)) (+ e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.10171919)",
      "output_term": "(+ (pow (+ a (pow (pow (pow a -2) (/ -1 a)) (/ 1 a))) (+ a c)) (* -1 (+ (* (+ 1 e) (/ 1 b)) (+ e (* b (+ 1 (pow 0 a)))))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.108637984
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100845047)",
      "output_term": "(+ (pow (+ a (pow (pow (pow a -2) (/ -1 a)) (/ 1 a))) (+ a c)) (- (- (/ (- -1 e) b) (* b (pow 0 a))) (+ b e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.10294931800000001
    },
    "speedup": 1.055256956631806,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (pow (+ (* (pow (+ (pow 1 (pow a 1)) (+ b a)) (* b c)) (* c (- 1 c))) (+ (pow e b) a)) (* (pow 0 (- c 0)) (- -1 0))) (* (/ d (pow c e)) -1)) (/ (- (- c (- 0 0)) (/ -1 1)) (* e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10279656)",
      "output_term": "(* (pow (+ a (+ (* c (* (pow (+ a (+ (pow 1 a) b)) (* b c)) (- 1 c))) (pow e b))) (* (pow 0 c) -1)) (* -1 (* (/ d (pow c e)) (/ (+ 1 c) (* c e)))))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 11,
      "simplification_time": 0.109160583
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100418438)",
      "output_term": "(* (pow (+ (* c (* (pow (+ a (+ (pow 1 a) b)) (* b c)) (- 1 c))) (+ a (pow e b))) (- 0 (pow 0 c))) (/ (* d (/ (- -1 c) (* c e))) (pow c e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.10318781699999999
    },
    "speedup": 1.057882472695396,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (* (- (+ (- (/ (/ a (- 0 0)) (+ -1 0)) 1) (pow 0 (+ -1 -1))) (+ (* a a) a)) (/ (pow (/ -1 -1) 1) (+ 0 b))) (- (- (+ -1 b) a) (* 0 b))) (- (+ (/ (- 0 b) 1) (/ a 0)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100282622)",
      "output_term": "(+ (- (* (+ (+ -1 (pow 0 -2)) (* -1 (+ (/ a 0) (+ a (* a a))))) (/ 1 b)) (- (+ -1 b) a)) (- (+ (/ a 0) (- 0 b)) (pow -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.108461718
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100154796)",
      "output_term": "(+ (/ (+ (pow 0 -2) (- -1 (+ a (+ (/ a 0) (* a a))))) b) (- (/ a 0) (+ b (+ (- b (+ a 1)) (pow -1 b)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 38,
      "output_depth": 8,
      "simplification_time": 0.10243395
    },
    "speedup": 1.0588454120923776,
    "weight_simple_diff": 3,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (pow (+ 0 (/ (* (/ (pow (/ a a) -1) (- 1 a)) (pow a a)) (* a (- a b)))) (/ (* (+ 0 1) -1) b)) (* (* (pow 0 (* 1 1)) (- -1 c)) (* b e))) (+ (- (+ (/ a 0) 0) (- 1 a)) (- a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.104505691)",
      "output_term": "(+ a (+ a (/ a 0)))",
      "output_weight_simple": 5,
      "output_weight_complex": 10,
      "output_depth": 4,
      "simplification_time": 0.115487523
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.102532814)",
      "output_term": "(+ a (+ a (/ a 0)))",
      "output_weight_simple": 5,
      "output_weight_complex": 10,
      "output_depth": 4,
      "simplification_time": 0.108980732
    },
    "speedup": 1.0597058845227796,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (* (+ (/ (pow a (pow (/ (* b b) 0) (+ d a))) 1) (+ (* (- b e) 1) 0)) (* (+ e a) (* 0 1))) (+ (pow (pow (* d e) 0) (+ 1 d)) (+ a b))) (* (+ (- (+ 0 c) c) (pow c c)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.102583109)",
      "output_term": "(pow (pow 0 (+ a (+ b (pow 1 (+ d 1))))) (pow c c))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 7,
      "simplification_time": 0.108270108
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100070162)",
      "output_term": "(pow (pow 0 (+ a (+ b (pow 1 (+ d 1))))) (pow c c))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 7,
      "simplification_time": 0.101997679
    },
    "speedup": 1.0614958012917137,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (* (- (* (+ (* (- (+ -1 a) a) (pow a 1)) (- -1 b)) (/ (pow a 0) d)) (pow (* b e) a)) (- (* (+ c 1) d) (* -1 a))) (- (* (/ 1 0) 1) (* a d))) (* (+ (+ 0 -1) (pow 1 a)) (pow 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100155526)",
      "output_term": "(pow (* (- (* (+ -1 (* -1 (+ a b))) (/ 1 d)) (pow (* b e) a)) (* (+ a (+ d (* d c))) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.107303783
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100020598)",
      "output_term": "(pow (* (- (/ (- -1 (+ a b)) d) (pow (* b e) a)) (* (- a (* d (- -1 c))) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.10100869299999998
    },
    "speedup": 1.0623222597286752,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (- (- (pow (+ (+ (+ a 1) -1) (- 0 1)) (* a -1)) (/ (* 0 c) d)) (pow (pow c d) a)) (- d (- (pow e b) e))) (- (- (+ c 1) -1) (+ -1 c))) (* (pow (* (/ 1 a) -1) (* e c)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.102983778)",
      "output_term": "(/ (* (pow (- (pow (+ a -1) (* a -1)) (pow (pow c d) a)) (- d (- (pow e b) e))) 3) (* (pow (* -1 (pow a -1)) (* c e)) (/ a b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.114309671
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.104070333)",
      "output_term": "(* (pow (- (pow (+ a -1) (- 0 a)) (pow (pow c d) a)) (- d (- (pow e b) e))) (/ 3 (* a (/ (pow (/ -1 a) (* c e)) b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.10757471600000001
    },
    "speedup": 1.062607230122736,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (+ (- (pow (- (/ 0 -1) (- (pow 1 -1) -1)) (- a (- 1 b))) (- a c)) (- (+ (* 1 d) a) (* e a))) (* (pow (pow (* b 0) 0) (/ -1 0)) (* e 0))) (- (pow (pow -1 (* 0 0)) (* 0 -1)) (+ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.104708574)",
      "output_term": "(/ (+ (pow -2 (+ -1 (+ a b))) (+ c (+ d (* -1 (* a e))))) (- 1 (+ -1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.10771196499999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100100117)",
      "output_term": "(/ (+ (pow -2 (+ b (+ -1 a))) (+ d (- c (* a e)))) (- 2 c))",
      "output_weight_simple": 17,
      "output_weight_complex": 30,
      "output_depth": 6,
      "simplification_time": 0.101245377
    },
    "speedup": 1.0638704520799995,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (+ (* -1 (pow (pow (/ a (* (/ 0 b) a)) (pow 1 c)) (/ (* -1 a) 0))) (/ (pow (+ b d) 1) (pow b 0))) (pow (- (* d (+ b -1)) (+ 1 -1)) (/ c 1))) (- (pow (pow (+ e 0) d) (/ 0 b)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.107270778)",
      "output_term": "(+ (+ b (+ d (* -1 (+ (pow (pow (/ a 0) (pow 1 c)) (/ (* -1 a) 0)) (pow (* d (+ -1 b)) c))))) (- 1 (/ b a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.109100363
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100058067)",
      "output_term": "(+ (+ b d) (- (- (- 1 (/ b a)) (pow (* d (+ -1 b)) c)) (pow (pow (/ a 0) (pow 1 c)) (/ (- 0 a) 0))))",
      "output_weight_simple": 22,
      "output_weight_complex": 51,
      "output_depth": 7,
      "simplification_time": 0.101942693
    },
    "speedup": 1.0702126831199172,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (- (+ a (+ (- 1 (/ (+ (* a 0) a) (* 0 b))) (- a (+ a -1)))) (- (* (pow 1 0) a) (pow 1 e))) (pow (pow (- (/ e 1) a) (pow 1 b)) (pow 0 -1))) (* (* (+ (pow d -1) e) (- -1 -1)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.105784051)",
      "output_term": "(+ 2 (+ (* -1 (+ (pow (pow (- e a) (pow 1 b)) (pow 0 -1)) (/ a 0))) (pow 1 e)))",
      "output_weight_simple": 18,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.11195827
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100994668)",
      "output_term": "(+ (- 2 (/ a 0)) (- (pow 1 e) (pow (pow (- e a) (pow 1 b)) (pow 0 -1))))",
      "output_weight_simple": 17,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.10440446
    },
    "speedup": 1.0723514110412524,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 2
  },
  {
    "base_term": "(- (/ (pow (* (/ (* (pow a 1) b) (+ 1 a)) (+ (pow b (+ 1 0)) (* 0 -1))) (* (- -1 (* c -1)) (pow b 0))) (* (pow (* (* a 0) b) (pow a 0)) (/ a 0))) (- (+ (- 1 (+ e e)) (- a 1)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 8,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100864967)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- (+ a (* -2 e)) (pow -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.11380260399999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100049485)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- a (+ (+ e e) (pow -1 b))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.106063345
    },
    "speedup": 1.0729682719322118,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (- (* (+ (* (- (- (- 1 a) a) (- 1 -1)) (pow -1 b)) (pow (pow 0 1) -1)) (/ (+ b b) 1)) (* (- c (* 1 0)) (* a a))) (* (pow (pow b e) 1) (* 0 1))) (+ (* (* (- a b) a) (- d 1)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.108940354)",
      "output_term": "(/ (/ (- (* (+ (* (+ -1 (* a -2)) (pow -1 b)) (pow 0 -1)) (+ b b)) (* a (* a c))) 0) (+ b (* a (* (- a b) (+ -1 d)))))",
      "output_weight_simple": 25,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.108929204
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100013527)",
      "output_term": "(/ (/ (- (* b (* 2 (+ (* (+ -1 (* a -2)) (pow -1 b)) (pow 0 -1)))) (* a (* a c))) 0) (+ b (* (- a b) (* a (+ -1 d)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 52,
      "output_depth": 10,
      "simplification_time": 0.101069787
    },
    "speedup": 1.0777622792457255,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": -1
  },
  {
    "base_term": "(* (/ (/ (pow (pow (+ (pow (/ (* 0 a) 0) (pow b 1)) (- c -1)) (+ c (pow -1 1))) (+ a (* d d))) (/ (+ (- 0 -1) c) (pow a 0))) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* b a)) (/ e b))))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.105151964)",
      "output_term": "(* (/ (/ (pow (pow (+ 1 (+ (pow (/ 0 0) b) c)) (+ c -1)) (+ a (* d d))) (+ 1 c)) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* a b)) (/ e b))))",
      "output_weight_simple": 29,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.109990115
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100188925)",
      "output_term": "(* (pow (pow (+ (pow (/ 0 0) b) (+ 1 c)) (+ c -1)) (+ a (* d d))) (* (/ (- 1 (* a b)) (/ e b)) (/ (/ b (+ 1 c)) (* a (* b (/ (- c b) d))))))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 8,
      "simplification_time": 0.102004311
    },
    "speedup": 1.0782888872216392,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 2
  },
  {
    "base_term": "(- (* (/ (- (+ (pow (- 0 (+ (+ -1 a) a)) (+ b -1)) (+ 0 a)) (+ (- 0 b) 0)) (- (* (/ 1 a) 0) 0)) (* (- (+ b (pow 1 1)) (* -1 c)) (pow d 1))) (- (* (pow b (* b -1)) (pow a 1)) (- -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.109703016)",
      "output_term": "(- (* (/ (+ a (+ b (pow (+ 1 (* a -2)) (+ -1 b)))) 0) (* (+ 1 (+ b c)) d)) (+ 1 (+ c (* a (pow b (- 0 b))))))",
      "output_weight_simple": 25,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.109692093
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.10057424)",
      "output_term": "(+ (* (/ (+ (pow (+ 1 (* a -2)) (+ -1 b)) (+ a b)) 0) (* (+ b (+ 1 c)) d)) (- -1 (+ c (* a (pow b (- 0 b))))))",
      "output_weight_simple": 25,
      "output_weight_complex": 43,
      "output_depth": 8,
      "simplification_time": 0.1017117
    },
    "speedup": 1.0784609145260575,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (/ (* (* (+ 1 (- (* -1 (+ a 0)) (- b b))) -1) (+ (/ (- b 1) -1) (* -1 b))) (* (+ (- a 1) a) (/ -1 b))) (- (- (+ -1 b) 0) (pow 1 0))) (+ (/ (- (/ 0 e) -1) (- d 0)) (pow c a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.104035809)",
      "output_term": "(pow (/ (/ (* (+ -1 a) (+ 1 (* -2 b))) (* (+ -1 (+ a a)) (/ -1 b))) (+ -2 b)) (+ (pow c a) (/ 1 d)))",
      "output_weight_simple": 22,
      "output_weight_complex": 51,
      "output_depth": 7,
      "simplification_time": 0.10923105599999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.101130105)",
      "output_term": "(pow (* (- 1 a) (/ (/ (- (+ b b) 1) (/ (+ 1 (* a -2)) b)) (+ b -2))) (+ (/ 1 d) (pow c a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 48,
      "output_depth": 8,
      "simplification_time": 0.101119452
    },
    "speedup": 1.080218037574017,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": -1
  },
  {
    "base_term": "(* (- (- (+ (/ (+ -1 (pow (pow (pow a b) -1) (+ -1 b))) (pow (pow 1 -1) b)) (* (/ a 0) -1)) (- (- (+ 0 b) 1) (pow b c))) (/ (/ (* a d) -1) (* -1 1))) (pow (- (/ b (/ -1 a)) (pow e -1)) (/ e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.102941366)",
      "output_term": "(* (+ (/ (+ -1 (pow (/ 1 (pow a b)) (+ -1 b))) (pow 1 b)) (* -1 (+ (* a d) (+ (/ a 0) (- (+ -1 b) (pow b c)))))) (- (/ b (/ -1 a)) (/ 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 8,
      "simplification_time": 0.111444751
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100752118)",
      "output_term": "(* (+ 1 (- (- (/ (+ -1 (pow (/ 1 (pow a b)) (+ -1 b))) (pow 1 b)) (+ (/ a 0) (* a d))) (- b (pow b c)))) (+ (/ b (/ -1 a)) (/ -1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 71,
      "output_depth": 10,
      "simplification_time": 0.10290545799999999
    },
    "speedup": 1.0829819250209256,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -2
  },
  {
    "base_term": "(* (pow (pow (* (- (/ (pow a (/ (+ 0 0) a)) (* 0 -1)) a) (/ (* (* a 1) a) (- 1 0))) (- (- (+ a -1) 0) (- -1 0))) (/ (* (* 1 a) -1) (/ a c))) (/ (+ (- d (pow a b)) (+ -1 e)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10477647)",
      "output_term": "(* (/ (+ (- d (pow a b)) (+ -1 e)) d) (pow (pow (* (- (/ 1 0) a) (* a a)) a) (/ (* a -1) (/ a c))))",
      "output_weight_simple": 23,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.110916106
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100375349)",
      "output_term": "(* (pow (pow (* a (* a (- (/ 1 0) a))) a) (- 0 (/ a (/ a c)))) (/ (+ -1 (- (+ d e) (pow a b))) d))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.102119206
    },
    "speedup": 1.0861434429876002,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (+ (* (pow (/ (/ (- (+ a -1) -1) (/ 1 a)) (* 1 a)) (* (pow a 0) b)) (- (/ c -1) -1)) (* (+ (* -1 -1) c) (pow -1 c))) (* (- 1 (* b 0)) (+ b 0))) (/ (/ (pow (pow e 1) d) c) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.106928925)",
      "output_term": "(- (pow (+ (* (pow a b) (+ 1 (* -1 c))) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.11353553499999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.102304634)",
      "output_term": "(- (pow (+ (* (pow a b) (- 1 c)) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.104529445
    },
    "speedup": 1.0861584025438955,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (* (pow (pow (* (- (+ -1 (pow a b)) (+ -1 b)) (+ a a)) (/ (* a b) 1)) (+ b (- b a))) (/ c (/ (- b a) -1))) (pow (pow (pow c 0) d) (- a c))) (- (+ (+ (/ c -1) b) (pow b 1)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10439214)",
      "output_term": "(/ (* (pow (pow (* a (+ (* (pow a b) 2) (* b -2))) (* a b)) (+ b (- b a))) (* (/ c (+ a (* -1 b))) (pow (pow 1 d) (- a c)))) (+ b (+ b (* -1 (+ (* a b) c)))))",
      "output_weight_simple": 31,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.116430177
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.101386087)",
      "output_term": "(* (pow (pow (* a (* (- (pow a b) b) 2)) (* a b)) (+ b (- b a))) (* (/ c (- 0 (- b a))) (/ (pow (pow 1 d) (- a c)) (- (* b (- 2 a)) c))))",
      "output_weight_simple": 27,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.10706131499999999
    },
    "speedup": 1.0875093118368666,
    "weight_simple_diff": 4,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (- (+ (* (pow (* (- (+ 0 a) b) (pow 1 -1)) (pow 1 -1)) (* (pow a 1) 1)) (+ (pow a 0) 0)) (- (* b (pow c -1)) (* 1 c))) (* (pow (* -1 0) 1) c)) (+ (pow (- (pow c c) 1) (/ 0 b)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.101630233)",
      "output_term": "(+ -1 (+ c (+ (* a a) (* (* b -1) (+ a (/ 1 c))))))",
      "output_weight_simple": 13,
      "output_weight_complex": 23,
      "output_depth": 7,
      "simplification_time": 0.111155018
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100578127)",
      "output_term": "(+ (* a (- a b)) (- -1 (- (/ b c) c)))",
      "output_weight_simple": 10,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.10220230300000001
    },
    "speedup": 1.0875979771219049,
    "weight_simple_diff": 3,
    "weight_complex_diff": 5,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (- (- (+ (- (* (/ (/ (- a a) -1) b) (pow 1 -1)) (+ (* 1 a) 0)) (* (pow -1 1) c)) (pow (- (pow c c) 0) (* 1 c))) (+ (* -1 (pow e d)) (+ c b))) (* (* (- (/ b b) -1) (+ d c)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.10860175)",
      "output_term": "(/ (+ (pow e d) (* -1 (+ (+ b c) (+ (pow (pow c c) c) (+ a c))))) (* 2 (* (+ c d) (pow 0 0))))",
      "output_weight_simple": 22,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.112843422
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.101217833)",
      "output_term": "(/ (- (- 0 a) (+ c (+ c (+ (pow (pow c c) c) (- b (pow e d)))))) (* 2 (* (+ c d) (pow 0 0))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.103299946
    },
    "speedup": 1.0923860695919434,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (- (+ 0 (/ (- (/ (- 0 a) a) (- 1 0)) a)) (+ -1 (- b (- a -1)))) (+ (pow 1 b) (+ 1 1))) (* (* (* (/ 1 a) 0) (pow d 0)) (- 1 1))) (/ (/ (/ (* -1 -1) d) (/ d 1)) (pow a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.110855506)",
      "output_term": "(* (+ (/ -2 a) (+ (pow 1 b) (+ (* -1 b) (+ 4 a)))) (/ (pow d -2) (pow a a)))",
      "output_weight_simple": 18,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.11084479
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100199816)",
      "output_term": "(* (+ (/ -2 a) (- (+ (pow 1 b) 3) (+ -1 (- b a)))) (/ (pow d -2) (pow a a)))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.101320143
    },
    "speedup": 1.0940054634545866,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (- (pow (* (* a (- b (pow (/ 1 a) -1))) (- (* -1 -1) -1)) (pow (* c b) 0)) (pow (- (/ a 0) -1) b)) (+ (* (* (* a d) b) (* e e)) (pow 0 e))) (- (- (* (+ -1 0) -1) (* 1 0)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10456512)",
      "output_term": "(/ (+ (- (* a (* (- b (/ 1 (/ 1 a))) 2)) (pow (+ 1 (/ a 0)) b)) (+ (* a (* b (* d (* e e)))) (pow 0 e))) (* -1 e))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.11110926200000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100298308)",
      "output_term": "(/ (+ (* a (+ (* (+ b (/ -1 (pow a -1))) 2) (* b (* d (* e e))))) (- (pow 0 e) (pow (+ 1 (/ a 0)) b))) (* -1 e))",
      "output_weight_simple": 25,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.101444734
    },
    "speedup": 1.0952688978414593,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (+ (/ (+ a (/ (- (pow a 1) -1) (/ a 1))) a) (- (pow (+ c 1) d) (/ a -1))) (* (/ 0 (pow c -1)) (* e e))) (+ (+ c (pow c 0)) (pow e -1))) (pow (- (+ (+ -1 -1) d) (- d c)) (pow d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.107601283)",
      "output_term": "(* (+ (+ c (pow e -1)) (+ (+ a (+ 2 (pow (+ 1 c) d))) (+ (pow a -1) (pow a -2)))) (pow (- (+ d -2) (- d c)) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.11497484499999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100428716)",
      "output_term": "(* (+ 1 (+ (/ (+ a (/ (+ a 1) a)) a) (+ (pow (+ 1 c) d) (+ (/ 1 e) (+ a c))))) (pow (+ c -2) d))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.10405636700000001
    },
    "speedup": 1.1049284951491722,
    "weight_simple_diff": 3,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (- (/ (- (- (- a (+ a 1)) (+ a 0)) (* c -1)) (pow (/ d c) 0)) c) (- (* a d) (- 0 1))) (+ (+ (* (- 1 -1) 1) (* d 1)) (- d c))) (+ (* (/ (/ -1 d) -1) (+ a 1)) (- 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100881773)",
      "output_term": "(/ (* (pow (- -1 a) (+ 1 (* a d))) (+ 2 (+ d (- d c)))) (+ (* (+ a 1) (/ 1 d)) (- 1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 37,
      "output_depth": 6,
      "simplification_time": 0.114412985
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.10087941)",
      "output_term": "(* (pow (- -1 a) (+ 1 (* a d))) (/ (+ d (+ d (- 2 c))) (- (- 1 c) (/ (- -1 a) d))))",
      "output_weight_simple": 18,
      "output_weight_complex": 34,
      "output_depth": 6,
      "simplification_time": 0.10329844500000002
    },
    "speedup": 1.1075963921818957,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (/ (pow (* (pow (* (* (+ 1 -1) a) (pow 1 1)) (- a -1)) (/ (/ a -1) c)) (* (+ c -1) 0)) (- (+ (pow a 1) 1) (+ 0 1))) (/ (* (- e a) e) -1)) (- (- (/ (+ a e) 1) (pow a c)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.109831737)",
      "output_term": "(+ (/ 1 a) (+ (* e (- e a)) (- (- (+ a e) (pow a c)) (pow -1 b))))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.119513016
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.102477286)",
      "output_term": "(+ a (+ e (+ (* e (- e a)) (- (- (/ 1 a) (pow a c)) (pow -1 b)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 7,
      "simplification_time": 0.107536201
    },
    "speedup": 1.1113747267303966,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (+ (- (pow (+ (* (* -1 (* a a)) (/ b -1)) (pow b 0)) (+ (/ 0 -1) 1)) (pow (/ a a) d)) (+ (* (- 0 1) 0) (+ -1 1))) (+ (pow b (+ 0 1)) (/ d 1))) (+ (- (/ 1 (* -1 -1)) (* 0 1)) d))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.101541734)",
      "output_term": "(/ (* (- (+ (* a (* a b)) 1) (pow 1 d)) (+ b d)) (+ 1 d))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 7,
      "simplification_time": 0.10645882300000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (* a (* a b)) (- 1 (pow 1 d))) (/ (+ b d) (+ 1 d)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.09568109199999998
    },
    "speedup": 1.1126422240247846,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 2
  },
  {
    "base_term": "(* (+ (- (pow (* (* a (/ (/ (- a b) b) (pow 1 a))) (pow (* a -1) -1)) (pow (+ b b) b)) (pow (+ (pow c -1) a) (/ 0 c))) (+ (* (pow 1 0) e) (* c 0))) (- (/ (pow 0 (pow -1 0)) (pow d d)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10332683)",
      "output_term": "(* -1 (* (+ -1 (+ (pow (* a (* (/ (/ (- a b) b) (pow 1 a)) (/ 1 (* a -1)))) (pow (+ b b) b)) e)) (- e b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 50,
      "output_depth": 11,
      "simplification_time": 0.112514885
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100075798)",
      "output_term": "(* (- e b) (- 1 (+ (pow (* (- a b) (/ (/ (/ a (- 0 a)) b) (pow 1 a))) (pow (+ b b) b)) e)))",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 10,
      "simplification_time": 0.10109893599999999
    },
    "speedup": 1.112918586996801,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (+ (- (pow (/ (* (- (- 0 1) -1) -1) (+ a b)) (+ 1 (- a -1))) (/ (pow c d) 1)) (pow (pow (/ d -1) -1) (pow -1 0))) (* (- (+ c e) 1) (- 0 d))) (* (pow (pow (- c a) c) (pow 0 1)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100251891)",
      "output_term": "(pow (+ (pow 0 (+ a 2)) (+ (/ 1 (- 0 d)) (+ d (* -1 (+ (pow c d) (* (+ c e) d)))))) (* -1 c))",
      "output_weight_simple": 22,
      "output_weight_complex": 42,
      "output_depth": 9,
      "simplification_time": 0.102352053
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (+ (pow 0 (+ a 2)) (- (/ 1 (- 0 d)) (pow c d))) (* d (+ -1 (+ c e)))) (- 0 c))",
      "output_weight_simple": 21,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.09172602699999999
    },
    "speedup": 1.1158452660333802,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (* (/ (* (- (/ a (+ (pow (- a b) -1) (pow 0 1))) (pow (pow a b) 1)) (+ (/ 1 0) b)) (/ (- (* 0 1) b) (pow b d))) (+ (- 0 (* b -1)) (/ 0 d))) (pow (- (/ (+ 0 e) 1) (* d 0)) (- e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.111459697)",
      "output_term": "(+ (pow e e) (* b (/ (* (- (/ a (/ 1 (- a b))) (pow a b)) (+ b (/ 1 0))) (/ (- 0 b) (pow b d)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.116796644
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.102547658)",
      "output_term": "(+ (* (- (/ a (/ 1 (- a b))) (pow a b)) (* (+ (/ 1 0) b) (/ b (- 0 (/ b (pow b d)))))) (pow e e))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.103671205
    },
    "speedup": 1.12660640917601,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (+ (+ (pow (* (/ (+ -1 (+ a a)) (pow b 1)) (* b c)) (- (* c b) a)) (* (+ d -1) 1)) (- (+ 0 c) (+ c b))) (* (* (+ a c) -1) (pow -1 -1))) (/ (pow (- (/ c 0) a) (- a a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.109873936)",
      "output_term": "(pow (/ (+ -1 (+ (pow (* (+ a (+ -1 a)) c) (- (* b c) a)) (+ d (* -1 b)))) (+ a c)) (/ 1 (pow -1 e)))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.11591536100000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.101127478)",
      "output_term": "(pow (/ (+ (pow (* (+ a (+ -1 a)) c) (- (* b c) a)) (+ -1 (- d b))) (+ a c)) (/ 1 (pow -1 e)))",
      "output_weight_simple": 21,
      "output_weight_complex": 45,
      "output_depth": 8,
      "simplification_time": 0.10275794600000002
    },
    "speedup": 1.12804279875349,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (+ (- (- (* -1 -1) (pow (pow (pow 0 a) 0) (/ 1 -1))) (- (+ (- b -1) 0) (/ a -1))) (- (+ 0 (/ -1 1)) (* b 1))) (pow (* (/ 0 d) c) (/ e 1))) (* (* (* (- 0 e) 1) (- 1 c)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.112473741)",
      "output_term": "(/ (+ (+ -2 (* b -2)) (* -1 (+ (pow 0 e) a))) (* (- 1 c) (* e e)))",
      "output_weight_simple": 18,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.11939418900000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100197763)",
      "output_term": "(/ (- (- -2 (+ a b)) (+ b (pow 0 e))) (* (- 1 c) (* e e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 29,
      "output_depth": 5,
      "simplification_time": 0.105611019
    },
    "speedup": 1.1305088250308428,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (* (- (+ (+ (pow (* (+ 1 a) a) 0) (pow a 1)) (* -1 (/ a 1))) (* (* 1 -1) a)) (+ (- a (* -1 b)) (- -1 1))) (- (* (+ 0 -1) -1) (* -1 0))) (* (pow (* (+ a -1) a) (+ 0 0)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.118165858)",
      "output_term": "(* (+ 1 a) (+ a (+ b -2)))",
      "output_weight_simple": 8,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.118154965
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.102051691)",
      "output_term": "(* (+ 1 a) (+ a (+ b -2)))",
      "output_weight_simple": 8,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.104371192
    },
    "speedup": 1.1320649188331584,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (- (pow (pow (pow (/ (pow 1 a) 0) (- 0 1)) 0) 1) (- (pow 0 (* 1 b)) (* b -1))) (/ (- (pow 0 1) a) (/ b c))) (pow (/ (/ a a) d) (pow 0 0))) (pow (+ (/ (+ d 1) 1) (pow 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10613635)",
      "output_term": "(+ (/ (* a (* (/ 1 (/ b c)) (+ -1 (+ b (pow 0 b))))) (pow (/ 1 d) (pow 0 0))) (pow (+ 1 (+ d (pow 0 d))) (pow -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.117845715
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.102708592)",
      "output_term": "(+ (* a (/ (/ (+ b (+ -1 (pow 0 b))) (/ b c)) (pow (/ 1 d) (pow 0 0)))) (pow (+ 1 (+ d (pow 0 d))) (pow -1 b)))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.104029389
    },
    "speedup": 1.132811757646678,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (+ (+ (+ (* (pow 0 (pow 1 a)) (+ b b)) (- 1 b)) (/ (* b 0) 0)) (- (- -1 a) c)) (* (+ (pow 0 1) a) (+ d 1))) (/ (- -1 (+ a -1)) (/ 1 0))) (* (* (* (pow 0 e) e) 0) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.109722846)",
      "output_term": "(pow (* (+ (/ 0 0) (+ (* (pow 0 (pow 1 a)) (+ b b)) (* -1 (+ (+ a c) b)))) (+ a (* a d))) (/ (* a -1) (/ 1 0)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.118983798
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100176343)",
      "output_term": "(pow (* a (* (+ (* (pow 0 (pow 1 a)) (+ b b)) (- (- (- (/ 0 0) b) a) c)) (+ 1 d))) (* a (/ -1 (/ 1 0))))",
      "output_weight_simple": 23,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.104131928
    },
    "speedup": 1.1426255163545997,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (* (+ (* (* (* a (+ (/ a a) 0)) (pow b b)) (/ a (+ a a))) (pow 0 1)) (- b (* 1 (/ c b)))) (* (/ (/ (+ -1 a) c) (+ -1 -1)) (* 1 a))) (pow (- (/ (/ 0 -1) -1) (/ d e)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.105410589)",
      "output_term": "(+ (pow (* a (* (- b (/ c b)) (* (pow b b) (/ a (+ a a))))) (* (/ (+ a -1) c) (* a -0.5))) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 61,
      "output_depth": 8,
      "simplification_time": 0.115721252
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100172116)",
      "output_term": "(+ (pow (* a (* (- b (/ c b)) (* a (/ (pow b b) (+ a a))))) (* a (* (- a 1) (/ -0.5 c)))) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.10116459
    },
    "speedup": 1.1438908811867867,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (pow (/ (* (+ (* (* -1 (+ a 1)) (- -1 b)) (- -1 a)) (* (* b b) 0)) (- (* a 1) 1)) (pow c (pow (- -1 d) 1))) (* (* -1 (- b d)) (+ 1 0))) (pow (* (+ (+ b a) a) (* c a)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.109615573)",
      "output_term": "(/ (+ (pow 0 (pow c (- -1 d))) (- b d)) (* c (* a (+ a (+ a b)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.118063701
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100114702)",
      "output_term": "(/ (+ b (- (pow 0 (pow c (- -1 d))) d)) (* a (* c (+ a (+ a b)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 32,
      "output_depth": 7,
      "simplification_time": 0.103198178
    },
    "speedup": 1.144048308682349,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (- (+ (+ (- a (+ (+ (/ a a) 1) (/ a 1))) (- (pow a -1) b)) (/ (* b b) 0)) (- (+ (/ -1 1) 1) (+ 0 1))) (- (- (pow 0 a) 1) (- d d))) (- (+ (/ -1 (- 0 d)) (/ 1 a)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.111441846)",
      "output_term": "(pow (+ (+ (- (/ 1 a) b) (/ (* b b) 0)) (* -1 (pow 0 a))) (+ (/ 1 a) (/ -1 (- 0 d))))",
      "output_weight_simple": 18,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.120166994
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.101226904)",
      "output_term": "(pow (- (+ (- (pow a -1) b) (/ (* b b) 0)) (pow 0 a)) (+ (pow a -1) (/ -1 (- 0 d))))",
      "output_weight_simple": 16,
      "output_weight_complex": 37,
      "output_depth": 6,
      "simplification_time": 0.104824455
    },
    "speedup": 1.1463641189453357,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (- (* (/ (+ (* (- (+ 0 0) a) (+ 1 a)) (- -1 c)) (* (- 1 c) -1)) (* (/ 1 e) 0)) (* (/ b (+ -1 1)) (* -1 -1))) (+ (/ (* 1 b) -1) (* 1 0))) (- (- -1 (* d (+ 0 c))) (+ a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.111974173)",
      "output_term": "(* (+ b (- 0 (/ b 0))) (- (- -1 (* c d)) (+ a e)))",
      "output_weight_simple": 15,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.117201462
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100621882)",
      "output_term": "(* (- b (/ b 0)) (- -1 (+ (* c d) (+ a e))))",
      "output_weight_simple": 14,
      "output_weight_complex": 25,
      "output_depth": 5,
      "simplification_time": 0.10199953600000002
    },
    "speedup": 1.1490391681781766,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (+ (pow (* (* 0 a) (- (* 1 (* b a)) b)) (* (- (- a 1) -1) (- c b))) (pow (/ (pow 1 1) d) 1)) (- (pow (- (/ -1 1) 0) (+ d d)) (+ e -1))) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100146416)",
      "output_term": "(* (+ (pow 0 (* a (- c b))) (/ 1 d)) (* (- (pow -1 (+ d d)) (+ -1 e)) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.11782607199999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100140487)",
      "output_term": "(* (+ (pow -1 (+ d d)) (- 1 e)) (* (+ (pow 0 (* a (- c b))) (/ 1 d)) (- (- (/ (pow 0 -1) e) (pow a b)) (/ d c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.102363789
    },
    "speedup": 1.151052272986886,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 (/ 0 -1))) (- (+ (+ d c) 0) (+ a 1))) (- (- (* -1 (+ d -1)) (pow d 1)) (+ -1 -1))) (* (- (+ (- 1 b) 0) (- e 0)) (* d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100223876)",
      "output_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 0)) (- (+ c d) (+ a 1))) (+ (* d -2) 3)) (* d (* d (- (- 1 b) e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.118220638
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100107881)",
      "output_term": "(+ (pow (* (+ (* a (* (- c a) (/ 2 (pow c b)))) (- a (/ 1 0))) (+ c (+ -1 (- d a)))) (+ 3 (* d -2))) (* d (* d (- (- 1 e) b))))",
      "output_weight_simple": 31,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.10123082500000001
    },
    "speedup": 1.1678324067792591,
    "weight_simple_diff": -2,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (/ (+ (- (+ (* (- 0 -1) -1) a) (- 0 -1)) (* (- 1 b) -1)) (+ (+ a b) a)) (- (* (+ a -1) -1) (pow 0 1))) (* (* c (/ b a)) (- 1 0))) (pow (pow (/ (pow d c) e) (- e 0)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.119266617)",
      "output_term": "(+ 1 (/ (* -1 (* (/ (+ a (+ -3 b)) (+ a (+ a b))) (+ -1 a))) (* c (/ b a))))",
      "output_weight_simple": 18,
      "output_weight_complex": 36,
      "output_depth": 8,
      "simplification_time": 0.119255949
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100379221)",
      "output_term": "(+ 1 (* (- 1 a) (/ (/ (+ a (+ b -3)) (+ b (+ a a))) (* b (/ c a)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.101656097
    },
    "speedup": 1.1731312977715445,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (/ (* (- (* (+ (pow a (* (* a b) -1)) b) c) (pow d (* (* b e) -1))) (+ (/ d (* 1 a)) (- -1 -1))) (/ (pow (* b (* 1 b)) (/ c 1)) (pow 0 e))) (+ (+ (* (pow b d) 1) (/ c b)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.114673071)",
      "output_term": "(+ (/ (* (- (* (+ b (pow a (* a (* b -1)))) c) (pow d (* b (* -1 e)))) (/ d a)) (/ (pow (* b b) c) (pow 0 e))) (+ (pow b d) (+ (/ c b) (- c d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.11989974
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.101223943)",
      "output_term": "(+ c (+ (* (- (* (+ b (pow a (* a (- 0 b)))) c) (pow d (* e (- 0 b)))) (/ (/ d a) (/ (pow (* b b) c) (pow 0 e)))) (+ (pow b d) (- (/ c b) d))))",
      "output_weight_simple": 27,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.102194389
    },
    "speedup": 1.1732516938870294,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (/ (/ (+ (* (pow (+ 0 0) a) (- -1 b)) a) a) (/ (/ (* 1 c) -1) (/ 1 1))) (pow (* a (- a c)) (* 1 0))) (* (/ (* a e) e) (- c c))) (/ (+ (+ (/ b 1) c) (/ -1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.116582693)",
      "output_term": "(* -1 (+ b c))",
      "output_weight_simple": 5,
      "output_weight_complex": 8,
      "output_depth": 3,
      "simplification_time": 0.12222112800000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100924096)",
      "output_term": "(- 0 (+ b c))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.103896135
    },
    "speedup": 1.1763780048218349,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (/ (- (/ (+ (- (* (* 0 0) 1) (/ 1 a)) (/ b b)) (- (- b a) 0)) (- -1 (+ -1 -1))) (pow (- 0 (- d 0)) (/ d -1))) (pow (/ (* 0 c) 1) (pow b 0))) (* d (* (- (+ -1 b) 0) (* e d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100644259)",
      "output_term": "(- (/ (+ (/ (+ 1 (- 0 (/ 1 a))) (- b a)) -1) (pow (- 0 d) (- 0 d))) (* e (* d (* d (+ b -1)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 43,
      "output_depth": 8,
      "simplification_time": 0.102556312
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (+ (/ (+ 1 (/ -1 a)) (- b a)) -1) (pow (- 0 d) (- 0 d))) (* (* (+ b -1) e) (* d d)))",
      "output_weight_simple": 20,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.086924421
    },
    "speedup": 1.1798331334297871,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (* (pow (- (/ (+ (- (- (+ a a) 1) a) (* -1 a)) (pow a (/ a 0))) d) (/ (* (pow 0 0) -1) (* a 0))) (* (+ (* (/ b 0) d) (* -1 1)) (/ a -1))) (* (+ (/ (+ b c) -1) (- 1 -1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.106010112)",
      "output_term": "(pow (* a (* -1 (* (pow (- (/ -1 (pow a (/ a 0))) d) (* -1 (pow 0 -1))) (+ -1 (* d (/ b 0)))))) (* (+ (* -1 (+ b c)) 2) (pow -1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.12193194499999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.103090311)",
      "output_term": "(pow (* a (* (pow (- (/ -1 (pow a (/ a 0))) d) (/ (- 0 (pow 0 0)) 0)) (- 1 (* d (/ b 0))))) (* (- 2 (+ b c)) (pow -1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.10307965799999999
    },
    "speedup": 1.1828904690390027,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (/ (- (* (+ (+ 1 a) (+ (pow (- 0 1) 0) (pow -1 b))) (/ (+ b -1) c)) (+ (+ (/ a -1) 1) (+ a b))) (* (+ (pow (* d -1) -1) (- d d)) (+ -1 d))) (* (pow (pow (/ c -1) e) (/ -1 b)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100127987)",
      "output_term": "(+ (/ (- (* (+ a (+ (pow -1 b) 2)) (/ (+ -1 b) c)) (+ 1 b)) (* (/ 1 (* -1 d)) (+ -1 d))) (pow (pow (* -1 c) e) (/ -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.121099712
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10038653)",
      "output_term": "(+ (/ (+ -1 (- (* (+ a (+ (pow -1 b) 2)) (/ (+ -1 b) c)) b)) (/ (+ -1 d) (- 0 d))) (pow (pow (- 0 c) e) (/ -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.102314496
    },
    "speedup": 1.1836026832405058,
    "weight_simple_diff": 1,
    "weight_complex_diff": 4,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (* (* (+ (+ (- (+ a (pow a 1)) (pow a (/ b a))) 0) (* 1 (+ (* d d) d))) (+ 1 (- (+ 0 -1) b))) (+ (/ (- (+ b 1) c) (- 0 0)) (/ d -1))) (+ (pow (pow (* 1 -1) -1) (pow a d)) (pow 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.121698749)",
      "output_term": "(+ (* b (* (+ (/ (- (+ 1 b) c) 0) (* d -1)) (+ (pow a (/ b a)) (+ (* (* d -1) (+ 1 d)) (* -2 a))))) (+ (pow -1 (pow a d)) (pow 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.12168926999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100226695)",
      "output_term": "(+ (pow -1 (pow a d)) (- (pow 1 e) (* b (* (+ d (- (+ a (+ a (* d d))) (pow a (/ b a)))) (- (/ (+ 1 (- b c)) 0) d)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 10,
      "simplification_time": 0.102586021
    },
    "speedup": 1.1862168823177184,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": -2
  },
  {
    "base_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) (+ (/ c (* 1 1)) 0)) (* (* (- -1 (+ b b)) (+ c -1)) (- a -1))) (/ (pow (* (- a 1) -1) (* d -1)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.101468451)",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) c) (* (+ -1 (* b -2)) (* (+ -1 c) (+ a 1)))) (/ (pow (+ (* a -1) 1) (* -1 d)) (/ 0 0)))",
      "output_weight_simple": 32,
      "output_weight_complex": 85,
      "output_depth": 10,
      "simplification_time": 0.10760499200000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (- 0 a)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) c) (* (- (* b -2) 1) (* (+ -1 c) (+ a 1)))) (/ (pow (- 1 a) (- 0 d)) (/ 0 0)))",
      "output_weight_simple": 32,
      "output_weight_complex": 83,
      "output_depth": 10,
      "simplification_time": 0.09060312200000001
    },
    "speedup": 1.18765214293609,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (+ (+ (- (pow (/ (pow a 0) b) -1) (pow 0 b)) (pow (- a b) -1)) (- (pow -1 c) -1)) (pow (pow (* d d) e) (/ 1 1))) (/ (/ (+ d 0) d) (pow 1 e))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.118538585)",
      "output_term": "(pow (+ (- (/ 1 (/ 1 b)) (pow 0 b)) (+ (pow -1 c) (+ 1 (+ (/ 1 (- a b)) (+ (pow (* d d) e) (/ 1 (pow 1 e))))))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 31,
      "output_weight_complex": 83,
      "output_depth": 9,
      "simplification_time": 0.125435082
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.101679839)",
      "output_term": "(pow (+ (/ 1 (- a b)) (+ (/ 1 (pow 1 e)) (+ (/ 1 (/ 1 b)) (+ (+ (pow -1 c) 1) (- (pow (* d d) e) (pow 0 b)))))) (+ (/ (/ b 0) c) (- (pow 0 d) (/ c 0))))",
      "output_weight_simple": 31,
      "output_weight_complex": 83,
      "output_depth": 9,
      "simplification_time": 0.10521152
    },
    "speedup": 1.1922181335275832,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (+ (* (* (/ (+ 0 (+ (* a 0) 0)) a) (pow (- a 0) 1)) (pow (* -1 c) -1)) (* -1 (+ (/ -1 0) 1))) (* (pow (/ (+ 1 b) 1) (+ 1 -1)) (pow 0 -1))) (pow (- (- (pow 1 1) 1) (- b 0)) (* c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.117473324)",
      "output_term": "(pow (+ -1 (* -1 (/ -1 0))) (pow 0 -1))",
      "output_weight_simple": 7,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.121593282
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100317508)",
      "output_term": "(pow (- -1 (/ -1 0)) (pow 0 -1))",
      "output_weight_simple": 6,
      "output_weight_complex": 16,
      "output_depth": 4,
      "simplification_time": 0.101926845
    },
    "speedup": 1.192946588310469,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (- (* (+ (+ (- (- 0 (/ (* a b) b)) (pow a b)) -1) (* (/ 0 (* -1 d)) (* -1 a))) (* (+ (/ a a) d) (- -1 e))) (- (+ (- -1 b) 0) (- -1 a))) (* (* (+ (* c d) 1) (/ -1 c)) (+ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100134469)",
      "output_term": "(* (+ (* (* (+ d 1) (+ e 1)) (+ 1 (+ (/ (* a b) b) (pow a b)))) (+ b (* a -1))) (* (+ (* d c) 1) (* (/ -1 c) (+ -1 e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.125378649
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100950802)",
      "output_term": "(* (- (- b a) (* (- -1 (+ a (pow a b))) (* (+ d 1) (+ e 1)))) (* (/ (- -1 (* d c)) c) (+ -1 e)))",
      "output_weight_simple": 22,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.103942066
    },
    "speedup": 1.2062358756655849,
    "weight_simple_diff": 4,
    "weight_complex_diff": 11,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (pow (- (/ (- (* (pow (/ a a) 0) (/ 0 b)) (- a b)) (* (pow 1 c) a)) (* (+ 0 a) 1)) (pow d (* (* a d) a))) (/ (/ (- e c) 0) (+ -1 c))) (- (+ (/ (- 0 d) 0) (pow e a)) (* a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.100853847)",
      "output_term": "(+ (pow (- (/ (+ b (* a -1)) (* a (pow 1 c))) a) (pow d (* d (* a a)))) (+ (/ (/ (- e c) 0) (+ c -1)) (- (+ (/ (* d -1) 0) (pow e a)) (* a c))))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 7,
      "simplification_time": 0.102006368
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* d -1) 0) (+ (pow (- 0 (+ a (/ (- a b) (* a (pow 1 c))))) (pow d (* d (* a a)))) (+ (/ (/ (- e c) 0) (+ c -1)) (- (pow e a) (* a c)))))",
      "output_weight_simple": 30,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.084462361
    },
    "speedup": 1.2077139070265868,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -2
  },
  {
    "base_term": "(/ (* (+ (- (/ (* (- (/ (- -1 a) a) (* a -1)) (- 1 -1)) (- (* a a) a)) (- 0 (+ 0 d))) (/ (* b (+ -1 d)) (* a 1))) (/ (- (+ c e) -1) (+ b 0))) (/ (/ 0 (- (/ -1 c) 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.105017874)",
      "output_term": "(/ (* (+ (/ (* (+ a (/ (- -1 a) a)) 2) (- (* a a) a)) (+ d (/ (* b (+ -1 d)) a))) (/ (+ c (+ 1 e)) b)) 0)",
      "output_weight_simple": 26,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.122971251
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100328626)",
      "output_term": "(/ (* (+ (* (- a (/ (+ a 1) a)) (/ 2 (- (* a a) a))) (+ (* b (/ (+ -1 d) a)) d)) (/ (+ 1 (+ c e)) b)) 0)",
      "output_weight_simple": 26,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.10164612699999999
    },
    "speedup": 1.2097977033596177,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (pow (- (- (+ (pow a a) (+ (pow b (- 1 c)) (/ 0 -1))) (- (- (* 1 0) -1) (/ b a))) (- (pow (* 0 1) 0) (pow 0 e))) (/ (/ a (* a 1)) (/ 1 1))) (* (/ (* (/ e c) -1) (+ e e)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.115204267)",
      "output_term": "(pow (- (+ (pow a a) (+ -1 (+ (pow b (- 1 c)) (/ b a)))) (- (pow 0 0) (pow 0 e))) (* -1 (* e (/ 1 (+ e e)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.12458476500000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100218385)",
      "output_term": "(pow (+ (pow a a) (+ (pow b (- 1 c)) (+ (- -1 (- (pow 0 0) (pow 0 e))) (/ b a)))) (- 0 (/ e (+ e e))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.10257407099999999
    },
    "speedup": 1.214583410655506,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (* (* (pow (/ (* (* a (- 0 a)) a) a) (/ (/ b -1) 0)) (/ (pow a 1) b)) (pow b (pow c (- -1 d)))) (/ (pow (pow (pow -1 e) e) (* c 1)) (/ e d))) (/ (- (pow (/ 1 -1) 1) (+ 1 -1)) (+ d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.110487755)",
      "output_term": "(+ (* a (* (/ (pow (pow (pow -1 e) e) c) (/ e d)) (* (pow (* a (* a -1)) (/ (* b -1) 0)) (pow b (+ -1 (pow c (- -1 d))))))) (/ 1 (+ d e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.12380237999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100754252)",
      "output_term": "(+ (* (* (pow (* -1 (* a a)) (/ (- 0 b) 0)) (pow b (pow c (- -1 d)))) (* (pow (pow (pow -1 e) e) c) (/ (/ a b) (/ e d)))) (/ 1 (+ d e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 76,
      "output_depth": 7,
      "simplification_time": 0.100745312
    },
    "speedup": 1.228864922270527,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (+ (* a a) a) (/ (* 1 a) 1)) (pow (/ 1 a) b)) (+ (pow a -1) b)) (+ (pow (/ d 0) 1) (+ -1 c))) (/ (pow (- 0 0) -1) (pow 1 c))) (+ (+ (pow (* e 1) e) (- a d)) (/ b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.115677107)",
      "output_term": "(+ (/ (- (- (pow (* a (+ a 2)) (pow (/ 1 a) b)) (+ b (/ 1 a))) (+ (/ d 0) (+ -1 c))) (/ (pow 0 -1) (pow 1 c))) (+ b (+ (pow e e) (- a d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.125621379
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100208505)",
      "output_term": "(+ (/ (+ (pow (* a (+ a 2)) (pow (/ 1 a) b)) (- 1 (+ (/ 1 a) (+ (/ d 0) (+ c b))))) (/ (pow 0 -1) (pow 1 c))) (+ a (+ (pow e e) (- b d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.10170161700000001
    },
    "speedup": 1.2351954934993805,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (/ (+ (/ (* (- (/ 1 (+ -1 -1)) (pow a a)) (- a -1)) (pow (pow 1 b) -1)) (+ (* b 0) 1)) (* (* (* c -1) c) (* d a))) (- (* (* c 0) c) 1)) (/ (* (* (- 1 1) a) (+ -1 1)) (* -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.107762604)",
      "output_term": "(* -1 (/ (+ 1 (/ (* (- -0.5 (pow a a)) (+ 1 a)) (/ 1 (pow 1 b)))) (* -1 (* a (* d (* c c))))))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.125094579
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100166549)",
      "output_term": "(/ (- -1 (* (+ 1 a) (/ (- -0.5 (pow a a)) (/ 1 (pow 1 b))))) (- 0 (* a (* d (* c c)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.10095583400000001
    },
    "speedup": 1.2391020314883436,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (* (/ (pow a (pow (* (/ 1 -1) (pow a 1)) (+ 1 -1))) (* (pow (- a -1) a) (* a d))) (- (- (* b a) -1) (+ 0 a))) (/ (+ (pow b -1) e) (pow -1 0))) (/ (pow (- (pow d 0) 1) (pow b 0)) (/ b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (/ a (* (pow (+ a 1) a) (* a d))) (+ 1 (* a (+ -1 b)))) (+ (/ 1 b) e)) 0)",
      "output_weight_simple": 20,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.045916595000000004
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (/ a (* (pow (+ a 1) a) (* a d))) (+ (* a b) (- 1 a))) (+ (/ 1 b) e)) 0)",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 8,
      "simplification_time": 0.037048888999999995
    },
    "speedup": 1.239351468811926,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (- (/ (+ (/ (/ -1 a) a) (* a -1)) (/ a a)) (* (+ 1 1) b)) (- b (pow -1 a))) (/ (+ (pow 0 c) -1) (+ b d))) (* (pow (- 1 e) 0) (/ -1 -1))) (- 0 (pow (/ d (pow d 0)) (* 0 c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.1158317)",
      "output_term": "(/ 1 (+ -1 (+ (* -1 (+ (+ a b) (pow a -2))) (* -1 (+ (pow -1 a) (/ (+ -1 (pow 0 c)) (+ b d)))))))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 9,
      "simplification_time": 0.12881048
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.10017352)",
      "output_term": "(/ 1 (+ (- (- (- (- 0 a) (pow a -2)) b) (pow -1 a)) (+ -1 (/ (- 1 (pow 0 c)) (+ b d)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.103596189
    },
    "speedup": 1.243390140538857,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (+ (pow (/ (- (+ (* (- (* 1 0) a) (+ -1 a)) (pow 1 -1)) a) (/ (+ 1 0) 0)) (- 0 (+ (+ 0 0) a))) (+ (- (* (- 1 1) b) (+ 0 a)) (* a 0))) (* (pow (/ (- -1 -1) b) (* a -1)) (+ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 95,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.122301849)",
      "output_term": "(+ (pow (/ (+ 1 (* a (- 0 a))) (/ 1 0)) (- 0 a)) (+ (- 0 a) (* (pow 0 (- 0 a)) (+ d c))))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 7,
      "simplification_time": 0.12924967599999998
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100184642)",
      "output_term": "(+ (pow (/ (- 1 (* a a)) (/ 1 0)) (- 0 a)) (- (* (pow 0 (- 0 a)) (+ d c)) a))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 6,
      "simplification_time": 0.102932447
    },
    "speedup": 1.2556747630802947,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (+ (* (- (* 1 a) b) (/ (- b a) 1)) (/ 1 (+ d c))) (* (/ d 1) a)) (- (/ (/ 1 -1) 1) (- c 0))) (+ (+ (+ -1 c) e) (/ 1 c))) (/ (+ (+ (/ -1 -1) e) (+ 0 1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.114222773)",
      "output_term": "(/ (+ c (+ (/ (- (+ (* (- a b) (- b a)) (/ 1 (+ d c))) (* a d)) (- -1 c)) (+ e (+ -1 (/ 1 c))))) (/ (+ e 2) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.11421219299999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ -1 (+ c (+ (/ (+ (/ 1 (+ d c)) (- (* (- a b) (- b a)) (* a d))) (- -1 c)) (+ e (/ 1 c))))) (/ (+ e 2) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 10,
      "simplification_time": 0.090736997
    },
    "speedup": 1.2587169156590006,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (+ (/ (* (* (- (+ (+ (* 1 a) a) (* a 1)) (/ 0 a)) (- c (/ d b))) (* (* d -1) d)) (/ (- (- -1 1) c) (* a d))) (/ (- (- a b) d) 1)) (- (- (* (pow 0 b) 1) (+ 1 e)) (+ c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.112990715)",
      "output_term": "(pow (+ (/ (* d (* d (* (- c (/ d b)) (* a -3)))) (/ (- -2 c) (* a d))) (- (- a b) d)) (+ (- (pow 0 b) (+ 1 e)) (* c -2)))",
      "output_weight_simple": 28,
      "output_weight_complex": 57,
      "output_depth": 9,
      "simplification_time": 0.130813435
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100020764)",
      "output_term": "(pow (+ a (- (* (* (- c (/ d b)) (* d (* a -3))) (/ d (/ (- -2 c) (* a d)))) (+ d b))) (+ (- -1 e) (- (pow 0 b) (+ c c))))",
      "output_weight_simple": 28,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.10242870600000001
    },
    "speedup": 1.2771169343875144,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (pow (+ (- (- (- 0 1) a) (/ a -1)) (pow 1 -1)) (/ (- 0 -1) 1)) (* 0 0)) (pow (* (- a a) 1) (pow c d))) (+ (pow (- a 1) c) (* 0 b))) (/ (- (- (/ -1 c) d) (- 1 -1)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.121166694)",
      "output_term": "(/ (pow (+ -1 a) c) (/ (+ (- (/ -1 c) d) -2) 0))",
      "output_weight_simple": 13,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.142904541
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10772462)",
      "output_term": "(/ (pow (+ -1 a) c) (/ (+ (/ -1 c) (- -2 d)) 0))",
      "output_weight_simple": 13,
      "output_weight_complex": 31,
      "output_depth": 5,
      "simplification_time": 0.111576878
    },
    "speedup": 1.2807719982987873,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (pow (/ (+ (pow (* (pow (pow 0 a) a) (+ 1 1)) (pow a -1)) (* a (* -1 b))) (+ 1 (/ 0 c))) (+ (pow (- 0 -1) 0) (pow a 1))) (+ (- (pow a d) -1) (- -1 b))) (* (pow (- (* 0 d) c) (- a 0)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.125404928)",
      "output_term": "(/ (+ (pow (+ (pow (* (pow (pow 0 a) a) 2) (/ 1 a)) (* -1 (* a b))) (+ a 1)) (+ (* -1 b) (pow a d))) (pow (- 0 c) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.13687640299999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.10084173)",
      "output_term": "(/ (+ (pow (- (pow (* (pow (pow 0 a) a) 2) (/ 1 a)) (* a b)) (+ a 1)) (- (pow a d) b)) (pow (- 0 c) a))",
      "output_weight_simple": 22,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.10646375200000001
    },
    "speedup": 1.2856620251369684,
    "weight_simple_diff": 3,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (- (pow (* (- (/ (/ (* -1 a) a) (- a a)) (/ c a)) (pow (* c b) 0)) 1) (- a (pow c (* 1 1)))) (- (- (- (/ 0 1) d) (pow -1 1)) (/ 1 1))) (/ (+ (pow (/ 1 -1) a) (/ 0 a)) (pow a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.117164652)",
      "output_term": "(- (+ (- (- (/ -1 0) (/ c a)) (- a c)) d) (pow -1 a))",
      "output_weight_simple": 13,
      "output_weight_complex": 27,
      "output_depth": 6,
      "simplification_time": 0.136954772
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.101493952)",
      "output_term": "(+ (- (/ -1 0) (/ c a)) (- (- d (- a c)) (pow -1 a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 27,
      "output_depth": 5,
      "simplification_time": 0.105797055
    },
    "speedup": 1.2945045776557769,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (/ (- (+ (/ (- (/ (pow 1 a) a) (pow -1 0)) -1) 1) (+ (+ (/ a 1) b) (pow a b))) (* (* (/ 0 -1) -1) (/ 1 a))) (* (* (/ a d) 0) (- a 1))) (+ (pow (* 0 (* e -1)) (+ -1 0)) (- e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.116912424)",
      "output_term": "(+ 1 (* -1 (+ e (/ 1 0))))",
      "output_weight_simple": 8,
      "output_weight_complex": 14,
      "output_depth": 5,
      "simplification_time": 0.134504593
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100720096)",
      "output_term": "(- 1 (+ e (pow 0 -1)))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.10266853499999999
    },
    "speedup": 1.310085831067912,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (pow (- (/ (* a (* 0 (+ (- 1 1) a))) (- (- a b) d)) (pow (+ c c) 0)) (pow (/ -1 0) (* e 1))) (+ (/ (- (- e d) 0) (+ 1 0)) (* 0 d))) (* (- (* (pow -1 1) e) (* -1 c)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.12179842)",
      "output_term": "(+ c (+ (pow -1 (pow (/ -1 0) e)) (* d (+ -1 (+ e (* c -1))))))",
      "output_weight_simple": 14,
      "output_weight_complex": 29,
      "output_depth": 7,
      "simplification_time": 0.132880751
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100165674)",
      "output_term": "(+ (pow -1 (pow (/ -1 0) e)) (+ e (- (* (+ d -1) (- e c)) d)))",
      "output_weight_simple": 14,
      "output_weight_complex": 28,
      "output_depth": 6,
      "simplification_time": 0.10084041199999999
    },
    "speedup": 1.3177331227087807,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (+ (/ (/ (* (+ (* a (/ a 1)) (/ 1 0)) (+ a 0)) (- (* a -1) b)) (- (- b -1) 1)) (/ (- (* 1 -1) b) (/ -1 0))) (+ (* (+ -1 a) a) (/ -1 b))) (+ (/ (+ d (/ d d)) (- a -1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.121985436)",
      "output_term": "(+ (* (+ (/ (/ (* a (+ (* a a) (/ 1 0))) (* -1 (+ a b))) b) (/ (- -1 b) (/ -1 0))) (+ (* a (+ a -1)) (/ -1 b))) (+ (/ (+ 1 d) (+ a 1)) e))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.14403054399999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.10464965)",
      "output_term": "(+ (* (+ (* (+ (* a a) (/ 1 0)) (/ (/ a (- 0 (+ a b))) b)) (/ (- -1 b) (/ -1 0))) (+ (* a a) (- (/ -1 b) a))) (+ (/ (+ 1 d) (- a -1)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.10894227199999999
    },
    "speedup": 1.3220813312944308,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (pow (* (/ (pow (pow (* (pow -1 1) a) -1) (* 0 a)) (pow (* 1 b) 0)) b) (/ (* 1 (* 0 b)) (pow 1 a))) (+ (/ (+ (pow d -1) 1) (* 1 b)) (* 0 0))) (/ (+ (- (+ 0 c) 0) (* c -1)) (+ 0 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.101346648)",
      "output_term": "(pow 1 (/ (+ 1 (/ 1 d)) b))",
      "output_weight_simple": 7,
      "output_weight_complex": 20,
      "output_depth": 5,
      "simplification_time": 0.104188836
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow 1 (/ (+ 1 (/ 1 d)) b))",
      "output_weight_simple": 7,
      "output_weight_complex": 20,
      "output_depth": 5,
      "simplification_time": 0.078663222
    },
    "speedup": 1.324492352982948,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (* (+ (- (+ (- (/ (+ a b) -1) (+ -1 0)) (+ 1 a)) (pow (+ 0 -1) b)) d) (- (+ (* b d) a) 0)) (* (* (* (+ d 1) c) (/ -1 a)) (* 0 d))) (* (+ (- (- c 1) 0) (* b c)) (/ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.114134542)",
      "output_term": "(+ (* (+ a (+ 2 (+ d (* -1 (+ (+ a b) (pow -1 b)))))) (+ a (* b d))) (* (+ -1 (+ c (* b c))) (/ 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 39,
      "output_depth": 9,
      "simplification_time": 0.13674087099999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100388986)",
      "output_term": "(- (* (+ (- 2 (+ a b)) (+ d (- a (pow -1 b)))) (+ a (* b d))) (/ (- 1 (+ c (* b c))) c))",
      "output_weight_simple": 21,
      "output_weight_complex": 35,
      "output_depth": 7,
      "simplification_time": 0.10297133200000001
    },
    "speedup": 1.3279508805421685,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (- (* (- (* (pow (pow (- (* -1 a) 0) b) (- c 0)) (* (pow b a) 0)) (+ b (* -1 d))) (/ (- (+ d a) d) (* 0 1))) (pow (/ 0 (+ c a)) (* d a))) (* (- (- (* c 1) a) (* a e)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.117305394)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.137814714
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100256567)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.103407581
    },
    "speedup": 1.3327331774640392,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (- (pow (* (* (/ (pow 0 -1) 1) (- a 0)) (- -1 b)) (pow (+ c 1) -1)) (pow (- -1 -1) c)) (+ (* (+ 1 b) c) (* a -1))) (/ (- (+ a 1) 0) (/ a e))) (+ (* (- (+ -1 d) a) d) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (- (pow (* (pow 0 -1) (* a (- -1 b))) (/ 1 (+ 1 c))) (pow 0 c)) (+ c (+ (* -1 a) (* b c)))) (/ (+ 1 a) (/ a e))) (* d (- (+ -1 d) a)))",
      "output_weight_simple": 30,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.066729401
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (- (pow (* (pow 0 -1) (* a (- -1 b))) (/ 1 (+ 1 c))) (pow 0 c)) (- (* c (+ 1 b)) a)) (/ (+ 1 a) (/ a e))) (* d (+ d (- -1 a))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.049990411000000005
    },
    "speedup": 1.3348440163854622,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (+ (- (pow (+ (- (+ (/ a a) -1) (+ 1 -1)) (* 0 b)) (/ (pow 1 0) a)) (- (pow 1 e) a)) (* (/ (/ c e) 1) (pow e -1))) (+ (+ b (pow -1 e)) (+ 1 e))) (- (pow 0 (+ (- 1 c) -1)) (/ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.113574789)",
      "output_term": "(pow (* (+ (- (pow 0 (/ 1 a)) (- (pow 1 e) a)) (* c (pow e -2))) (+ 1 (+ b (+ e (pow -1 e))))) (+ 1 (pow 0 (* -1 c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.13803585499999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100474593)",
      "output_term": "(pow (* (- (+ (pow 0 (/ 1 a)) (* c (pow e -2))) (- (pow 1 e) a)) (+ (pow -1 e) (+ 1 (+ b e)))) (+ 1 (pow 0 (- 0 c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.10275002
    },
    "speedup": 1.343414385710095,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (/ (pow (- 1 1) (pow 0 (/ (+ 0 1) a))) (pow (/ (- b -1) 1) (* b a))) (* (- a 1) (pow b 1))) (pow (- (pow (+ a b) 1) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 9,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (+ 1 b) (* a b))) (* b (+ a -1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.045908218
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (+ 1 b) (* a b))) (* b (+ a -1))) (pow (+ a (- b (pow e e))) (/ 1 e))) (+ (/ (- (- b a) d) (pow b d)) (* a e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.034157692
    },
    "speedup": 1.3440081958699082,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (pow (pow a (- -1 (pow (* (- a a) -1) (/ 1 d)))) (+ d (* a (pow 1 -1)))) (* b (- (* a 0) a))) (* (* (/ (- -1 d) a) (- 1 -1)) (- c a))) (pow (* (+ (+ c 0) a) (* b 0)) (+ c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.110530262)",
      "output_term": "(/ (pow (+ (pow (pow a (- -1 (pow 0 (pow d -1)))) (+ a d)) (* a (* -1 b))) (* (/ (- -1 d) a) (* 2 (- c a)))) (pow 0 (+ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.115010598
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (- (pow (pow a (- -1 (pow 0 (/ 1 d)))) (+ a d)) (* a b)) (* (* (/ (+ 1 d) a) -2) (- c a))) (pow 0 (+ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.085365529
    },
    "speedup": 1.3472721290112313,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (/ (pow (- (* (- (- (* a 1) b) (- 0 -1)) (* 1 c)) (pow c (+ a b))) (pow (/ -1 -1) c)) (- (pow (+ e b) e) (pow b 1))) (pow (- (pow -1 c) e) 0)) (/ (+ (* (- b c) 0) (* -1 a)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ -1 (/ (pow (- (* (+ (- a b) -1) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b))) (/ (* a -1) (- -1 d)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.044431829
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ -1 (/ (pow (- (* (- (+ a -1) b) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b))) (- 0 (/ a (- -1 d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.032785081
    },
    "speedup": 1.3552453629747017,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (pow (+ (/ (+ (+ (- (/ 0 -1) -1) (+ -1 a)) (/ b b)) (- (+ b b) c)) (* b 1)) (* (/ (pow -1 d) c) (- 1 -1))) (/ (- (* -1 d) e) (* -1 0))) (- (* (* (- d 0) -1) (- e 0)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.128098962)",
      "output_term": "(* (- (pow (+ b (/ (+ 1 a) (- (+ b b) c))) (* (/ (pow -1 d) c) 2)) (/ (- (* -1 d) e) 0)) (+ -1 (* -1 (* d e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.14118026300000003
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.101239115)",
      "output_term": "(* (- (pow (+ b (/ (+ 1 a) (+ b (- b c)))) (* (pow -1 d) (/ 2 c))) (/ (- (- 0 e) d) 0)) (- -1 (* d e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.103555688
    },
    "speedup": 1.3633269763028373,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (- (/ (- (+ (pow (- (* -1 -1) -1) (* a b)) (pow b -1)) (+ (- -1 c) -1)) (+ d 1)) (* (+ (+ 1 0) d) (+ -1 a))) (- (- (+ 1 c) -1) (/ b -1))) (* (* (* -1 (/ 0 c)) (/ b d)) (+ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.115941251)",
      "output_term": "(* (- (/ (+ (pow 2 (* a b)) (+ 2 (+ (pow b -1) c))) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (+ 2 (+ b c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 38,
      "output_depth": 8,
      "simplification_time": 0.14062819799999998
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100830016)",
      "output_term": "(* (+ (/ (+ (pow 2 (* a b)) (+ 2 (+ (/ 1 b) c))) (+ 1 d)) (* (+ -1 a) (- -1 d))) (+ 2 (+ b c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 40,
      "output_depth": 8,
      "simplification_time": 0.102206188
    },
    "speedup": 1.375926455646697,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (pow (* (+ (+ 0 (pow (+ (/ a 0) a) (pow -1 a))) (+ 0 (/ -1 1))) (pow (/ -1 0) b)) (- (pow (* a b) d) (pow a 0))) (- (/ (* b a) 1) (- -1 a))) (+ (- (- (+ 1 b) b) (* a 1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.113069332)",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (+ -1 (pow (* a b) d))) (* (+ a (+ 1 (* a b))) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.13913001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100037474)",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (+ -1 (pow (* a b) d))) (* (+ 1 (+ a (* a b))) (+ (pow -1 e) (- 1 a))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.10110829499999999
    },
    "speedup": 1.3760494131564578,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (/ (* (pow (* (* (/ (/ 1 1) 0) (- 1 -1)) (- a a)) (* a (/ -1 -1))) (- (pow b 1) a)) (pow (* (/ -1 1) 0) (pow 1 -1))) (+ (pow (pow a a) b) (/ 0 a))) (pow (pow (- c -1) (pow b 0)) (- a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (* (- b a) (pow 0 (+ -1 a))) (pow (pow a a) b)) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 17,
      "output_weight_complex": 37,
      "output_depth": 6,
      "simplification_time": 0.024426367999999997
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (* (pow 0 a) (- b a)) 0) (pow (pow a a) b)) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 16,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.017726395000000002
    },
    "speedup": 1.3779659090300083,
    "weight_simple_diff": 1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (+ (- (/ 0 (+ (- (pow (- -1 0) -1) (* a a)) -1)) (pow (- (/ a -1) 0) (/ a 0))) (* (+ (+ 0 b) a) (* 0 e))) (/ (+ (* 1 a) 1) (pow 1 e))) (* (* (pow (- 0 1) 1) (pow d -1)) (- d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.102011433)",
      "output_term": "(* -1 (+ (/ (+ a 1) (pow 1 e)) (+ -1 (+ (pow (* -1 a) (/ a 0)) (* e (/ 1 d))))))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.103607261
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (/ (- -1 a) (pow 1 e)) (pow (- 0 a) (/ a 0))) (/ (- d e) d))",
      "output_weight_simple": 16,
      "output_weight_complex": 37,
      "output_depth": 5,
      "simplification_time": 0.07485797999999999
    },
    "speedup": 1.3840509856130236,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 2
  },
  {
    "base_term": "(- (* (* (- (+ (/ (* (/ (- a -1) -1) (+ -1 a)) (/ a -1)) (pow (pow b 0) a)) (- (- b b) 1)) (- (/ 1 (+ 1 1)) (- 1 1))) (pow (+ (pow 0 b) 1) -1)) (/ (- (+ c (/ c 0)) (* 0 c)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100682989)",
      "output_term": "(+ (* (+ (+ a 1) (+ (pow 1 a) (/ 1 (* a -1)))) (* 0.5 (/ 1 (+ 1 (pow 0 b))))) (+ c (/ c 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.106518643
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (+ (* (+ a -1) (/ (- -1 a) (- 0 a))) (+ (pow 1 a) 1)) (/ 0.5 (+ 1 (pow 0 b)))) (+ c (/ c 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.075079221
    },
    "speedup": 1.4187499761085693,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (* (+ (/ (pow (/ 0 (* a a)) a) (+ b 0)) (* (+ -1 b) c)) (+ (/ 0 1) 1)) (* (+ 0 (- 1 a)) (- c d))) (+ (pow (+ c 1) e) (+ b 1))) (* (+ (- (* c 0) e) (/ 0 b)) (/ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.120540558)",
      "output_term": "(+ b (+ (+ (/ (pow 0 a) b) (* c (+ b -1))) (+ (pow (+ c 1) e) (* (- c d) (+ a -1)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.14831144400000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.100607033)",
      "output_term": "(+ (/ (pow 0 a) b) (+ (pow (+ c 1) e) (+ (* c (+ b -1)) (- b (* (- 1 a) (- c d))))))",
      "output_weight_simple": 21,
      "output_weight_complex": 38,
      "output_depth": 7,
      "simplification_time": 0.104137196
    },
    "speedup": 1.4241927927462155,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (/ (pow (- (pow 1 (pow -1 a)) (+ (- (+ (* a 1) 0) (* b c)) (* -1 c))) (pow (- (/ b d) 1) (/ c 1))) (/ (* (pow (/ -1 e) b) (* 1 1)) (- b 1))) (+ (pow (* (* -1 d) e) (* b e)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 9,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (pow (+ (pow 1 (pow -1 a)) (+ (* -1 a) (+ c (* b c)))) (pow (+ -1 (/ b d)) c)) (/ (pow (/ -1 e) b) (+ -1 b))) (+ -1 (pow (* -1 (* d e)) (* b e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 8,
      "simplification_time": 0.07063117599999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (pow (- (pow 1 (pow -1 a)) (- (- a c) (* b c))) (pow (+ -1 (/ b d)) c)) (/ (pow (/ -1 e) b) (+ -1 b))) (+ -1 (pow (* d (- 0 e)) (* b e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 71,
      "output_depth": 7,
      "simplification_time": 0.049036772
    },
    "speedup": 1.4403716459966,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (+ (* (/ (/ (* (- (* a a) c) (* -1 1)) (- -1 c)) (+ (/ b 1) e)) (pow (- b c) b)) (* (- (+ -1 e) 0) (- b -1))) (* (- (- c a) -1) (pow -1 1))) (+ (/ 1 (+ (* -1 b) b)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.122502)",
      "output_term": "(+ (* (+ (* (/ (/ (+ c (* (* a a) -1)) (- -1 c)) (+ b e)) (pow (- b c) b)) (* (+ -1 e) (- b -1))) (+ a (- -1 c))) (/ 1 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 49,
      "output_depth": 10,
      "simplification_time": 0.14590784
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10000687)",
      "output_term": "(+ (* (- (* (+ -1 e) (+ 1 b)) (* (pow (- b c) b) (/ (/ (- (* a a) c) (- -1 c)) (+ b e)))) (- -1 (- c a))) (/ 1 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 48,
      "output_depth": 9,
      "simplification_time": 0.100961231
    },
    "speedup": 1.44518681631368,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (- (* (* (pow (pow (+ (+ a a) 1) (+ 0 a)) (pow -1 b)) (- (* 1 c) a)) (+ (/ b b) b)) (* (/ (+ -1 d) 1) c)) (+ (pow 0 (/ a c)) (+ a e))) (- (/ (+ (+ c a) c) (pow -1 c)) (pow d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.122688242)",
      "output_term": "(+ -1 (+ (- (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ 1 b))) (* (+ -1 d) c)) (+ (pow 0 (/ a c)) (+ a e))) (/ (+ a (+ c c)) (pow -1 c))))",
      "output_weight_simple": 31,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.14831113099999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100120794)",
      "output_term": "(+ -1 (+ (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ 1 b))) (+ (/ (+ a (+ c c)) (pow -1 c)) (- (* c (- 1 d)) (+ a (+ (pow 0 (/ a c)) e))))))",
      "output_weight_simple": 31,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.10166817
    },
    "speedup": 1.4587764390762614,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(* (/ (- (+ (* (+ (* (/ a (/ a a)) (+ b b)) (/ a -1)) (+ b -1)) (- 0 (- 0 b))) (+ (+ (/ a 0) b) (pow d 0))) (pow (- -1 (+ 0 -1)) (pow 0 0))) (/ (+ (+ (* 1 1) 1) (+ -1 e)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.125880095)",
      "output_term": "(* (/ (- (+ b (* a (* (+ b -1) (+ b (+ b -1))))) (+ (+ b (/ a 0)) 1)) (pow 0 (pow 0 0))) (+ 1 e))",
      "output_weight_simple": 20,
      "output_weight_complex": 40,
      "output_depth": 9,
      "simplification_time": 0.150621821
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100144662)",
      "output_term": "(* (- (- -1 (/ a 0)) (* (* a (- b (- 1 b))) (- 1 b))) (/ (+ 1 e) (pow 0 (pow 0 0))))",
      "output_weight_simple": 18,
      "output_weight_complex": 38,
      "output_depth": 7,
      "simplification_time": 0.10316260099999999
    },
    "speedup": 1.4600428792988653,
    "weight_simple_diff": 2,
    "weight_complex_diff": 2,
    "depth_diff": 2
  },
  {
    "base_term": "(- (+ (pow (* -1 (pow (- (/ (pow (* 1 a) 1) (/ 0 a)) a) (pow (* -1 1) 0))) (pow (+ (- 0 a) b) (/ 0 0))) (+ (+ (* -1 (- 1 b)) (pow c b)) (* 1 1))) (* (/ (* 1 (pow -1 a)) (* -1 1)) (+ c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.133657846)",
      "output_term": "(+ b (+ (pow (+ a (* -1 (/ a 0))) (pow (+ (* -1 a) b) (/ 0 0))) (+ (pow c b) (* (pow -1 a) (+ -1 c)))))",
      "output_weight_simple": 20,
      "output_weight_complex": 46,
      "output_depth": 7,
      "simplification_time": 0.15182435100000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100614136)",
      "output_term": "(+ (pow (- a (/ a 0)) (pow (- b a) (/ 0 0))) (+ (+ (pow c b) b) (* (pow -1 a) (+ -1 c))))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 5,
      "simplification_time": 0.103533079
    },
    "speedup": 1.4664332642903437,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (+ (pow (+ -1 (+ 1 a)) (pow (+ (* -1 (- a a)) (* a 0)) (- a a))) (- (/ -1 (* 0 1)) (* 0 1))) (* (* (+ (+ 1 1) 0) (pow b -1)) (* 0 1))) (/ (- (- 1 (pow -1 b)) (/ 1 1)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.133198229)",
      "output_term": "(+ (+ (pow a (pow 0 0)) (/ -1 0)) (* -1 (pow -1 b)))",
      "output_weight_simple": 11,
      "output_weight_complex": 27,
      "output_depth": 5,
      "simplification_time": 0.155767877
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.102142859)",
      "output_term": "(+ (pow a (pow 0 0)) (- (/ -1 0) (pow -1 b)))",
      "output_weight_simple": 10,
      "output_weight_complex": 25,
      "output_depth": 4,
      "simplification_time": 0.105822991
    },
    "speedup": 1.4719663045623044,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (+ (/ (pow (/ (* (* (- a -1) -1) (- a a)) (pow -1 -1)) (* (/ 0 a) a)) (* (/ 0 a) b)) (+ (- (/ 0 1) 0) (/ -1 a))) (+ (- (/ b -1) c) (/ 1 -1))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.108203678)",
      "output_term": "(/ (* (* -1 (+ (/ 1 0) (/ -1 a))) (+ b (+ 1 c))) (+ b (+ b (* (/ 1 0) (pow -1 b)))))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.11926368500000001
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (/ (pow 0 0) 0) (/ -1 a)) (/ (- -1 (+ b c)) (+ (* (/ 1 0) (pow -1 b)) (+ b b))))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.079086253
    },
    "speedup": 1.5080204267611466,
    "weight_simple_diff": -1,
    "weight_complex_diff": -7,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (- (/ a 0) (pow 0 a)) (- a 0)) (* (* -1 a) c)) c) (+ (+ (* c 0) -1) (- c c))) (+ (/ (+ (pow 1 d) 0) (- -1 -1)) (+ 1 -1))) (- (- (+ (pow 0 0) -1) (pow 1 c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 9,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.101800583)",
      "output_term": "(+ (/ (+ (- (pow (+ a (- (/ a 0) (pow 0 a))) (* a (* -1 c))) c) 1) (/ (pow 1 d) 0)) (- (+ -1 (pow 0 0)) (pow 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.103346767
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ -1 (+ (/ (+ (pow (+ a (- (/ a 0) (pow 0 a))) (- 0 (* a c))) (- 1 c)) (/ (pow 1 d) 0)) (- (pow 0 0) (pow 1 c))))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.067483432
    },
    "speedup": 1.5314391093802107,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ -1 a))) (+ (pow -1 c) -1)) (- (* -1 c) 1)) (/ (- (+ (* b 1) 0) (/ 0 0)) (/ e 1))) (/ (/ (+ (* d 1) a) (* 0 c)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.109240221)",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 0) (/ b 0)) (* c (+ a -1))) (+ -1 (pow -1 c))) (* -1 (+ 1 c))) (/ (- b (/ 0 0)) e)) (/ (+ a d) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.1147078
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (+ 1 (- (* c (* (pow (pow 0 0) (/ b 0)) (+ a -1))) (pow -1 c))) (- -1 c)) (/ (- b (/ 0 0)) e)) (/ (+ a d) 0))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.074771608
    },
    "speedup": 1.5341090431009587,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": -2
  },
  {
    "base_term": "(- (+ (+ (/ (/ (* (/ (pow (pow a a) a) (* 1 -1)) (pow 1 b)) (- (- b 0) -1)) (+ (/ 1 a) 0)) (+ (/ (- b -1) a) (+ -1 d))) (/ (- (+ c b) -1) (/ e c))) (- (* (- (+ a 0) 1) (+ d 1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.136030774)",
      "output_term": "(+ d (+ (+ (/ (/ (* (* (pow (pow a a) a) -1) (pow 1 b)) (+ 1 b)) (/ 1 a)) (/ (+ 1 (+ b c)) (/ e c))) (+ (+ d (+ e (* a (* -1 (+ 1 d))))) (/ (+ 1 b) a))))",
      "output_weight_simple": 30,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.163517092
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.103821904)",
      "output_term": "(+ -1 (- (+ (/ (+ 1 (+ b c)) (/ e c)) (+ (* (pow (pow a a) a) (- 0 (/ (/ (pow 1 b) (+ 1 b)) (/ 1 a)))) (+ (/ (+ 1 b) a) d))) (- (* (+ a -1) (+ 1 d)) e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 71,
      "output_depth": 10,
      "simplification_time": 0.106516948
    },
    "speedup": 1.535127461594187,
    "weight_simple_diff": -1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (+ (/ (- (/ (pow (* 0 a) 0) (+ 0 0)) (+ b b)) (+ (/ 1 -1) c)) (+ (* -1 1) a)) (* (* (pow d 0) -1) (* a 0))) (pow (/ (- 1 -1) c) (* a e))) (pow (+ (+ d (pow e c)) b) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ d (+ b (pow e c))) (/ 1 a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.045594495
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ d (+ b (pow e c))) (/ 1 a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.029397261
    },
    "speedup": 1.550977657408287,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (- (+ (pow (pow (+ (- 1 (* 1 1)) (/ 0 1)) (pow -1 a)) (+ (- a a) 0)) (* (+ a 0) 1)) (* (- (/ 0 0) a) (/ c 1))) (/ 1 (* (/ d 0) d))) (+ (+ (/ (- c 0) 1) (/ -1 e)) (+ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.121860959)",
      "output_term": "(+ a (+ (/ (- (+ 1 a) (* (- (/ 0 0) a) c)) (/ 1 (* d (/ d 0)))) (+ c (+ a (/ -1 e)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.13630356799999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ a (+ (/ (+ 1 (- a (* (- (/ 0 0) a) c))) (/ 1 (* d (/ d 0)))) (+ c (+ a (/ -1 e)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.087322755
    },
    "speedup": 1.5609169454170335,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (- (- (+ (* (* (pow (* (/ 1 a) a) (- 1 -1)) (+ a 0)) (* 0 (- a 0))) (* (* -1 a) 0)) (pow (+ a (pow -1 -1)) (- a 1))) (pow (/ (/ c a) b) -1)) (- (+ (- (- 1 0) e) (/ 1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.150804217)",
      "output_term": "(/ (- (- 0 (pow (+ a -1) (+ a -1))) (/ 1 (/ (/ c a) b))) (+ -1 (* -1 e)))",
      "output_weight_simple": 17,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.16129232300000002
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100005443)",
      "output_term": "(/ (- (/ -1 (/ (/ c a) b)) (pow (+ a -1) (+ a -1))) (- -1 e))",
      "output_weight_simple": 13,
      "output_weight_complex": 36,
      "output_depth": 6,
      "simplification_time": 0.102399778
    },
    "speedup": 1.5751237566159568,
    "weight_simple_diff": 4,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (+ (+ (- (- (/ (* a (pow a 1)) (* -1 0)) a) 0) (pow (* a (* b a)) (* 1 -1))) (* (+ (pow a 1) a) (+ -1 b))) (* (- (* 0 c) 0) (* a a))) (pow (+ (* 0 (/ 1 d)) (/ c 1)) (+ c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.108228823)",
      "output_term": "(+ (/ (+ (/ (* a a) 0) (+ (/ 1 (* b (* a a))) (* a (+ b (+ -3 b))))) 0) (pow c (+ 1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 40,
      "output_depth": 8,
      "simplification_time": 0.12045597599999999
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (+ (/ (* a a) 0) (+ (/ 1 (* b (* a a))) (* a (+ (+ b b) -3)))) 0) (pow c (+ 1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 40,
      "output_depth": 8,
      "simplification_time": 0.075578741
    },
    "speedup": 1.593781193047394,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (- (/ (* (+ (+ 1 1) (* a 1)) (+ 0 a)) 1) (* 0 (+ (+ a 1) 1))) (* (* (pow a a) a) b)) (+ (/ (pow (- b 0) 0) (/ b 0)) (pow -1 c))) (+ (pow (+ -1 (/ 1 -1)) (- b 0)) (/ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (* a (+ 2 a)) (* a (* (pow a a) b))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ 1 (pow -2 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.044251836999999995
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* a (/ (+ 2 a) (* a (* (pow a a) b)))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ 1 (pow -2 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.027475317
    },
    "speedup": 1.6106033280707917,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(* (/ (+ (pow (/ (/ (* a (pow (pow a 0) a)) (* a a)) (- (+ -1 0) -1)) (+ (- 1 c) e)) (- (* (/ b a) c) (/ e e))) (+ (* (- c 1) 0) (pow e 1))) (* (- (* (+ b a) a) (- 0 1)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100869097)",
      "output_term": "(* (/ (+ (pow (/ (/ (* a (pow 1 a)) (* a a)) 0) (+ (- 1 c) e)) (+ -1 (* c (/ b a)))) e) (+ a (* (/ 1 b) (+ (* a a) 1))))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.108181138
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (pow (/ (* (pow 1 a) (/ a (* a a))) 0) (+ 1 (- e c))) (+ -1 (* b (/ c a)))) (/ (/ (+ 1 (* a (+ a b))) b) e))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.066921492
    },
    "speedup": 1.616538047298766,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (pow (pow (pow a (+ (* 1 (/ b b)) (+ (+ a -1) a))) (/ (- (- c 0) c) (- 0 0))) (/ (* (+ -1 0) 0) (+ b 0))) (pow (pow (- 1 d) a) (+ a e))) (* (+ (+ (+ b 0) c) (- 0 0)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.145900938)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.167278915
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100417392)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.103262729
    },
    "speedup": 1.6199350590472967,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (pow (/ (- (+ (* (* a 1) b) (/ b -1)) (/ -1 b)) (/ (* c -1) 0)) (/ -1 (- 1 b))) (- 0 (pow (+ 1 0) d))) (pow (* (/ 0 1) c) (pow 1 1))) (/ (* (- (+ 1 0) 1) (pow 0 e)) (/ d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.08636414499999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.050278676999999994
    },
    "speedup": 1.717709179181465,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (+ (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) d)) (+ (+ 1 c) a)) (/ (+ (* d e) 1) -1)) (+ (- (* (/ d e) d) (/ c 1)) (/ -1 -1))) (+ (- (pow (pow -1 -1) 1) (* d d)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.146566193)",
      "output_term": "(+ (* (+ (+ (+ (+ (pow 1 c) d) (+ a c)) (pow (- (pow 1 a) (+ b c)) c)) (* d (* e -1))) (+ 1 (- (* d (/ d e)) c))) (+ c (- -1 (* d d))))",
      "output_weight_simple": 28,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.191906608
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.103119573)",
      "output_term": "(+ c (+ (* (+ a (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) (+ d (- c (* d e)))))) (+ (/ (* d d) e) (- 1 c))) (- -1 (* d d))))",
      "output_weight_simple": 26,
      "output_weight_complex": 47,
      "output_depth": 10,
      "simplification_time": 0.111291337
    },
    "speedup": 1.7243624991224609,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": -2
  },
  {
    "base_term": "(* (+ (- (* (pow (+ (- (- (/ 0 1) 0) (* a 0)) (pow b 1)) (* 1 (+ a 0))) (+ (* 1 b) b)) (/ (+ (+ c -1) 0) (/ -1 c))) (pow (/ (pow d 1) d) (/ c 1))) (* (+ (* (+ -1 d) d) (- -1 0)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.112158569)",
      "output_term": "(* b (* (+ (- (* (pow b a) (+ b b)) (/ (+ c -1) (/ -1 c))) (pow 1 c)) (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 20,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.112147782
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (+ (* 2 (* b (pow b a))) (/ (- 1 c) (/ -1 c))) (pow 1 c)) (* b (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.064747227
    },
    "speedup": 1.732086255987457,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (- (* (pow (* (- (/ (* a 0) b) (pow 1 c)) (+ b b)) (/ (+ d e) d)) (- (- a 1) 1)) (/ (+ (pow d -1) b) (/ a a))) (* b (pow e (* e e)))) (* (+ (pow (+ 0 0) e) (/ a e)) (- d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.10231682)",
      "output_term": "(+ (pow (- (* (pow (* b (* (pow 1 c) -2)) (/ (+ d e) d)) (+ a -2)) (+ b (/ 1 d))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.10421253
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (- (* (pow (* b (* (pow 1 c) -2)) (/ (+ d e) d)) (+ a -2)) (+ b (/ 1 d))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.059866045
    },
    "speedup": 1.7407618959963032,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (+ (+ (- (* (* (+ a b) c) (/ 0 b)) b) a) (/ (pow (* 1 -1) b) (- 1 e))) (- (* (+ b e) a) (+ d a))) (/ (+ (pow 0 -1) 0) (* b 1))) (/ (+ (+ c (+ e c)) (* d 1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.109203172)",
      "output_term": "(/ (pow (* (+ a (+ (/ (pow -1 b) (- 1 e)) (- 0 b))) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (+ d (+ c (+ c e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.1155798
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (+ a (- (/ (pow -1 b) (- 1 e)) b)) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (+ c (+ c (+ e d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.065660948
    },
    "speedup": 1.760251770961333,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (+ (- (+ (+ (pow a (+ (* a a) 0)) (+ a 1)) (/ (+ a -1) -1)) (* (+ a -1) -1)) (+ (pow (* 0 1) c) (/ b 0))) (- (- 1 (pow 1 b)) (pow 1 0))) (* (+ (/ c (pow -1 -1)) (pow a 0)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.178736947)",
      "output_term": "(pow (+ a (+ (pow 1 b) (+ (/ b 0) (+ (pow 0 c) (+ (pow a (* a a)) 1))))) (* (+ 1 (* -1 c)) (pow 1 d)))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 9,
      "simplification_time": 0.224662563
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.113275459)",
      "output_term": "(pow (+ a (+ (pow a (* a a)) (+ (pow 1 b) (+ (pow 0 c) (+ 1 (/ b 0)))))) (* (- 1 c) (pow 1 d)))",
      "output_weight_simple": 20,
      "output_weight_complex": 45,
      "output_depth": 8,
      "simplification_time": 0.127344986
    },
    "speedup": 1.7642042302317267,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (pow (pow (* (- (+ 1 (+ (pow (pow a b) 1) (* 0 0))) (* (- 0 0) a)) (/ 0 (/ a 1))) (+ (* 1 (+ c 1)) (pow -1 b))) (- (+ (* 0 1) -1) (pow c 1))) (* (- (pow (* 1 e) e) (/ a b)) (+ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (pow 0 (+ 1 (+ c (pow -1 b)))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 19,
      "output_weight_complex": 43,
      "output_depth": 7,
      "simplification_time": 0.06906599999999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (pow 0 (+ (+ 1 c) (pow -1 b))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 19,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.039077574000000004
    },
    "speedup": 1.7674075673172542,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (* (* (- (pow (- (pow (pow a 1) 0) a) (+ a -1)) (+ b (- c a))) (/ 1 (pow 0 -1))) (- (* (/ a -1) d) (* -1 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (pow (- (/ (pow 0 e) 0) (+ 0 1)) (/ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100558016)",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ b (- c a))) (* (/ 1 (pow 0 -1)) (+ -1 (* a (* -1 d))))) (pow (pow -1 (- 1 b)) (pow 1 e))) (+ -1 (/ (pow 0 e) 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.107017088
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ c (- b a))) (/ (- -1 (* a d)) (pow 0 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (+ -1 (/ (pow 0 e) 0)))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.0594054
    },
    "speedup": 1.80147070805011,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(* (pow (- (+ (/ (/ (pow (/ (- 1 1) -1) 0) -1) (* a a)) (pow (- b (- a 1)) (- b a))) (/ (+ (/ e 0) -1) (+ 0 d))) (+ (+ (- a 0) -1) (- 0 -1))) (- (pow (pow (pow e 0) 1) (* -1 1)) (pow b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.151116047)",
      "output_term": "(* (pow (- (+ (/ (* -1 (pow 0 0)) (* a a)) (pow (+ 1 (- b a)) (- b a))) (/ (+ -1 (/ e 0)) d)) a) (- 1 (pow b c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.185198217
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100111271)",
      "output_term": "(* (pow (+ (- (pow (+ 1 (- b a)) (- b a)) (/ (pow 0 0) (* a a))) (/ (- 1 (/ e 0)) d)) a) (- 1 (pow b c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.10185361
    },
    "speedup": 1.8182783801182894,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) (+ 0 1)) (/ 0 0)) (/ (+ 1 b) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ b (+ a c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (pow e -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.101042022)",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ a (+ b c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (/ 1 e))))",
      "output_weight_simple": 34,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.103333998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (/ (pow b (* b e)) (- e c)) (- (pow 0 c) b))) (/ (+ a (+ b c)) (pow 0 a))) (- 1 (+ (/ e (/ b d)) (/ -1 e))))",
      "output_weight_simple": 35,
      "output_weight_complex": 97,
      "output_depth": 9,
      "simplification_time": 0.056165470999999995
    },
    "speedup": 1.8398136107502776,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (- (+ (* (- (* (+ (pow a 1) 1) (* -1 a)) (pow a b)) (+ (- 0 a) a)) (+ (+ 0 0) 0)) (/ (+ (pow 0 0) 0) (pow b 1))) (* a (* (- c b) 1))) (- (- (- (- c 0) -1) (pow a -1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.151855346)",
      "output_term": "(pow (- (- 0 (/ (pow 0 0) b)) (* a (- c b))) (- (+ 1 c) (/ 1 a)))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.18753193699999998
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100066923)",
      "output_term": "(pow (- 0 (+ (/ (pow 0 0) b) (* a (- c b)))) (+ 1 (- c (pow a -1))))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.10078629600000001
    },
    "speedup": 1.8606888480156067,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (- (pow (pow (* (+ (pow 1 1) a) (* a a)) (+ a 1)) (- a (pow b c))) (+ (- b d) 1)) (pow (/ (pow 1 d) d) (* 1 -1))) (- (/ e (/ b b)) (pow -1 b))) (pow d (- (pow (- 0 b) c) (- c c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100539334)",
      "output_term": "(+ (pow (* (/ 1 (/ (pow 1 d) d)) (- (pow (pow (* a (+ a (* a a))) (+ 1 a)) (- a (pow b c))) (+ 1 (- b d)))) (- e (pow -1 b))) (pow d (pow (* b -1) c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.103030091
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (+ (pow (pow (* a (+ a (* a a))) (+ 1 a)) (- a (pow b c))) (- -1 (- b d))) (/ (pow 1 d) d)) (- e (pow -1 b))) (pow d (pow (- 0 b) c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.053689624000000005
    },
    "speedup": 1.9189944597116193,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (/ (* (* (* (pow (+ a a) a) (- -1 a)) (/ a a)) 0) (pow (pow b 1) -1)) (/ b (+ a (+ b a)))) (/ (+ (* (+ -1 -1) b) (+ -1 a)) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.103449049)",
      "output_term": "(/ (* (pow 0 (/ b (+ a (+ a b)))) (/ (+ a (+ -1 (* b -2))) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.103434914
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (pow 0 (/ b (+ a (+ a b)))) (/ (/ (+ -1 (+ a (* b -2))) (- -1 d)) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.053369240000000005
    },
    "speedup": 1.9380998118017043,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (* (/ (+ (+ a (+ (* (+ 1 -1) a) (pow 1 0))) (+ (/ 1 a) a)) (+ (* 0 a) 0)) (pow (* (- 0 b) 0) (+ -1 -1))) (* (- -1 (- 0 0)) (- 1 b))) (/ (/ (- (/ 0 0) a) (/ a 0)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100826854)",
      "output_term": "(* (+ -1 (+ b (* (+ 1 (+ (pow a -1) (+ a a))) (pow 0 -3)))) (/ (- (/ 0 0) a) (/ a 0)))",
      "output_weight_simple": 19,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.107084633
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (+ b (+ -1 (* (/ (+ 1 (+ (/ 1 a) (+ a a))) 0) (pow 0 -2)))) (/ (- (/ 0 0) a) (/ a 0)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.054643009
    },
    "speedup": 1.95971332764636,
    "weight_simple_diff": -1,
    "weight_complex_diff": -6,
    "depth_diff": -1
  },
  {
    "base_term": "(- (+ (+ (* (- (- (- (* a (/ 1 b)) (- b d)) (/ d 1)) (- 1 0)) (- (+ c d) -1)) (/ (pow (- b 1) -1) (+ 0 1))) (/ (/ (pow c b) a) (- a 1))) (* (+ (- 0 (/ e e)) (+ -1 c)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.158543743)",
      "output_term": "(- (+ (* (+ (- (- (* a (/ 1 b)) (- b d)) d) -1) (+ 1 (+ d c))) (+ (/ 1 (+ b -1)) (/ (/ (pow c b) a) (+ a -1)))) (* (+ c -2) (pow e -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.202634433
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100611897)",
      "output_term": "(+ (* (+ (/ a b) (- -1 b)) (+ d (+ 1 c))) (+ (/ 1 (+ b -1)) (- (/ (/ (pow c b) (+ a -1)) a) (/ (+ c -2) e))))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.10265006799999998
    },
    "speedup": 1.9740311618692745,
    "weight_simple_diff": 4,
    "weight_complex_diff": 5,
    "depth_diff": 2
  },
  {
    "base_term": "(* (- (pow (/ (pow (* -1 (+ (+ -1 (pow a 1)) (+ a a))) b) (+ 1 (* (+ 0 a) -1))) (pow (pow 1 (pow a b)) c)) (+ (- (pow b (pow -1 a)) (* 0 1)) (+ a 0))) (- (- (+ (* c c) d) (- 0 d)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.122374577)",
      "output_term": "(* (- (pow (/ (pow (+ 1 (* a -3)) b) (+ 1 (* -1 a))) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ (+ d d) (+ 1 (* c c))))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.147241593
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (- (pow (/ (pow (+ 1 (* a -3)) b) (- 1 a)) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ 1 (+ (* c c) (+ d d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.06976963500000001
    },
    "speedup": 2.110396492686252,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (- (/ (+ (pow 1 (* a (pow a 0))) (* -1 -1)) (- (* a 0) a)) (- (/ 1 a) 0)) (* (pow (- b d) d) (* 0 1))) (- (/ b (pow 0 0)) (* 1 1))) (- (* (+ (+ e 1) a) (+ 0 a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (pow 0 (+ -1 (/ b (pow 0 0)))) (- (+ a (* a (+ a e))) (pow -1 e)))",
      "output_weight_simple": 15,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.077756515
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow 0 (+ -1 (/ b (pow 0 0)))) (- (* a (+ 1 (+ a e))) (pow -1 e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.035210191
    },
    "speedup": 2.2083525477041572,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (/ (- (/ (- (+ (/ (pow 1 1) a) (/ -1 1)) (+ b c)) (+ (/ 1 a) 0)) (pow 1 (+ c d))) (- (- (pow e 0) e) (* e 0))) (pow (+ (* 1 c) d) (* b d))) (* (/ (- (- 0 c) 1) (- a c)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.105166123)",
      "output_term": "(/ (+ (/ (- (/ (- (+ -1 (/ 1 a)) (+ b c)) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.11067802399999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (/ (+ (/ 1 a) (- -1 (+ b c))) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.049811064
    },
    "speedup": 2.221956631964336,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (* (/ (+ (pow (- (pow -1 0) a) (pow -1 -1)) a) (+ (+ 1 1) a)) (- (+ a b) 0)) (/ (* 0 (pow 0 d)) (+ -1 -1))) (+ (- a (* -1 0)) (/ 1 c))) (/ (+ (/ (/ c 1) -1) (- e b)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100648972)",
      "output_term": "(+ (* (/ (+ a (/ 1 (- 1 a))) (+ a 2)) (* (+ a b) (+ a (/ 1 c)))) (/ (+ (* -1 c) (- e b)) (* -1 a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.10553765600000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (+ a (/ 1 (- 1 a))) (* (+ a b) (/ (+ a (/ 1 c)) (+ a 2)))) (/ (- e (+ b c)) (- 0 a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.04700874
    },
    "speedup": 2.2450645560804228,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (* (* (* (+ (pow (* (- a 1) 1) (* b -1)) 1) (+ (/ 1 -1) a)) (+ a (pow a 0))) (pow (/ (+ 0 1) -1) (/ b a))) (pow (* (pow a b) 0) (- 0 c))) (/ (- (+ (/ c a) 1) (/ 0 -1)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.118545447)",
      "output_term": "(pow (/ (* (+ 1 (pow (- a 1) (* b -1))) (* (- a 1) (* (+ a 1) (pow -1 (/ b a))))) (pow 0 (- 0 c))) (/ (+ 1 (/ c a)) (- d 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 61,
      "output_depth": 8,
      "simplification_time": 0.139847369
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (+ 1 (pow (+ a -1) (- 0 b))) (* (+ a 1) (* (+ a -1) (/ (pow -1 (/ b a)) (pow 0 (- 0 c)))))) (/ (+ 1 (/ c a)) (+ -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.06189921599999999
    },
    "speedup": 2.259275287105414,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (* (+ (+ -1 a) 1) (+ (- a b) a)) (/ (* d d) b)) (* (+ 0 c) 1)) (+ (+ 1 (pow -1 b)) (+ -1 1))) (pow (+ (- c 1) b) (* 0 e))) (- (* (+ 1 (pow e a)) (pow c 0)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.190814908)",
      "output_term": "(/ (+ 1 (+ (pow (pow (* a (+ a (- a b))) (/ (* d d) b)) c) (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.25224554
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.100362037)",
      "output_term": "(/ (+ 1 (+ (pow (pow (* a (- (+ a a) b)) (* d (/ d b))) c) (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.102945814
    },
    "speedup": 2.450274860131758,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (/ (pow (* (pow (+ a a) (- -1 b)) (- 0 a)) (* (- c 0) 0)) (* (* a d) c)) (- (- (pow 0 -1) b) (- -1 -1))) (- (/ (/ 0 c) 1) (+ a 0))) (+ (* (- (+ -1 b) 0) (- 0 -1)) (/ e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.10199899)",
      "output_term": "(* (+ (/ 1 (* a (* c d))) (* -1 (+ a (- (pow 0 -1) b)))) (+ b (+ -1 (/ e c))))",
      "output_weight_simple": 20,
      "output_weight_complex": 40,
      "output_depth": 7,
      "simplification_time": 0.10995184599999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (- (/ 1 (* a (* c d))) (+ (pow 0 -1) (- a b))) (+ -1 (+ b (/ e c))))",
      "output_weight_simple": 19,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.044223842
    },
    "speedup": 2.486257209403018,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (pow (+ (/ a (- (- (/ (- (- 1 a) 0) (* 0 a)) 1) (+ (/ b 0) a))) (/ (* (- 1 c) a) (/ 0 e))) (- (pow (* (- a -1) d) (+ d b)) (pow d e))) (* (pow (+ (* 0 a) c) (* -1 -1)) (pow b e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ (/ a (- (+ (/ (- 1 a) 0) -1) (+ a (/ b 0)))) (/ (* a (- 1 c)) 0)) (- (pow (+ d (* a d)) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.096961246
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ (/ a (+ (/ (- 1 a) 0) (- -1 (+ a (/ b 0))))) (/ (* a (- 1 c)) 0)) (- (pow (* (+ a 1) d) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.038924497
    },
    "speedup": 2.4910083231133338,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (* (/ (- (/ (pow (pow (- 0 1) a) (* 1 0)) (* a 0)) (+ a (+ b 0))) (* -1 (* c d))) (+ (* (/ 0 d) c) b)) (pow (* (/ a 0) c) (pow 0 d))) (/ (pow (pow (- 1 d) e) (* 1 1)) (/ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100132865)",
      "output_term": "(pow (- (* b (/ (- (/ 1 0) (+ a b)) (* -1 (* c d)))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.100118972
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (* b (/ (- (/ 1 0) (+ a b)) (- 0 (* c d)))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.039761137
    },
    "speedup": 2.518010790284996,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (- (pow (+ (- (pow (pow (pow -1 -1) a) (* 0 a)) a) a) (pow (- (+ b b) a) 0)) (/ 1 (/ (pow -1 b) 0))) (pow (/ (pow (pow a a) a) (/ 1 a)) (* -1 -1))) (/ (+ (+ 1 (pow -1 a)) (+ 1 a)) (* 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.110881439)",
      "output_term": "(/ (* (- 1 (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ 1 a))) (/ (+ (pow -1 a) (+ a 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.11751610500000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (+ 1 (/ -1 (/ (pow -1 b) 0))) (/ (/ (pow (pow a a) a) (/ 1 a)) (/ (+ a (+ (pow -1 a) 2)) 0)))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.045705732
    },
    "speedup": 2.5711458904104196,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (pow (+ (* (* (* (+ a 1) -1) (- 1 0)) (pow a b)) (* c (/ d a))) (- (pow 1 -1) a)) (pow (+ (pow 1 a) -1) c)) (+ (* (- b b) b) (/ c c))) (/ (/ (+ (- a 1) a) (pow a e)) (- a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100545239)",
      "output_term": "(pow (pow (pow (+ (* -1 (* (+ a 1) (pow a b))) (* c (/ d a))) (- 1 a)) (pow (+ -1 (pow 1 a)) c)) (/ (/ (+ a (+ a -1)) (pow a e)) a))",
      "output_weight_simple": 26,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.103470558
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (pow (+ (* (- -1 a) (pow a b)) (* d (/ c a))) (- 1 a)) (pow (+ -1 (pow 1 a)) c)) (/ (/ (+ a (+ a -1)) a) (pow a e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 7,
      "simplification_time": 0.039717723
    },
    "speedup": 2.605148286068665,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) (/ b 1)) (/ (- b 0) 0)) (* (+ b c) 1)) (- (/ (* -1 1) -1) (+ e -1))) (pow (/ (/ d a) -1) (* d d))) (- (* (- (pow 1 a) -1) (+ 1 b)) (- a d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.138056007)",
      "output_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) b) (/ b 0)) (+ b c)) (+ (* -1 e) 2)) (pow (* -1 (/ d a)) (* d d))) (- (* (+ 1 (pow 1 a)) (+ 1 b)) (- a d)))",
      "output_weight_simple": 31,
      "output_weight_complex": 64,
      "output_depth": 10,
      "simplification_time": 0.16174866300000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (* (pow (pow (pow (- a (- (pow 1 a) b)) b) (/ b 0)) (+ b c)) (- 2 e)) (+ (pow (/ (- 0 d) a) (* d d)) (- (* (+ 1 (pow 1 a)) (+ 1 b)) (- a d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.060164458
    },
    "speedup": 2.6884421197644635,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(* (/ (/ (+ (pow a (* (- a (* (- -1 a) 0)) (+ 1 0))) (+ (pow (* a -1) a) (pow 1 1))) (pow (* 0 (* b b)) (* a c))) (- (pow (/ -1 -1) 0) (pow 0 e))) (+ (pow (- (- b 0) -1) (+ -1 a)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.108761366)",
      "output_term": "(* (/ (/ (+ (pow (* a -1) a) (+ 1 (pow a a))) (pow 0 (* a c))) (- 1 (pow 0 e))) (+ (pow (+ 1 b) (+ a -1)) (* a b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.113830861
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (* (+ (pow (- 0 a) a) (+ 1 (pow a a))) (+ (pow (+ 1 b) (- a 1)) (* a b))) (pow 0 (* a c))) (- 1 (pow 0 e)))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.040681781
    },
    "speedup": 2.7980795875185507,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (/ (/ (- (pow (- 0 (+ (- a a) -1)) (* a b)) (/ (+ 0 1) 0)) (- (* b a) c)) (+ (+ (+ 1 1) 1) (* 1 -1))) (- (* (* 0 1) -1) (pow a 0))) (pow (+ (/ d (- a 1)) (pow 0 0)) (+ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(* (+ -1 (* (/ (- (pow 1 (* a b)) (/ 1 0)) (- (* a b) c)) 0.5)) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.094870509
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (+ -1 (* (- (pow 1 (* a b)) (/ 1 0)) (/ 0.5 (- (* a b) c)))) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.033534658
    },
    "speedup": 2.829028672366362,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (/ (- (- (+ 1 -1) 1) (pow a 0)) -1) a) (- (pow (/ a -1) a) (+ b -1))) (/ (- b (- b -1)) (* c e))) (- (+ (+ e 1) e) (+ -1 d))) (pow (pow (+ d (* b 1)) (* -1 a)) (pow 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.171221747)",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (- (pow (* -1 a) a) (+ -1 b))) (/ -1 (* c e))) (+ 2 (+ (+ e e) (* -1 d)))) (pow (+ b d) (* -1 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.215328821
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (+ (pow (- 0 a) a) (- 1 b))) (/ -1 (* c e))) (+ (+ e e) (- 2 d))) (pow (+ b d) (- 0 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.072691846
    },
    "speedup": 2.962214235142687,
    "weight_simple_diff": -1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (/ (- (* (pow (+ (+ -1 0) (/ 0 0)) (/ a 0)) (+ (* a b) a)) (* (+ 1 1) e)) (pow (/ 0 (pow 1 -1)) (- d 0))) (/ (pow (/ 0 d) b) (pow e -1))) (- (* (pow (/ d b) a) (- d d)) (/ 0 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.104086554)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.11660469000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.038009676
    },
    "speedup": 3.0677633242651163,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (+ (/ (- (/ (pow (- (+ 0 a) -1) (/ a -1)) (pow b 1)) (- (* a a) c)) (* a (* b 1))) (pow (+ (+ 0 b) d) (pow -1 -1))) (* (+ (pow -1 1) -1) (* c d))) (pow (* (* 0 1) a) (pow (/ d c) a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.102451338)",
      "output_term": "(pow (+ (/ (- (/ (pow (+ a 1) (* a -1)) b) (- (* a a) c)) (* a b)) (+ (/ 1 (+ b d)) (* c (* d 2)))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.10426695700000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (- (/ (pow (+ a 1) (- 0 a)) b) (- (* a a) c)) (* a b)) (+ (/ 1 (+ b d)) (* d (* c 2)))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.033490672
    },
    "speedup": 3.1133133727504787,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (- (/ (pow a (+ 0 (- (+ -1 a) 1))) 0) (- (+ (* 0 0) b) b)) (+ (pow 0 (* a 1)) (/ a b))) (- (pow (pow (pow 1 1) b) (pow 0 d)) (- a e))) (+ (* (pow (- e 1) -1) (- e 1)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100226555)",
      "output_term": "(/ (- (+ (/ (pow a (+ a -2)) 0) (+ (pow 0 a) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) 0)",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.104988353
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (pow 0 a) (+ (/ a b) (- (/ (pow a (+ a -2)) 0) (- (pow (pow 1 b) (pow 0 d)) (- a e))))) 0)",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.033677165
    },
    "speedup": 3.1174937973549732,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (+ (pow (* (* (- (- (/ (pow -1 a) a) (/ 0 c)) (/ 1 a)) (pow (/ a -1) 0)) (/ (+ c a) c)) (+ b (* (+ 1 0) d))) (* (* (- a a) a) (pow a 0))) (- (* (* (- b e) 1) (/ a 1)) (/ 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.131472007)",
      "output_term": "(+ (pow (* (+ (/ 1 a) (/ 1 c)) (+ -1 (pow -1 a))) (+ b d)) (- (* a (- b e)) (/ 1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.15363663900000002
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* (+ a c) (/ (/ (+ -1 (pow -1 a)) a) c)) (+ b d)) (+ (* a (- b e)) (/ -1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.048537608
    },
    "speedup": 3.16531129840597,
    "weight_simple_diff": 0,
    "weight_complex_diff": -4,
    "depth_diff": -2
  },
  {
    "base_term": "(pow (/ (+ (- (/ (/ (pow (/ (- a -1) a) (+ 1 -1)) (pow b c)) (pow (+ a d) a)) (* (* e -1) b)) (pow (/ a (pow 1 c)) (pow 1 -1))) (* (/ (* 1 d) 0) (pow c b))) (/ (/ (pow (+ 0 0) c) d) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 137,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.102405641)",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (/ a (pow 1 c)) (* b e))) (* (/ d 0) (pow c b))) (/ (pow 0 c) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.10340779
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (/ a (pow 1 c)) (* b e))) (* (/ d 0) (pow c b))) (/ (pow 0 c) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.030088300999999998
    },
    "speedup": 3.436810539750982,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (* (- (/ (pow (+ (- (/ 1 a) 0) (* 1 0)) (- a 0)) (+ (* 0 a) a)) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow (* b 0) -1) (+ e d))) (* (pow e (+ (+ 0 a) 0)) (- 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (* (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.07946410500000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (- 0 (pow 1 a)) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.022099606
    },
    "speedup": 3.5957249645084173,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (pow (/ (+ (* (- (- (- a a) 1) 0) (+ 1 1)) (+ (* a a) a)) a) (* (+ (pow a -1) b) (+ a d))) (pow (+ (* (* -1 -1) d) (* 1 e)) (* d d))) (* (pow (+ (+ b 1) d) (* 1 -1)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.108088656)",
      "output_term": "(+ (- (pow (+ a (* (pow a -1) (+ a -2))) (* (+ (pow a -1) b) (+ a d))) (pow (+ d e) (* d d))) (* (/ 1 (+ 1 (+ b d))) (/ b a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.108071686
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (+ a (+ -2 (* a a))) a) (* (+ (/ 1 a) b) (+ a d))) (- (/ (/ b a) (+ 1 (+ b d))) (pow (+ d e) (* d d))))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.030011153999999998
    },
    "speedup": 3.601050662696943,
    "weight_simple_diff": 1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (pow (/ (pow (+ (+ (* a a) a) (/ b -1)) (/ a 0)) (* (pow -1 1) a)) (/ (- -1 -1) a)) (+ (+ (* 1 1) a) b)) (pow (- (* a a) 0) (+ e e))) (* (+ (+ (/ -1 e) 0) (pow -1 0)) (* e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.12452537)",
      "output_term": "(/ (- (/ 1 (+ 1 (+ a b))) (pow (* a a) (+ e e))) (* d (+ -1 e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.136205988
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ 1 (+ 1 (+ a b))) (pow (* a a) (+ e e))) (* e (* (+ 1 (/ -1 e)) d)))",
      "output_weight_simple": 18,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.033852782
    },
    "speedup": 4.023479901888122,
    "weight_simple_diff": -2,
    "weight_complex_diff": -7,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (- (/ (* (+ (pow (/ a (- -1 1)) (pow -1 0)) (+ -1 a)) (pow -1 (pow b 1))) (- (* b 0) a)) (- (* a (pow -1 b)) (* b 1))) (pow (pow (/ c c) c) (pow -1 -1))) (+ (/ (- (- -1 -1) -1) (* 0 d)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.105051578)",
      "output_term": "(/ (* (- (/ (* (+ -1 (* a 0.5)) (pow -1 b)) (- 0 a)) (- (* a (pow -1 b)) b)) (/ 1 (pow 1 c))) (/ 1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.110016912
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (- (* (+ -1 (* a 0.5)) (/ (pow -1 b) (- 0 a))) (- (* a (pow -1 b)) b)) (pow 1 c)) (/ 1 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.025476820000000004
    },
    "speedup": 4.318314138106717,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (pow (/ (/ (+ (pow a 0) b) (- 1 0)) b) (/ (- 0 0) a)) (/ (- b 1) 0)) (- (pow (pow 1 a) 1) (pow 1 -1))) (- (* (- 1 0) -1) (* a 1))) (/ (pow (+ (+ c 1) 0) (* 0 -1)) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- 1 (/ (+ b -1) 0)) (+ (pow 1 a) -1)) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 15,
      "output_weight_complex": 36,
      "output_depth": 7,
      "simplification_time": 0.08069201200000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ -1 (- (/ (- 1 (/ (+ b -1) 0)) (+ (pow 1 a) -1)) a)) (/ 1 0))",
      "output_weight_simple": 15,
      "output_weight_complex": 36,
      "output_depth": 8,
      "simplification_time": 0.015332150999999999
    },
    "speedup": 5.262928339278684,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  }
]