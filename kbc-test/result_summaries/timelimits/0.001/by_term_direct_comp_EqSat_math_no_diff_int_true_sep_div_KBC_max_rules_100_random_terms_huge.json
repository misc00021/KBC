[
  {
    "base_term": "(- (/ (- (pow (pow (- (/ (pow (/ a 1) a) (- -1 b)) a) (/ c (/ 0 1))) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ (/ (+ 0 a) 1) (/ 0 0))) (pow (/ (* (/ e e) d) (+ 0 e)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow (/ a 1) a) (- -1 b)) a) (/ c 0)) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ (/ a 1) (/ 0 0))) (pow (/ (* d (/ e e)) e) (* a a)))",
      "output_weight_simple": 32,
      "output_weight_complex": 94,
      "output_depth": 10,
      "simplification_time": 0.000464703
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001831)",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow a a) (- -1 b)) a) (/ c 0)) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ a (/ 0 0))) (pow (/ d e) (* a a)))",
      "output_weight_simple": 29,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.001011865
    },
    "speedup": 0.45925395186116724,
    "weight_simple_diff": 3,
    "weight_complex_diff": 12,
    "depth_diff": 1
  },
  {
    "base_term": "(- (/ (- (pow (pow (- (/ (pow (/ a 1) a) (- -1 b)) a) (/ c (/ 0 1))) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ (/ (+ 0 a) 1) (/ 0 0))) (pow (/ (* (/ e e) d) (+ 0 e)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow (/ a 1) a) (- -1 b)) a) (/ c 0)) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ (/ a 1) (/ 0 0))) (pow (/ (* d (/ e e)) e) (* a a)))",
      "output_weight_simple": 32,
      "output_weight_complex": 94,
      "output_depth": 10,
      "simplification_time": 0.000466824
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001004037)",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow a a) (- -1 b)) a) (/ c 0)) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ a (/ 0 0))) (pow (/ d e) (* a a)))",
      "output_weight_simple": 29,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.00101394
    },
    "speedup": 0.4604059411799515,
    "weight_simple_diff": 3,
    "weight_complex_diff": 12,
    "depth_diff": 1
  },
  {
    "base_term": "(- (/ (- (pow (pow (- (/ (pow (/ a 1) a) (- -1 b)) a) (/ c (/ 0 1))) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ (/ (+ 0 a) 1) (/ 0 0))) (pow (/ (* (/ e e) d) (+ 0 e)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow (/ a 1) a) (- -1 b)) a) (/ c 0)) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ (/ a 1) (/ 0 0))) (pow (/ (* d (/ e e)) e) (* a a)))",
      "output_weight_simple": 32,
      "output_weight_complex": 94,
      "output_depth": 10,
      "simplification_time": 0.00047093600000000003
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001605)",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow a a) (- -1 b)) a) (/ c 0)) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ a (/ 0 0))) (pow (/ d e) (* a a)))",
      "output_weight_simple": 29,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.001011734
    },
    "speedup": 0.4654741265984933,
    "weight_simple_diff": 3,
    "weight_complex_diff": 12,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (pow (* (/ (pow (pow (* (pow -1 1) a) -1) (* 0 a)) (pow (* 1 b) 0)) b) (/ (* 1 (* 0 b)) (pow 1 a))) (+ (/ (+ (pow d -1) 1) (* 1 b)) (* 0 0))) (/ (+ (- (+ 0 c) 0) (* c -1)) (+ 0 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (pow b (/ 0 (pow 1 a))) (/ (+ 1 (pow d -1)) b)) (/ 0 e))",
      "output_weight_simple": 16,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.000345725
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (pow b (/ 0 (pow 1 a))) (/ (+ 1 (/ 1 d)) b)) (/ 0 e))",
      "output_weight_simple": 15,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.000686628
    },
    "speedup": 0.503511362775768,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (pow (* (/ (pow (pow (* (pow -1 1) a) -1) (* 0 a)) (pow (* 1 b) 0)) b) (/ (* 1 (* 0 b)) (pow 1 a))) (+ (/ (+ (pow d -1) 1) (* 1 b)) (* 0 0))) (/ (+ (- (+ 0 c) 0) (* c -1)) (+ 0 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (pow b (/ 0 (pow 1 a))) (/ (+ 1 (pow d -1)) b)) (/ 0 e))",
      "output_weight_simple": 16,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.000343813
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (pow b (/ 0 (pow 1 a))) (/ (+ 1 (/ 1 d)) b)) (/ 0 e))",
      "output_weight_simple": 15,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.000674566
    },
    "speedup": 0.5096802981472531,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (pow (* (/ (pow (pow (* (pow -1 1) a) -1) (* 0 a)) (pow (* 1 b) 0)) b) (/ (* 1 (* 0 b)) (pow 1 a))) (+ (/ (+ (pow d -1) 1) (* 1 b)) (* 0 0))) (/ (+ (- (+ 0 c) 0) (* c -1)) (+ 0 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (pow b (/ 0 (pow 1 a))) (/ (+ 1 (pow d -1)) b)) (/ 0 e))",
      "output_weight_simple": 16,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.000347239
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (pow b (/ 0 (pow 1 a))) (/ (+ 1 (/ 1 d)) b)) (/ 0 e))",
      "output_weight_simple": 15,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.000678622
    },
    "speedup": 0.5116824977675347,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (+ (/ (+ (/ (- (+ (pow a 1) 0) 0) (* a 1)) (- (pow a 1) -1)) (pow (- 0 a) 0)) (pow (pow (- a a) a) (+ a a))) (* (pow -1 (* b 1)) (pow 1 0))) (/ (- (/ (- b 1) a) (pow c c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (/ (+ a (+ 1 (/ a a))) 1) (pow (pow 0 a) (+ a a))) (pow -1 b)) (/ (- (/ (+ -1 b) a) (pow c c)) 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.0006106180000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000605)",
      "output_term": "(- (pow (+ a (+ (pow (pow 0 a) (+ a a)) 2)) (pow -1 b)) (/ (- (/ (- b 1) a) (pow c c)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 46,
      "output_depth": 7,
      "simplification_time": 0.0010090009999999998
    },
    "speedup": 0.6051708571151071,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (+ (/ (+ (/ (- (+ (pow a 1) 0) 0) (* a 1)) (- (pow a 1) -1)) (pow (- 0 a) 0)) (pow (pow (- a a) a) (+ a a))) (* (pow -1 (* b 1)) (pow 1 0))) (/ (- (/ (- b 1) a) (pow c c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (/ (+ a (+ 1 (/ a a))) 1) (pow (pow 0 a) (+ a a))) (pow -1 b)) (/ (- (/ (+ -1 b) a) (pow c c)) 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.0006205579999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001417)",
      "output_term": "(- (pow (+ a (+ (pow (pow 0 a) (+ a a)) 2)) (pow -1 b)) (/ (- (/ (- b 1) a) (pow c c)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 46,
      "output_depth": 7,
      "simplification_time": 0.0010100640000000002
    },
    "speedup": 0.6143749306974605,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (+ (/ (+ (/ (- (+ (pow a 1) 0) 0) (* a 1)) (- (pow a 1) -1)) (pow (- 0 a) 0)) (pow (pow (- a a) a) (+ a a))) (* (pow -1 (* b 1)) (pow 1 0))) (/ (- (/ (- b 1) a) (pow c c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (/ (+ a (+ 1 (/ a a))) 1) (pow (pow 0 a) (+ a a))) (pow -1 b)) (/ (- (/ (+ -1 b) a) (pow c c)) 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.0006197230000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000776)",
      "output_term": "(- (pow (+ a (+ (pow (pow 0 a) (+ a a)) 2)) (pow -1 b)) (/ (- (/ (- b 1) a) (pow c c)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 46,
      "output_depth": 7,
      "simplification_time": 0.001008702
    },
    "speedup": 0.6143766940087361,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (/ (/ (/ (+ (pow (+ 1 -1) a) (* 1 a)) (+ a a)) (- (+ a b) 1)) (- (- 1 1) -1)) (/ (- (/ 0 1) -1) (pow a 0))) (/ (* (* 1 -1) 1) b)) (+ (/ (* (- 0 a) -1) (+ -1 0)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (/ (/ (/ (+ a (pow 0 a)) (+ a a)) (+ b (+ -1 a))) 1) (/ -1 b)) (/ a -1))",
      "output_weight_simple": 17,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.0006337620000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100318)",
      "output_term": "(/ (* (/ (/ (+ a (pow 0 a)) (+ a a)) (- (+ a b) 1)) (/ -1 b)) (- 0 a))",
      "output_weight_simple": 16,
      "output_weight_complex": 38,
      "output_depth": 7,
      "simplification_time": 0.001021027
    },
    "speedup": 0.6207103240168967,
    "weight_simple_diff": 1,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (pow (+ (/ (+ (* (+ (pow a a) 0) (* -1 b)) (+ -1 a)) (- (pow -1 1) 0)) (* (/ 1 -1) b)) (/ (pow (- -1 c) b) (+ 1 0))) (/ (pow a (/ -1 1)) (pow 1 1))) (/ (pow a (pow (/ -1 d) 1)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (+ (* -1 b) (/ (+ (* (pow a a) (* -1 b)) (+ a -1)) -1)) (/ (pow (- -1 c) b) 1)) (/ (pow a -1) 1)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 26,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.000590456
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (- (/ (+ a (- -1 (* (pow a a) b))) -1) b) (pow (- -1 c) b)) (/ 1 a)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.000941502
    },
    "speedup": 0.6271425870577015,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (pow (+ (/ (+ (* (+ (pow a a) 0) (* -1 b)) (+ -1 a)) (- (pow -1 1) 0)) (* (/ 1 -1) b)) (/ (pow (- -1 c) b) (+ 1 0))) (/ (pow a (/ -1 1)) (pow 1 1))) (/ (pow a (pow (/ -1 d) 1)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (+ (* -1 b) (/ (+ (* (pow a a) (* -1 b)) (+ a -1)) -1)) (/ (pow (- -1 c) b) 1)) (/ (pow a -1) 1)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 26,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.000597769
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (- (/ (+ a (- -1 (* (pow a a) b))) -1) b) (pow (- -1 c) b)) (/ 1 a)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.0009502349999999998
    },
    "speedup": 0.6290749130478251,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (pow (/ (/ (/ (+ (pow (+ 1 -1) a) (* 1 a)) (+ a a)) (- (+ a b) 1)) (- (- 1 1) -1)) (/ (- (/ 0 1) -1) (pow a 0))) (/ (* (* 1 -1) 1) b)) (+ (/ (* (- 0 a) -1) (+ -1 0)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (/ (/ (/ (+ a (pow 0 a)) (+ a a)) (+ b (+ -1 a))) 1) (/ -1 b)) (/ a -1))",
      "output_weight_simple": 17,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.0006421830000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002187)",
      "output_term": "(/ (* (/ (/ (+ a (pow 0 a)) (+ a a)) (- (+ a b) 1)) (/ -1 b)) (- 0 a))",
      "output_weight_simple": 16,
      "output_weight_complex": 38,
      "output_depth": 7,
      "simplification_time": 0.00101988
    },
    "speedup": 0.6296652547358513,
    "weight_simple_diff": 1,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (/ (/ (/ (+ (pow (+ 1 -1) a) (* 1 a)) (+ a a)) (- (+ a b) 1)) (- (- 1 1) -1)) (/ (- (/ 0 1) -1) (pow a 0))) (/ (* (* 1 -1) 1) b)) (+ (/ (* (- 0 a) -1) (+ -1 0)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (/ (/ (/ (+ a (pow 0 a)) (+ a a)) (+ b (+ -1 a))) 1) (/ -1 b)) (/ a -1))",
      "output_weight_simple": 17,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.000651393
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100496)",
      "output_term": "(/ (* (/ (/ (+ a (pow 0 a)) (+ a a)) (- (+ a b) 1)) (/ -1 b)) (- 0 a))",
      "output_weight_simple": 16,
      "output_weight_complex": 38,
      "output_depth": 7,
      "simplification_time": 0.001023889
    },
    "speedup": 0.6361949390998438,
    "weight_simple_diff": 1,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (pow (+ (/ (+ (* (+ (pow a a) 0) (* -1 b)) (+ -1 a)) (- (pow -1 1) 0)) (* (/ 1 -1) b)) (/ (pow (- -1 c) b) (+ 1 0))) (/ (pow a (/ -1 1)) (pow 1 1))) (/ (pow a (pow (/ -1 d) 1)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (+ (* -1 b) (/ (+ (* (pow a a) (* -1 b)) (+ a -1)) -1)) (/ (pow (- -1 c) b) 1)) (/ (pow a -1) 1)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 26,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.000602991
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (- (/ (+ a (- -1 (* (pow a a) b))) -1) b) (pow (- -1 c) b)) (/ 1 a)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.0009450249999999999
    },
    "speedup": 0.6380688341578266,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (/ (pow (pow (pow (pow (/ (* (pow a 1) a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c (/ 1 -1))) (+ (+ (/ e a) c) (pow -1 d))) (- (- (pow -1 a) -1) 0)) (/ (+ (+ (/ e a) -1) (* -1 e)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c -1)) (+ (/ e a) (+ c (pow -1 d)))) (+ 1 (pow -1 a))) (/ (+ -1 (+ (/ e a) (* -1 e))) 0))",
      "output_weight_simple": 30,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.000605394
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c -1)) (+ (+ c (/ e a)) (pow -1 d))) (+ 1 (pow -1 a))) (/ (+ -1 (- (/ e a) e)) 0))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 9,
      "simplification_time": 0.0009447449999999999
    },
    "speedup": 0.6408014861153011,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (/ (pow (pow (pow (- (* 1 a) -1) (+ a a)) (* 1 1)) (/ (- c 1) 1)) -1) (- -1 (* (/ -1 c) 0))) (+ (* (pow (/ -1 0) a) (* 0 c)) (+ 0 1))) (pow (+ (* (* b 1) a) (* c 1)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ -1 (/ (/ (pow (pow (+ 1 a) (+ a a)) (/ (+ -1 c) 1)) -1) -1)) (+ c (* a b)))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 8,
      "simplification_time": 0.00044007400000000004
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (/ (pow (pow (pow (+ 1 a) a) 2) (- c 1)) -1) -1) 1) (+ c (* a b)))",
      "output_weight_simple": 17,
      "output_weight_complex": 42,
      "output_depth": 9,
      "simplification_time": 0.0006839579999999999
    },
    "speedup": 0.643422549337825,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (/ (pow (pow (pow (pow (/ (* (pow a 1) a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c (/ 1 -1))) (+ (+ (/ e a) c) (pow -1 d))) (- (- (pow -1 a) -1) 0)) (/ (+ (+ (/ e a) -1) (* -1 e)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c -1)) (+ (/ e a) (+ c (pow -1 d)))) (+ 1 (pow -1 a))) (/ (+ -1 (+ (/ e a) (* -1 e))) 0))",
      "output_weight_simple": 30,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.000600763
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c -1)) (+ (+ c (/ e a)) (pow -1 d))) (+ 1 (pow -1 a))) (/ (+ -1 (- (/ e a) e)) 0))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 9,
      "simplification_time": 0.0009309100000000001
    },
    "speedup": 0.6453502486813978,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (/ (pow (pow (pow (- (* 1 a) -1) (+ a a)) (* 1 1)) (/ (- c 1) 1)) -1) (- -1 (* (/ -1 c) 0))) (+ (* (pow (/ -1 0) a) (* 0 c)) (+ 0 1))) (pow (+ (* (* b 1) a) (* c 1)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ -1 (/ (/ (pow (pow (+ 1 a) (+ a a)) (/ (+ -1 c) 1)) -1) -1)) (+ c (* a b)))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 8,
      "simplification_time": 0.000433909
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (/ (pow (pow (pow (+ 1 a) a) 2) (- c 1)) -1) -1) 1) (+ c (* a b)))",
      "output_weight_simple": 17,
      "output_weight_complex": 42,
      "output_depth": 9,
      "simplification_time": 0.0006723499999999999
    },
    "speedup": 0.6453617907339928,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (- (/ (/ (pow (pow (pow (- (* 1 a) -1) (+ a a)) (* 1 1)) (/ (- c 1) 1)) -1) (- -1 (* (/ -1 c) 0))) (+ (* (pow (/ -1 0) a) (* 0 c)) (+ 0 1))) (pow (+ (* (* b 1) a) (* c 1)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ -1 (/ (/ (pow (pow (+ 1 a) (+ a a)) (/ (+ -1 c) 1)) -1) -1)) (+ c (* a b)))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 8,
      "simplification_time": 0.000433423
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (/ (pow (pow (pow (+ 1 a) a) 2) (- c 1)) -1) -1) 1) (+ c (* a b)))",
      "output_weight_simple": 17,
      "output_weight_complex": 42,
      "output_depth": 9,
      "simplification_time": 0.0006680309999999999
    },
    "speedup": 0.64880671705355,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (/ (pow (pow (pow (pow (/ (* (pow a 1) a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c (/ 1 -1))) (+ (+ (/ e a) c) (pow -1 d))) (- (- (pow -1 a) -1) 0)) (/ (+ (+ (/ e a) -1) (* -1 e)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c -1)) (+ (/ e a) (+ c (pow -1 d)))) (+ 1 (pow -1 a))) (/ (+ -1 (+ (/ e a) (* -1 e))) 0))",
      "output_weight_simple": 30,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.000616497
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c -1)) (+ (+ c (/ e a)) (pow -1 d))) (+ 1 (pow -1 a))) (/ (+ -1 (- (/ e a) e)) 0))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 9,
      "simplification_time": 0.0009474030000000001
    },
    "speedup": 0.6507230819408425,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (+ (* (* (/ (+ 0 (+ (* a 0) 0)) a) (pow (- a 0) 1)) (pow (* -1 c) -1)) (* -1 (+ (/ -1 0) 1))) (* (pow (/ (+ 1 b) 1) (+ 1 -1)) (pow 0 -1))) (pow (- (- (pow 1 1) 1) (- b 0)) (* c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ -1 (+ (* a (* (/ 0 a) (pow (* -1 c) -1))) (* -1 (/ -1 0)))) (pow 0 -1))",
      "output_weight_simple": 15,
      "output_weight_complex": 38,
      "output_depth": 8,
      "simplification_time": 0.0006804430000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005976)",
      "output_term": "(pow (+ (/ 0 a) (- -1 (/ -1 0))) (pow 0 -1))",
      "output_weight_simple": 9,
      "output_weight_complex": 24,
      "output_depth": 5,
      "simplification_time": 0.001019955
    },
    "speedup": 0.6671304126162431,
    "weight_simple_diff": 6,
    "weight_complex_diff": 14,
    "depth_diff": 3
  },
  {
    "base_term": "(* (pow (+ (* (* (/ (+ 0 (+ (* a 0) 0)) a) (pow (- a 0) 1)) (pow (* -1 c) -1)) (* -1 (+ (/ -1 0) 1))) (* (pow (/ (+ 1 b) 1) (+ 1 -1)) (pow 0 -1))) (pow (- (- (pow 1 1) 1) (- b 0)) (* c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ -1 (+ (* a (* (/ 0 a) (pow (* -1 c) -1))) (* -1 (/ -1 0)))) (pow 0 -1))",
      "output_weight_simple": 15,
      "output_weight_complex": 38,
      "output_depth": 8,
      "simplification_time": 0.0006876170000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001291)",
      "output_term": "(pow (+ (/ 0 a) (- -1 (/ -1 0))) (pow 0 -1))",
      "output_weight_simple": 9,
      "output_weight_complex": 24,
      "output_depth": 5,
      "simplification_time": 0.001011399
    },
    "speedup": 0.6798671938572216,
    "weight_simple_diff": 6,
    "weight_complex_diff": 14,
    "depth_diff": 3
  },
  {
    "base_term": "(* (pow (+ (* (* (/ (+ 0 (+ (* a 0) 0)) a) (pow (- a 0) 1)) (pow (* -1 c) -1)) (* -1 (+ (/ -1 0) 1))) (* (pow (/ (+ 1 b) 1) (+ 1 -1)) (pow 0 -1))) (pow (- (- (pow 1 1) 1) (- b 0)) (* c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ -1 (+ (* a (* (/ 0 a) (pow (* -1 c) -1))) (* -1 (/ -1 0)))) (pow 0 -1))",
      "output_weight_simple": 15,
      "output_weight_complex": 38,
      "output_depth": 8,
      "simplification_time": 0.000693165
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100534)",
      "output_term": "(pow (+ (/ 0 a) (- -1 (/ -1 0))) (pow 0 -1))",
      "output_weight_simple": 9,
      "output_weight_complex": 24,
      "output_depth": 5,
      "simplification_time": 0.001015557
    },
    "speedup": 0.6825466221984586,
    "weight_simple_diff": 6,
    "weight_complex_diff": 14,
    "depth_diff": 3
  },
  {
    "base_term": "(+ (* (/ (- (+ (+ (/ (* (pow 1 0) a) (- 1 -1)) (- a a)) (* (/ a c) d)) (/ (/ e 1) 0)) (/ (* (pow 0 b) e) (pow b c))) (* (pow (pow c 0) 1) (+ 0 b))) (+ (/ -1 (pow (pow a 0) -1)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (- (+ (/ a 2) (* (/ a c) d)) (/ (/ e 1) 0)) (/ (* e (pow 0 b)) (pow b c))) b) (+ d (/ -1 (pow 1 -1))))",
      "output_weight_simple": 26,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.0007232870000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000634)",
      "output_term": "(+ d (+ (* b (/ (- (+ (/ a 2) (* (/ a c) d)) (/ e 0)) (/ (* e (pow 0 b)) (pow b c)))) -1))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.0010152870000000001
    },
    "speedup": 0.7123965932785508,
    "weight_simple_diff": 4,
    "weight_complex_diff": 15,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (* (/ (- (+ (+ (/ (* (pow 1 0) a) (- 1 -1)) (- a a)) (* (/ a c) d)) (/ (/ e 1) 0)) (/ (* (pow 0 b) e) (pow b c))) (* (pow (pow c 0) 1) (+ 0 b))) (+ (/ -1 (pow (pow a 0) -1)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (- (+ (/ a 2) (* (/ a c) d)) (/ (/ e 1) 0)) (/ (* e (pow 0 b)) (pow b c))) b) (+ d (/ -1 (pow 1 -1))))",
      "output_weight_simple": 26,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.0007248109999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100062)",
      "output_term": "(+ d (+ (* b (/ (- (+ (/ a 2) (* (/ a c) d)) (/ e 0)) (/ (* e (pow 0 b)) (pow b c)))) -1))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.001017174
    },
    "speedup": 0.7125732667173953,
    "weight_simple_diff": 4,
    "weight_complex_diff": 15,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (* (/ (- (+ (+ (/ (* (pow 1 0) a) (- 1 -1)) (- a a)) (* (/ a c) d)) (/ (/ e 1) 0)) (/ (* (pow 0 b) e) (pow b c))) (* (pow (pow c 0) 1) (+ 0 b))) (+ (/ -1 (pow (pow a 0) -1)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (- (+ (/ a 2) (* (/ a c) d)) (/ (/ e 1) 0)) (/ (* e (pow 0 b)) (pow b c))) b) (+ d (/ -1 (pow 1 -1))))",
      "output_weight_simple": 26,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.000730421
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000494)",
      "output_term": "(+ d (+ (* b (/ (- (+ (/ a 2) (* (/ a c) d)) (/ e 0)) (/ (* e (pow 0 b)) (pow b c)))) -1))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.001016019
    },
    "speedup": 0.7189048629996093,
    "weight_simple_diff": 4,
    "weight_complex_diff": 15,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (/ (pow (+ (* (pow (/ (pow (* a -1) 0) (- -1 b)) (+ b a)) (* 1 (pow 1 a))) (pow (pow 1 0) b)) (pow (* (/ e b) b) (* c c))) (* (* (+ b c) 1) 1)) (- (pow (pow d (pow -1 0)) (* c -1)) (+ -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow (* b (/ e b)) (* c c))) (+ b c)) (- (pow d (* -1 c)) (+ -1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.00074039
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004148)",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow e (* c c))) (+ b c)) (- (pow d (- 0 c)) (+ -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.0010145150000000001
    },
    "speedup": 0.7297969965944316,
    "weight_simple_diff": 1,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (+ (* (pow (/ (pow (* a -1) 0) (- -1 b)) (+ b a)) (* 1 (pow 1 a))) (pow (pow 1 0) b)) (pow (* (/ e b) b) (* c c))) (* (* (+ b c) 1) 1)) (- (pow (pow d (pow -1 0)) (* c -1)) (+ -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow (* b (/ e b)) (* c c))) (+ b c)) (- (pow d (* -1 c)) (+ -1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.0007466220000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003122)",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow e (* c c))) (+ b c)) (- (pow d (- 0 c)) (+ -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.001013148
    },
    "speedup": 0.736932807447678,
    "weight_simple_diff": 1,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (+ (* (pow (/ (pow (* a -1) 0) (- -1 b)) (+ b a)) (* 1 (pow 1 a))) (pow (pow 1 0) b)) (pow (* (/ e b) b) (* c c))) (* (* (+ b c) 1) 1)) (- (pow (pow d (pow -1 0)) (* c -1)) (+ -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow (* b (/ e b)) (* c c))) (+ b c)) (- (pow d (* -1 c)) (+ -1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.000749437
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100073)",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow e (* c c))) (+ b c)) (- (pow d (- 0 c)) (+ -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.0010120489999999999
    },
    "speedup": 0.7405145403038786,
    "weight_simple_diff": 1,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (- (pow (+ 1 (pow (pow (+ -1 1) a) (pow 0 1))) (/ (/ a a) a)) -1) (/ (- b (- b b)) (+ b 0))) (* (pow (+ (* a d) c) (+ -1 1)) (/ b 1))) (+ (* (* (+ -1 a) -1) (/ 0 1)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (+ 1 (pow 2 (/ (/ a a) a))) (/ b b)) (/ b 1)) d)",
      "output_weight_simple": 14,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.00044895799999999995
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (pow 2 (/ 1 a)) (+ -1 b)) d)",
      "output_weight_simple": 11,
      "output_weight_complex": 25,
      "output_depth": 5,
      "simplification_time": 0.000604257
    },
    "speedup": 0.7429918064664538,
    "weight_simple_diff": 3,
    "weight_complex_diff": 19,
    "depth_diff": 3
  },
  {
    "base_term": "(/ (- (/ (- (pow (+ 1 (pow (pow (+ -1 1) a) (pow 0 1))) (/ (/ a a) a)) -1) (/ (- b (- b b)) (+ b 0))) (* (pow (+ (* a d) c) (+ -1 1)) (/ b 1))) (+ (* (* (+ -1 a) -1) (/ 0 1)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (+ 1 (pow 2 (/ (/ a a) a))) (/ b b)) (/ b 1)) d)",
      "output_weight_simple": 14,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.00045453
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (pow 2 (/ 1 a)) (+ -1 b)) d)",
      "output_weight_simple": 11,
      "output_weight_complex": 25,
      "output_depth": 5,
      "simplification_time": 0.000603833
    },
    "speedup": 0.7527412380575423,
    "weight_simple_diff": 3,
    "weight_complex_diff": 19,
    "depth_diff": 3
  },
  {
    "base_term": "(/ (- (/ (- (pow (+ 1 (pow (pow (+ -1 1) a) (pow 0 1))) (/ (/ a a) a)) -1) (/ (- b (- b b)) (+ b 0))) (* (pow (+ (* a d) c) (+ -1 1)) (/ b 1))) (+ (* (* (+ -1 a) -1) (/ 0 1)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (+ 1 (pow 2 (/ (/ a a) a))) (/ b b)) (/ b 1)) d)",
      "output_weight_simple": 14,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.000461206
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (pow 2 (/ 1 a)) (+ -1 b)) d)",
      "output_weight_simple": 11,
      "output_weight_complex": 25,
      "output_depth": 5,
      "simplification_time": 0.000603451
    },
    "speedup": 0.7642807783896289,
    "weight_simple_diff": 3,
    "weight_complex_diff": 19,
    "depth_diff": 3
  },
  {
    "base_term": "(* (/ (/ (+ (pow a (* (- a (* (- -1 a) 0)) (+ 1 0))) (+ (pow (* a -1) a) (pow 1 1))) (pow (* 0 (* b b)) (* a c))) (- (pow (/ -1 -1) 0) (pow 0 e))) (+ (pow (- (- b 0) -1) (+ -1 a)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (/ (/ (+ 1 (+ (pow a a) (pow (* a -1) a))) (pow 0 (* a c))) (- 1 (pow 0 e))) (+ (pow (+ 1 b) (+ a -1)) (* a b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.0007310680000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (* (+ (pow (- 0 a) a) (+ 1 (pow a a))) (+ (pow (+ 1 b) (- a 1)) (* a b))) (pow 0 (* a c))) (- 1 (pow 0 e)))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.000936782
    },
    "speedup": 0.7804035517334876,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (/ (/ (+ (pow a (* (- a (* (- -1 a) 0)) (+ 1 0))) (+ (pow (* a -1) a) (pow 1 1))) (pow (* 0 (* b b)) (* a c))) (- (pow (/ -1 -1) 0) (pow 0 e))) (+ (pow (- (- b 0) -1) (+ -1 a)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (/ (/ (+ 1 (+ (pow a a) (pow (* a -1) a))) (pow 0 (* a c))) (- 1 (pow 0 e))) (+ (pow (+ 1 b) (+ a -1)) (* a b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.000726636
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (* (+ (pow (- 0 a) a) (+ 1 (pow a a))) (+ (pow (+ 1 b) (- a 1)) (* a b))) (pow 0 (* a c))) (- 1 (pow 0 e)))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.0009220970000000001
    },
    "speedup": 0.7880255547952113,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (/ (/ (+ (pow a (* (- a (* (- -1 a) 0)) (+ 1 0))) (+ (pow (* a -1) a) (pow 1 1))) (pow (* 0 (* b b)) (* a c))) (- (pow (/ -1 -1) 0) (pow 0 e))) (+ (pow (- (- b 0) -1) (+ -1 a)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (/ (/ (+ 1 (+ (pow a a) (pow (* a -1) a))) (pow 0 (* a c))) (- 1 (pow 0 e))) (+ (pow (+ 1 b) (+ a -1)) (* a b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.0007333919999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (* (+ (pow (- 0 a) a) (+ 1 (pow a a))) (+ (pow (+ 1 b) (- a 1)) (* a b))) (pow 0 (* a c))) (- 1 (pow 0 e)))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.000920155
    },
    "speedup": 0.7970309350055154,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (pow (pow (/ (* (/ 1 (* (- (- 0 1) a) (- b b))) (pow (pow 0 -1) 1)) (/ (* a b) b)) (/ (- (pow 1 0) a) (pow b e))) (/ (/ (* 0 1) -1) (pow d 0))) (- (- (+ (- b b) -1) (+ 0 c)) (- c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ -1 (* c -2))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.0008254460000000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001006896)",
      "output_term": "(- -1 (+ c c))",
      "output_weight_simple": 4,
      "output_weight_complex": 5,
      "output_depth": 3,
      "simplification_time": 0.0010177010000000002
    },
    "speedup": 0.8110889151135745,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (/ (* (/ 1 (* (- (- 0 1) a) (- b b))) (pow (pow 0 -1) 1)) (/ (* a b) b)) (/ (- (pow 1 0) a) (pow b e))) (/ (/ (* 0 1) -1) (pow d 0))) (- (- (+ (- b b) -1) (+ 0 c)) (- c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ -1 (* c -2))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.0008386700000000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000328)",
      "output_term": "(- -1 (+ c c))",
      "output_weight_simple": 4,
      "output_weight_complex": 5,
      "output_depth": 3,
      "simplification_time": 0.001011153
    },
    "speedup": 0.8294194844894888,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (/ (* (/ 1 (* (- (- 0 1) a) (- b b))) (pow (pow 0 -1) 1)) (/ (* a b) b)) (/ (- (pow 1 0) a) (pow b e))) (/ (/ (* 0 1) -1) (pow d 0))) (- (- (+ (- b b) -1) (+ 0 c)) (- c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ -1 (* c -2))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.0008378150000000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000231)",
      "output_term": "(- -1 (+ c c))",
      "output_weight_simple": 4,
      "output_weight_complex": 5,
      "output_depth": 3,
      "simplification_time": 0.001009976
    },
    "speedup": 0.8295395138102292,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (/ (/ (/ 0 (- (* a (* a (pow a a))) (pow a c))) (* 1 (/ (/ 0 -1) 0))) (/ (- 1 1) (- 0 1))) (* (pow (* 1 (* b 1)) (* 1 d)) (/ c -1))) (* (/ (- b (/ a 1)) (* -1 0)) (pow -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ (/ (/ 0 (- (* (pow a a) (* a a)) (pow a c))) (/ 0 0)) 0) (* (pow b d) (/ c -1))) (* -1 (/ (- b (/ a 1)) 0)))",
      "output_weight_simple": 25,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.00038061499999999995
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ (/ (/ 0 (- (pow a (+ a 2)) (pow a c))) (/ 0 0)) 0) (/ (* c (pow b d)) -1)) (- 0 (/ (- b a) 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.00044640200000000004
    },
    "speedup": 0.8526283484392989,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (/ (/ (/ (* (- (pow -1 a) b) b) (* b b)) 1) (* (/ (+ 0 b) b) (/ 0 0))) (/ (+ a (* 1 0)) (- b -1))) (pow (pow (* d a) -1) (- 1 -1))) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (/ (/ (* b (- (pow -1 a) b)) (* b b)) 1) (* (/ b b) (/ 0 0))) (/ a (+ b 1))) (pow (* a d) -2)) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 91,
      "output_depth": 10,
      "simplification_time": 0.000859823
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000424)",
      "output_term": "(pow (/ (pow (/ (/ (* b (- (pow -1 a) b)) (* b b)) (/ 0 0)) (/ a (- b -1))) (pow (/ 1 (* a d)) 2)) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 84,
      "output_depth": 9,
      "simplification_time": 0.001006357
    },
    "speedup": 0.8543916323928784,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (pow (/ (/ (/ (* (- (pow -1 a) b) b) (* b b)) 1) (* (/ (+ 0 b) b) (/ 0 0))) (/ (+ a (* 1 0)) (- b -1))) (pow (pow (* d a) -1) (- 1 -1))) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (/ (/ (* b (- (pow -1 a) b)) (* b b)) 1) (* (/ b b) (/ 0 0))) (/ a (+ b 1))) (pow (* a d) -2)) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 91,
      "output_depth": 10,
      "simplification_time": 0.0008604439999999999
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000279)",
      "output_term": "(pow (/ (pow (/ (/ (* b (- (pow -1 a) b)) (* b b)) (/ 0 0)) (/ a (- b -1))) (pow (/ 1 (* a d)) 2)) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 84,
      "output_depth": 9,
      "simplification_time": 0.001006472
    },
    "speedup": 0.8549110159050624,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (- (/ (+ a (* (- (* 0 a) -1) (* b a))) (+ (/ a c) c)) (pow (* 1 c) 0)) (+ (* (* -1 a) 1) (/ 0 0))) (/ (+ (pow c 1) 0) (- -1 d))) (/ (pow (+ (/ e 1) -1) (- a c)) (- -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (+ -1 (/ (+ a (* a b)) (+ c (/ a c)))) (+ (* a -1) (/ 0 0))) (/ c (- -1 d))) (/ (pow (+ -1 (/ e 1)) (- a c)) (- -1 b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.0008696989999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100025)",
      "output_term": "(/ (* (pow (- (/ (+ a (* a b)) (+ c (/ a c))) 1) (- (/ 0 0) a)) (/ c (- -1 d))) (/ (pow (+ -1 e) (- a c)) (- -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.001010767
    },
    "speedup": 0.8604346995895195,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (/ (/ (/ 0 (- (* a (* a (pow a a))) (pow a c))) (* 1 (/ (/ 0 -1) 0))) (/ (- 1 1) (- 0 1))) (* (pow (* 1 (* b 1)) (* 1 d)) (/ c -1))) (* (/ (- b (/ a 1)) (* -1 0)) (pow -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ (/ (/ 0 (- (* (pow a a) (* a a)) (pow a c))) (/ 0 0)) 0) (* (pow b d) (/ c -1))) (* -1 (/ (- b (/ a 1)) 0)))",
      "output_weight_simple": 25,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.000382595
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ (/ (/ 0 (- (pow a (+ a 2)) (pow a c))) (/ 0 0)) 0) (/ (* c (pow b d)) -1)) (- 0 (/ (- b a) 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.000441956
    },
    "speedup": 0.8656857243707519,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (/ (/ (/ (* (- (pow -1 a) b) b) (* b b)) 1) (* (/ (+ 0 b) b) (/ 0 0))) (/ (+ a (* 1 0)) (- b -1))) (pow (pow (* d a) -1) (- 1 -1))) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (/ (/ (* b (- (pow -1 a) b)) (* b b)) 1) (* (/ b b) (/ 0 0))) (/ a (+ b 1))) (pow (* a d) -2)) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 91,
      "output_depth": 10,
      "simplification_time": 0.0008741619999999999
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001001963)",
      "output_term": "(pow (/ (pow (/ (/ (* b (- (pow -1 a) b)) (* b b)) (/ 0 0)) (/ a (- b -1))) (pow (/ 1 (* a d)) 2)) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 84,
      "output_depth": 9,
      "simplification_time": 0.001007945
    },
    "speedup": 0.8672715277123254,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (- (/ (+ a (* (- (* 0 a) -1) (* b a))) (+ (/ a c) c)) (pow (* 1 c) 0)) (+ (* (* -1 a) 1) (/ 0 0))) (/ (+ (pow c 1) 0) (- -1 d))) (/ (pow (+ (/ e 1) -1) (- a c)) (- -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (+ -1 (/ (+ a (* a b)) (+ c (/ a c)))) (+ (* a -1) (/ 0 0))) (/ c (- -1 d))) (/ (pow (+ -1 (/ e 1)) (- a c)) (- -1 b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.0008771279999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100032)",
      "output_term": "(/ (* (pow (- (/ (+ a (* a b)) (+ c (/ a c))) 1) (- (/ 0 0) a)) (/ c (- -1 d))) (/ (pow (+ -1 e) (- a c)) (- -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.001011275
    },
    "speedup": 0.8673486440384661,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (/ (/ (/ 0 (- (* a (* a (pow a a))) (pow a c))) (* 1 (/ (/ 0 -1) 0))) (/ (- 1 1) (- 0 1))) (* (pow (* 1 (* b 1)) (* 1 d)) (/ c -1))) (* (/ (- b (/ a 1)) (* -1 0)) (pow -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ (/ (/ 0 (- (* (pow a a) (* a a)) (pow a c))) (/ 0 0)) 0) (* (pow b d) (/ c -1))) (* -1 (/ (- b (/ a 1)) 0)))",
      "output_weight_simple": 25,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.00037963
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ (/ (/ 0 (- (pow a (+ a 2)) (pow a c))) (/ 0 0)) 0) (/ (* c (pow b d)) -1)) (- 0 (/ (- b a) 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.000434598
    },
    "speedup": 0.8735198965480743,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (- (/ (+ a (* (- (* 0 a) -1) (* b a))) (+ (/ a c) c)) (pow (* 1 c) 0)) (+ (* (* -1 a) 1) (/ 0 0))) (/ (+ (pow c 1) 0) (- -1 d))) (/ (pow (+ (/ e 1) -1) (- a c)) (- -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (+ -1 (/ (+ a (* a b)) (+ c (/ a c)))) (+ (* a -1) (/ 0 0))) (/ c (- -1 d))) (/ (pow (+ -1 (/ e 1)) (- a c)) (- -1 b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.000885312
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000466)",
      "output_term": "(/ (* (pow (- (/ (+ a (* a b)) (+ c (/ a c))) 1) (- (/ 0 0) a)) (/ c (- -1 d))) (/ (pow (+ -1 e) (- a c)) (- -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.0010115780000000002
    },
    "speedup": 0.8751791755059914,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (- (* (* (pow (pow 1 0) (pow -1 a)) (/ 0 0)) -1) (+ (* (pow 1 b) b) (- 0 0))) (/ (* (- a -1) a) (- c 0))) (* (pow -1 (+ -1 c)) (+ 1 0))) (/ (+ (/ d (+ 0 a)) (- c c)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (- (* (pow 1 (pow -1 a)) (* -1 (/ 0 0))) (* b (pow 1 b))) (/ (+ a (* a a)) c)) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.0009246649999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004399)",
      "output_term": "(+ (pow (- (/ (+ a (pow a 2)) c) (+ (* (pow 1 (pow -1 a)) (/ 0 0)) (* b (pow 1 b)))) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001016275
    },
    "speedup": 0.909857076086689,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (- (* (* (pow (pow 1 0) (pow -1 a)) (/ 0 0)) -1) (+ (* (pow 1 b) b) (- 0 0))) (/ (* (- a -1) a) (- c 0))) (* (pow -1 (+ -1 c)) (+ 1 0))) (/ (+ (/ d (+ 0 a)) (- c c)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (- (* (pow 1 (pow -1 a)) (* -1 (/ 0 0))) (* b (pow 1 b))) (/ (+ a (* a a)) c)) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.000926967
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001342)",
      "output_term": "(+ (pow (- (/ (+ a (pow a 2)) c) (+ (* (pow 1 (pow -1 a)) (/ 0 0)) (* b (pow 1 b)))) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001012566
    },
    "speedup": 0.9154632883189837,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (- (* (* (pow (pow 1 0) (pow -1 a)) (/ 0 0)) -1) (+ (* (pow 1 b) b) (- 0 0))) (/ (* (- a -1) a) (- c 0))) (* (pow -1 (+ -1 c)) (+ 1 0))) (/ (+ (/ d (+ 0 a)) (- c c)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (- (* (pow 1 (pow -1 a)) (* -1 (/ 0 0))) (* b (pow 1 b))) (/ (+ a (* a a)) c)) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.000937629
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001165)",
      "output_term": "(+ (pow (- (/ (+ a (pow a 2)) c) (+ (* (pow 1 (pow -1 a)) (/ 0 0)) (* b (pow 1 b)))) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.0010125520000000001
    },
    "speedup": 0.9260057755058505,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (* (pow (+ (/ (/ (* -1 (/ a 1)) (pow 0 a)) -1) (/ a (* a a))) a) (/ (+ b (- c c)) (- 0 c))) (- (* (+ (- b -1) 0) (/ 0 1)) (/ 1 1))) (- (pow (- (+ a -1) b) (* 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (* (pow (+ (/ (/ (* -1 (/ a 1)) (pow 0 a)) -1) (/ a (* a a))) a) (/ b (- 0 c))) -1) (- 1 (pow -1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 61,
      "output_depth": 10,
      "simplification_time": 0.0009471139999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002456)",
      "output_term": "(/ (- 1 (pow -1 b)) (* (pow (+ (/ a (pow 0 a)) (/ a (* a a))) a) (/ b (- 0 c))))",
      "output_weight_simple": 18,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.00101553
    },
    "speedup": 0.9326302521835887,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 3
  },
  {
    "base_term": "(pow (/ (/ (- (- (pow (+ a (* 0 (* b 0))) (+ -1 b)) (pow (- -1 0) b)) 0) (+ (pow (/ a c) a) (/ e 1))) (- (/ (/ (+ b -1) c) (pow -1 0)) (/ 1 -1))) (- (* (- 0 (pow -1 a)) (/ 0 b)) (/ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ (pow (/ a c) a) (/ e 1))) (+ 1 (/ (/ (+ b -1) c) 1))) (- (* -1 (* (pow -1 a) (/ 0 b))) (/ 1 a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 80,
      "output_depth": 7,
      "simplification_time": 0.0009441920000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004882)",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ 1 (/ (+ b -1) c))) (+ (pow (/ a c) a) e)) (- (/ 0 b) (/ 1 a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001011611
    },
    "speedup": 0.9333548172172902,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (* (pow (+ (/ (/ (* -1 (/ a 1)) (pow 0 a)) -1) (/ a (* a a))) a) (/ (+ b (- c c)) (- 0 c))) (- (* (+ (- b -1) 0) (/ 0 1)) (/ 1 1))) (- (pow (- (+ a -1) b) (* 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (* (pow (+ (/ (/ (* -1 (/ a 1)) (pow 0 a)) -1) (/ a (* a a))) a) (/ b (- 0 c))) -1) (- 1 (pow -1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 61,
      "output_depth": 10,
      "simplification_time": 0.0009500719999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000856)",
      "output_term": "(/ (- 1 (pow -1 b)) (* (pow (+ (/ a (pow 0 a)) (/ a (* a a))) a) (/ b (- 0 c))))",
      "output_weight_simple": 18,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001013497
    },
    "speedup": 0.9374196470241155,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 3
  },
  {
    "base_term": "(* (pow (* (pow (+ (/ (/ (* -1 (/ a 1)) (pow 0 a)) -1) (/ a (* a a))) a) (/ (+ b (- c c)) (- 0 c))) (- (* (+ (- b -1) 0) (/ 0 1)) (/ 1 1))) (- (pow (- (+ a -1) b) (* 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (* (pow (+ (/ (/ (* -1 (/ a 1)) (pow 0 a)) -1) (/ a (* a a))) a) (/ b (- 0 c))) -1) (- 1 (pow -1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 61,
      "output_depth": 10,
      "simplification_time": 0.000955493
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100093)",
      "output_term": "(/ (- 1 (pow -1 b)) (* (pow (+ (/ a (pow 0 a)) (/ a (* a a))) a) (/ b (- 0 c))))",
      "output_weight_simple": 18,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001013807
    },
    "speedup": 0.9424801762071084,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 3
  },
  {
    "base_term": "(pow (/ (/ (- (- (pow (+ a (* 0 (* b 0))) (+ -1 b)) (pow (- -1 0) b)) 0) (+ (pow (/ a c) a) (/ e 1))) (- (/ (/ (+ b -1) c) (pow -1 0)) (/ 1 -1))) (- (* (- 0 (pow -1 a)) (/ 0 b)) (/ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ (pow (/ a c) a) (/ e 1))) (+ 1 (/ (/ (+ b -1) c) 1))) (- (* -1 (* (pow -1 a) (/ 0 b))) (/ 1 a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 80,
      "output_depth": 7,
      "simplification_time": 0.000953135
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100356)",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ 1 (/ (+ b -1) c))) (+ (pow (/ a c) a) e)) (- (/ 0 b) (/ 1 a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001010728
    },
    "speedup": 0.943018299681022,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (+ (+ (+ (+ (* (pow (/ -1 1) 0) (/ 0 -1)) (+ a 0)) (pow (pow a a) b)) (/ (+ c b) -1)) (/ (pow 1 a) (/ -1 1))) (pow (- (pow 0 a) 0) (* 1 b))) (pow (/ (* (pow -1 e) c) (pow 1 c)) (pow e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (+ (pow (pow a a) b) (+ (/ (+ b c) -1) (/ (pow 1 a) -1)))) (pow (pow 0 a) b)) (/ (* c (pow -1 e)) (pow 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.000786081
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (pow (pow a a) b) (+ a (+ (/ (+ b c) -1) (/ (pow 1 a) -1)))) (pow (pow 0 a) b)) (/ (* c (pow -1 e)) (pow 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.000819585
    },
    "speedup": 0.9591207745383334,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (pow (* (- (pow (+ (pow 0 1) a) (pow 1 a)) (- 0 a)) (* (pow 1 0) 1)) (* (- -1 -1) 0)) (/ (+ (+ a -1) -1) (+ a 1))) (+ (/ (pow a a) b) 0)) (+ (+ (* (pow b 0) 1) (/ c 0)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003377)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.0010026780000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001029176)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.001041407
    },
    "speedup": 0.9628108894985342,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (pow (pow (+ (/ (+ (+ (+ a a) b) (+ -1 b)) (pow b c)) (- -1 (pow c c))) (* (/ -1 b) a)) (- (* (+ 0 -1) c) (/ 0 1))) (- a (* (- e 0) e))) (+ (+ (/ (pow 1 -1) 1) (+ c c)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001024472)",
      "output_term": "(+ (- (pow (pow (+ (/ (+ (+ a a) (+ b (+ b -1))) (pow b c)) (- -1 (pow c c))) (* a (/ -1 b))) (* -1 c)) (- a (* e e))) (+ c (+ c (/ (pow 1 -1) 1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.001053899
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001063206)",
      "output_term": "(+ c (+ (- (pow (pow (+ (/ (+ -1 (* 2 (+ a b))) (pow b c)) (- -1 (pow c c))) (/ (* a -1) b)) (- 0 c)) (- a (* e e))) (+ c 1)))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 11,
      "simplification_time": 0.001092432
    },
    "speedup": 0.9647273239890447,
    "weight_simple_diff": 1,
    "weight_complex_diff": 8,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (+ (pow (+ -1 (+ 1 a)) (pow (+ (* -1 (- a a)) (* a 0)) (- a a))) (- (/ -1 (* 0 1)) (* 0 1))) (* (* (+ (+ 1 1) 0) (pow b -1)) (* 0 1))) (/ (- (- 1 (pow -1 b)) (/ 1 1)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004116)",
      "output_term": "(+ (pow a (pow 0 0)) (+ (/ -1 0) (/ (* -1 (pow -1 b)) 1)))",
      "output_weight_simple": 13,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.001002729
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012374)",
      "output_term": "(+ (pow a (pow 0 0)) (- (/ -1 0) (pow -1 b)))",
      "output_weight_simple": 10,
      "output_weight_complex": 25,
      "output_depth": 4,
      "simplification_time": 0.001038952
    },
    "speedup": 0.9651350591750146,
    "weight_simple_diff": 3,
    "weight_complex_diff": 8,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (pow (pow (+ (/ (+ (+ (+ a a) b) (+ -1 b)) (pow b c)) (- -1 (pow c c))) (* (/ -1 b) a)) (- (* (+ 0 -1) c) (/ 0 1))) (- a (* (- e 0) e))) (+ (+ (/ (pow 1 -1) 1) (+ c c)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003562)",
      "output_term": "(+ (- (pow (pow (+ (/ (+ (+ a a) (+ b (+ b -1))) (pow b c)) (- -1 (pow c c))) (* a (/ -1 b))) (* -1 c)) (- a (* e e))) (+ c (+ c (/ (pow 1 -1) 1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.00103298
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001038237)",
      "output_term": "(+ c (+ (- (pow (pow (+ (/ (+ -1 (* 2 (+ a b))) (pow b c)) (- -1 (pow c c))) (/ (* a -1) b)) (- 0 c)) (- a (* e e))) (+ c 1)))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 11,
      "simplification_time": 0.001066018
    },
    "speedup": 0.9690080280070318,
    "weight_simple_diff": 1,
    "weight_complex_diff": 8,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (pow (pow (+ (/ (+ (+ (+ a a) b) (+ -1 b)) (pow b c)) (- -1 (pow c c))) (* (/ -1 b) a)) (- (* (+ 0 -1) c) (/ 0 1))) (- a (* (- e 0) e))) (+ (+ (/ (pow 1 -1) 1) (+ c c)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005373)",
      "output_term": "(+ (- (pow (pow (+ (/ (+ (+ a a) (+ b (+ b -1))) (pow b c)) (- -1 (pow c c))) (* a (/ -1 b))) (* -1 c)) (- a (* e e))) (+ c (+ c (/ (pow 1 -1) 1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.0010352059999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001037482)",
      "output_term": "(+ c (+ (- (pow (pow (+ (/ (+ -1 (* 2 (+ a b))) (pow b c)) (- -1 (pow c c))) (/ (* a -1) b)) (- 0 c)) (- a (* e e))) (+ c 1)))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 11,
      "simplification_time": 0.0010653680000000001
    },
    "speedup": 0.971688655938605,
    "weight_simple_diff": 1,
    "weight_complex_diff": 8,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (+ (+ (+ (+ (- (pow (/ (pow a 0) b) -1) (pow 0 b)) (pow (- a b) -1)) (- (pow -1 c) -1)) (pow (pow (* d d) e) (/ 1 1))) (/ (/ (+ d 0) d) (pow 1 e))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003061)",
      "output_term": "(pow (+ (- (pow (/ 1 b) -1) (pow 0 b)) (+ (+ (pow (* d d) e) (/ (/ d d) (pow 1 e))) (+ (pow (- a b) -1) (+ (pow -1 c) 1)))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 32,
      "output_weight_complex": 86,
      "output_depth": 7,
      "simplification_time": 0.0010343940000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001030451)",
      "output_term": "(pow (+ (- b (pow 0 b)) (+ (/ 1 (- a b)) (+ (pow (* d d) e) (+ (+ (pow -1 c) 1) (/ 1 (pow 1 e)))))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 8,
      "simplification_time": 0.001064429
    },
    "speedup": 0.9717829935110751,
    "weight_simple_diff": 3,
    "weight_complex_diff": 13,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (/ (* (* (* (+ (pow (* (- a 1) 1) (* b -1)) 1) (+ (/ 1 -1) a)) (+ a (pow a 0))) (pow (/ (+ 0 1) -1) (/ b a))) (pow (* (pow a b) 0) (- 0 c))) (/ (- (+ (/ c a) 1) (/ 0 -1)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000139)",
      "output_term": "(pow (/ (* (+ 1 (pow (+ a -1) (* b -1))) (* (pow -1 (/ b a)) (* (+ a -1) (+ a 1)))) (pow 0 (- 0 c))) (/ (+ 1 (/ c a)) (+ -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 61,
      "output_depth": 7,
      "simplification_time": 0.000999708
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001011858)",
      "output_term": "(pow (/ (* (+ a -1) (* (+ 1 (pow (+ a -1) (- 0 b))) (* (+ a 1) (pow -1 (/ b a))))) (pow 0 (- 0 c))) (/ (+ 1 (/ c a)) (- d 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.0010248570000000001
    },
    "speedup": 0.9754609667495073,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (+ (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (* (/ 0 (/ a -1)) (+ -1 c))) (pow (* (/ a 0) 0) (- 0 c))) (* (pow (- 1 -1) 0) (pow c a))) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013476)",
      "output_term": "(+ (pow (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (+ (* (/ 0 (/ a -1)) (+ -1 c)) (pow 0 (- 0 c)))) (pow c a)) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 31,
      "output_weight_complex": 83,
      "output_depth": 9,
      "simplification_time": 0.0010183199999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00102476)",
      "output_term": "(+ (pow (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (+ (/ 0 (/ a -1)) (pow 0 (- 0 c)))) (pow c a)) (/ (pow (- b e) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.0010426049999999998
    },
    "speedup": 0.9767073819903032,
    "weight_simple_diff": 3,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (+ (+ (+ (+ (* (pow (/ -1 1) 0) (/ 0 -1)) (+ a 0)) (pow (pow a a) b)) (/ (+ c b) -1)) (/ (pow 1 a) (/ -1 1))) (pow (- (pow 0 a) 0) (* 1 b))) (pow (/ (* (pow -1 e) c) (pow 1 c)) (pow e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (+ (pow (pow a a) b) (+ (/ (+ b c) -1) (/ (pow 1 a) -1)))) (pow (pow 0 a) b)) (/ (* c (pow -1 e)) (pow 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.000794085
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (pow (pow a a) b) (+ a (+ (/ (+ b c) -1) (/ (pow 1 a) -1)))) (pow (pow 0 a) b)) (/ (* c (pow -1 e)) (pow 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.0008129079999999999
    },
    "speedup": 0.9768448582127377,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (- (/ (- (+ (pow (- (* -1 -1) -1) (* a b)) (pow b -1)) (+ (- -1 c) -1)) (+ d 1)) (* (+ (+ 1 0) d) (+ -1 a))) (- (- (+ 1 c) -1) (/ b -1))) (* (* (* -1 (/ 0 c)) (/ b d)) (+ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004213)",
      "output_term": "(* (- (/ (+ (pow 2 (* a b)) (+ (pow b -1) (+ 2 c))) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (- (+ 2 c) (/ b -1)))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.001027296
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001021727)",
      "output_term": "(* (- (/ (- (+ (pow 2 (* a b)) (/ 1 b)) (- -2 c)) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (- c (- (/ b -1) 2)))",
      "output_weight_simple": 23,
      "output_weight_complex": 45,
      "output_depth": 8,
      "simplification_time": 0.001049066
    },
    "speedup": 0.9792482074531059,
    "weight_simple_diff": -2,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (+ (pow (+ -1 (+ 1 a)) (pow (+ (* -1 (- a a)) (* a 0)) (- a a))) (- (/ -1 (* 0 1)) (* 0 1))) (* (* (+ (+ 1 1) 0) (pow b -1)) (* 0 1))) (/ (- (- 1 (pow -1 b)) (/ 1 1)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007066)",
      "output_term": "(+ (pow a (pow 0 0)) (+ (/ -1 0) (/ (* -1 (pow -1 b)) 1)))",
      "output_weight_simple": 13,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.0010062259999999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000276)",
      "output_term": "(+ (pow a (pow 0 0)) (- (/ -1 0) (pow -1 b)))",
      "output_weight_simple": 10,
      "output_weight_complex": 25,
      "output_depth": 4,
      "simplification_time": 0.001026468
    },
    "speedup": 0.9802799502760922,
    "weight_simple_diff": 3,
    "weight_complex_diff": 8,
    "depth_diff": 2
  },
  {
    "base_term": "(* (* (* (+ (/ (+ (* (- (- a b) 0) (/ -1 1)) (* c c)) (- (pow -1 -1) -1)) (- (* a a) a)) (- (- 0 (- -1 0)) (+ c 1))) (/ (/ (- a b) d) (* 1 -1))) (pow (pow a (+ d 1)) (* (* c 1) b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001001874)",
      "output_term": "(* (+ (/ (+ b (+ (* c c) (* a -1))) (+ 1 (pow -1 -1))) (- (* a a) a)) (* (pow (pow a (+ 1 d)) (* b c)) (* (* -1 c) (/ (/ (- a b) d) -1))))",
      "output_weight_simple": 27,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.001001436
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001001739)",
      "output_term": "(* (+ (/ (+ (- b a) (* c c)) 0) (- (* a a) a)) (- 0 (* c (/ (* (/ (- a b) d) (pow (pow a (+ 1 d)) (* b c))) -1))))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.001021414
    },
    "speedup": 0.9804408398553379,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": -2
  },
  {
    "base_term": "(+ (- (+ (pow (+ -1 (+ 1 a)) (pow (+ (* -1 (- a a)) (* a 0)) (- a a))) (- (/ -1 (* 0 1)) (* 0 1))) (* (* (+ (+ 1 1) 0) (pow b -1)) (* 0 1))) (/ (- (- 1 (pow -1 b)) (/ 1 1)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001014334)",
      "output_term": "(+ (pow a (pow 0 0)) (+ (/ -1 0) (/ (* -1 (pow -1 b)) 1)))",
      "output_weight_simple": 13,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.001013012
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100503)",
      "output_term": "(+ (pow a (pow 0 0)) (- (/ -1 0) (pow -1 b)))",
      "output_weight_simple": 10,
      "output_weight_complex": 25,
      "output_depth": 4,
      "simplification_time": 0.001031774
    },
    "speedup": 0.9818157852397909,
    "weight_simple_diff": 3,
    "weight_complex_diff": 8,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (pow (+ (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (* (/ 0 (/ a -1)) (+ -1 c))) (pow (* (/ a 0) 0) (- 0 c))) (* (pow (- 1 -1) 0) (pow c a))) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003219)",
      "output_term": "(+ (pow (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (+ (* (/ 0 (/ a -1)) (+ -1 c)) (pow 0 (- 0 c)))) (pow c a)) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 31,
      "output_weight_complex": 83,
      "output_depth": 9,
      "simplification_time": 0.001009694
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001008696)",
      "output_term": "(+ (pow (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (+ (/ 0 (/ a -1)) (pow 0 (- 0 c)))) (pow c a)) (/ (pow (- b e) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.001027517
    },
    "speedup": 0.9826543015833316,
    "weight_simple_diff": 3,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (* (* (* (+ (pow (* (- a 1) 1) (* b -1)) 1) (+ (/ 1 -1) a)) (+ a (pow a 0))) (pow (/ (+ 0 1) -1) (/ b a))) (pow (* (pow a b) 0) (- 0 c))) (/ (- (+ (/ c a) 1) (/ 0 -1)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001014042)",
      "output_term": "(pow (/ (* (+ 1 (pow (+ a -1) (* b -1))) (* (pow -1 (/ b a)) (* (+ a -1) (+ a 1)))) (pow 0 (- 0 c))) (/ (+ 1 (/ c a)) (+ -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 61,
      "output_depth": 7,
      "simplification_time": 0.001013633
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001017985)",
      "output_term": "(pow (/ (* (+ a -1) (* (+ 1 (pow (+ a -1) (- 0 b))) (* (+ a 1) (pow -1 (/ b a))))) (pow 0 (- 0 c))) (/ (+ 1 (/ c a)) (- d 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001030827
    },
    "speedup": 0.9833201885476417,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (+ (+ (+ (+ (* (pow (/ -1 1) 0) (/ 0 -1)) (+ a 0)) (pow (pow a a) b)) (/ (+ c b) -1)) (/ (pow 1 a) (/ -1 1))) (pow (- (pow 0 a) 0) (* 1 b))) (pow (/ (* (pow -1 e) c) (pow 1 c)) (pow e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (+ (pow (pow a a) b) (+ (/ (+ b c) -1) (/ (pow 1 a) -1)))) (pow (pow 0 a) b)) (/ (* c (pow -1 e)) (pow 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.0008074390000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (pow (pow a a) b) (+ a (+ (/ (+ b c) -1) (/ (pow 1 a) -1)))) (pow (pow 0 a) b)) (/ (* c (pow -1 e)) (pow 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.000819582
    },
    "speedup": 0.9851839108228342,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (- (- (- (- (pow (/ (* -1 a) a) (- -1 1)) (/ a -1)) (pow (* 1 0) 1)) (/ (+ b -1) -1)) (* -1 (+ (- 0 a) 1))) (/ (* (/ 0 0) 0) (* b 1))) (* (* (- (pow b 1) a) (* a 1)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006281)",
      "output_term": "(* a (* (/ (- (- (- (pow (/ (- 0 a) a) -2) (/ a -1)) (/ (+ -1 b) -1)) (+ -1 a)) (/ 0 b)) (- b a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 10,
      "simplification_time": 0.001004463
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001003987)",
      "output_term": "(* a (* (/ (- (- (+ (pow -1 -2) (- 1 a)) (/ a -1)) (/ (+ -1 b) -1)) (/ 0 b)) (- b a)))",
      "output_weight_simple": 19,
      "output_weight_complex": 42,
      "output_depth": 8,
      "simplification_time": 0.001015394
    },
    "speedup": 0.9892347207093994,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (/ (* (* (pow (pow (+ (* (* -1 a) -1) (pow 0 0)) (/ a 0)) (pow (+ 0 1) -1)) (* (pow 1 1) a)) (- (+ (- 0 b) 1) 0)) (- (- (+ 0 0) a) (/ -1 b))) (* (* (* (- 0 b) b) (- 1 d)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005926)",
      "output_term": "(pow (/ (* a (* (pow (pow (+ a (pow 0 0)) (/ a 0)) (pow 1 -1)) (+ 1 (- 0 b)))) (- (- 0 a) (/ -1 b))) (* b (* (/ a b) (* (- 0 b) (- 1 d)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.001032907
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001020851)",
      "output_term": "(pow (/ (* a (* (pow (+ a (pow 0 0)) (/ a 0)) (- 1 b))) (- (- 0 a) (/ -1 b))) (* b (* (- 1 d) (* (- 0 b) (/ a b)))))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.001041142
    },
    "speedup": 0.9920904161007817,
    "weight_simple_diff": 2,
    "weight_complex_diff": 8,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (pow (/ (* (+ (* (* -1 (+ a 1)) (- -1 b)) (- -1 a)) (* (* b b) 0)) (- (* a 1) 1)) (pow c (pow (- -1 d) 1))) (* (* -1 (- b d)) (+ 1 0))) (pow (* (+ (+ b a) a) (* c a)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006198)",
      "output_term": "(/ (+ (pow (/ 0 (+ -1 a)) (pow c (- -1 d))) (- b d)) (* a (* c (+ b (+ a a)))))",
      "output_weight_simple": 18,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.001024357
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001013244)",
      "output_term": "(/ (+ (pow (/ 0 (- a 1)) (pow c (- -1 d))) (- b d)) (* a (* c (+ a (+ a b)))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.00103168
    },
    "speedup": 0.992901868796526,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (/ (pow (* (pow (* (* (+ 1 -1) a) (pow 1 1)) (- a -1)) (/ (/ a -1) c)) (* (+ c -1) 0)) (- (+ (pow a 1) 1) (+ 0 1))) (/ (* (- e a) e) -1)) (- (- (/ (+ a e) 1) (pow a c)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001015085)",
      "output_term": "(+ (- (/ 1 a) (/ (* e (- e a)) -1)) (- (- (/ (+ a e) 1) (pow a c)) (pow -1 b)))",
      "output_weight_simple": 18,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.00101442
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002576)",
      "output_term": "(- (+ (/ 1 a) (- (+ a e) (+ (pow a c) (pow -1 b)))) (/ (* e (- e a)) -1))",
      "output_weight_simple": 17,
      "output_weight_complex": 36,
      "output_depth": 6,
      "simplification_time": 0.0010214479999999999
    },
    "speedup": 0.9931195714319282,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (/ (pow (+ (+ (+ (- (/ -1 a) a) (* 1 1)) (pow 1 a)) (* -1 (* a 1))) (/ (pow 1 a) b)) (pow (+ (pow a c) c) b)) (/ (- (pow a 0) -1) (/ b c))) (+ (pow (- (pow -1 1) 1) (+ 1 1)) (pow b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000078)",
      "output_term": "(+ (pow (/ (pow (+ 1 (+ (+ (/ -1 a) (pow 1 a)) (* a -2))) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) -5)",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001013762
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004844)",
      "output_term": "(- (pow (/ (pow (+ 1 (- (+ (/ -1 a) (- (pow 1 a) a)) a)) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) (+ 1 (pow -2 2)))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.001020618
    },
    "speedup": 0.9932825013864149,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (* (/ (- (/ (pow (pow (- 0 1) a) (* 1 0)) (* a 0)) (+ a (+ b 0))) (* -1 (* c d))) (+ (* (/ 0 d) c) b)) (pow (* (/ a 0) c) (pow 0 d))) (/ (pow (pow (- 1 d) e) (* 1 1)) (/ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100125)",
      "output_term": "(pow (- (* (/ (- (/ 1 0) (+ a b)) (* c (* -1 d))) (+ b (* c (/ 0 d)))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 7,
      "simplification_time": 0.0010139749999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001062)",
      "output_term": "(pow (- (* (/ (- (/ 1 0) (+ a b)) (* d (- 0 c))) (+ b (/ 0 d))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 7,
      "simplification_time": 0.001019985
    },
    "speedup": 0.9941077564866149,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (* (* (pow (/ (* (* a (- 0 a)) a) a) (/ (/ b -1) 0)) (/ (pow a 1) b)) (pow b (pow c (- -1 d)))) (/ (pow (pow (pow -1 e) e) (* c 1)) (/ e d))) (/ (- (pow (/ 1 -1) 1) (+ 1 -1)) (+ d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002173)",
      "output_term": "(- (* (pow (/ (* -1 (pow a 3)) a) (/ (/ b -1) 0)) (* (/ (pow (pow (pow -1 e) e) c) (/ e d)) (* (/ a b) (pow b (pow c (- -1 d)))))) (/ -1 (+ d e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 87,
      "output_depth": 8,
      "simplification_time": 0.001011916
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009238)",
      "output_term": "(- (* (pow (- 0 (* a a)) (/ (/ b -1) 0)) (* (/ a b) (/ (* (pow b (pow c (- -1 d))) (pow (pow (pow -1 e) e) c)) (/ e d)))) (/ -1 (+ d e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 78,
      "output_depth": 9,
      "simplification_time": 0.001017226
    },
    "speedup": 0.9947799210794849,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (/ (+ (+ (pow (* (/ (+ -1 (+ a a)) (pow b 1)) (* b c)) (- (* c b) a)) (* (+ d -1) 1)) (- (+ 0 c) (+ c b))) (* (* (+ a c) -1) (pow -1 -1))) (/ (pow (- (/ c 0) a) (- a a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002559)",
      "output_term": "(pow (/ (+ (pow (* b (* (/ (+ a (+ -1 a)) b) c)) (- (* b c) a)) (+ d (+ -1 (* -1 b)))) (* -1 (* (+ a c) (pow -1 -1)))) (/ 1 (pow -1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.001030092
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00101117)",
      "output_term": "(pow (/ (+ (pow (* (/ (+ a (+ -1 a)) b) (* b c)) (- (* b c) a)) (+ -1 (- d b))) (+ a c)) (/ 1 (pow -1 e)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.001035449
    },
    "speedup": 0.9948263989824705,
    "weight_simple_diff": 5,
    "weight_complex_diff": 12,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (pow (* (+ (pow (+ (* -1 (- 0 a)) (* a b)) (- 1 b)) (+ 1 (* -1 1))) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ (* 0 (* a 0)) (+ 0 b))) (pow (+ (+ (pow a d) e) (+ e d)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001003703)",
      "output_term": "(pow (/ (pow (* (pow (* a (+ b 1)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ 0 b)) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001016039
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002498)",
      "output_term": "(pow (/ (pow (* (pow (+ a (* a b)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ 0 b)) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001020988
    },
    "speedup": 0.9951527344101988,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (* (/ 0 (/ a -1)) (+ -1 c))) (pow (* (/ a 0) 0) (- 0 c))) (* (pow (- 1 -1) 0) (pow c a))) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001012704)",
      "output_term": "(+ (pow (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (+ (* (/ 0 (/ a -1)) (+ -1 c)) (pow 0 (- 0 c)))) (pow c a)) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 31,
      "output_weight_complex": 83,
      "output_depth": 9,
      "simplification_time": 0.0010180270000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000374)",
      "output_term": "(+ (pow (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (+ (/ 0 (/ a -1)) (pow 0 (- 0 c)))) (pow c a)) (/ (pow (- b e) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.001022733
    },
    "speedup": 0.995398603545598,
    "weight_simple_diff": 3,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (pow (* (- (+ 1 (+ (pow (pow a b) 1) (* 0 0))) (* (- 0 0) a)) (/ 0 (/ a 1))) (+ (* 1 (+ c 1)) (pow -1 b))) (- (+ (* 0 1) -1) (pow c 1))) (* (- (pow (* 1 e) e) (/ a b)) (+ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000973)",
      "output_term": "(pow (pow (pow (* (+ 1 (pow a b)) (/ 0 (/ a 1))) (+ 1 (+ c (pow -1 b)))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.0010262160000000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001008181)",
      "output_term": "(pow (pow (pow (/ 0 a) (+ 1 (+ c (pow -1 b)))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 20,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001030298
    },
    "speedup": 0.9960380394798399,
    "weight_simple_diff": 4,
    "weight_complex_diff": 12,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (pow (* (- (pow (+ (pow 0 1) a) (pow 1 a)) (- 0 a)) (* (pow 1 0) 1)) (* (- -1 -1) 0)) (/ (+ (+ a -1) -1) (+ a 1))) (+ (/ (pow a a) b) 0)) (+ (+ (* (pow b 0) 1) (/ c 0)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001011623)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.001022166
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013511)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.001025859
    },
    "speedup": 0.9964000900708575,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (* (+ (+ (* a (/ (/ a 0) a)) (* a a)) (+ (pow -1 a) -1)) (* (- 0 a) c)) (- (pow (* -1 a) b) (+ a a))) (* (* (/ 0 b) 0) (+ a 0))) (+ (/ (* (+ -1 b) 0) (/ -1 -1)) (* d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100573)",
      "output_term": "(pow (+ (pow (- 0 a) b) (* (- 0 a) (+ (* (+ (* a (+ a (/ (/ a 0) a))) (+ -1 (pow -1 a))) c) 2))) (* c d))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 11,
      "simplification_time": 0.001026169
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001007772)",
      "output_term": "(pow (- (- (pow (- 0 a) b) (+ a a)) (* a (* (+ (/ a 0) (+ (pow -1 a) (+ (* a a) -1))) c))) (* c d))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 9,
      "simplification_time": 0.0010298590000000002
    },
    "speedup": 0.9964169852377848,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 2
  },
  {
    "base_term": "(- (* (- (/ (- (+ (pow (- (* -1 -1) -1) (* a b)) (pow b -1)) (+ (- -1 c) -1)) (+ d 1)) (* (+ (+ 1 0) d) (+ -1 a))) (- (- (+ 1 c) -1) (/ b -1))) (* (* (* -1 (/ 0 c)) (/ b d)) (+ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002209)",
      "output_term": "(* (- (/ (+ (pow 2 (* a b)) (+ (pow b -1) (+ 2 c))) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (- (+ 2 c) (/ b -1)))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.001025583
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000122)",
      "output_term": "(* (- (/ (- (+ (pow 2 (* a b)) (/ 1 b)) (- -2 c)) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (- c (- (/ b -1) 2)))",
      "output_weight_simple": 23,
      "output_weight_complex": 45,
      "output_depth": 8,
      "simplification_time": 0.001028663
    },
    "speedup": 0.9970058221205585,
    "weight_simple_diff": -2,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (/ (/ (- (- (pow (+ a (* 0 (* b 0))) (+ -1 b)) (pow (- -1 0) b)) 0) (+ (pow (/ a c) a) (/ e 1))) (- (/ (/ (+ b -1) c) (pow -1 0)) (/ 1 -1))) (- (* (- 0 (pow -1 a)) (/ 0 b)) (/ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000874)",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ (pow (/ a c) a) (/ e 1))) (+ 1 (/ (/ (+ b -1) c) 1))) (- (* -1 (* (pow -1 a) (/ 0 b))) (/ 1 a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 80,
      "output_depth": 7,
      "simplification_time": 0.001005102
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001645)",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ 1 (/ (+ b -1) c))) (+ (pow (/ a c) a) e)) (- (/ 0 b) (/ 1 a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.00100792
    },
    "speedup": 0.997204143185967,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (- (- (- (- (pow (/ (* -1 a) a) (- -1 1)) (/ a -1)) (pow (* 1 0) 1)) (/ (+ b -1) -1)) (* -1 (+ (- 0 a) 1))) (/ (* (/ 0 0) 0) (* b 1))) (* (* (- (pow b 1) a) (* a 1)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005876)",
      "output_term": "(* a (* (/ (- (- (- (pow (/ (- 0 a) a) -2) (/ a -1)) (/ (+ -1 b) -1)) (+ -1 a)) (/ 0 b)) (- b a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 10,
      "simplification_time": 0.001004084
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001613)",
      "output_term": "(* a (* (/ (- (- (+ (pow -1 -2) (- 1 a)) (/ a -1)) (/ (+ -1 b) -1)) (/ 0 b)) (- b a)))",
      "output_weight_simple": 19,
      "output_weight_complex": 42,
      "output_depth": 8,
      "simplification_time": 0.001006879
    },
    "speedup": 0.9972240954474171,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (- (* (/ (- (/ (pow (pow (- 0 1) a) (* 1 0)) (* a 0)) (+ a (+ b 0))) (* -1 (* c d))) (+ (* (/ 0 d) c) b)) (pow (* (/ a 0) c) (pow 0 d))) (/ (pow (pow (- 1 d) e) (* 1 1)) (/ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004234)",
      "output_term": "(pow (- (* (/ (- (/ 1 0) (+ a b)) (* c (* -1 d))) (+ b (* c (/ 0 d)))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 7,
      "simplification_time": 0.0010180369999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000178)",
      "output_term": "(pow (- (* (/ (- (/ 1 0) (+ a b)) (* d (- 0 c))) (+ b (/ 0 d))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 7,
      "simplification_time": 0.0010206
    },
    "speedup": 0.9974887321183616,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (* (+ (pow (+ (* -1 (- 0 a)) (* a b)) (- 1 b)) (+ 1 (* -1 1))) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ (* 0 (* a 0)) (+ 0 b))) (pow (+ (+ (pow a d) e) (+ e d)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.0010052)",
      "output_term": "(pow (/ (pow (* (pow (* a (+ b 1)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ 0 b)) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.0010165390000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000418)",
      "output_term": "(pow (/ (pow (* (pow (* a (+ b 1)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ 0 b)) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001019033
    },
    "speedup": 0.9975525817122706,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (/ (/ (+ (* (pow (+ 0 0) a) (- -1 b)) a) a) (/ (/ (* 1 c) -1) (/ 1 1))) (pow (* a (- a c)) (* 1 0))) (* (/ (* a e) e) (- c c))) (/ (+ (+ (/ b 1) c) (/ -1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001014059)",
      "output_term": "(- 1 (/ (+ (/ b 1) (+ 1 c)) 1))",
      "output_weight_simple": 8,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.001012284
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003101)",
      "output_term": "(- 0 (+ c b))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.001014689
    },
    "speedup": 0.997629815638092,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": 2
  },
  {
    "base_term": "(* (/ (/ (pow (pow (+ (pow (/ (* 0 a) 0) (pow b 1)) (- c -1)) (+ c (pow -1 1))) (+ a (* d d))) (/ (+ (- 0 -1) c) (pow a 0))) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* b a)) (/ e b))))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003417)",
      "output_term": "(* (/ (/ (pow (pow (+ 1 (+ (pow (/ 0 0) b) c)) (+ c -1)) (+ a (* d d))) (/ (+ 1 c) 1)) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* a b)) (/ e b))))",
      "output_weight_simple": 30,
      "output_weight_complex": 77,
      "output_depth": 10,
      "simplification_time": 0.001008243
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004066)",
      "output_term": "(* (/ (/ (pow (pow (+ c (+ 1 (pow (/ 0 0) b))) (+ c -1)) (+ a (* d d))) (+ 1 c)) (/ (* b (* a (- c b))) d)) (* b (/ (- 1 (* a b)) (/ e b))))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.001010164
    },
    "speedup": 0.9980983285882292,
    "weight_simple_diff": 0,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (- (- (/ (/ (/ (pow (+ -1 a) 1) (* -1 a)) (- 0 1)) (pow (- b a) b)) (* (pow 0 -1) 0)) (pow (/ b (+ c a)) (/ 1 a))) (pow (+ (+ 1 a) -1) c)) (pow (- (+ -1 (- 0 -1)) (/ -1 0)) (* 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00103819)",
      "output_term": "(+ (* (- (/ (/ (/ (+ -1 a) (* -1 a)) -1) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001057067
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001015168)",
      "output_term": "(+ (* (- (/ (/ (/ (+ -1 a) -1) (- 0 a)) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.001059078
    },
    "speedup": 0.9981011785723054,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (/ (pow (+ (+ (+ (- (/ -1 a) a) (* 1 1)) (pow 1 a)) (* -1 (* a 1))) (/ (pow 1 a) b)) (pow (+ (pow a c) c) b)) (/ (- (pow a 0) -1) (/ b c))) (+ (pow (- (pow -1 1) 1) (+ 1 1)) (pow b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001297)",
      "output_term": "(+ (pow (/ (pow (+ 1 (+ (+ (/ -1 a) (pow 1 a)) (* a -2))) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) -5)",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001016024
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001453)",
      "output_term": "(- (pow (/ (pow (+ 1 (- (+ (/ -1 a) (- (pow 1 a) a)) a)) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) (+ 1 (pow -2 2)))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.001017015
    },
    "speedup": 0.9990255797603771,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (/ (pow (+ (+ (+ (- (/ -1 a) a) (* 1 1)) (pow 1 a)) (* -1 (* a 1))) (/ (pow 1 a) b)) (pow (+ (pow a c) c) b)) (/ (- (pow a 0) -1) (/ b c))) (+ (pow (- (pow -1 1) 1) (+ 1 1)) (pow b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004682)",
      "output_term": "(+ (pow (/ (pow (+ 1 (+ (+ (/ -1 a) (pow 1 a)) (* a -2))) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) -5)",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001021576
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000383)",
      "output_term": "(- (pow (/ (pow (+ 1 (- (+ (/ -1 a) (- (pow 1 a) a)) a)) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) (+ 1 (pow -2 2)))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.001022548
    },
    "speedup": 0.9990494333762325,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(- (/ (pow (- (pow a (+ b (pow a (- (pow c d) b)))) (- (* (pow -1 -1) d) 1)) (* (pow (* b a) -1) (* 0 1))) (- (pow (* (* c 1) b) (* d 1)) (/ 1 -1))) (+ (- (/ (- 1 e) b) (* 0 a)) (* 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002497)",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.001009163
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000459)",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.001009959
    },
    "speedup": 0.9992118491938782,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (* (pow (* (* (/ (* a a) -1) b) (* b 1)) (* d (* 0 b))) (+ (+ e 1) c)) (pow (+ (pow a d) c) (/ b 0))) (- (pow (- e -1) -1) (* a e))) (pow (- (+ (/ a a) 0) (* 1 1)) (* d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005183)",
      "output_term": "(+ (pow (+ 1 (+ e c)) (pow (+ c (pow a d)) (/ b 0))) (+ (- (pow (+ 1 e) -1) (* a e)) (pow (+ -1 (/ a a)) (* b d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 55,
      "output_depth": 6,
      "simplification_time": 0.001009716
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000413)",
      "output_term": "(+ (- (/ 1 (+ 1 e)) (* a e)) (+ (pow (+ (+ 1 e) c) (pow (+ c (pow a d)) (/ b 0))) (pow 0 (* b d))))",
      "output_weight_simple": 21,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.00101036
    },
    "speedup": 0.9993626034284808,
    "weight_simple_diff": 4,
    "weight_complex_diff": 7,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (/ (* (pow (* (+ (+ (+ (pow 0 a) 1) (- a a)) (pow c b)) (pow (pow 1 b) a)) (+ -1 -1)) (* (/ (+ 0 e) c) (- c -1))) (* (- (pow b -1) 1) (/ d d))) (/ (* (- (+ b -1) b) (- 0 -1)) (pow -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001020913)",
      "output_term": "(/ (/ (* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (* (/ e c) (+ 1 c))) (* (+ -1 (pow b -1)) (/ d d))) (/ -1 (pow -1 -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.001018741
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003873)",
      "output_term": "(/ (* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (* (/ e c) (+ 1 c))) (- (/ 1 b) 1))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.00101927
    },
    "speedup": 0.9994810011086366,
    "weight_simple_diff": 7,
    "weight_complex_diff": 23,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (/ (* (* (* (pow (+ a a) a) (- -1 a)) (/ a a)) 0) (pow (pow b 1) -1)) (/ b (+ a (+ b a)))) (/ (+ (* (+ -1 -1) b) (+ -1 a)) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006888)",
      "output_term": "(/ (* (pow (/ 0 (pow b -1)) (/ b (+ a (+ a b)))) (/ (+ -1 (+ a (* b -2))) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.001006231
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100065)",
      "output_term": "(/ (* (pow (/ 0 (/ 1 b)) (/ b (+ a (+ a b)))) (/ (+ a (+ -1 (* b -2))) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.0010067420000000001
    },
    "speedup": 0.9994924220902673,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (- (+ (- (* (/ (/ (- a a) -1) b) (pow 1 -1)) (+ (* 1 a) 0)) (* (pow -1 1) c)) (pow (- (pow c c) 0) (* 1 c))) (+ (* -1 (pow e d)) (+ c b))) (* (* (- (/ b b) -1) (+ d c)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012876)",
      "output_term": "(/ (+ (- (+ (* (/ 0 b) (pow 1 -1)) (* -1 (+ c a))) (pow (pow c c) c)) (+ (pow e d) (* -1 (+ b c)))) (* (+ 1 (/ b b)) (* (+ c d) (pow 0 0))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.001036938
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00102291)",
      "output_term": "(/ (- (- (/ 0 b) (+ c a)) (+ (pow (pow c c) c) (- (+ b c) (pow e d)))) (* 2 (* (+ c d) (pow 0 0))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.001037413
    },
    "speedup": 0.9995421302798403,
    "weight_simple_diff": 7,
    "weight_complex_diff": 17,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (pow (* (pow (* (* (/ (* a a) -1) b) (* b 1)) (* d (* 0 b))) (+ (+ e 1) c)) (pow (+ (pow a d) c) (/ b 0))) (- (pow (- e -1) -1) (* a e))) (pow (- (+ (/ a a) 0) (* 1 1)) (* d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005186)",
      "output_term": "(+ (pow (+ 1 (+ e c)) (pow (+ c (pow a d)) (/ b 0))) (+ (- (pow (+ 1 e) -1) (* a e)) (pow (+ -1 (/ a a)) (* b d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 55,
      "output_depth": 6,
      "simplification_time": 0.001011537
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000929)",
      "output_term": "(+ (- (/ 1 (+ 1 e)) (* a e)) (+ (pow (+ (+ 1 e) c) (pow (+ c (pow a d)) (/ b 0))) (pow 0 (* b d))))",
      "output_weight_simple": 21,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.0010118319999999998
    },
    "speedup": 0.9997084496240485,
    "weight_simple_diff": 4,
    "weight_complex_diff": 7,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (/ (pow (* (+ (pow (+ (* -1 (- 0 a)) (* a b)) (- 1 b)) (+ 1 (* -1 1))) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ (* 0 (* a 0)) (+ 0 b))) (pow (+ (+ (pow a d) e) (+ e d)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001008042)",
      "output_term": "(pow (/ (pow (* (pow (* a (+ b 1)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ 0 b)) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001019872
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001229)",
      "output_term": "(pow (/ (pow (* (pow (+ a (* a b)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ 0 b)) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001019584
    },
    "speedup": 1.0002824681438705,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (* (pow (* (* (/ (* a a) -1) b) (* b 1)) (* d (* 0 b))) (+ (+ e 1) c)) (pow (+ (pow a d) c) (/ b 0))) (- (pow (- e -1) -1) (* a e))) (pow (- (+ (/ a a) 0) (* 1 1)) (* d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003783)",
      "output_term": "(+ (pow (+ 1 (+ e c)) (pow (+ c (pow a d)) (/ b 0))) (+ (- (pow (+ 1 e) -1) (* a e)) (pow (+ -1 (/ a a)) (* b d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 55,
      "output_depth": 6,
      "simplification_time": 0.001012321
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002744)",
      "output_term": "(+ (- (/ 1 (+ 1 e)) (* a e)) (+ (pow (+ (+ 1 e) c) (pow (+ c (pow a d)) (/ b 0))) (pow 0 (* b d))))",
      "output_weight_simple": 21,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001011924
    },
    "speedup": 1.0003923219530322,
    "weight_simple_diff": 4,
    "weight_complex_diff": 7,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (* (/ (- (/ (pow (pow (- 0 1) a) (* 1 0)) (* a 0)) (+ a (+ b 0))) (* -1 (* c d))) (+ (* (/ 0 d) c) b)) (pow (* (/ a 0) c) (pow 0 d))) (/ (pow (pow (- 1 d) e) (* 1 1)) (/ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013866)",
      "output_term": "(pow (- (* (/ (- (/ 1 0) (+ a b)) (* c (* -1 d))) (+ b (* c (/ 0 d)))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 7,
      "simplification_time": 0.001025216
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005168)",
      "output_term": "(pow (- (* (/ (- (/ 1 0) (+ a b)) (* d (- 0 c))) (+ b (/ 0 d))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 7,
      "simplification_time": 0.001024182
    },
    "speedup": 1.00100958618683,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (/ (- (* (pow (+ (+ -1 0) (/ 0 0)) (/ a 0)) (+ (* a b) a)) (* (+ 1 1) e)) (pow (/ 0 (pow 1 -1)) (- d 0))) (/ (pow (/ 0 d) b) (pow e -1))) (- (* (pow (/ d b) a) (- d d)) (/ 0 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000479)",
      "output_term": "(* -1 (* (+ (/ (+ (* (pow (+ -1 (/ 0 0)) (/ a 0)) (* a (+ b 1))) (* e -2)) (pow (/ 0 (pow 1 -1)) d)) (/ (pow (/ 0 d) b) (pow e -1))) (/ 0 c)))",
      "output_weight_simple": 30,
      "output_weight_complex": 83,
      "output_depth": 10,
      "simplification_time": 0.001009317
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.001002687)",
      "output_term": "(- 0 (/ 0 c))",
      "output_weight_simple": 4,
      "output_weight_complex": 9,
      "output_depth": 3,
      "simplification_time": 0.001008243
    },
    "speedup": 1.0010652193965146,
    "weight_simple_diff": 26,
    "weight_complex_diff": 74,
    "depth_diff": 7
  },
  {
    "base_term": "(/ (* (pow (- (- (pow (+ (+ (+ a 1) -1) (- 0 1)) (* a -1)) (/ (* 0 c) d)) (pow (pow c d) a)) (- d (- (pow e b) e))) (- (- (+ c 1) -1) (+ -1 c))) (* (pow (* (/ 1 a) -1) (* e c)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100432)",
      "output_term": "(/ (* (pow (- (- (pow (+ a -1) (* a -1)) (/ 0 d)) (pow (pow c d) a)) (- d (- (pow e b) e))) (- (+ c 2) (+ -1 c))) (* (pow (* -1 (/ 1 a)) (* c e)) (/ a b)))",
      "output_weight_simple": 32,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.001038515
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018482)",
      "output_term": "(/ (* (pow (- (pow (+ a -1) (- 0 a)) (+ (/ 0 d) (pow (pow c d) a))) (- d (- (pow e b) e))) 3) (* (pow (/ -1 a) (* c e)) (/ a b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.001036988
    },
    "speedup": 1.0014725339155324,
    "weight_simple_diff": 5,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (pow (* (- (pow (+ (pow 0 1) a) (pow 1 a)) (- 0 a)) (* (pow 1 0) 1)) (* (- -1 -1) 0)) (/ (+ (+ a -1) -1) (+ a 1))) (+ (/ (pow a a) b) 0)) (+ (+ (* (pow b 0) 1) (/ c 0)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001016261)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.001026637
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00101268)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.001025034
    },
    "speedup": 1.001563850564957,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (* (- (/ (pow a (/ (+ 0 0) a)) (* 0 -1)) a) (/ (* (* a 1) a) (- 1 0))) (- (- (+ a -1) 0) (- -1 0))) (/ (* (* 1 a) -1) (/ a c))) (/ (+ (- d (pow a b)) (+ -1 e)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003705)",
      "output_term": "(* (pow (pow (* (- (/ (pow a (/ 0 a)) 0) a) (/ (* a a) 1)) a) (/ (* a -1) (/ a c))) (/ (+ -1 (+ (- d (pow a b)) e)) d))",
      "output_weight_simple": 26,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001021073
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001001299)",
      "output_term": "(* (pow (pow (* a (* a (- (/ (pow a (/ 0 a)) 0) a))) a) (/ (* a -1) (/ a c))) (/ (+ e (- (+ -1 d) (pow a b))) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 10,
      "simplification_time": 0.0010193860000000002
    },
    "speedup": 1.0016549177642227,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (* (* (+ (/ (pow a (* (* (* -1 0) 1) b)) 0) (pow (pow (- a a) 0) (/ 0 0))) (/ (+ c (* -1 b)) c)) (* (/ (pow (- a -1) a) (* -1 1)) (/ b 0))) (/ (- (/ (pow 0 -1) 0) (- 0 0)) (- a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004822)",
      "output_term": "(pow (* (/ (+ c (* -1 b)) c) (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (* (/ (pow (+ a 1) a) -1) (/ b 0)))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 75,
      "output_depth": 8,
      "simplification_time": 0.001017057
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004579)",
      "output_term": "(pow (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (* (/ (pow (+ a 1) a) -1) (* (/ (- c b) c) (/ b 0)))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001015359
    },
    "speedup": 1.0016723149152171,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (/ (/ (pow (pow (+ (pow (/ (* 0 a) 0) (pow b 1)) (- c -1)) (+ c (pow -1 1))) (+ a (* d d))) (/ (+ (- 0 -1) c) (pow a 0))) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* b a)) (/ e b))))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006455)",
      "output_term": "(* (/ (/ (pow (pow (+ 1 (+ (pow (/ 0 0) b) c)) (+ c -1)) (+ a (* d d))) (/ (+ 1 c) 1)) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* a b)) (/ e b))))",
      "output_weight_simple": 30,
      "output_weight_complex": 77,
      "output_depth": 10,
      "simplification_time": 0.001009788
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001153)",
      "output_term": "(* (/ (/ (pow (pow (+ c (+ 1 (pow (/ 0 0) b))) (+ c -1)) (+ a (* d d))) (+ 1 c)) (/ (* b (* a (- c b))) d)) (* b (/ (- 1 (* a b)) (/ e b))))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.001008016
    },
    "speedup": 1.0017579086046253,
    "weight_simple_diff": 0,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (- (- (* (pow (pow (* (/ -1 a) a) -1) (pow 1 -1)) (* (pow 1 a) a)) (- (pow 1 0) 0)) (- (/ (+ b -1) 0) (/ a -1))) (/ (+ b (* 1 a)) (- 0 d))) (pow (/ (pow (/ 1 1) -1) (+ a 0)) (/ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001004144)",
      "output_term": "(- (pow (- (+ -1 (* (pow (pow (* a (/ -1 a)) -1) (pow 1 -1)) (* a (pow 1 a)))) (- (/ (+ -1 b) 0) (/ a -1))) (/ (+ a b) (- 0 d))) (pow (/ (pow 1 -1) a) (/ b 0)))",
      "output_weight_simple": 28,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.0010136449999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004299)",
      "output_term": "(- (pow (- (- -1 (* a (pow 1 a))) (- (/ (+ -1 b) 0) (/ a -1))) (/ (+ a b) (- 0 d))) (pow (/ 1 a) (/ b 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.001011798
    },
    "speedup": 1.0018254631853394,
    "weight_simple_diff": 6,
    "weight_complex_diff": 21,
    "depth_diff": 3
  },
  {
    "base_term": "(- (/ (pow (- (pow a (+ b (pow a (- (pow c d) b)))) (- (* (pow -1 -1) d) 1)) (* (pow (* b a) -1) (* 0 1))) (- (pow (* (* c 1) b) (* d 1)) (/ 1 -1))) (+ (- (/ (- 1 e) b) (* 0 a)) (* 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001005111)",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.001012898
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00100141)",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.0010102470000000001
    },
    "speedup": 1.0026241107372749,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (- (+ (- (* (/ (/ (- a a) -1) b) (pow 1 -1)) (+ (* 1 a) 0)) (* (pow -1 1) c)) (pow (- (pow c c) 0) (* 1 c))) (+ (* -1 (pow e d)) (+ c b))) (* (* (- (/ b b) -1) (+ d c)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006594)",
      "output_term": "(/ (+ (- (+ (* (/ 0 b) (pow 1 -1)) (* -1 (+ c a))) (pow (pow c c) c)) (+ (pow e d) (* -1 (+ b c)))) (* (+ 1 (/ b b)) (* (+ c d) (pow 0 0))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.001030451
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012516)",
      "output_term": "(/ (- (- (/ 0 b) (+ c a)) (+ (pow (pow c c) c) (- (+ b c) (pow e d)))) (* 2 (* (+ c d) (pow 0 0))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.0010276579999999999
    },
    "speedup": 1.00271783025092,
    "weight_simple_diff": 7,
    "weight_complex_diff": 17,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (pow (pow (+ (* (* (* (+ a 1) -1) (- 1 0)) (pow a b)) (* c (/ d a))) (- (pow 1 -1) a)) (pow (+ (pow 1 a) -1) c)) (+ (* (- b b) b) (/ c c))) (/ (/ (+ (- a 1) a) (pow a e)) (- a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001626)",
      "output_term": "(pow (/ (pow (pow (+ (* (+ a 1) (* -1 (pow a b))) (* c (/ d a))) (- (pow 1 -1) a)) (pow (+ -1 (pow 1 a)) c)) (/ c c)) (/ (/ (+ a (+ a -1)) (pow a e)) a))",
      "output_weight_simple": 29,
      "output_weight_complex": 81,
      "output_depth": 9,
      "simplification_time": 0.0010084080000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002335)",
      "output_term": "(pow (pow (pow (+ (* (- -1 a) (pow a b)) (* c (/ d a))) (- 1 a)) (pow (+ -1 (pow 1 a)) c)) (/ (/ (- (+ a a) 1) (pow a e)) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 7,
      "simplification_time": 0.0010056009999999998
    },
    "speedup": 1.0027913655614904,
    "weight_simple_diff": 4,
    "weight_complex_diff": 16,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (+ (+ (+ (+ (- (pow (/ (pow a 0) b) -1) (pow 0 b)) (pow (- a b) -1)) (- (pow -1 c) -1)) (pow (pow (* d d) e) (/ 1 1))) (/ (/ (+ d 0) d) (pow 1 e))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009888)",
      "output_term": "(pow (+ (- (pow (/ 1 b) -1) (pow 0 b)) (+ (+ (pow (* d d) e) (/ (/ d d) (pow 1 e))) (+ (pow (- a b) -1) (+ (pow -1 c) 1)))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 32,
      "output_weight_complex": 86,
      "output_depth": 7,
      "simplification_time": 0.001042964
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001007663)",
      "output_term": "(pow (+ (- b (pow 0 b)) (+ (/ 1 (- a b)) (+ (pow (* d d) e) (+ (+ (pow -1 c) 1) (/ 1 (pow 1 e)))))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 8,
      "simplification_time": 0.001039804
    },
    "speedup": 1.0030390342795372,
    "weight_simple_diff": 3,
    "weight_complex_diff": 13,
    "depth_diff": -1
  },
  {
    "base_term": "(- (* (* (* (pow (/ (* (* a (- 0 a)) a) a) (/ (/ b -1) 0)) (/ (pow a 1) b)) (pow b (pow c (- -1 d)))) (/ (pow (pow (pow -1 e) e) (* c 1)) (/ e d))) (/ (- (pow (/ 1 -1) 1) (+ 1 -1)) (+ d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006958)",
      "output_term": "(- (* (pow (/ (* -1 (pow a 3)) a) (/ (/ b -1) 0)) (* (/ (pow (pow (pow -1 e) e) c) (/ e d)) (* (/ a b) (pow b (pow c (- -1 d)))))) (/ -1 (+ d e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 87,
      "output_depth": 8,
      "simplification_time": 0.001016746
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005646)",
      "output_term": "(- (* (pow (- 0 (* a a)) (/ (/ b -1) 0)) (* (/ a b) (/ (* (pow b (pow c (- -1 d))) (pow (pow (pow -1 e) e) c)) (/ e d)))) (/ -1 (+ d e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 78,
      "output_depth": 9,
      "simplification_time": 0.001013404
    },
    "speedup": 1.0032977963378868,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (+ (/ (* (/ (- (- (- (* 0 a) a) (pow a -1)) (+ 0 -1)) (* (pow 1 a) 0)) (/ a (- -1 c))) (* (/ (pow d b) c) 1)) (/ (pow -1 (/ e 1)) (pow -1 e))) (- (+ (pow 1 (+ 1 a)) (+ d -1)) (* -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005749)",
      "output_term": "(+ (/ (* (/ (+ (- (- 0 a) (pow a -1)) 1) 0) (/ a (- -1 c))) (/ (pow d b) c)) (+ -1 (+ (/ (pow -1 (/ e 1)) (pow -1 e)) (+ d (pow 1 (+ a 1))))))",
      "output_weight_simple": 29,
      "output_weight_complex": 74,
      "output_depth": 8,
      "simplification_time": 0.0010185279999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100032)",
      "output_term": "(+ d (+ (/ (* (/ (- 1 (+ a (/ 1 a))) 0) (/ a (- -1 c))) (/ (pow d b) c)) (pow 1 a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 51,
      "output_depth": 9,
      "simplification_time": 0.001014959
    },
    "speedup": 1.003516398199336,
    "weight_simple_diff": 9,
    "weight_complex_diff": 23,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (* (/ (/ (+ (* (pow (+ 0 0) a) (- -1 b)) a) a) (/ (/ (* 1 c) -1) (/ 1 1))) (pow (* a (- a c)) (* 1 0))) (* (/ (* a e) e) (- c c))) (/ (+ (+ (/ b 1) c) (/ -1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004849)",
      "output_term": "(- 1 (/ (+ (/ b 1) (+ 1 c)) 1))",
      "output_weight_simple": 8,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.001018084
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005253)",
      "output_term": "(- 0 (+ c b))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.001014037
    },
    "speedup": 1.0039909786329297,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (- (* (- (* (pow (pow (- (* -1 a) 0) b) (- c 0)) (* (pow b a) 0)) (+ b (* -1 d))) (/ (- (+ d a) d) (* 0 1))) (pow (/ 0 (+ c a)) (* d a))) (* (- (- (* c 1) a) (* a e)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001344)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001018591
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002303)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001014387
    },
    "speedup": 1.0041443748786212,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (/ (- (/ (* a b) a) (- a (+ b (* 0 1)))) (- 1 (pow (/ 1 c) 0))) (+ (- (* b 0) 1) -1)) (/ (* (* (* -1 0) c) (/ a 1)) (/ 0 -1))) (* (* (- (+ -1 1) d) (/ d c)) (pow c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000406)",
      "output_term": "(pow (+ (/ (- (/ (* a b) a) (- a b)) 0) (+ -2 (/ 0 0))) (* (- 0 d) (* (/ d c) (pow c c))))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001011868
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100053)",
      "output_term": "(pow (+ (/ (- b (- a b)) 0) (+ -2 (/ 0 0))) (* (- 0 d) (/ (* d (pow c c)) c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 6,
      "simplification_time": 0.0010072380000000001
    },
    "speedup": 1.0045967288763924,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (+ (* (pow (/ (/ (- (+ a -1) -1) (/ 1 a)) (* 1 a)) (* (pow a 0) b)) (- (/ c -1) -1)) (* (+ (* -1 -1) c) (pow -1 c))) (* (- 1 (* b 0)) (+ b 0))) (/ (/ (pow (pow e 1) d) c) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001020268)",
      "output_term": "(- (pow (+ (* (pow (/ (/ a (/ 1 a)) a) b) (+ 1 (/ c -1))) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.00103123
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000077)",
      "output_term": "(- (pow (+ (* (pow a b) (+ 1 (/ c -1))) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.001025594
    },
    "speedup": 1.0054953519618874,
    "weight_simple_diff": 3,
    "weight_complex_diff": 15,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (pow (/ (+ (* (- (- (- a a) 1) 0) (+ 1 1)) (+ (* a a) a)) a) (* (+ (pow a -1) b) (+ a d))) (pow (+ (* (* -1 -1) d) (* 1 e)) (* d d))) (* (pow (+ (+ b 1) d) (* 1 -1)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002574)",
      "output_term": "(+ (- (pow (/ (+ a (+ -2 (* a a))) a) (* (+ (pow a -1) b) (+ a d))) (pow (+ d e) (* d d))) (* (pow (+ 1 (+ b d)) -1) (/ b a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.0010160739999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002538)",
      "output_term": "(+ (- (pow (/ (+ a (+ -2 (* a a))) a) (* (+ (/ 1 a) b) (+ a d))) (pow (+ d e) (* d d))) (/ (/ b a) (+ 1 (+ b d))))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.001010392
    },
    "speedup": 1.0056235599648453,
    "weight_simple_diff": 2,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (* (* (pow (/ (* (* a (- 0 a)) a) a) (/ (/ b -1) 0)) (/ (pow a 1) b)) (pow b (pow c (- -1 d)))) (/ (pow (pow (pow -1 e) e) (* c 1)) (/ e d))) (/ (- (pow (/ 1 -1) 1) (+ 1 -1)) (+ d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005234)",
      "output_term": "(- (* (pow (/ (* -1 (pow a 3)) a) (/ (/ b -1) 0)) (* (/ (pow (pow (pow -1 e) e) c) (/ e d)) (* (/ a b) (pow b (pow c (- -1 d)))))) (/ -1 (+ d e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 87,
      "output_depth": 8,
      "simplification_time": 0.0010140009999999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002097)",
      "output_term": "(- (* (pow (- 0 (* a a)) (/ (/ b -1) 0)) (* (/ a b) (/ (* (pow b (pow c (- -1 d))) (pow (pow (pow -1 e) e) c)) (/ e d)))) (/ -1 (+ d e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 78,
      "output_depth": 9,
      "simplification_time": 0.001008273
    },
    "speedup": 1.0056810010780808,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (- (- (* (pow (pow (* (/ -1 a) a) -1) (pow 1 -1)) (* (pow 1 a) a)) (- (pow 1 0) 0)) (- (/ (+ b -1) 0) (/ a -1))) (/ (+ b (* 1 a)) (- 0 d))) (pow (/ (pow (/ 1 1) -1) (+ a 0)) (/ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001009412)",
      "output_term": "(- (pow (- (+ -1 (* (pow (pow (* a (/ -1 a)) -1) (pow 1 -1)) (* a (pow 1 a)))) (- (/ (+ -1 b) 0) (/ a -1))) (/ (+ a b) (- 0 d))) (pow (/ (pow 1 -1) a) (/ b 0)))",
      "output_weight_simple": 28,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.001020534
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001138)",
      "output_term": "(- (pow (- (- -1 (* a (pow 1 a))) (- (/ (+ -1 b) 0) (/ a -1))) (/ (+ a b) (- 0 d))) (pow (/ 1 a) (/ b 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.001014622
    },
    "speedup": 1.0058268005227564,
    "weight_simple_diff": 6,
    "weight_complex_diff": 21,
    "depth_diff": 3
  },
  {
    "base_term": "(* (+ (/ (- (* (pow (+ (+ -1 0) (/ 0 0)) (/ a 0)) (+ (* a b) a)) (* (+ 1 1) e)) (pow (/ 0 (pow 1 -1)) (- d 0))) (/ (pow (/ 0 d) b) (pow e -1))) (- (* (pow (/ d b) a) (- d d)) (/ 0 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001008593)",
      "output_term": "(* -1 (* (+ (/ (+ (* (pow (+ -1 (/ 0 0)) (/ a 0)) (* a (+ b 1))) (* e -2)) (pow (/ 0 (pow 1 -1)) d)) (/ (pow (/ 0 d) b) (pow e -1))) (/ 0 c)))",
      "output_weight_simple": 30,
      "output_weight_complex": 83,
      "output_depth": 10,
      "simplification_time": 0.00101744
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.001005915)",
      "output_term": "(- 0 (/ 0 c))",
      "output_weight_simple": 4,
      "output_weight_complex": 9,
      "output_depth": 3,
      "simplification_time": 0.0010115410000000001
    },
    "speedup": 1.0058316963919405,
    "weight_simple_diff": 26,
    "weight_complex_diff": 74,
    "depth_diff": 7
  },
  {
    "base_term": "(+ (/ (* (/ (+ (- (+ (* (- 0 -1) -1) a) (- 0 -1)) (* (- 1 b) -1)) (+ (+ a b) a)) (- (* (+ a -1) -1) (pow 0 1))) (* (* c (/ b a)) (- 1 0))) (pow (pow (/ (pow d c) e) (- e 0)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004938)",
      "output_term": "(+ 1 (/ (* -1 (* (/ (+ a (+ -3 b)) (+ b (+ a a))) (+ -1 a))) (* c (/ b a))))",
      "output_weight_simple": 18,
      "output_weight_complex": 36,
      "output_depth": 8,
      "simplification_time": 0.0010221509999999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002237)",
      "output_term": "(+ 1 (/ (* (/ (- (+ a b) 3) (+ b (+ a a))) (- 1 a)) (/ (* b c) a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.001016203
    },
    "speedup": 1.0058531612286126,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (+ (* (pow (/ (/ (- (+ a -1) -1) (/ 1 a)) (* 1 a)) (* (pow a 0) b)) (- (/ c -1) -1)) (* (+ (* -1 -1) c) (pow -1 c))) (* (- 1 (* b 0)) (+ b 0))) (/ (/ (pow (pow e 1) d) c) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001024979)",
      "output_term": "(- (pow (+ (* (pow (/ (/ a (/ 1 a)) a) b) (+ 1 (/ c -1))) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.00103578
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005644)",
      "output_term": "(- (pow (+ (* (pow a b) (+ 1 (/ c -1))) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.001029705
    },
    "speedup": 1.0058997479860738,
    "weight_simple_diff": 3,
    "weight_complex_diff": 15,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (+ (* a a) a) (/ (* 1 a) 1)) (pow (/ 1 a) b)) (+ (pow a -1) b)) (+ (pow (/ d 0) 1) (+ -1 c))) (/ (pow (- 0 0) -1) (pow 1 c))) (+ (+ (pow (* e 1) e) (- a d)) (/ b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001994)",
      "output_term": "(+ (/ (- (- (pow (+ a (+ (* a a) (/ a 1))) (pow (/ 1 a) b)) (+ b (pow a -1))) (+ (/ d 0) (+ -1 c))) (/ (pow 0 -1) (pow 1 c))) (+ (pow e e) (+ (- a d) (/ b 1))))",
      "output_weight_simple": 32,
      "output_weight_complex": 80,
      "output_depth": 9,
      "simplification_time": 0.001026893
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000233)",
      "output_term": "(+ b (+ (/ (- (pow (* a (+ a 2)) (pow (/ 1 a) b)) (+ c (+ (+ (/ 1 a) (+ b -1)) (/ d 0)))) (/ (pow 0 -1) (pow 1 c))) (+ (pow e e) (- a d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.001020755
    },
    "speedup": 1.0060131961146408,
    "weight_simple_diff": 3,
    "weight_complex_diff": 14,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (/ (+ (- (+ (* (- 0 -1) -1) a) (- 0 -1)) (* (- 1 b) -1)) (+ (+ a b) a)) (- (* (+ a -1) -1) (pow 0 1))) (* (* c (/ b a)) (- 1 0))) (pow (pow (/ (pow d c) e) (- e 0)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006539)",
      "output_term": "(+ 1 (/ (* -1 (* (/ (+ a (+ -3 b)) (+ b (+ a a))) (+ -1 a))) (* c (/ b a))))",
      "output_weight_simple": 18,
      "output_weight_complex": 36,
      "output_depth": 8,
      "simplification_time": 0.0010233
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100304)",
      "output_term": "(+ 1 (/ (* (/ (- (+ a b) 3) (+ b (+ a a))) (- 1 a)) (/ (* b c) a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.0010171199999999998
    },
    "speedup": 1.0060759792354885,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (* (/ (+ (pow (- a (+ (pow -1 0) b)) (pow a c)) (* (* 1 a) -1)) (- -1 (* 0 1))) (+ 1 (* -1 1))) (pow (pow (* (+ 1 c) -1) (- 0 a)) (* e e))) (+ (* (* (* e -1) 1) (+ b 0)) (/ -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001674)",
      "output_term": "(+ (pow 0 (pow (pow (+ -1 (* -1 c)) (- 0 a)) (* e e))) (+ (* b e) (* -1 (/ -1 0))))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.001014184
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100151)",
      "output_term": "(- (pow 0 (pow (pow (- -1 c) (- 0 a)) (* e e))) (- (/ -1 0) (* b e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 6,
      "simplification_time": 0.001007965
    },
    "speedup": 1.0061698570882918,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (- (- (* (pow (pow (* (/ -1 a) a) -1) (pow 1 -1)) (* (pow 1 a) a)) (- (pow 1 0) 0)) (- (/ (+ b -1) 0) (/ a -1))) (/ (+ b (* 1 a)) (- 0 d))) (pow (/ (pow (/ 1 1) -1) (+ a 0)) (/ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001011427)",
      "output_term": "(- (pow (- (+ -1 (* (pow (pow (* a (/ -1 a)) -1) (pow 1 -1)) (* a (pow 1 a)))) (- (/ (+ -1 b) 0) (/ a -1))) (/ (+ a b) (- 0 d))) (pow (/ (pow 1 -1) a) (/ b 0)))",
      "output_weight_simple": 28,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.001020695
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003958)",
      "output_term": "(- (pow (- (- -1 (* a (pow 1 a))) (- (/ (+ -1 b) 0) (/ a -1))) (/ (+ a b) (- 0 d))) (pow (/ 1 a) (/ b 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.001014347
    },
    "speedup": 1.0062582134121756,
    "weight_simple_diff": 6,
    "weight_complex_diff": 21,
    "depth_diff": 3
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (* (+ (+ -1 a) 1) (+ (- a b) a)) (/ (* d d) b)) (* (+ 0 c) 1)) (+ (+ 1 (pow -1 b)) (+ -1 1))) (pow (+ (- c 1) b) (* 0 e))) (- (* (+ 1 (pow e a)) (pow c 0)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000844)",
      "output_term": "(/ (+ (pow (pow (* a (+ a (- a b))) (/ (* d d) b)) c) (+ 1 (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.001032811
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002051)",
      "output_term": "(/ (+ 1 (+ (pow (pow (* a (+ a (- a b))) (/ (* d d) b)) c) (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.001026191
    },
    "speedup": 1.006451040790652,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(* (* (pow (+ (* (pow (+ (pow 1 (pow a 1)) (+ b a)) (* b c)) (* c (- 1 c))) (+ (pow e b) a)) (* (pow 0 (- c 0)) (- -1 0))) (* (/ d (pow c e)) -1)) (/ (- (- c (- 0 0)) (/ -1 1)) (* e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005427)",
      "output_term": "(* (pow (+ a (+ (* c (* (pow (+ a (+ (pow 1 a) b)) (* b c)) (- 1 c))) (pow e b))) (* (pow 0 c) -1)) (* (* -1 (/ d (pow c e))) (/ (+ 1 c) (* c e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 11,
      "simplification_time": 0.001032339
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001004077)",
      "output_term": "(* (pow (+ (* (pow (+ a (+ (pow 1 a) b)) (* b c)) (- c (pow c 2))) (+ a (pow e b))) (- 0 (pow 0 c))) (/ (* (/ d (pow c e)) (* -1 (+ 1 c))) (* c e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001025186
    },
    "speedup": 1.0069772704660422,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 2
  },
  {
    "base_term": "(- (/ (pow (- (pow a (+ b (pow a (- (pow c d) b)))) (- (* (pow -1 -1) d) 1)) (* (pow (* b a) -1) (* 0 1))) (- (pow (* (* c 1) b) (* d 1)) (/ 1 -1))) (+ (- (/ (- 1 e) b) (* 0 a)) (* 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001009273)",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.001016616
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002021)",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.001009321
    },
    "speedup": 1.0072276312491266,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (- (- (/ (/ (/ (pow (+ -1 a) 1) (* -1 a)) (- 0 1)) (pow (- b a) b)) (* (pow 0 -1) 0)) (pow (/ b (+ c a)) (/ 1 a))) (pow (+ (+ 1 a) -1) c)) (pow (- (+ -1 (- 0 -1)) (/ -1 0)) (* 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001049789)",
      "output_term": "(+ (* (- (/ (/ (/ (+ -1 a) (* -1 a)) -1) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001069017
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001017319)",
      "output_term": "(+ (* (- (/ (/ (/ (+ -1 a) -1) (- 0 a)) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.0010612310000000002
    },
    "speedup": 1.0073367626840903,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (pow (pow (pow a (+ (* 1 (/ b b)) (+ (+ a -1) a))) (/ (- (- c 0) c) (- 0 0))) (/ (* (+ -1 0) 0) (+ b 0))) (pow (pow (- 1 d) a) (+ a e))) (* (+ (+ (+ b 0) c) (- 0 0)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005019)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001022652
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002577)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.0010152
    },
    "speedup": 1.007340425531915,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (pow (/ (+ (* (- (- (- a a) 1) 0) (+ 1 1)) (+ (* a a) a)) a) (* (+ (pow a -1) b) (+ a d))) (pow (+ (* (* -1 -1) d) (* 1 e)) (* d d))) (* (pow (+ (+ b 1) d) (* 1 -1)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005028)",
      "output_term": "(+ (- (pow (/ (+ a (+ -2 (* a a))) a) (* (+ (pow a -1) b) (+ a d))) (pow (+ d e) (* d d))) (* (pow (+ 1 (+ b d)) -1) (/ b a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.001018349
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003239)",
      "output_term": "(+ (- (pow (/ (+ a (+ -2 (* a a))) a) (* (+ (/ 1 a) b) (+ a d))) (pow (+ d e) (* d d))) (/ (/ b a) (+ 1 (+ b d))))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.0010108279999999999
    },
    "speedup": 1.0074404349701434,
    "weight_simple_diff": 2,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (+ (/ (/ (/ (* (pow -1 a) b) b) (/ a -1)) a) (- b (+ (/ -1 c) c))) (* (* (* 1 -1) 0) 1)) (pow (/ (pow (* c b) b) (* -1 b)) (pow 1 a))) (+ (* (/ (* b 1) d) (* 1 b)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001003193)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (* -1 b)) (pow 1 a)) (+ -1 (* b (/ b d))))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.001015275
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001092)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (- 0 b)) (pow 1 a)) (+ -1 (* b (/ b d))))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.0010074530000000002
    },
    "speedup": 1.0077641339099688,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (/ (pow (pow (+ (pow (/ (* 0 a) 0) (pow b 1)) (- c -1)) (+ c (pow -1 1))) (+ a (* d d))) (/ (+ (- 0 -1) c) (pow a 0))) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* b a)) (/ e b))))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001010815)",
      "output_term": "(* (/ (/ (pow (pow (+ 1 (+ (pow (/ 0 0) b) c)) (+ c -1)) (+ a (* d d))) (/ (+ 1 c) 1)) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* a b)) (/ e b))))",
      "output_weight_simple": 30,
      "output_weight_complex": 77,
      "output_depth": 10,
      "simplification_time": 0.001014538
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000571)",
      "output_term": "(* (/ (/ (pow (pow (+ c (+ 1 (pow (/ 0 0) b))) (+ c -1)) (+ a (* d d))) (+ 1 c)) (/ (* b (* a (- c b))) d)) (* b (/ (- 1 (* a b)) (/ e b))))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.001006582
    },
    "speedup": 1.0079039760297719,
    "weight_simple_diff": 0,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (+ (pow (* (* 0 a) (- (* 1 (* b a)) b)) (* (- (- a 1) -1) (- c b))) (pow (/ (pow 1 1) d) 1)) (- (pow (- (/ -1 1) 0) (+ d d)) (+ e -1))) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001022808)",
      "output_term": "(* (+ (pow 0 (* a (- c b))) (/ 1 d)) (* (- (pow -1 (+ d d)) (+ -1 e)) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.0010223699999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001748)",
      "output_term": "(* (+ (pow 0 (* a (- c b))) (/ 1 d)) (* (- (pow -1 (+ d d)) (- e 1)) (- (/ (pow 0 -1) e) (+ (/ d c) (pow a b)))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 6,
      "simplification_time": 0.001014272
    },
    "speedup": 1.0079840516153455,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (+ (* (pow (/ (/ (- (+ a -1) -1) (/ 1 a)) (* 1 a)) (* (pow a 0) b)) (- (/ c -1) -1)) (* (+ (* -1 -1) c) (pow -1 c))) (* (- 1 (* b 0)) (+ b 0))) (/ (/ (pow (pow e 1) d) c) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001031818)",
      "output_term": "(- (pow (+ (* (pow (/ (/ a (/ 1 a)) a) b) (+ 1 (/ c -1))) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001042484
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100804)",
      "output_term": "(- (pow (+ (* (pow a b) (+ 1 (/ c -1))) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.00103417
    },
    "speedup": 1.008039297214191,
    "weight_simple_diff": 3,
    "weight_complex_diff": 15,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (* (pow (/ (* (* (* (pow (+ a a) a) (- -1 a)) (/ a a)) 0) (pow (pow b 1) -1)) (/ b (+ a (+ b a)))) (/ (+ (* (+ -1 -1) b) (+ -1 a)) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001015083)",
      "output_term": "(/ (* (pow (/ 0 (pow b -1)) (/ b (+ a (+ a b)))) (/ (+ -1 (+ a (* b -2))) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.0010143349999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000138)",
      "output_term": "(/ (* (pow (/ 0 (/ 1 b)) (/ b (+ a (+ a b)))) (/ (+ a (+ -1 (* b -2))) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.0010062320000000001
    },
    "speedup": 1.0080528148578058,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (pow (/ (+ (pow (* (pow (pow 0 a) a) (+ 1 1)) (pow a -1)) (* a (* -1 b))) (+ 1 (/ 0 c))) (+ (pow (- 0 -1) 0) (pow a 1))) (+ (- (pow a d) -1) (- -1 b))) (* (pow (- (* 0 d) c) (- a 0)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001022932)",
      "output_term": "(/ (+ (pow (/ (+ (pow (* (pow (pow 0 a) a) 2) (pow a -1)) (* a (* -1 b))) (+ 1 (/ 0 c))) (+ a 1)) (+ (* -1 b) (pow a d))) (pow (- 0 c) a))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.001036431
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008369)",
      "output_term": "(/ (+ (pow (/ (- (pow (* (pow (pow 0 a) a) 2) (/ 1 a)) (* a b)) (+ 1 (/ 0 c))) (+ a 1)) (- (pow a d) b)) (pow (- 0 c) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 10,
      "simplification_time": 0.001027938
    },
    "speedup": 1.0082621714539204,
    "weight_simple_diff": 2,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (/ (/ (* (+ 0 (* -1 a)) (- (+ a a) -1)) (pow (+ -1 (/ a a)) -1)) (- (/ (+ a -1) a) (- c 0))) (pow (+ (pow (pow -1 1) -1) (pow -1 e)) (* a c))) (- (- (* c (pow e -1)) (+ -1 b)) (/ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 8,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000469)",
      "output_term": "(* (/ (/ (* -1 (+ a (* a (+ a a)))) (pow (+ -1 (/ a a)) -1)) (- (/ (+ -1 a) a) c)) (* (pow (+ (pow -1 -1) (pow -1 e)) (* a c)) (- (* c (pow e -1)) (+ -1 b))))",
      "output_weight_simple": 28,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.001033443
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.0010111)",
      "output_term": "(* (/ (/ (* a (- -1 (+ a a))) (/ 1 0)) (- (/ (+ -1 a) a) c)) (* (pow (+ -1 (pow -1 e)) (* a c)) (- (/ c e) (+ -1 b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.0010246230000000001
    },
    "speedup": 1.0086080441294016,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (pow (/ (* (+ (* (* -1 (+ a 1)) (- -1 b)) (- -1 a)) (* (* b b) 0)) (- (* a 1) 1)) (pow c (pow (- -1 d) 1))) (* (* -1 (- b d)) (+ 1 0))) (pow (* (+ (+ b a) a) (* c a)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010728)",
      "output_term": "(/ (+ (pow (/ 0 (+ -1 a)) (pow c (- -1 d))) (- b d)) (* a (* c (+ b (+ a a)))))",
      "output_weight_simple": 18,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.001029232
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002134)",
      "output_term": "(/ (+ (pow (/ 0 (- a 1)) (pow c (- -1 d))) (- b d)) (* a (* c (+ a (+ a b)))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.001020417
    },
    "speedup": 1.0086386251895059,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (/ (/ (* (+ (* a (/ a 1)) (/ 1 0)) (+ a 0)) (- (* a -1) b)) (- (- b -1) 1)) (/ (- (* 1 -1) b) (/ -1 0))) (+ (* (+ -1 a) a) (/ -1 b))) (+ (/ (+ d (/ d d)) (- a -1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006473)",
      "output_term": "(+ (* (+ (/ (/ (* a (+ (* a (/ a 1)) (/ 1 0))) (* -1 (+ a b))) b) (/ (- -1 b) (/ -1 0))) (+ (* a (+ a -1)) (/ -1 b))) (+ (/ (+ d (/ d d)) (- a -1)) e))",
      "output_weight_simple": 31,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.0010238270000000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003252)",
      "output_term": "(+ (* (+ (/ (/ (* a (+ (* a a) (/ 1 0))) (- (- 0 a) b)) b) (/ (- -1 b) (/ -1 0))) (+ (- (* a a) a) (/ -1 b))) (+ (/ (+ 1 d) (- a -1)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001014732
    },
    "speedup": 1.0089629577070598,
    "weight_simple_diff": 3,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (/ (pow (* (pow (* (* (+ 1 -1) a) (pow 1 1)) (- a -1)) (/ (/ a -1) c)) (* (+ c -1) 0)) (- (+ (pow a 1) 1) (+ 0 1))) (/ (* (- e a) e) -1)) (- (- (/ (+ a e) 1) (pow a c)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001031089)",
      "output_term": "(+ (- (/ 1 a) (/ (* e (- e a)) -1)) (- (- (/ (+ a e) 1) (pow a c)) (pow -1 b)))",
      "output_weight_simple": 18,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.001028788
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000173)",
      "output_term": "(- (+ (/ 1 a) (- (+ a e) (+ (pow a c) (pow -1 b)))) (/ (* e (- e a)) -1))",
      "output_weight_simple": 17,
      "output_weight_complex": 36,
      "output_depth": 6,
      "simplification_time": 0.001019295
    },
    "speedup": 1.0093132998788379,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (pow (/ (+ (pow (* (pow (pow 0 a) a) (+ 1 1)) (pow a -1)) (* a (* -1 b))) (+ 1 (/ 0 c))) (+ (pow (- 0 -1) 0) (pow a 1))) (+ (- (pow a d) -1) (- -1 b))) (* (pow (- (* 0 d) c) (- a 0)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001036086)",
      "output_term": "(/ (+ (pow (/ (+ (pow (* (pow (pow 0 a) a) 2) (pow a -1)) (* a (* -1 b))) (+ 1 (/ 0 c))) (+ a 1)) (+ (* -1 b) (pow a d))) (pow (- 0 c) a))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.001050372
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001020593)",
      "output_term": "(/ (+ (pow (/ (- (pow (* (pow (pow 0 a) a) 2) (/ 1 a)) (* a b)) (+ 1 (/ 0 c))) (+ a 1)) (- (pow a d) b)) (pow (- 0 c) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 10,
      "simplification_time": 0.001040215
    },
    "speedup": 1.0097643275668973,
    "weight_simple_diff": 2,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (- (- (* -1 -1) (pow (pow (pow 0 a) 0) (/ 1 -1))) (- (+ (- b -1) 0) (/ a -1))) (- (+ 0 (/ -1 1)) (* b 1))) (pow (* (/ 0 d) c) (/ e 1))) (* (* (* (- 0 e) 1) (- 1 c)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002721)",
      "output_term": "(/ (- (+ (- 1 (pow 1 -1)) (+ (- -1 b) (+ (/ a -1) (- -1 b)))) (pow (* (/ 0 d) c) (/ e 1))) (* (- 1 c) (* -1 (* e (/ e -1)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 61,
      "output_depth": 7,
      "simplification_time": 0.001037612
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001003891)",
      "output_term": "(/ (- (- (/ a -1) (+ b 2)) (+ b (pow (/ 0 d) e))) (- 0 (* (/ e -1) (* e (- 1 c)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.001027506
    },
    "speedup": 1.009835465680979,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (* (pow (- 1 (pow (pow (* 0 a) (pow a b)) (- c -1))) (/ 1 (* (pow a d) 0))) (pow (* (* a d) -1) a)) (+ (pow (* (* 1 0) e) (- -1 e)) (* 1 b))) (- (- (pow 0 (* c 1)) (* d c)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005367)",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (* a (* -1 d)) a)) (+ b (pow 0 (- -1 e)))) (- (- (pow 0 c) (* c d)) d))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.001019802
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004594)",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (- 0 (* a d)) a)) (+ b (pow 0 (- -1 e)))) (- (pow 0 c) (+ d (* c d))))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.001009854
    },
    "speedup": 1.0098509289461646,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (/ (- (* (pow (+ (+ -1 0) (/ 0 0)) (/ a 0)) (+ (* a b) a)) (* (+ 1 1) e)) (pow (/ 0 (pow 1 -1)) (- d 0))) (/ (pow (/ 0 d) b) (pow e -1))) (- (* (pow (/ d b) a) (- d d)) (/ 0 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005155)",
      "output_term": "(* -1 (* (+ (/ (+ (* (pow (+ -1 (/ 0 0)) (/ a 0)) (* a (+ b 1))) (* e -2)) (pow (/ 0 (pow 1 -1)) d)) (/ (pow (/ 0 d) b) (pow e -1))) (/ 0 c)))",
      "output_weight_simple": 30,
      "output_weight_complex": 83,
      "output_depth": 10,
      "simplification_time": 0.00101383
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.001000137)",
      "output_term": "(- 0 (/ 0 c))",
      "output_weight_simple": 4,
      "output_weight_complex": 9,
      "output_depth": 3,
      "simplification_time": 0.0010039119999999998
    },
    "speedup": 1.0098793519750737,
    "weight_simple_diff": 26,
    "weight_complex_diff": 74,
    "depth_diff": 7
  },
  {
    "base_term": "(pow (/ (pow (pow (+ (* (* (* (+ a 1) -1) (- 1 0)) (pow a b)) (* c (/ d a))) (- (pow 1 -1) a)) (pow (+ (pow 1 a) -1) c)) (+ (* (- b b) b) (/ c c))) (/ (/ (+ (- a 1) a) (pow a e)) (- a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001008106)",
      "output_term": "(pow (/ (pow (pow (+ (* (+ a 1) (* -1 (pow a b))) (* c (/ d a))) (- (pow 1 -1) a)) (pow (+ -1 (pow 1 a)) c)) (/ c c)) (/ (/ (+ a (+ a -1)) (pow a e)) a))",
      "output_weight_simple": 29,
      "output_weight_complex": 81,
      "output_depth": 9,
      "simplification_time": 0.001014941
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002139)",
      "output_term": "(pow (pow (pow (+ (* (- -1 a) (pow a b)) (* c (/ d a))) (- 1 a)) (pow (+ -1 (pow 1 a)) c)) (/ (/ (- (+ a a) 1) (pow a e)) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 7,
      "simplification_time": 0.001004925
    },
    "speedup": 1.009966912953703,
    "weight_simple_diff": 4,
    "weight_complex_diff": 16,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (+ (+ (/ (- (/ (* a b) a) (- a (+ b (* 0 1)))) (- 1 (pow (/ 1 c) 0))) (+ (- (* b 0) 1) -1)) (/ (* (* (* -1 0) c) (/ a 1)) (/ 0 -1))) (* (* (- (+ -1 1) d) (/ d c)) (pow c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006361)",
      "output_term": "(pow (+ (/ (- (/ (* a b) a) (- a b)) 0) (+ -2 (/ 0 0))) (* (- 0 d) (* (/ d c) (pow c c))))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.00101737
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000651)",
      "output_term": "(pow (+ (/ (- b (- a b)) 0) (+ -2 (/ 0 0))) (* (- 0 d) (/ (* d (pow c c)) c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 6,
      "simplification_time": 0.001007323
    },
    "speedup": 1.0099739606858973,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (* (* (+ (/ (pow a (* (* (* -1 0) 1) b)) 0) (pow (pow (- a a) 0) (/ 0 0))) (/ (+ c (* -1 b)) c)) (* (/ (pow (- a -1) a) (* -1 1)) (/ b 0))) (/ (- (/ (pow 0 -1) 0) (- 0 0)) (- a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100879)",
      "output_term": "(pow (* (/ (+ c (* -1 b)) c) (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (* (/ (pow (+ a 1) a) -1) (/ b 0)))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 75,
      "output_depth": 8,
      "simplification_time": 0.0010212379999999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000374)",
      "output_term": "(pow (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (* (/ (pow (+ a 1) a) -1) (* (/ (- c b) c) (/ b 0)))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001010999
    },
    "speedup": 1.0101276064565838,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (/ (pow (* (pow (* (* (+ 1 -1) a) (pow 1 1)) (- a -1)) (/ (/ a -1) c)) (* (+ c -1) 0)) (- (+ (pow a 1) 1) (+ 0 1))) (/ (* (- e a) e) -1)) (- (- (/ (+ a e) 1) (pow a c)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00103277)",
      "output_term": "(+ (- (/ 1 a) (/ (* e (- e a)) -1)) (- (- (/ (+ a e) 1) (pow a c)) (pow -1 b)))",
      "output_weight_simple": 18,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.001030316
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000825)",
      "output_term": "(- (+ (/ 1 a) (- (+ a e) (+ (pow a c) (pow -1 b)))) (/ (* e (- e a)) -1))",
      "output_weight_simple": 17,
      "output_weight_complex": 36,
      "output_depth": 6,
      "simplification_time": 0.0010197280000000001
    },
    "speedup": 1.010383160999796,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (* (+ (/ (pow a (pow (/ (* b b) 0) (+ d a))) 1) (+ (* (- b e) 1) 0)) (* (+ e a) (* 0 1))) (+ (pow (pow (* d e) 0) (+ 1 d)) (+ a b))) (* (+ (- (+ 0 c) c) (pow c c)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001019038)",
      "output_term": "(pow (pow 0 (+ a (+ b (pow 1 (+ d 1))))) (pow c c))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 7,
      "simplification_time": 0.001038794
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013514)",
      "output_term": "(pow (pow 0 (+ b (+ a (pow 1 d)))) (pow c c))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 6,
      "simplification_time": 0.001028116
    },
    "speedup": 1.0103859875733867,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (pow (pow (pow a (+ (* 1 (/ b b)) (+ (+ a -1) a))) (/ (- (- c 0) c) (- 0 0))) (/ (* (+ -1 0) 0) (+ b 0))) (pow (pow (- 1 d) a) (+ a e))) (* (+ (+ (+ b 0) c) (- 0 0)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100095)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001029385
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006267)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001018756
    },
    "speedup": 1.010433312785397,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (* (- (* (pow (pow (- (* -1 a) 0) b) (- c 0)) (* (pow b a) 0)) (+ b (* -1 d))) (/ (- (+ d a) d) (* 0 1))) (pow (/ 0 (+ c a)) (* d a))) (* (- (- (* c 1) a) (* a e)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001011046)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.00102833
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006944)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001017606
    },
    "speedup": 1.0105384598754332,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (* (pow (* (+ (+ (+ (pow 0 a) 1) (- a a)) (pow c b)) (pow (pow 1 b) a)) (+ -1 -1)) (* (/ (+ 0 e) c) (- c -1))) (* (- (pow b -1) 1) (/ d d))) (/ (* (- (+ b -1) b) (- 0 -1)) (pow -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001029887)",
      "output_term": "(/ (/ (* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (* (/ e c) (+ 1 c))) (* (+ -1 (pow b -1)) (/ d d))) (/ -1 (pow -1 -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.0010280699999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002333)",
      "output_term": "(/ (* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (* (/ e c) (+ 1 c))) (- (/ 1 b) 1))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.00101719
    },
    "speedup": 1.010696133465724,
    "weight_simple_diff": 7,
    "weight_complex_diff": 23,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (- (- (/ (/ (/ (pow (+ -1 a) 1) (* -1 a)) (- 0 1)) (pow (- b a) b)) (* (pow 0 -1) 0)) (pow (/ b (+ c a)) (/ 1 a))) (pow (+ (+ 1 a) -1) c)) (pow (- (+ -1 (- 0 -1)) (/ -1 0)) (* 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001063078)",
      "output_term": "(+ (* (- (/ (/ (/ (+ -1 a) (* -1 a)) -1) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.0010818680000000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001026415)",
      "output_term": "(+ (* (- (/ (/ (/ (+ -1 a) -1) (- 0 a)) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.001070087
    },
    "speedup": 1.0110093852182114,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (/ (/ (* (+ (* a (/ a 1)) (/ 1 0)) (+ a 0)) (- (* a -1) b)) (- (- b -1) 1)) (/ (- (* 1 -1) b) (/ -1 0))) (+ (* (+ -1 a) a) (/ -1 b))) (+ (/ (+ d (/ d d)) (- a -1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001959)",
      "output_term": "(+ (* (+ (/ (/ (* a (+ (* a (/ a 1)) (/ 1 0))) (* -1 (+ a b))) b) (/ (- -1 b) (/ -1 0))) (+ (* a (+ a -1)) (/ -1 b))) (+ (/ (+ d (/ d d)) (- a -1)) e))",
      "output_weight_simple": 31,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.001023926
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000448)",
      "output_term": "(+ (* (+ (/ (/ (* a (+ (* a a) (/ 1 0))) (- (- 0 a) b)) b) (/ (- -1 b) (/ -1 0))) (+ (- (* a a) a) (/ -1 b))) (+ (/ (+ 1 d) (- a -1)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.0010125029999999999
    },
    "speedup": 1.0112819418806662,
    "weight_simple_diff": 3,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (pow (/ (- (+ (* (- (* 1 0) a) (+ -1 a)) (pow 1 -1)) a) (/ (+ 1 0) 0)) (- 0 (+ (+ 0 0) a))) (+ (- (* (- 1 1) b) (+ 0 a)) (* a 0))) (* (pow (/ (- -1 -1) b) (* a -1)) (+ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 95,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001011066)",
      "output_term": "(+ (pow (/ (+ (pow 1 -1) (* -1 (* a a))) (/ 1 0)) (- 0 a)) (+ (- 0 a) (* (pow (/ 0 b) (- 0 a)) (+ d c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.0010246880000000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000763)",
      "output_term": "(- (+ (pow (/ (- 1 (pow a 2)) (/ 1 0)) (- 0 a)) (* (pow (/ 0 b) (- 0 a)) (+ d c))) a)",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.0010132309999999999
    },
    "speedup": 1.0113073918978006,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (/ (+ (pow (- a (+ (pow -1 0) b)) (pow a c)) (* (* 1 a) -1)) (- -1 (* 0 1))) (+ 1 (* -1 1))) (pow (pow (* (+ 1 c) -1) (- 0 a)) (* e e))) (+ (* (* (* e -1) 1) (+ b 0)) (/ -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00100531)",
      "output_term": "(+ (pow 0 (pow (pow (+ -1 (* -1 c)) (- 0 a)) (* e e))) (+ (* b e) (* -1 (/ -1 0))))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.001019623
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.0010005)",
      "output_term": "(- (pow 0 (pow (pow (- -1 c) (- 0 a)) (* e e))) (- (/ -1 0) (* b e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 6,
      "simplification_time": 0.001008195
    },
    "speedup": 1.0113351087835192,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (pow (/ (+ (* (- (- (- a a) 1) 0) (+ 1 1)) (+ (* a a) a)) a) (* (+ (pow a -1) b) (+ a d))) (pow (+ (* (* -1 -1) d) (* 1 e)) (* d d))) (* (pow (+ (+ b 1) d) (* 1 -1)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006054)",
      "output_term": "(+ (- (pow (/ (+ a (+ -2 (* a a))) a) (* (+ (pow a -1) b) (+ a d))) (pow (+ d e) (* d d))) (* (pow (+ 1 (+ b d)) -1) (/ b a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.001019907
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000526)",
      "output_term": "(+ (- (pow (/ (+ a (+ -2 (* a a))) a) (* (+ (/ 1 a) b) (+ a d))) (pow (+ d e) (* d d))) (/ (/ b a) (+ 1 (+ b d))))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.001008102
    },
    "speedup": 1.0117101245707278,
    "weight_simple_diff": 2,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (+ (/ (/ (/ (* (pow -1 a) b) b) (/ a -1)) a) (- b (+ (/ -1 c) c))) (* (* (* 1 -1) 0) 1)) (pow (/ (pow (* c b) b) (* -1 b)) (pow 1 a))) (+ (* (/ (* b 1) d) (* 1 b)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001006209)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (* -1 b)) (pow 1 a)) (+ -1 (* b (/ b d))))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.001017146
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000697)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (- 0 b)) (pow 1 a)) (+ -1 (* b (/ b d))))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.0010051980000000001
    },
    "speedup": 1.01188621545208,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (- (/ (- (- (- a (+ a 1)) (+ a 0)) (* c -1)) (pow (/ d c) 0)) c) (- (* a d) (- 0 1))) (+ (+ (* (- 1 -1) 1) (* d 1)) (- d c))) (+ (* (/ (/ -1 d) -1) (+ a 1)) (- 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001532)",
      "output_term": "(/ (* (pow (- (/ (+ c (- -1 a)) 1) c) (+ 1 (* a d))) (+ d (+ 2 (- d c)))) (+ (* (+ a 1) (/ (/ -1 d) -1)) (- 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.001029843
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001866)",
      "output_term": "(/ (* (pow (- -1 a) (+ 1 (* a d))) (+ d (+ 2 (- d c)))) (+ (/ (+ a 1) d) (- 1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 35,
      "output_depth": 6,
      "simplification_time": 0.001017744
    },
    "speedup": 1.0118880582936376,
    "weight_simple_diff": 5,
    "weight_complex_diff": 14,
    "depth_diff": 2
  },
  {
    "base_term": "(- (/ (* (+ (* (pow (* (* 1 (* a a)) (+ a 1)) (/ a a)) (+ (pow b a) -1)) (+ (/ -1 a) b)) (* (- (/ a c) 0) (* 0 0))) (+ (pow (- -1 d) e) (+ b a))) (* (- a (+ (+ a e) -1)) (+ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003788)",
      "output_term": "(/ 0 (+ a (+ b (pow (- -1 d) e))))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 6,
      "simplification_time": 0.001027974
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004515)",
      "output_term": "(/ 0 (+ a (+ b (pow (- -1 d) e))))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 6,
      "simplification_time": 0.0010157809999999999
    },
    "speedup": 1.0120035716360123,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (pow (/ (+ (pow (* (pow (pow 0 a) a) (+ 1 1)) (pow a -1)) (* a (* -1 b))) (+ 1 (/ 0 c))) (+ (pow (- 0 -1) 0) (pow a 1))) (+ (- (pow a d) -1) (- -1 b))) (* (pow (- (* 0 d) c) (- a 0)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00101699)",
      "output_term": "(/ (+ (pow (/ (+ (pow (* (pow (pow 0 a) a) 2) (pow a -1)) (* a (* -1 b))) (+ 1 (/ 0 c))) (+ a 1)) (+ (* -1 b) (pow a d))) (pow (- 0 c) a))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.001030757
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008996)",
      "output_term": "(/ (+ (pow (/ (- (pow (* (pow (pow 0 a) a) 2) (/ 1 a)) (* a b)) (+ 1 (/ 0 c))) (+ a 1)) (- (pow a d) b)) (pow (- 0 c) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 10,
      "simplification_time": 0.00101831
    },
    "speedup": 1.0122231933301256,
    "weight_simple_diff": 2,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (* (+ (/ (pow a (pow (/ (* b b) 0) (+ d a))) 1) (+ (* (- b e) 1) 0)) (* (+ e a) (* 0 1))) (+ (pow (pow (* d e) 0) (+ 1 d)) (+ a b))) (* (+ (- (+ 0 c) c) (pow c c)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004805)",
      "output_term": "(pow (pow 0 (+ a (+ b (pow 1 (+ d 1))))) (pow c c))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 7,
      "simplification_time": 0.001023429
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000184)",
      "output_term": "(pow (pow 0 (+ b (+ a (pow 1 d)))) (pow c c))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 6,
      "simplification_time": 0.001010996
    },
    "speedup": 1.012297773680608,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (* (pow (- 1 (pow (pow (* 0 a) (pow a b)) (- c -1))) (/ 1 (* (pow a d) 0))) (pow (* (* a d) -1) a)) (+ (pow (* (* 1 0) e) (- -1 e)) (* 1 b))) (- (- (pow 0 (* c 1)) (* d c)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002906)",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (* a (* -1 d)) a)) (+ b (pow 0 (- -1 e)))) (- (- (pow 0 c) (* c d)) d))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.001015779
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000031)",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (- 0 (* a d)) a)) (+ b (pow 0 (- -1 e)))) (- (pow 0 c) (+ d (* c d))))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.0010034170000000002
    },
    "speedup": 1.0123199028918186,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (* (+ (/ (* (pow (* (* 0 0) 0) (+ 0 -1)) a) a) (- (pow (pow a a) b) (/ a e))) (* (* (* 1 0) d) (* a 1))) (- (/ (pow a 1) b) (+ -1 b))) (pow (* (* (+ 0 1) b) (pow 1 -1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100208)",
      "output_term": "(* b (* (+ (+ -1 b) (* -1 (/ a b))) (pow 1 -1)))",
      "output_weight_simple": 11,
      "output_weight_complex": 23,
      "output_depth": 6,
      "simplification_time": 0.001034734
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008955)",
      "output_term": "(* b (- (+ -1 b) (/ a b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 14,
      "output_depth": 4,
      "simplification_time": 0.001022134
    },
    "speedup": 1.0123271508432359,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (/ (/ (+ (* (pow (pow (+ (- a b) b) (pow -1 1)) (* -1 a)) (+ (- 1 -1) -1)) (* (pow -1 b) 1)) (pow -1 1)) (+ (- (+ (/ c 1) -1) (* 0 -1)) (pow 1 -1))) (/ (pow (/ (* d 1) 1) (pow -1 -1)) (+ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001009358)",
      "output_term": "(pow (/ (/ (+ (pow (pow a -1) (* a -1)) (pow -1 b)) -1) (+ -1 (+ (/ c 1) (pow 1 -1)))) (/ (pow (/ d 1) (pow -1 -1)) (+ -1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 7,
      "simplification_time": 0.001027547
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002883)",
      "output_term": "(pow (/ (/ (+ (pow (/ 1 a) (- 0 a)) (pow -1 b)) -1) c) (/ (/ 1 d) (+ -1 e)))",
      "output_weight_simple": 19,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.001015013
    },
    "speedup": 1.0123486103133654,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (+ (* (* (* a (+ (/ a a) 0)) (pow b b)) (/ a (+ a a))) (pow 0 1)) (- b (* 1 (/ c b)))) (* (/ (/ (+ -1 a) c) (+ -1 -1)) (* 1 a))) (pow (- (/ (/ 0 -1) -1) (/ d e)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005222)",
      "output_term": "(+ (pow (* (* a (/ a a)) (* (pow b b) (* (/ a (+ a a)) (- b (/ c b))))) (* a (/ (/ (+ a -1) c) -2))) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001035355
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001005743)",
      "output_term": "(+ (pow (* (pow b b) (* a (* (/ a (+ a a)) (- b (/ c b))))) (/ (* a (/ (- a 1) c)) -2)) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 27,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001022552
    },
    "speedup": 1.0125206346474311,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (/ (* (* (* (pow (+ a a) a) (- -1 a)) (/ a a)) 0) (pow (pow b 1) -1)) (/ b (+ a (+ b a)))) (/ (+ (* (+ -1 -1) b) (+ -1 a)) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001020141)",
      "output_term": "(/ (* (pow (/ 0 (pow b -1)) (/ b (+ a (+ a b)))) (/ (+ -1 (+ a (* b -2))) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.0010194219999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001006)",
      "output_term": "(/ (* (pow (/ 0 (/ 1 b)) (/ b (+ a (+ a b)))) (/ (+ a (+ -1 (* b -2))) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.001006762
    },
    "speedup": 1.012574968065938,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (* (* (pow (pow (+ (* (* -1 a) -1) (pow 0 0)) (/ a 0)) (pow (+ 0 1) -1)) (* (pow 1 1) a)) (- (+ (- 0 b) 1) 0)) (- (- (+ 0 0) a) (/ -1 b))) (* (* (* (- 0 b) b) (- 1 d)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008035)",
      "output_term": "(pow (/ (* a (* (pow (pow (+ a (pow 0 0)) (/ a 0)) (pow 1 -1)) (+ 1 (- 0 b)))) (- (- 0 a) (/ -1 b))) (* b (* (/ a b) (* (- 0 b) (- 1 d)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.001035308
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002766)",
      "output_term": "(pow (/ (* a (* (pow (+ a (pow 0 0)) (/ a 0)) (- 1 b))) (- (- 0 a) (/ -1 b))) (* b (* (- 1 d) (* (- 0 b) (/ a b)))))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.001022214
    },
    "speedup": 1.0128094508586265,
    "weight_simple_diff": 2,
    "weight_complex_diff": 8,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (pow (pow (pow a (+ (* 1 (/ b b)) (+ (+ a -1) a))) (/ (- (- c 0) c) (- 0 0))) (/ (* (+ -1 0) 0) (+ b 0))) (pow (pow (- 1 d) a) (+ a e))) (* (+ (+ (+ b 0) c) (- 0 0)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001011093)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001028613
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004427)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.0010155399999999999
    },
    "speedup": 1.0128729542903285,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (+ (* (* (* a (+ (/ a a) 0)) (pow b b)) (/ a (+ a a))) (pow 0 1)) (- b (* 1 (/ c b)))) (* (/ (/ (+ -1 a) c) (+ -1 -1)) (* 1 a))) (pow (- (/ (/ 0 -1) -1) (/ d e)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003743)",
      "output_term": "(+ (pow (* (* a (/ a a)) (* (pow b b) (* (/ a (+ a a)) (- b (/ c b))))) (* a (/ (/ (+ a -1) c) -2))) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001034195
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001006993)",
      "output_term": "(+ (pow (* (pow b b) (* a (* (/ a (+ a a)) (- b (/ c b))))) (/ (* a (/ (- a 1) c)) -2)) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 27,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.00102057
    },
    "speedup": 1.0133503826293149,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (* (- (* (pow (pow (- (* -1 a) 0) b) (- c 0)) (* (pow b a) 0)) (+ b (* -1 d))) (/ (- (+ d a) d) (* 0 1))) (pow (/ 0 (+ c a)) (* d a))) (* (- (- (* c 1) a) (* a e)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001012799)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001031779
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005627)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001018114
    },
    "speedup": 1.0134218761356784,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (+ (pow (* (* 0 a) (- (* 1 (* b a)) b)) (* (- (- a 1) -1) (- c b))) (pow (/ (pow 1 1) d) 1)) (- (pow (- (/ -1 1) 0) (+ d d)) (+ e -1))) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001001326)",
      "output_term": "(* (* (+ (pow 0 (* a (- c b))) (/ 1 d)) (- (pow -1 (+ d d)) (+ -1 e))) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.001044772
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018835)",
      "output_term": "(* (+ (pow 0 (* a (- c b))) (/ 1 d)) (* (- (pow -1 (+ d d)) (+ -1 e)) (- (/ (pow 0 -1) e) (+ (/ d c) (pow a b)))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 6,
      "simplification_time": 0.001030897
    },
    "speedup": 1.0134591525632533,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (/ (* (- (* (+ (pow a (* (* a b) -1)) b) c) (pow d (* (* b e) -1))) (+ (/ d (* 1 a)) (- -1 -1))) (/ (pow (* b (* 1 b)) (/ c 1)) (pow 0 e))) (+ (+ (* (pow b d) 1) (/ c b)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004866)",
      "output_term": "(+ (/ (* (- (* (+ b (pow a (* a (* b -1)))) c) (pow d (* b (* -1 e)))) (/ d a)) (/ (pow (* b b) (/ c 1)) (pow 0 e))) (+ (pow b d) (+ (/ c b) (- c d))))",
      "output_weight_simple": 31,
      "output_weight_complex": 78,
      "output_depth": 10,
      "simplification_time": 0.001029518
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001006543)",
      "output_term": "(+ (/ (/ (* d (- (* (+ b (pow a (* a (- 0 b)))) c) (pow d (* e (- 0 b))))) (/ (pow (* b b) c) (pow 0 e))) a) (- (+ (pow b d) (+ c (/ c b))) d))",
      "output_weight_simple": 27,
      "output_weight_complex": 68,
      "output_depth": 11,
      "simplification_time": 0.001015687
    },
    "speedup": 1.013617384095691,
    "weight_simple_diff": 4,
    "weight_complex_diff": 10,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (+ (+ (+ (+ (- (pow (/ (pow a 0) b) -1) (pow 0 b)) (pow (- a b) -1)) (- (pow -1 c) -1)) (pow (pow (* d d) e) (/ 1 1))) (/ (/ (+ d 0) d) (pow 1 e))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001016793)",
      "output_term": "(pow (+ (- (pow (/ 1 b) -1) (pow 0 b)) (+ (+ (pow (* d d) e) (/ (/ d d) (pow 1 e))) (+ (pow (- a b) -1) (+ (pow -1 c) 1)))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 32,
      "output_weight_complex": 86,
      "output_depth": 7,
      "simplification_time": 0.001049749
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002043)",
      "output_term": "(pow (+ (- b (pow 0 b)) (+ (/ 1 (- a b)) (+ (pow (* d d) e) (+ (+ (pow -1 c) 1) (/ 1 (pow 1 e)))))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 8,
      "simplification_time": 0.001035598
    },
    "speedup": 1.0136645686839874,
    "weight_simple_diff": 3,
    "weight_complex_diff": 13,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (- (+ (- (- (* -1 -1) (pow (pow (pow 0 a) 0) (/ 1 -1))) (- (+ (- b -1) 0) (/ a -1))) (- (+ 0 (/ -1 1)) (* b 1))) (pow (* (/ 0 d) c) (/ e 1))) (* (* (* (- 0 e) 1) (- 1 c)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001219)",
      "output_term": "(/ (- (+ (- 1 (pow 1 -1)) (+ (- -1 b) (+ (/ a -1) (- -1 b)))) (pow (* (/ 0 d) c) (/ e 1))) (* (- 1 c) (* -1 (* e (/ e -1)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 61,
      "output_depth": 7,
      "simplification_time": 0.001039812
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000849)",
      "output_term": "(/ (- (- (/ a -1) (+ b 2)) (+ b (pow (/ 0 d) e))) (- 0 (* (/ e -1) (* e (- 1 c)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.001025721
    },
    "speedup": 1.0137376538064444,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (+ (+ (/ (+ a (/ (- (pow a 1) -1) (/ a 1))) a) (- (pow (+ c 1) d) (/ a -1))) (* (/ 0 (pow c -1)) (* e e))) (+ (+ c (pow c 0)) (pow e -1))) (pow (- (+ (+ -1 -1) d) (- d c)) (pow d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000171)",
      "output_term": "(* (+ (/ (+ a (/ (+ a 1) (/ a 1))) a) (+ (+ 1 (+ c (pow e -1))) (+ (- (pow (+ 1 c) d) (/ a -1)) (* (/ 0 (pow c -1)) (* e e))))) (pow (- (+ d -2) (- d c)) d))",
      "output_weight_simple": 32,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.0010610659999999998
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001016992)",
      "output_term": "(* (+ (/ (+ a (/ (+ a 1) a)) a) (+ (- (pow (+ 1 c) d) (/ a -1)) (+ (/ 0 (/ 1 c)) (+ 1 (+ c (/ 1 e)))))) (pow (- (+ d -2) (- d c)) d))",
      "output_weight_simple": 29,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.00104668
    },
    "speedup": 1.0137444108992242,
    "weight_simple_diff": 3,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (/ (- (+ (* (- (* 1 0) a) (+ -1 a)) (pow 1 -1)) a) (/ (+ 1 0) 0)) (- 0 (+ (+ 0 0) a))) (+ (- (* (- 1 1) b) (+ 0 a)) (* a 0))) (* (pow (/ (- -1 -1) b) (* a -1)) (+ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 95,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013306)",
      "output_term": "(+ (pow (/ (+ (pow 1 -1) (* -1 (* a a))) (/ 1 0)) (- 0 a)) (+ (- 0 a) (* (pow (/ 0 b) (- 0 a)) (+ d c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001026539
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100023)",
      "output_term": "(- (+ (pow (/ (- 1 (pow a 2)) (/ 1 0)) (- 0 a)) (* (pow (/ 0 b) (- 0 a)) (+ d c))) a)",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.001012532
    },
    "speedup": 1.013833636862835,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (* (+ (/ (+ (* (- (- a b) 0) (/ -1 1)) (* c c)) (- (pow -1 -1) -1)) (- (* a a) a)) (- (- 0 (- -1 0)) (+ c 1))) (/ (/ (- a b) d) (* 1 -1))) (pow (pow a (+ d 1)) (* (* c 1) b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012716)",
      "output_term": "(* (+ (/ (+ b (+ (* c c) (* a -1))) (+ 1 (pow -1 -1))) (- (* a a) a)) (* (pow (pow a (+ 1 d)) (* b c)) (* (* -1 c) (/ (/ (- a b) d) -1))))",
      "output_weight_simple": 27,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.0010344990000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000273)",
      "output_term": "(* (+ (/ (+ (- b a) (* c c)) 0) (- (* a a) a)) (- 0 (* c (/ (* (/ (- a b) d) (pow (pow a (+ 1 d)) (* b c))) -1))))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.001020273
    },
    "speedup": 1.0139433269330858,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": -2
  },
  {
    "base_term": "(- (pow (* (/ (/ (+ (* (pow (+ 0 0) a) (- -1 b)) a) a) (/ (/ (* 1 c) -1) (/ 1 1))) (pow (* a (- a c)) (* 1 0))) (* (/ (* a e) e) (- c c))) (/ (+ (+ (/ b 1) c) (/ -1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003977)",
      "output_term": "(- 1 (/ (+ (/ b 1) (+ 1 c)) 1))",
      "output_weight_simple": 8,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.001018723
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100035)",
      "output_term": "(- 0 (+ c b))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.0010041870000000001
    },
    "speedup": 1.0144753915356401,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": 2
  },
  {
    "base_term": "(* (- (* (+ (/ (* (pow (* (* 0 0) 0) (+ 0 -1)) a) a) (- (pow (pow a a) b) (/ a e))) (* (* (* 1 0) d) (* a 1))) (- (/ (pow a 1) b) (+ -1 b))) (pow (* (* (+ 0 1) b) (pow 1 -1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100025)",
      "output_term": "(* b (* (+ (+ -1 b) (* -1 (/ a b))) (pow 1 -1)))",
      "output_weight_simple": 11,
      "output_weight_complex": 23,
      "output_depth": 6,
      "simplification_time": 0.001030055
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100011)",
      "output_term": "(* b (- (+ -1 b) (/ a b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 14,
      "output_depth": 4,
      "simplification_time": 0.0010151
    },
    "speedup": 1.0147325386661414,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": 2
  },
  {
    "base_term": "(* (/ (- (- (- (- (pow (/ (* -1 a) a) (- -1 1)) (/ a -1)) (pow (* 1 0) 1)) (/ (+ b -1) -1)) (* -1 (+ (- 0 a) 1))) (/ (* (/ 0 0) 0) (* b 1))) (* (* (- (pow b 1) a) (* a 1)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001012459)",
      "output_term": "(* a (* (/ (- (- (- (pow (/ (- 0 a) a) -2) (/ a -1)) (/ (+ -1 b) -1)) (+ -1 a)) (/ 0 b)) (- b a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 10,
      "simplification_time": 0.0010249880000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003083)",
      "output_term": "(* a (* (/ (- (- (+ (pow -1 -2) (- 1 a)) (/ a -1)) (/ (+ -1 b) -1)) (/ 0 b)) (- b a)))",
      "output_weight_simple": 19,
      "output_weight_complex": 42,
      "output_depth": 8,
      "simplification_time": 0.00101001
    },
    "speedup": 1.0148295561430085,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (- (- (pow (* (+ (+ (/ a a) -1) (/ a b)) (pow 0 0)) (* (pow a -1) 1)) (- 1 a)) (+ a (* d b))) (/ (- (+ (- -1 -1) 0) (pow c 0)) (/ 0 d))) (/ (pow (+ (- 1 c) 1) (+ b 1)) (+ e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001011449)",
      "output_term": "(+ (- (- (+ (pow (* (+ (/ a a) (+ -1 (/ a b))) (pow 0 0)) (pow a -1)) (+ a -1)) (+ a (* b d))) (/ -1 (/ 0 d))) (/ (pow (+ 1 (- 1 c)) (+ b 1)) (+ 1 e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.0010493289999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001011663)",
      "output_term": "(+ (- (pow (* (/ a b) (pow 0 0)) (/ 1 a)) (+ 1 (+ (* b d) (/ -1 (/ 0 d))))) (/ (pow (- 2 c) (+ b 1)) (+ 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001033862
    },
    "speedup": 1.0149604105770402,
    "weight_simple_diff": 5,
    "weight_complex_diff": 8,
    "depth_diff": 3
  },
  {
    "base_term": "(+ (- (pow (- (pow (pow (pow (/ (/ 1 a) a) (* -1 -1)) (/ -1 a)) (pow (pow a -1) 1)) (- (* b 0) a)) (+ c (+ (- a d) d))) (* (+ (pow 1 1) e) (/ 1 b))) (- (* (* (* 1 -1) b) (pow 0 a)) (+ e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002523)",
      "output_term": "(+ (- (pow (+ a (pow (pow (/ (/ 1 a) a) (/ -1 a)) (pow a -1))) (+ c (+ a (* d 0)))) (* (+ 1 e) (/ 1 b))) (- (* -1 (* b (pow 0 a))) (+ b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.001034048
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000681)",
      "output_term": "(- (pow (+ a (pow (pow (/ (/ 1 a) a) (/ -1 a)) (/ 1 a))) (+ a c)) (+ (* b (pow 0 a)) (+ b (+ e (/ (+ 1 e) b)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.001018796
    },
    "speedup": 1.0149706123698956,
    "weight_simple_diff": 6,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (pow (/ (- (+ (* (- (* 1 0) a) (+ -1 a)) (pow 1 -1)) a) (/ (+ 1 0) 0)) (- 0 (+ (+ 0 0) a))) (+ (- (* (- 1 1) b) (+ 0 a)) (* a 0))) (* (pow (/ (- -1 -1) b) (* a -1)) (+ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 95,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001032415)",
      "output_term": "(+ (pow (/ (+ (pow 1 -1) (* -1 (* a a))) (/ 1 0)) (- 0 a)) (+ (- 0 a) (* (pow (/ 0 b) (- 0 a)) (+ d c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001030086
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002955)",
      "output_term": "(- (+ (pow (/ (- 1 (pow a 2)) (/ 1 0)) (- 0 a)) (* (pow (/ 0 b) (- 0 a)) (+ d c))) a)",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.001014822
    },
    "speedup": 1.0150410613881053,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (pow (+ (* (* (* (+ a 1) -1) (- 1 0)) (pow a b)) (* c (/ d a))) (- (pow 1 -1) a)) (pow (+ (pow 1 a) -1) c)) (+ (* (- b b) b) (/ c c))) (/ (/ (+ (- a 1) a) (pow a e)) (- a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001014557)",
      "output_term": "(pow (/ (pow (pow (+ (* (+ a 1) (* -1 (pow a b))) (* c (/ d a))) (- (pow 1 -1) a)) (pow (+ -1 (pow 1 a)) c)) (/ c c)) (/ (/ (+ a (+ a -1)) (pow a e)) a))",
      "output_weight_simple": 29,
      "output_weight_complex": 81,
      "output_depth": 9,
      "simplification_time": 0.001021632
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100018)",
      "output_term": "(pow (pow (pow (+ (* (- -1 a) (pow a b)) (* c (/ d a))) (- 1 a)) (pow (+ -1 (pow 1 a)) c)) (/ (/ (- (+ a a) 1) (pow a e)) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 7,
      "simplification_time": 0.0010060630000000002
    },
    "speedup": 1.015475174019917,
    "weight_simple_diff": 4,
    "weight_complex_diff": 16,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (/ (* (/ (+ (- (+ (* (- 0 -1) -1) a) (- 0 -1)) (* (- 1 b) -1)) (+ (+ a b) a)) (- (* (+ a -1) -1) (pow 0 1))) (* (* c (/ b a)) (- 1 0))) (pow (pow (/ (pow d c) e) (- e 0)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001017333)",
      "output_term": "(+ 1 (/ (* -1 (* (/ (+ a (+ -3 b)) (+ b (+ a a))) (+ -1 a))) (* c (/ b a))))",
      "output_weight_simple": 18,
      "output_weight_complex": 36,
      "output_depth": 8,
      "simplification_time": 0.001034116
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100416)",
      "output_term": "(+ 1 (/ (* (/ (- (+ a b) 3) (+ b (+ a a))) (- 1 a)) (/ (* b c) a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.001018204
    },
    "speedup": 1.0156275166862436,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (- (/ (/ (* (- 1 (pow (+ 0 a) 1)) (* -1 a)) (/ (/ 0 a) 0)) (/ b (* 1 -1))) (/ (+ (/ 0 0) a) (* a 1))) (+ (pow (- 0 b) 0) (* 0 0))) (/ (- (* (pow d c) 1) (pow a a)) (- e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001009864)",
      "output_term": "(- (+ 1 (- (/ (/ (* a (+ a -1)) (/ (/ 0 a) 0)) (/ b -1)) (/ (+ a (/ 0 0)) a))) (/ (- (pow d c) (pow a a)) (- e d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.001026705
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100065)",
      "output_term": "(- (/ (/ (* a (- a 1)) (/ b -1)) (/ (/ 0 a) 0)) (+ (/ (+ a (/ 0 0)) a) (- (/ (- (pow d c) (pow a a)) (- e d)) 1)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 7,
      "simplification_time": 0.0010109070000000001
    },
    "speedup": 1.015627550308782,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (+ (/ (/ (* (+ (* a (/ a 1)) (/ 1 0)) (+ a 0)) (- (* a -1) b)) (- (- b -1) 1)) (/ (- (* 1 -1) b) (/ -1 0))) (+ (* (+ -1 a) a) (/ -1 b))) (+ (/ (+ d (/ d d)) (- a -1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010825)",
      "output_term": "(+ (* (+ (/ (/ (* a (+ (* a (/ a 1)) (/ 1 0))) (* -1 (+ a b))) b) (/ (- -1 b) (/ -1 0))) (+ (* a (+ a -1)) (/ -1 b))) (+ (/ (+ d (/ d d)) (- a -1)) e))",
      "output_weight_simple": 31,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.001028191
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000795)",
      "output_term": "(+ (* (+ (/ (/ (* a (+ (* a a) (/ 1 0))) (- (- 0 a) b)) b) (/ (- -1 b) (/ -1 0))) (+ (- (* a a) a) (/ -1 b))) (+ (/ (+ 1 d) (- a -1)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001012059
    },
    "speedup": 1.0159397821668499,
    "weight_simple_diff": 3,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (pow (- (pow (pow (pow (/ (/ 1 a) a) (* -1 -1)) (/ -1 a)) (pow (pow a -1) 1)) (- (* b 0) a)) (+ c (+ (- a d) d))) (* (+ (pow 1 1) e) (/ 1 b))) (- (* (* (* 1 -1) b) (pow 0 a)) (+ e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006519)",
      "output_term": "(+ (- (pow (+ a (pow (pow (/ (/ 1 a) a) (/ -1 a)) (pow a -1))) (+ c (+ a (* d 0)))) (* (+ 1 e) (/ 1 b))) (- (* -1 (* b (pow 0 a))) (+ b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.0010375599999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100317)",
      "output_term": "(- (pow (+ a (pow (pow (/ (/ 1 a) a) (/ -1 a)) (/ 1 a))) (+ a c)) (+ (* b (pow 0 a)) (+ b (+ e (/ (+ 1 e) b)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.0010207109999999999
    },
    "speedup": 1.0165071210166248,
    "weight_simple_diff": 6,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (pow (* (+ (/ (pow a (pow (/ (* b b) 0) (+ d a))) 1) (+ (* (- b e) 1) 0)) (* (+ e a) (* 0 1))) (+ (pow (pow (* d e) 0) (+ 1 d)) (+ a b))) (* (+ (- (+ 0 c) c) (pow c c)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001019063)",
      "output_term": "(pow (pow 0 (+ a (+ b (pow 1 (+ d 1))))) (pow c c))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 7,
      "simplification_time": 0.001039965
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001008327)",
      "output_term": "(pow (pow 0 (+ b (+ a (pow 1 d)))) (pow c c))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 6,
      "simplification_time": 0.0010230019999999999
    },
    "speedup": 1.0165815902608206,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (+ (/ (/ (* (- (- -1 (/ 0 -1)) (+ a 0)) (+ a a)) (+ (+ a a) -1)) (pow (pow -1 0) 0)) (/ (- (pow 0 1) a) (- 0 b))) (* (pow (- b -1) b) (pow 1 0))) (+ (* 0 (/ (pow a 0) c)) (- -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002701)",
      "output_term": "(/ (- (+ (/ (/ (* a (+ (* a -2) -2)) (+ -1 (+ a a))) 1) (/ (- 0 a) (- 0 b))) (pow (- b -1) b)) (- -1 a))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 9,
      "simplification_time": 0.001022211
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000305)",
      "output_term": "(/ (- (+ (/ (* (- -1 a) (+ a a)) (+ -1 (+ a a))) (/ (- 0 a) (- 0 b))) (pow (+ 1 b) b)) (- -1 a))",
      "output_weight_simple": 18,
      "output_weight_complex": 36,
      "output_depth": 7,
      "simplification_time": 0.001005431
    },
    "speedup": 1.0166893600853764,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": 2
  },
  {
    "base_term": "(* (+ (- (* (pow (+ (- (- (/ 0 1) 0) (* a 0)) (pow b 1)) (* 1 (+ a 0))) (+ (* 1 b) b)) (/ (+ (+ c -1) 0) (/ -1 c))) (pow (/ (pow d 1) d) (/ c 1))) (* (+ (* (+ -1 d) d) (- -1 0)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000126)",
      "output_term": "(* (+ (- (* b (* (pow b a) 2)) (/ (+ c -1) (/ -1 c))) (pow (/ d d) (/ c 1))) (* b (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.001031466
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002836)",
      "output_term": "(* b (* (+ (- (* b (* (pow b a) 2)) (/ (+ c -1) (/ -1 c))) (pow 1 c)) (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.00101447
    },
    "speedup": 1.0167535757587707,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (* (pow (- 1 (pow (pow (* 0 a) (pow a b)) (- c -1))) (/ 1 (* (pow a d) 0))) (pow (* (* a d) -1) a)) (+ (pow (* (* 1 0) e) (- -1 e)) (* 1 b))) (- (- (pow 0 (* c 1)) (* d c)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001008501)",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (* a (* -1 d)) a)) (+ b (pow 0 (- -1 e)))) (- (- (pow 0 c) (* c d)) d))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.0010209809999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000461)",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (- 0 (* a d)) a)) (+ b (pow 0 (- -1 e)))) (- (pow 0 c) (+ d (* c d))))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.0010040259999999999
    },
    "speedup": 1.0168870128861205,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (- (/ (- (- (- a (+ a 1)) (+ a 0)) (* c -1)) (pow (/ d c) 0)) c) (- (* a d) (- 0 1))) (+ (+ (* (- 1 -1) 1) (* d 1)) (- d c))) (+ (* (/ (/ -1 d) -1) (+ a 1)) (- 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001011565)",
      "output_term": "(/ (* (pow (- (/ (+ c (- -1 a)) 1) c) (+ 1 (* a d))) (+ d (+ 2 (- d c)))) (+ (* (+ a 1) (/ (/ -1 d) -1)) (- 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.001039973
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006452)",
      "output_term": "(/ (* (pow (- -1 a) (+ 1 (* a d))) (+ d (+ 2 (- d c)))) (+ (/ (+ a 1) d) (- 1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 35,
      "output_depth": 6,
      "simplification_time": 0.001022437
    },
    "speedup": 1.0171511789968477,
    "weight_simple_diff": 5,
    "weight_complex_diff": 14,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (* (* (+ (/ (pow a (* (* (* -1 0) 1) b)) 0) (pow (pow (- a a) 0) (/ 0 0))) (/ (+ c (* -1 b)) c)) (* (/ (pow (- a -1) a) (* -1 1)) (/ b 0))) (/ (- (/ (pow 0 -1) 0) (- 0 0)) (- a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001015985)",
      "output_term": "(pow (* (/ (+ c (* -1 b)) c) (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (* (/ (pow (+ a 1) a) -1) (/ b 0)))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 75,
      "output_depth": 8,
      "simplification_time": 0.001028379
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001764)",
      "output_term": "(pow (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (* (/ (pow (+ a 1) a) -1) (* (/ (- c b) c) (/ b 0)))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001010943
    },
    "speedup": 1.0172472631988154,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (* (/ (+ (pow (- a (+ (pow -1 0) b)) (pow a c)) (* (* 1 a) -1)) (- -1 (* 0 1))) (+ 1 (* -1 1))) (pow (pow (* (+ 1 c) -1) (- 0 a)) (* e e))) (+ (* (* (* e -1) 1) (+ b 0)) (/ -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001010991)",
      "output_term": "(+ (pow 0 (pow (pow (+ -1 (* -1 c)) (- 0 a)) (* e e))) (+ (* b e) (* -1 (/ -1 0))))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.001025185
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000258)",
      "output_term": "(- (pow 0 (pow (pow (- -1 c) (- 0 a)) (* e e))) (- (/ -1 0) (* b e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 6,
      "simplification_time": 0.001007761
    },
    "speedup": 1.017289813755444,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (+ (/ (- (/ (* a b) a) (- a (+ b (* 0 1)))) (- 1 (pow (/ 1 c) 0))) (+ (- (* b 0) 1) -1)) (/ (* (* (* -1 0) c) (/ a 1)) (/ 0 -1))) (* (* (- (+ -1 1) d) (/ d c)) (pow c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001008894)",
      "output_term": "(pow (+ (/ (- (/ (* a b) a) (- a b)) 0) (+ -2 (/ 0 0))) (* (- 0 d) (* (/ d c) (pow c c))))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.0010243939999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000386)",
      "output_term": "(pow (+ (/ (- b (- a b)) 0) (+ -2 (/ 0 0))) (* (- 0 d) (/ (* d (pow c c)) c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 6,
      "simplification_time": 0.001006933
    },
    "speedup": 1.0173407763972377,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(- (/ (* (+ (* (pow (* (* 1 (* a a)) (+ a 1)) (/ a a)) (+ (pow b a) -1)) (+ (/ -1 a) b)) (* (- (/ a c) 0) (* 0 0))) (+ (pow (- -1 d) e) (+ b a))) (* (- a (+ (+ a e) -1)) (+ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001016518)",
      "output_term": "(/ 0 (+ a (+ b (pow (- -1 d) e))))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 6,
      "simplification_time": 0.001041006
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001011304)",
      "output_term": "(/ 0 (+ a (+ b (pow (- -1 d) e))))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 6,
      "simplification_time": 0.001022991
    },
    "speedup": 1.017610125602278,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (- (* (+ (pow a (* (* a b) -1)) b) c) (pow d (* (* b e) -1))) (+ (/ d (* 1 a)) (- -1 -1))) (/ (pow (* b (* 1 b)) (/ c 1)) (pow 0 e))) (+ (+ (* (pow b d) 1) (/ c b)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100821)",
      "output_term": "(+ (/ (* (- (* (+ b (pow a (* a (* b -1)))) c) (pow d (* b (* -1 e)))) (/ d a)) (/ (pow (* b b) (/ c 1)) (pow 0 e))) (+ (pow b d) (+ (/ c b) (- c d))))",
      "output_weight_simple": 31,
      "output_weight_complex": 78,
      "output_depth": 10,
      "simplification_time": 0.001032692
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001005847)",
      "output_term": "(+ (/ (/ (* d (- (* (+ b (pow a (* a (- 0 b)))) c) (pow d (* e (- 0 b))))) (/ (pow (* b b) c) (pow 0 e))) a) (- (+ (pow b d) (+ c (/ c b))) d))",
      "output_weight_simple": 27,
      "output_weight_complex": 68,
      "output_depth": 11,
      "simplification_time": 0.001014649
    },
    "speedup": 1.017782504097476,
    "weight_simple_diff": 4,
    "weight_complex_diff": 10,
    "depth_diff": -1
  },
  {
    "base_term": "(* (* (* (+ (/ (+ (* (- (- a b) 0) (/ -1 1)) (* c c)) (- (pow -1 -1) -1)) (- (* a a) a)) (- (- 0 (- -1 0)) (+ c 1))) (/ (/ (- a b) d) (* 1 -1))) (pow (pow a (+ d 1)) (* (* c 1) b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018363)",
      "output_term": "(* (+ (/ (+ b (+ (* c c) (* a -1))) (+ 1 (pow -1 -1))) (- (* a a) a)) (* (pow (pow a (+ 1 d)) (* b c)) (* (* -1 c) (/ (/ (- a b) d) -1))))",
      "output_weight_simple": 27,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.0010396199999999998
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001001302)",
      "output_term": "(* (+ (/ (+ (- b a) (* c c)) 0) (- (* a a) a)) (- 0 (* c (/ (* (/ (- a b) d) (pow (pow a (+ 1 d)) (* b c))) -1))))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.001021311
    },
    "speedup": 1.0179269585855824,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": -2
  },
  {
    "base_term": "(* (* (pow (* (+ (+ 0 (pow (+ (/ a 0) a) (pow -1 a))) (+ 0 (/ -1 1))) (pow (/ -1 0) b)) (- (pow (* a b) d) (pow a 0))) (- (/ (* b a) 1) (- -1 a))) (+ (- (- (+ 1 b) b) (* a 1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001522)",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (+ -1 (pow (* a b) d))) (* (+ a (+ 1 (/ (* a b) 1))) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 27,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.00102508
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001147)",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (- (pow (* a b) d) 1)) (* (- (* a b) (- -1 a)) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.0010068330000000002
    },
    "speedup": 1.0181231644175348,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (+ (/ (+ a (/ (- (pow a 1) -1) (/ a 1))) a) (- (pow (+ c 1) d) (/ a -1))) (* (/ 0 (pow c -1)) (* e e))) (+ (+ c (pow c 0)) (pow e -1))) (pow (- (+ (+ -1 -1) d) (- d c)) (pow d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00100852)",
      "output_term": "(* (+ (/ (+ a (/ (+ a 1) (/ a 1))) a) (+ (+ 1 (+ c (pow e -1))) (+ (- (pow (+ 1 c) d) (/ a -1)) (* (/ 0 (pow c -1)) (* e e))))) (pow (- (+ d -2) (- d c)) d))",
      "output_weight_simple": 32,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.0010695000000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001020574)",
      "output_term": "(* (+ (/ (+ a (/ (+ a 1) a)) a) (+ (- (pow (+ 1 c) d) (/ a -1)) (+ (/ 0 (/ 1 c)) (+ 1 (+ c (/ 1 e)))))) (pow (- (+ d -2) (- d c)) d))",
      "output_weight_simple": 29,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.001050457
    },
    "speedup": 1.0181283003492767,
    "weight_simple_diff": 3,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (/ (- (+ (pow (- 0 (+ (+ -1 a) a)) (+ b -1)) (+ 0 a)) (+ (- 0 b) 0)) (- (* (/ 1 a) 0) 0)) (* (- (+ b (pow 1 1)) (* -1 c)) (pow d 1))) (- (* (pow b (* b -1)) (pow a 1)) (- -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001678)",
      "output_term": "(- (* (/ (+ a (+ b (pow (+ 1 (* -1 (+ a a))) (+ -1 b)))) 0) (* (+ 1 (+ b c)) d)) (+ c (+ 1 (* a (pow b (- 0 b))))))",
      "output_weight_simple": 25,
      "output_weight_complex": 43,
      "output_depth": 10,
      "simplification_time": 0.0010327980000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007338)",
      "output_term": "(- (* (/ (+ b (+ a (pow (- 1 (+ a a)) (+ -1 b)))) 0) (* (+ (+ b 1) c) d)) (+ 1 (+ (* a (pow b (- 0 b))) c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 41,
      "output_depth": 9,
      "simplification_time": 0.001014358
    },
    "speedup": 1.0181789861173276,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (/ (/ (* (+ 0 (* -1 a)) (- (+ a a) -1)) (pow (+ -1 (/ a a)) -1)) (- (/ (+ a -1) a) (- c 0))) (pow (+ (pow (pow -1 1) -1) (pow -1 e)) (* a c))) (- (- (* c (pow e -1)) (+ -1 b)) (/ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 8,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010732)",
      "output_term": "(* (/ (/ (* -1 (+ a (* a (+ a a)))) (pow (+ -1 (/ a a)) -1)) (- (/ (+ -1 a) a) c)) (* (pow (+ (pow -1 -1) (pow -1 e)) (* a c)) (- (* c (pow e -1)) (+ -1 b))))",
      "output_weight_simple": 28,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.00104405
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001011804)",
      "output_term": "(* (/ (/ (* a (- -1 (+ a a))) (/ 1 0)) (- (/ (+ -1 a) a) c)) (* (pow (+ -1 (pow -1 e)) (* a c)) (- (/ c e) (+ -1 b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.0010249909999999998
    },
    "speedup": 1.0185943096085723,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (/ (* (pow (* (+ (+ (+ (pow 0 a) 1) (- a a)) (pow c b)) (pow (pow 1 b) a)) (+ -1 -1)) (* (/ (+ 0 e) c) (- c -1))) (* (- (pow b -1) 1) (/ d d))) (/ (* (- (+ b -1) b) (- 0 -1)) (pow -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001036094)",
      "output_term": "(/ (/ (* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (* (/ e c) (+ 1 c))) (* (+ -1 (pow b -1)) (/ d d))) (/ -1 (pow -1 -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.001034447
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004325)",
      "output_term": "(/ (* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (* (/ e c) (+ 1 c))) (- (/ 1 b) 1))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.001015556
    },
    "speedup": 1.0186016329970973,
    "weight_simple_diff": 7,
    "weight_complex_diff": 23,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (pow (* (- (* (* (+ (/ a -1) a) (/ 0 1)) (* b b)) (+ (+ b b) 0)) (pow 0 (/ b d))) (- (pow (* -1 -1) -1) 0)) (pow (* (+ -1 b) 1) (/ 0 e))) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007573)",
      "output_term": "(- (* (pow (* b (* (pow 0 (/ b d)) -2)) (pow 1 -1)) (pow (+ -1 b) (/ 0 e))) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.001031726
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000744)",
      "output_term": "(- (* b (* (* (pow (+ -1 b) (/ 0 e)) -2) (pow 0 (/ b d)))) (/ (pow (+ d (- e a)) (- 0 e)) (/ c b)))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.001012456
    },
    "speedup": 1.0190329258752973,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (pow (* (- (* (* (+ (/ a -1) a) (/ 0 1)) (* b b)) (+ (+ b b) 0)) (pow 0 (/ b d))) (- (pow (* -1 -1) -1) 0)) (pow (* (+ -1 b) 1) (/ 0 e))) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001817)",
      "output_term": "(- (* (pow (* b (* (pow 0 (/ b d)) -2)) (pow 1 -1)) (pow (+ -1 b) (/ 0 e))) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.001032187
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001603)",
      "output_term": "(- (* b (* (* (pow (+ -1 b) (/ 0 e)) -2) (pow 0 (/ b d)))) (/ (pow (+ d (- e a)) (- 0 e)) (/ c b)))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.001012798
    },
    "speedup": 1.0191439951500694,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (+ (- (- (* -1 -1) (pow (pow (pow 0 a) 0) (/ 1 -1))) (- (+ (- b -1) 0) (/ a -1))) (- (+ 0 (/ -1 1)) (* b 1))) (pow (* (/ 0 d) c) (/ e 1))) (* (* (* (- 0 e) 1) (- 1 c)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005897)",
      "output_term": "(/ (- (+ (- 1 (pow 1 -1)) (+ (- -1 b) (+ (/ a -1) (- -1 b)))) (pow (* (/ 0 d) c) (/ e 1))) (* (- 1 c) (* -1 (* e (/ e -1)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 61,
      "output_depth": 7,
      "simplification_time": 0.001044234
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00100046)",
      "output_term": "(/ (- (- (/ a -1) (+ b 2)) (+ b (pow (/ 0 d) e))) (- 0 (* (/ e -1) (* e (- 1 c)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.001024327
    },
    "speedup": 1.019434223641474,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (pow (- (- (+ (pow a a) (+ (pow b (- 1 c)) (/ 0 -1))) (- (- (* 1 0) -1) (/ b a))) (- (pow (* 0 1) 0) (pow 0 e))) (/ (/ a (* a 1)) (/ 1 1))) (* (/ (* (/ e c) -1) (+ e e)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00101095)",
      "output_term": "(pow (pow (- (+ (pow b (- 1 c)) (+ (pow a a) (+ -1 (/ b a)))) (- (pow 0 0) (pow 0 e))) (/ (/ a a) 1)) (* c (/ (* -1 (/ e c)) (+ e e))))",
      "output_weight_simple": 27,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.0010383
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100086)",
      "output_term": "(pow (- (+ (pow a a) (pow b (- 1 c))) (- (pow 0 0) (+ (pow 0 e) (- (/ b a) 1)))) (/ (- 0 e) (+ e e)))",
      "output_weight_simple": 21,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001017794
    },
    "speedup": 1.0201474954656837,
    "weight_simple_diff": 6,
    "weight_complex_diff": 23,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (- (- (pow (+ (+ (+ a 1) -1) (- 0 1)) (* a -1)) (/ (* 0 c) d)) (pow (pow c d) a)) (- d (- (pow e b) e))) (- (- (+ c 1) -1) (+ -1 c))) (* (pow (* (/ 1 a) -1) (* e c)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009533)",
      "output_term": "(/ (* (pow (- (- (pow (+ a -1) (* a -1)) (/ 0 d)) (pow (pow c d) a)) (- d (- (pow e b) e))) (- (+ c 2) (+ -1 c))) (* (pow (* -1 (/ 1 a)) (* c e)) (/ a b)))",
      "output_weight_simple": 32,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.0010461350000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006356)",
      "output_term": "(/ (* (pow (- (pow (+ a -1) (- 0 a)) (+ (/ 0 d) (pow (pow c d) a))) (- d (- (pow e b) e))) 3) (* (pow (/ -1 a) (* c e)) (/ a b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.001025474
    },
    "speedup": 1.0201477560620749,
    "weight_simple_diff": 5,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (* (* (* (+ (pow (* (- a 1) 1) (* b -1)) 1) (+ (/ 1 -1) a)) (+ a (pow a 0))) (pow (/ (+ 0 1) -1) (/ b a))) (pow (* (pow a b) 0) (- 0 c))) (/ (- (+ (/ c a) 1) (/ 0 -1)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001017362)",
      "output_term": "(pow (/ (* (+ 1 (pow (+ a -1) (* b -1))) (* (pow -1 (/ b a)) (* (+ a -1) (+ a 1)))) (pow 0 (- 0 c))) (/ (+ 1 (/ c a)) (+ -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 61,
      "output_depth": 7,
      "simplification_time": 0.00103812
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004344)",
      "output_term": "(pow (/ (* (+ a -1) (* (+ 1 (pow (+ a -1) (- 0 b))) (* (+ a 1) (pow -1 (/ b a))))) (pow 0 (- 0 c))) (/ (+ 1 (/ c a)) (- d 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.00101737
    },
    "speedup": 1.020395726235293,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (+ (* a a) a) (/ (* 1 a) 1)) (pow (/ 1 a) b)) (+ (pow a -1) b)) (+ (pow (/ d 0) 1) (+ -1 c))) (/ (pow (- 0 0) -1) (pow 1 c))) (+ (+ (pow (* e 1) e) (- a d)) (/ b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012993)",
      "output_term": "(+ (/ (- (- (pow (+ a (+ (* a a) (/ a 1))) (pow (/ 1 a) b)) (+ b (pow a -1))) (+ (/ d 0) (+ -1 c))) (/ (pow 0 -1) (pow 1 c))) (+ (pow e e) (+ (- a d) (/ b 1))))",
      "output_weight_simple": 32,
      "output_weight_complex": 80,
      "output_depth": 9,
      "simplification_time": 0.00104036
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000829)",
      "output_term": "(+ b (+ (/ (- (pow (* a (+ a 2)) (pow (/ 1 a) b)) (+ c (+ (+ (/ 1 a) (+ b -1)) (/ d 0)))) (/ (pow 0 -1) (pow 1 c))) (+ (pow e e) (- a d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.001019464
    },
    "speedup": 1.0204970455062659,
    "weight_simple_diff": 3,
    "weight_complex_diff": 14,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (/ (/ (* (- 1 (pow (+ 0 a) 1)) (* -1 a)) (/ (/ 0 a) 0)) (/ b (* 1 -1))) (/ (+ (/ 0 0) a) (* a 1))) (+ (pow (- 0 b) 0) (* 0 0))) (/ (- (* (pow d c) 1) (pow a a)) (- e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001014767)",
      "output_term": "(- (+ 1 (- (/ (/ (* a (+ a -1)) (/ (/ 0 a) 0)) (/ b -1)) (/ (+ a (/ 0 0)) a))) (/ (- (pow d c) (pow a a)) (- e d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.0010314500000000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100063)",
      "output_term": "(- (/ (/ (* a (- a 1)) (/ b -1)) (/ (/ 0 a) 0)) (+ (/ (+ a (/ 0 0)) a) (- (/ (- (pow d c) (pow a a)) (- e d)) 1)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 7,
      "simplification_time": 0.001010567
    },
    "speedup": 1.020664636783113,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (- (/ (pow (* (pow (+ a a) (- -1 b)) (- 0 a)) (* (- c 0) 0)) (* (* a d) c)) (- (- (pow 0 -1) b) (- -1 -1))) (- (/ (/ 0 c) 1) (+ a 0))) (+ (* (- (+ -1 b) 0) (- 0 -1)) (/ e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005627)",
      "output_term": "(* (+ (- (/ 1 (* a (* c d))) (- (pow 0 -1) b)) (- (/ (/ 0 c) 1) a)) (+ -1 (+ b (/ e c))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.0010304259999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000176)",
      "output_term": "(* (+ (- (/ 1 (* a (* c d))) (- (pow 0 -1) b)) (- (/ 0 c) a)) (+ -1 (+ b (/ e c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.001009331
    },
    "speedup": 1.0208999822654807,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (+ (/ (/ (/ (* (pow -1 a) b) b) (/ a -1)) a) (- b (+ (/ -1 c) c))) (* (* (* 1 -1) 0) 1)) (pow (/ (pow (* c b) b) (* -1 b)) (pow 1 a))) (+ (* (/ (* b 1) d) (* 1 b)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001015805)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (* -1 b)) (pow 1 a)) (+ -1 (* b (/ b d))))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.00102641
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001231)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (- 0 b)) (pow 1 a)) (+ -1 (* b (/ b d))))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.001005342
    },
    "speedup": 1.0209560527661232,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (- (/ (- (* (pow (/ a a) 0) (/ 0 b)) (- a b)) (* (pow 1 c) a)) (* (+ 0 a) 1)) (pow d (* (* a d) a))) (/ (/ (- e c) 0) (+ -1 c))) (- (+ (/ (- 0 d) 0) (pow e a)) (* a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001737)",
      "output_term": "(+ (pow (- (/ (- (/ 0 b) (- a b)) (* a (pow 1 c))) a) (pow d (* d (* a a)))) (+ (/ (/ (- e c) 0) (+ c -1)) (- (+ (/ (* d -1) 0) (pow e a)) (* a c))))",
      "output_weight_simple": 31,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001025516
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000476)",
      "output_term": "(+ (pow (- (/ (- (/ 0 b) (- a b)) (* a (pow 1 c))) a) (pow d (* d (* a a)))) (- (+ (/ (/ (- e c) 0) (+ c -1)) (+ (/ (- 0 d) 0) (pow e a))) (* a c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.001004432
    },
    "speedup": 1.0209909680296925,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (+ (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) d)) (+ (+ 1 c) a)) (/ (+ (* d e) 1) -1)) (+ (- (* (/ d e) d) (/ c 1)) (/ -1 -1))) (+ (- (pow (pow -1 -1) 1) (* d d)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002726)",
      "output_term": "(+ (* (+ (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) d)) (+ (+ c (+ 1 a)) (/ (+ 1 (* d e)) -1))) (+ 1 (- (* d (/ d e)) (/ c 1)))) (+ c (- (pow -1 -1) (* d d))))",
      "output_weight_simple": 32,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001055533
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001006072)",
      "output_term": "(+ (* (+ 1 (+ (+ a c) (+ (pow (- (pow 1 a) (+ b c)) c) (+ (+ (pow 1 c) d) (/ (+ 1 (* d e)) -1))))) (- (/ (* d d) e) (+ c -1))) (- c (+ 1 (* d d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 54,
      "output_depth": 10,
      "simplification_time": 0.00103368
    },
    "speedup": 1.021140972060986,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": -2
  },
  {
    "base_term": "(pow (- (- (+ (+ (- a (+ (+ (/ a a) 1) (/ a 1))) (- (pow a -1) b)) (/ (* b b) 0)) (- (+ (/ -1 1) 1) (+ 0 1))) (- (- (pow 0 a) 1) (- d d))) (- (+ (/ -1 (- 0 d)) (/ 1 a)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001483)",
      "output_term": "(pow (- (+ (- a (+ (/ a a) (+ 1 (/ a 1)))) (+ 1 (+ (- (pow a -1) b) (/ (* b b) 0)))) (+ -1 (pow 0 a))) (+ (/ -1 (- 0 d)) (/ 1 a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.001043892
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004577)",
      "output_term": "(pow (- (+ (+ -2 (- (/ 1 a) b)) (/ (* b b) 0)) (+ (pow 0 a) -2)) (+ (/ 1 a) (/ -1 (- 0 d))))",
      "output_weight_simple": 20,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.0010222360000000002
    },
    "speedup": 1.0211849318552662,
    "weight_simple_diff": 6,
    "weight_complex_diff": 17,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (- (/ (pow (* (pow (+ a a) (- -1 b)) (- 0 a)) (* (- c 0) 0)) (* (* a d) c)) (- (- (pow 0 -1) b) (- -1 -1))) (- (/ (/ 0 c) 1) (+ a 0))) (+ (* (- (+ -1 b) 0) (- 0 -1)) (/ e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009203)",
      "output_term": "(* (+ (- (/ 1 (* a (* c d))) (- (pow 0 -1) b)) (- (/ (/ 0 c) 1) a)) (+ -1 (+ b (/ e c))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001033571
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100297)",
      "output_term": "(* (+ (- (/ 1 (* a (* c d))) (- (pow 0 -1) b)) (- (/ 0 c) a)) (+ -1 (+ b (/ e c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.001012044
    },
    "speedup": 1.0212708143124214,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (* (- (/ (pow a (/ (+ 0 0) a)) (* 0 -1)) a) (/ (* (* a 1) a) (- 1 0))) (- (- (+ a -1) 0) (- -1 0))) (/ (* (* 1 a) -1) (/ a c))) (/ (+ (- d (pow a b)) (+ -1 e)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001016557)",
      "output_term": "(* (pow (pow (* (- (/ (pow a (/ 0 a)) 0) a) (/ (* a a) 1)) a) (/ (* a -1) (/ a c))) (/ (+ -1 (+ (- d (pow a b)) e)) d))",
      "output_weight_simple": 26,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001037129
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002308)",
      "output_term": "(* (pow (pow (* a (* a (- (/ (pow a (/ 0 a)) 0) a))) a) (/ (* a -1) (/ a c))) (/ (+ e (- (+ -1 d) (pow a b))) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 10,
      "simplification_time": 0.001015526
    },
    "speedup": 1.021272719753113,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (+ (* (/ (pow (* a (* (- 1 b) -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (- (* (- 0 e) 1) (/ d e))) (+ (pow (pow 1 b) 1) (/ 1 c))) (pow (* (+ (- 1 c) a) (/ a -1)) (pow c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001252)",
      "output_term": "(pow (+ (* (/ (pow (* a (+ b -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (* -1 (+ (+ (pow 1 b) (/ 1 c)) (+ e (/ d e))))) (pow (* (+ a (- 1 c)) (/ a -1)) (pow c e)))",
      "output_weight_simple": 33,
      "output_weight_complex": 87,
      "output_depth": 8,
      "simplification_time": 0.001030691
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000574)",
      "output_term": "(pow (- (* (/ (pow (* a (- b 1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (+ e (+ (/ d e) (+ (pow 1 b) (/ 1 c))))) (pow (* (+ a (- 1 c)) (/ a -1)) (pow c e)))",
      "output_weight_simple": 32,
      "output_weight_complex": 85,
      "output_depth": 8,
      "simplification_time": 0.001009093
    },
    "speedup": 1.0214033790740795,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (- (* (+ (pow a (* (* a b) -1)) b) c) (pow d (* (* b e) -1))) (+ (/ d (* 1 a)) (- -1 -1))) (/ (pow (* b (* 1 b)) (/ c 1)) (pow 0 e))) (+ (+ (* (pow b d) 1) (/ c b)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012324)",
      "output_term": "(+ (/ (* (- (* (+ b (pow a (* a (* b -1)))) c) (pow d (* b (* -1 e)))) (/ d a)) (/ (pow (* b b) (/ c 1)) (pow 0 e))) (+ (pow b d) (+ (/ c b) (- c d))))",
      "output_weight_simple": 31,
      "output_weight_complex": 78,
      "output_depth": 10,
      "simplification_time": 0.0010372620000000002
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001006173)",
      "output_term": "(+ (/ (/ (* d (- (* (+ b (pow a (* a (- 0 b)))) c) (pow d (* e (- 0 b))))) (/ (pow (* b b) c) (pow 0 e))) a) (- (+ (pow b d) (+ c (/ c b))) d))",
      "output_weight_simple": 27,
      "output_weight_complex": 68,
      "output_depth": 11,
      "simplification_time": 0.001015394
    },
    "speedup": 1.0215364676174965,
    "weight_simple_diff": 4,
    "weight_complex_diff": 10,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (pow (- (- (+ (pow a a) (+ (pow b (- 1 c)) (/ 0 -1))) (- (- (* 1 0) -1) (/ b a))) (- (pow (* 0 1) 0) (pow 0 e))) (/ (/ a (* a 1)) (/ 1 1))) (* (/ (* (/ e c) -1) (+ e e)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001015408)",
      "output_term": "(pow (pow (- (+ (pow b (- 1 c)) (+ (pow a a) (+ -1 (/ b a)))) (- (pow 0 0) (pow 0 e))) (/ (/ a a) 1)) (* c (/ (* -1 (/ e c)) (+ e e))))",
      "output_weight_simple": 27,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001043591
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004682)",
      "output_term": "(pow (- (+ (pow a a) (pow b (- 1 c))) (- (pow 0 0) (+ (pow 0 e) (- (/ b a) 1)))) (/ (- 0 e) (+ e e)))",
      "output_weight_simple": 21,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001021558
    },
    "speedup": 1.021568036274005,
    "weight_simple_diff": 6,
    "weight_complex_diff": 23,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (/ (/ (/ (+ (/ (pow (- a 0) a) (/ a a)) (pow a 1)) (pow (/ 0 0) b)) (pow -1 (+ -1 a))) (/ (* (pow -1 -1) d) (* b 1))) (+ (+ (- -1 c) 1) (pow c -1))) (/ a (/ (pow (/ 0 b) 1) (- 0 d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005663)",
      "output_term": "(* (/ (/ (/ (+ a (/ (pow a a) (/ a a))) (pow (/ 0 0) b)) (pow -1 (+ a -1))) (/ (* (pow -1 -1) d) b)) (* (+ (* -1 c) (pow c -1)) (/ a (/ (/ 0 b) (- 0 d)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 92,
      "output_depth": 8,
      "simplification_time": 0.001039767
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005508)",
      "output_term": "(* (/ (/ (/ (+ a (pow a a)) (pow -1 (- a 1))) (pow (/ 0 0) b)) (/ (- 0 d) b)) (/ (* a (- (/ 1 c) c)) (/ (/ 0 b) (- 0 d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 76,
      "output_depth": 7,
      "simplification_time": 0.001017678
    },
    "speedup": 1.0217052938159221,
    "weight_simple_diff": 4,
    "weight_complex_diff": 16,
    "depth_diff": 1
  },
  {
    "base_term": "(* (pow (* (/ (/ (- (+ 0 (- (- 1 -1) a)) (/ b 0)) (+ (pow a a) -1)) c) (+ (+ 0 (* c d)) (* -1 c))) (- (* (pow (pow c 0) c) (/ 1 -1)) (* -1 -1))) (- (pow (- 1 (+ e b)) (/ a e)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000569)",
      "output_term": "(* (pow (* (/ (/ (- (- 2 a) (/ b 0)) (+ -1 (pow a a))) c) (* c (+ -1 d))) (+ -1 (* -1 (pow 1 c)))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.0010287360000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000521)",
      "output_term": "(* (pow (* (/ (- (- 2 a) (/ b 0)) (+ -1 (pow a a))) (+ -1 d)) (- -1 (pow 1 c))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.0010068569999999999
    },
    "speedup": 1.0217299974077751,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (pow (* (- (* (* (+ (/ a -1) a) (/ 0 1)) (* b b)) (+ (+ b b) 0)) (pow 0 (/ b d))) (- (pow (* -1 -1) -1) 0)) (pow (* (+ -1 b) 1) (/ 0 e))) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001010077)",
      "output_term": "(- (* (pow (* b (* (pow 0 (/ b d)) -2)) (pow 1 -1)) (pow (+ -1 b) (/ 0 e))) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.001034394
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000654)",
      "output_term": "(- (* b (* (* (pow (+ -1 b) (/ 0 e)) -2) (pow 0 (/ b d)))) (/ (pow (+ d (- e a)) (- 0 e)) (/ c b)))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.001012369
    },
    "speedup": 1.0217559012573478,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (* (+ (- (pow (pow (+ (* 1 a) 1) (- a a)) (pow a -1)) (* b (/ a b))) (pow d (- b -1))) (+ (pow (* d c) -1) (pow c b))) (+ (+ e (+ 0 -1)) (/ -1 1))) (- (+ (pow (pow -1 a) d) -1) (pow e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000243)",
      "output_term": "(pow (- (* (+ (- (pow 1 (pow a -1)) (* b (/ a b))) (pow d (+ 1 b))) (+ (pow (* d c) -1) (pow c b))) (+ e -2)) (- (+ -1 (pow (pow -1 a) d)) (pow e c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.001029245
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002176)",
      "output_term": "(pow (- (* (+ (- (pow 1 (/ 1 a)) a) (pow d (+ 1 b))) (+ (/ 1 (* d c)) (pow c b))) (+ e -2)) (- (pow (pow -1 a) d) (+ 1 (pow e c))))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.001006929
    },
    "speedup": 1.0221624364776465,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (* (+ (* (pow (* (* 1 (* a a)) (+ a 1)) (/ a a)) (+ (pow b a) -1)) (+ (/ -1 a) b)) (* (- (/ a c) 0) (* 0 0))) (+ (pow (- -1 d) e) (+ b a))) (* (- a (+ (+ a e) -1)) (+ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012086)",
      "output_term": "(/ 0 (+ a (+ b (pow (- -1 d) e))))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 6,
      "simplification_time": 0.001036852
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100025)",
      "output_term": "(/ 0 (+ a (+ b (pow (- -1 d) e))))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 6,
      "simplification_time": 0.001014221
    },
    "speedup": 1.0223136771965873,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (/ (/ (* (- (- -1 (/ 0 -1)) (+ a 0)) (+ a a)) (+ (+ a a) -1)) (pow (pow -1 0) 0)) (/ (- (pow 0 1) a) (- 0 b))) (* (pow (- b -1) b) (pow 1 0))) (+ (* 0 (/ (pow a 0) c)) (- -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001009747)",
      "output_term": "(/ (- (+ (/ (/ (* a (+ (* a -2) -2)) (+ -1 (+ a a))) 1) (/ (- 0 a) (- 0 b))) (pow (- b -1) b)) (- -1 a))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 9,
      "simplification_time": 0.001029121
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001001534)",
      "output_term": "(/ (- (+ (/ (* (- -1 a) (+ a a)) (+ -1 (+ a a))) (/ (- 0 a) (- 0 b))) (pow (+ 1 b) b)) (- -1 a))",
      "output_weight_simple": 18,
      "output_weight_complex": 36,
      "output_depth": 7,
      "simplification_time": 0.001006504
    },
    "speedup": 1.022470849594239,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": 2
  },
  {
    "base_term": "(- (- (+ (- (/ 0 (+ (- (pow (- -1 0) -1) (* a a)) -1)) (pow (- (/ a -1) 0) (/ a 0))) (* (+ (+ 0 b) a) (* 0 e))) (/ (+ (* 1 a) 1) (pow 1 e))) (* (* (pow (- 0 1) 1) (pow d -1)) (- d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000094)",
      "output_term": "(+ (- (- (/ 0 (+ -1 (- (pow -1 -1) (* a a)))) (pow (/ a -1) (/ a 0))) (/ (+ a 1) (pow 1 e))) (* (pow d -1) (- d e)))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.001027659
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000792)",
      "output_term": "(+ (- (/ 0 (- -2 (* a a))) (+ (pow (/ a -1) (/ a 0)) (/ (+ a 1) (pow 1 e)))) (/ (- d e) d))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.001004879
    },
    "speedup": 1.0226693960168338,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (/ (+ (+ (pow (* (/ (+ -1 (+ a a)) (pow b 1)) (* b c)) (- (* c b) a)) (* (+ d -1) 1)) (- (+ 0 c) (+ c b))) (* (* (+ a c) -1) (pow -1 -1))) (/ (pow (- (/ c 0) a) (- a a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001015731)",
      "output_term": "(pow (/ (+ (pow (* b (* (/ (+ a (+ -1 a)) b) c)) (- (* b c) a)) (+ d (+ -1 (* -1 b)))) (* -1 (* (+ a c) (pow -1 -1)))) (/ 1 (pow -1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.001045828
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000318)",
      "output_term": "(pow (/ (+ (pow (* (/ (+ a (+ -1 a)) b) (* b c)) (- (* b c) a)) (+ -1 (- d b))) (+ a c)) (/ 1 (pow -1 e)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.001022413
    },
    "speedup": 1.022901704105875,
    "weight_simple_diff": 5,
    "weight_complex_diff": 12,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (pow (- (/ (- (* (pow (/ a a) 0) (/ 0 b)) (- a b)) (* (pow 1 c) a)) (* (+ 0 a) 1)) (pow d (* (* a d) a))) (/ (/ (- e c) 0) (+ -1 c))) (- (+ (/ (- 0 d) 0) (pow e a)) (* a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100036)",
      "output_term": "(+ (pow (- (/ (- (/ 0 b) (- a b)) (* a (pow 1 c))) a) (pow d (* d (* a a)))) (+ (/ (/ (- e c) 0) (+ c -1)) (- (+ (/ (* d -1) 0) (pow e a)) (* a c))))",
      "output_weight_simple": 31,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001028009
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100159)",
      "output_term": "(+ (pow (- (/ (- (/ 0 b) (- a b)) (* a (pow 1 c))) a) (pow d (* d (* a a)))) (- (+ (/ (/ (- e c) 0) (+ c -1)) (+ (/ (- 0 d) 0) (pow e a))) (* a c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.0010048770000000002
    },
    "speedup": 1.0230197327633133,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (pow (pow a (- -1 (pow (* (- a a) -1) (/ 1 d)))) (+ d (* a (pow 1 -1)))) (* b (- (* a 0) a))) (* (* (/ (- -1 d) a) (- 1 -1)) (- c a))) (pow (* (+ (+ c 0) a) (* b 0)) (+ c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006903)",
      "output_term": "(/ (pow (+ (pow (pow a (- -1 (pow 0 (/ 1 d)))) (+ d (* a (pow 1 -1)))) (* a (* -1 b))) (* (/ (- -1 d) a) (* 2 (- c a)))) (pow 0 (+ d c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.001027002
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000266)",
      "output_term": "(/ (pow (- (pow (pow a (- -1 (pow 0 (/ 1 d)))) (+ a d)) (* a b)) (* (/ (- -1 d) a) (* 2 (- c a)))) (pow 0 (+ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001003723
    },
    "speedup": 1.0231926537500884,
    "weight_simple_diff": 3,
    "weight_complex_diff": 8,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (* (pow (pow (* (- (+ -1 (pow a b)) (+ -1 b)) (+ a a)) (/ (* a b) 1)) (+ b (- b a))) (/ c (/ (- b a) -1))) (pow (pow (pow c 0) d) (- a c))) (- (+ (+ (/ c -1) b) (pow b 1)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009366)",
      "output_term": "(/ (* (pow (pow (* a (* (- (+ -1 (pow a b)) (+ -1 b)) 2)) (/ (* a b) 1)) (+ b (- b a))) (* (/ c (/ (- b a) -1)) (pow (pow 1 d) (- a c)))) (- (+ (/ c -1) (+ b b)) (* a b)))",
      "output_weight_simple": 31,
      "output_weight_complex": 75,
      "output_depth": 10,
      "simplification_time": 0.001042262
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000832)",
      "output_term": "(/ (* (pow (pow (* a (* (- (pow a b) b) 2)) (* a b)) (+ b (- b a))) (* (/ c (/ (- b a) -1)) (pow (pow 1 d) (- a c)))) (- (+ b (+ b (/ c -1))) (* a b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.001018561
    },
    "speedup": 1.0232691021941738,
    "weight_simple_diff": 3,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (- (- (- 0 (* (+ (+ (- -1 -1) 0) -1) (/ a b))) (pow (- (pow a c) -1) (* -1 a))) (- (+ (pow a a) 1) (- 0 -1))) (/ (- c (* b 1)) (- b -1))) (- (- (+ d (pow -1 1)) (+ -1 b)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 100,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001433)",
      "output_term": "(/ (pow (- (- (/ a b) (pow (+ (pow a c) 1) (* -1 a))) (pow a a)) (/ (- c b) (+ b 1))) (+ -1 (+ d (* -1 (+ d b)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.001046454
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004261)",
      "output_term": "(/ (pow (- (/ a b) (+ (pow (+ (pow a c) 1) (- 0 a)) (pow a a))) (/ (- c b) (+ b 1))) (- -1 b))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.001022575
    },
    "speedup": 1.0233518323839328,
    "weight_simple_diff": 3,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (- (* a (+ (/ (+ (pow -1 -1) 1) (+ a 0)) 1)) (/ (+ 0 (/ -1 1)) (/ b b))) (+ (* 1 (pow b c)) (pow b 0))) (pow (* (* -1 -1) -1) (- b c))) (+ (+ (* (+ -1 a) a) (* a c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001045651)",
      "output_term": "(- (+ (- (- (+ a (* a (/ (+ (pow -1 -1) 1) a))) (/ -1 (/ b b))) (+ 1 (pow b c))) (pow -1 (- b c))) (+ -1 (+ (* a (+ a (+ -1 c))) d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 53,
      "output_depth": 10,
      "simplification_time": 0.001078815
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001032189)",
      "output_term": "(- (+ (- (* a (+ 1 (/ 0 a))) (pow b c)) (pow -1 (- b c))) (+ (* a (+ a (+ -1 c))) (- d 1)))",
      "output_weight_simple": 21,
      "output_weight_complex": 37,
      "output_depth": 7,
      "simplification_time": 0.0010541930000000001
    },
    "speedup": 1.0233562544998873,
    "weight_simple_diff": 5,
    "weight_complex_diff": 16,
    "depth_diff": 3
  },
  {
    "base_term": "(* (+ (+ (+ (/ (+ a (/ (- (pow a 1) -1) (/ a 1))) a) (- (pow (+ c 1) d) (/ a -1))) (* (/ 0 (pow c -1)) (* e e))) (+ (+ c (pow c 0)) (pow e -1))) (pow (- (+ (+ -1 -1) d) (- d c)) (pow d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001004757)",
      "output_term": "(* (+ (/ (+ a (/ (+ a 1) (/ a 1))) a) (+ (+ 1 (+ c (pow e -1))) (+ (- (pow (+ 1 c) d) (/ a -1)) (* (/ 0 (pow c -1)) (* e e))))) (pow (- (+ d -2) (- d c)) d))",
      "output_weight_simple": 32,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.0010664810000000002
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001012707)",
      "output_term": "(* (+ (/ (+ a (/ (+ a 1) a)) a) (+ (- (pow (+ 1 c) d) (/ a -1)) (+ (/ 0 (/ 1 c)) (+ 1 (+ c (/ 1 e)))))) (pow (- (+ d -2) (- d c)) d))",
      "output_weight_simple": 29,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.001042014
    },
    "speedup": 1.0234804906651929,
    "weight_simple_diff": 3,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (+ (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) d)) (+ (+ 1 c) a)) (/ (+ (* d e) 1) -1)) (+ (- (* (/ d e) d) (/ c 1)) (/ -1 -1))) (+ (- (pow (pow -1 -1) 1) (* d d)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001005753)",
      "output_term": "(+ (* (+ (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) d)) (+ (+ c (+ 1 a)) (/ (+ 1 (* d e)) -1))) (+ 1 (- (* d (/ d e)) (/ c 1)))) (+ c (- (pow -1 -1) (* d d))))",
      "output_weight_simple": 32,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.00105803
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001006644)",
      "output_term": "(+ (* (+ 1 (+ (+ a c) (+ (pow (- (pow 1 a) (+ b c)) c) (+ (+ (pow 1 c) d) (/ (+ 1 (* d e)) -1))))) (- (/ (* d d) e) (+ c -1))) (- c (+ 1 (* d d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 54,
      "output_depth": 10,
      "simplification_time": 0.00103374
    },
    "speedup": 1.0234972043260393,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": -2
  },
  {
    "base_term": "(+ (+ (pow (- (/ (- (* (pow (/ a a) 0) (/ 0 b)) (- a b)) (* (pow 1 c) a)) (* (+ 0 a) 1)) (pow d (* (* a d) a))) (/ (/ (- e c) 0) (+ -1 c))) (- (+ (/ (- 0 d) 0) (pow e a)) (* a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005243)",
      "output_term": "(+ (pow (- (/ (- (/ 0 b) (- a b)) (* a (pow 1 c))) a) (pow d (* d (* a a)))) (+ (/ (/ (- e c) 0) (+ c -1)) (- (+ (/ (* d -1) 0) (pow e a)) (* a c))))",
      "output_weight_simple": 31,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001028854
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000883)",
      "output_term": "(+ (pow (- (/ (- (/ 0 b) (- a b)) (* a (pow 1 c))) a) (pow d (* d (* a a)))) (- (+ (/ (/ (- e c) 0) (+ c -1)) (+ (/ (- 0 d) 0) (pow e a))) (* a c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.001005221
    },
    "speedup": 1.0235102529692477,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (- (* (/ (+ (* (- (+ 0 0) a) (+ 1 a)) (- -1 c)) (* (- 1 c) -1)) (* (/ 1 e) 0)) (* (/ b (+ -1 1)) (* -1 -1))) (+ (/ (* 1 b) -1) (* 1 0))) (- (- -1 (* d (+ 0 c))) (+ a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006505)",
      "output_term": "(* (- (- 0 (/ b 0)) (/ b -1)) (- (- -1 (* c d)) (+ a e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 5,
      "simplification_time": 0.0010350399999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000485)",
      "output_term": "(* (- (- 0 (/ b 0)) (/ b -1)) (- -1 (+ a (+ e (* c d)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.001011193
    },
    "speedup": 1.0235830350882569,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (- (- (pow (* (+ (+ (/ a a) -1) (/ a b)) (pow 0 0)) (* (pow a -1) 1)) (- 1 a)) (+ a (* d b))) (/ (- (+ (- -1 -1) 0) (pow c 0)) (/ 0 d))) (/ (pow (+ (- 1 c) 1) (+ b 1)) (+ e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001020985)",
      "output_term": "(+ (- (- (+ (pow (* (+ (/ a a) (+ -1 (/ a b))) (pow 0 0)) (pow a -1)) (+ a -1)) (+ a (* b d))) (/ -1 (/ 0 d))) (/ (pow (+ 1 (- 1 c)) (+ b 1)) (+ 1 e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.001058833
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001011877)",
      "output_term": "(+ (- (pow (* (/ a b) (pow 0 0)) (/ 1 a)) (+ 1 (+ (* b d) (/ -1 (/ 0 d))))) (/ (pow (- 2 c) (+ b 1)) (+ 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001034211
    },
    "speedup": 1.0238075209024078,
    "weight_simple_diff": 5,
    "weight_complex_diff": 8,
    "depth_diff": 3
  },
  {
    "base_term": "(+ (/ (/ (+ (/ (* (- (/ 1 (+ -1 -1)) (pow a a)) (- a -1)) (pow (pow 1 b) -1)) (+ (* b 0) 1)) (* (* (* c -1) c) (* d a))) (- (* (* c 0) c) 1)) (/ (* (* (- 1 1) a) (+ -1 1)) (* -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00103836)",
      "output_term": "(+ (/ (/ (+ 1 (/ (* (- -0.5 (pow a a)) (+ 1 a)) (pow (pow 1 b) -1))) (* -1 (* a (* d (* c c))))) -1) (/ 0 (* -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001036365
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001021)",
      "output_term": "(+ (/ (/ (+ 1 (/ (* (- -0.5 (pow a a)) (+ 1 a)) (/ 1 (pow 1 b)))) -1) (- 0 (* a (* d (* c c))))) (/ 0 (- 0 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001012102
    },
    "speedup": 1.023972880203774,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (/ (+ (* (pow (pow (+ (- a b) b) (pow -1 1)) (* -1 a)) (+ (- 1 -1) -1)) (* (pow -1 b) 1)) (pow -1 1)) (+ (- (+ (/ c 1) -1) (* 0 -1)) (pow 1 -1))) (/ (pow (/ (* d 1) 1) (pow -1 -1)) (+ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001018945)",
      "output_term": "(pow (/ (/ (+ (pow (pow a -1) (* a -1)) (pow -1 b)) -1) (+ -1 (+ (/ c 1) (pow 1 -1)))) (/ (pow (/ d 1) (pow -1 -1)) (+ -1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 7,
      "simplification_time": 0.0010378610000000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000585)",
      "output_term": "(pow (/ (/ (+ (pow (/ 1 a) (- 0 a)) (pow -1 b)) -1) c) (/ (/ 1 d) (+ -1 e)))",
      "output_weight_simple": 19,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.0010135180000000001
    },
    "speedup": 1.0240183203455686,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (- (* (/ (+ (* (- (+ 0 0) a) (+ 1 a)) (- -1 c)) (* (- 1 c) -1)) (* (/ 1 e) 0)) (* (/ b (+ -1 1)) (* -1 -1))) (+ (/ (* 1 b) -1) (* 1 0))) (- (- -1 (* d (+ 0 c))) (+ a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004476)",
      "output_term": "(* (- (- 0 (/ b 0)) (/ b -1)) (- (- -1 (* c d)) (+ a e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 5,
      "simplification_time": 0.0010358569999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000431)",
      "output_term": "(* (- (- 0 (/ b 0)) (/ b -1)) (- -1 (+ a (+ e (* c d)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.001011342
    },
    "speedup": 1.024240069135861,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (+ (* (/ (pow (* a (* (- 1 b) -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (- (* (- 0 e) 1) (/ d e))) (+ (pow (pow 1 b) 1) (/ 1 c))) (pow (* (+ (- 1 c) a) (/ a -1)) (pow c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008414)",
      "output_term": "(pow (+ (* (/ (pow (* a (+ b -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (* -1 (+ (+ (pow 1 b) (/ 1 c)) (+ e (/ d e))))) (pow (* (+ a (- 1 c)) (/ a -1)) (pow c e)))",
      "output_weight_simple": 33,
      "output_weight_complex": 87,
      "output_depth": 8,
      "simplification_time": 0.001038046
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002777)",
      "output_term": "(pow (- (* (/ (pow (* a (- b 1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (+ e (+ (/ d e) (+ (pow 1 b) (/ 1 c))))) (pow (* (+ a (- 1 c)) (/ a -1)) (pow c e)))",
      "output_weight_simple": 32,
      "output_weight_complex": 85,
      "output_depth": 8,
      "simplification_time": 0.0010133689999999999
    },
    "speedup": 1.0243514455247793,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (* (* (pow (pow (+ (* (* -1 a) -1) (pow 0 0)) (/ a 0)) (pow (+ 0 1) -1)) (* (pow 1 1) a)) (- (+ (- 0 b) 1) 0)) (- (- (+ 0 0) a) (/ -1 b))) (* (* (* (- 0 b) b) (- 1 d)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018431)",
      "output_term": "(pow (/ (* a (* (pow (pow (+ a (pow 0 0)) (/ a 0)) (pow 1 -1)) (+ 1 (- 0 b)))) (- (- 0 a) (/ -1 b))) (* b (* (/ a b) (* (- 0 b) (- 1 d)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.0010452319999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00100021)",
      "output_term": "(pow (/ (* a (* (pow (+ a (pow 0 0)) (/ a 0)) (- 1 b))) (- (- 0 a) (/ -1 b))) (* b (* (- 1 d) (* (- 0 b) (/ a b)))))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.001020093
    },
    "speedup": 1.0246438314937951,
    "weight_simple_diff": 2,
    "weight_complex_diff": 8,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (- (- (- 0 (* (+ (+ (- -1 -1) 0) -1) (/ a b))) (pow (- (pow a c) -1) (* -1 a))) (- (+ (pow a a) 1) (- 0 -1))) (/ (- c (* b 1)) (- b -1))) (- (- (+ d (pow -1 1)) (+ -1 b)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 100,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001044212)",
      "output_term": "(/ (pow (- (- (/ a b) (pow (+ (pow a c) 1) (* -1 a))) (pow a a)) (/ (- c b) (+ b 1))) (+ -1 (+ d (* -1 (+ d b)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.001043525
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000624)",
      "output_term": "(/ (pow (- (/ a b) (+ (pow (+ (pow a c) 1) (- 0 a)) (pow a a))) (/ (- c b) (+ b 1))) (- -1 b))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.001018317
    },
    "speedup": 1.0247545705315733,
    "weight_simple_diff": 3,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (pow (- (/ (* a (* 0 (+ (- 1 1) a))) (- (- a b) d)) (pow (+ c c) 0)) (pow (/ -1 0) (* e 1))) (+ (/ (- (- e d) 0) (+ 1 0)) (* 0 d))) (* (- (* (pow -1 1) e) (* -1 c)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003738)",
      "output_term": "(+ (pow (+ (/ 0 (- (- a b) d)) -1) (pow (/ -1 0) e)) (+ (/ (- e d) 1) (* (+ d -1) (+ e (* c -1)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.0010329129999999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00100463)",
      "output_term": "(+ (pow (- (/ 0 (- a (+ b d))) 1) (pow (/ -1 0) e)) (+ (- e d) (* (- d 1) (- e c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.001007632
    },
    "speedup": 1.0250895168077232,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (/ (pow (* (pow (+ a a) (- -1 b)) (- 0 a)) (* (- c 0) 0)) (* (* a d) c)) (- (- (pow 0 -1) b) (- -1 -1))) (- (/ (/ 0 c) 1) (+ a 0))) (+ (* (- (+ -1 b) 0) (- 0 -1)) (/ e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010278)",
      "output_term": "(* (+ (- (/ 1 (* a (* c d))) (- (pow 0 -1) b)) (- (/ (/ 0 c) 1) a)) (+ -1 (+ b (/ e c))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001034346
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000036)",
      "output_term": "(* (+ (- (/ 1 (* a (* c d))) (- (pow 0 -1) b)) (- (/ 0 c) a)) (+ -1 (+ b (/ e c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.001008959
    },
    "speedup": 1.0251615774278242,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (+ (- (pow (+ (- (+ (/ a a) -1) (+ 1 -1)) (* 0 b)) (/ (pow 1 0) a)) (- (pow 1 e) a)) (* (/ (/ c e) 1) (pow e -1))) (+ (+ b (pow -1 e)) (+ 1 e))) (- (pow 0 (+ (- 1 c) -1)) (/ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010726)",
      "output_term": "(pow (* (+ (- (pow (+ (/ a a) -1) (/ 1 a)) (- (pow 1 e) a)) (* (/ (/ c e) 1) (pow e -1))) (+ 1 (+ (+ e b) (pow -1 e)))) (+ 1 (pow 0 (* -1 c))))",
      "output_weight_simple": 28,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.0010327090000000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002696)",
      "output_term": "(pow (* (+ (- (pow 0 (/ 1 a)) (- (pow 1 e) a)) (* c (pow e -2))) (+ 1 (+ b (+ e (pow -1 e))))) (+ 1 (pow 0 (- 0 c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.001007165
    },
    "speedup": 1.0253622792690376,
    "weight_simple_diff": 3,
    "weight_complex_diff": 16,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (+ (pow (pow a (- -1 (pow (* (- a a) -1) (/ 1 d)))) (+ d (* a (pow 1 -1)))) (* b (- (* a 0) a))) (* (* (/ (- -1 d) a) (- 1 -1)) (- c a))) (pow (* (+ (+ c 0) a) (* b 0)) (+ c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001009808)",
      "output_term": "(/ (pow (+ (pow (pow a (- -1 (pow 0 (/ 1 d)))) (+ d (* a (pow 1 -1)))) (* a (* -1 b))) (* (/ (- -1 d) a) (* 2 (- c a)))) (pow 0 (+ d c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.001029432
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00100048)",
      "output_term": "(/ (pow (- (pow (pow a (- -1 (pow 0 (/ 1 d)))) (+ a d)) (* a b)) (* (/ (- -1 d) a) (* 2 (- c a)))) (pow 0 (+ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001003916
    },
    "speedup": 1.025416469106977,
    "weight_simple_diff": 3,
    "weight_complex_diff": 8,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (+ (+ (pow (* (/ (+ -1 (+ a a)) (pow b 1)) (* b c)) (- (* c b) a)) (* (+ d -1) 1)) (- (+ 0 c) (+ c b))) (* (* (+ a c) -1) (pow -1 -1))) (/ (pow (- (/ c 0) a) (- a a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018502)",
      "output_term": "(pow (/ (+ (pow (* b (* (/ (+ a (+ -1 a)) b) c)) (- (* b c) a)) (+ d (+ -1 (* -1 b)))) (* -1 (* (+ a c) (pow -1 -1)))) (/ 1 (pow -1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.0010484119999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000174)",
      "output_term": "(pow (/ (+ (pow (* (/ (+ a (+ -1 a)) b) (* b c)) (- (* b c) a)) (+ -1 (- d b))) (+ a c)) (/ 1 (pow -1 e)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.0010223850000000002
    },
    "speedup": 1.0254571418790375,
    "weight_simple_diff": 5,
    "weight_complex_diff": 12,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (/ (+ (* (pow (pow (+ (- a b) b) (pow -1 1)) (* -1 a)) (+ (- 1 -1) -1)) (* (pow -1 b) 1)) (pow -1 1)) (+ (- (+ (/ c 1) -1) (* 0 -1)) (pow 1 -1))) (/ (pow (/ (* d 1) 1) (pow -1 -1)) (+ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001022319)",
      "output_term": "(pow (/ (/ (+ (pow (pow a -1) (* a -1)) (pow -1 b)) -1) (+ -1 (+ (/ c 1) (pow 1 -1)))) (/ (pow (/ d 1) (pow -1 -1)) (+ -1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 7,
      "simplification_time": 0.001041015
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002638)",
      "output_term": "(pow (/ (/ (+ (pow (/ 1 a) (- 0 a)) (pow -1 b)) -1) c) (/ (/ 1 d) (+ -1 e)))",
      "output_weight_simple": 19,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.001015147
    },
    "speedup": 1.0254820237857176,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (pow (- (pow (pow (pow (/ (/ 1 a) a) (* -1 -1)) (/ -1 a)) (pow (pow a -1) 1)) (- (* b 0) a)) (+ c (+ (- a d) d))) (* (+ (pow 1 1) e) (/ 1 b))) (- (* (* (* 1 -1) b) (pow 0 a)) (+ e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001017646)",
      "output_term": "(+ (- (pow (+ a (pow (pow (/ (/ 1 a) a) (/ -1 a)) (pow a -1))) (+ c (+ a (* d 0)))) (* (+ 1 e) (/ 1 b))) (- (* -1 (* b (pow 0 a))) (+ b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.0010489039999999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001502)",
      "output_term": "(- (pow (+ a (pow (pow (/ (/ 1 a) a) (/ -1 a)) (/ 1 a))) (+ a c)) (+ (* b (pow 0 a)) (+ b (+ e (/ (+ 1 e) b)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.001022716
    },
    "speedup": 1.0256063266830673,
    "weight_simple_diff": 6,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (* (pow (* (/ (- 1 (pow (/ (/ 1 a) 0) (/ 0 1))) (/ (/ a 1) 0)) (* (- a b) b)) (/ (pow c (/ 0 a)) (pow c d))) (+ (- (+ c b) 0) (pow a e))) (/ (/ (+ d (/ 1 -1)) (pow e c)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 143,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001016128)",
      "output_term": "(pow (* (pow (* (/ 0 (/ (/ a 1) 0)) (* b (- a b))) (/ (pow c (/ 0 a)) (pow c d))) (+ b (+ c (pow a e)))) (/ (/ (+ d -1) (pow e c)) (- e b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 83,
      "output_depth": 8,
      "simplification_time": 0.001048184
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000806)",
      "output_term": "(pow (* (pow (/ 0 (/ a 0)) (/ (pow c (/ 0 a)) (pow c d))) (+ c (+ b (pow a e)))) (/ (/ (- d 1) (- e b)) (pow e c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.001021877
    },
    "speedup": 1.0257438028255845,
    "weight_simple_diff": 5,
    "weight_complex_diff": 11,
    "depth_diff": 1
  },
  {
    "base_term": "(* (pow (pow (* (- (/ (pow a (/ (+ 0 0) a)) (* 0 -1)) a) (/ (* (* a 1) a) (- 1 0))) (- (- (+ a -1) 0) (- -1 0))) (/ (* (* 1 a) -1) (/ a c))) (/ (+ (- d (pow a b)) (+ -1 e)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001018789)",
      "output_term": "(* (pow (pow (* (- (/ (pow a (/ 0 a)) 0) a) (/ (* a a) 1)) a) (/ (* a -1) (/ a c))) (/ (+ -1 (+ (- d (pow a b)) e)) d))",
      "output_weight_simple": 26,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.00104045
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000896)",
      "output_term": "(* (pow (pow (* a (* a (- (/ (pow a (/ 0 a)) 0) a))) a) (/ (* a -1) (/ a c))) (/ (+ e (- (+ -1 d) (pow a b))) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 10,
      "simplification_time": 0.001013972
    },
    "speedup": 1.0261131471085987,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": -1
  },
  {
    "base_term": "(- (/ (- (* (+ (+ 1 a) (+ (pow (- 0 1) 0) (pow -1 b))) (/ (+ b -1) c)) (+ (+ (/ a -1) 1) (+ a b))) (* (+ (pow (* d -1) -1) (- d d)) (+ -1 d))) (* (pow (pow (/ c -1) e) (/ -1 b)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012763)",
      "output_term": "(+ (/ (- (* (+ a (+ 2 (pow -1 b))) (/ (+ -1 b) c)) (+ 1 (+ (/ a -1) (+ a b)))) (* (pow (* -1 d) -1) (+ -1 d))) (pow (pow (/ c -1) e) (/ -1 b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.0010387929999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000973)",
      "output_term": "(+ (/ (- (* (+ (pow -1 b) (+ a 2)) (/ (+ -1 b) c)) (+ 1 (+ (/ a -1) (+ a b)))) (/ (+ -1 d) (- 0 d))) (pow (pow (/ c -1) e) (/ -1 b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.001012213
    },
    "speedup": 1.0262592952273877,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (+ (* (/ (pow (* a (* (- 1 b) -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (- (* (- 0 e) 1) (/ d e))) (+ (pow (pow 1 b) 1) (/ 1 c))) (pow (* (+ (- 1 c) a) (/ a -1)) (pow c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001007477)",
      "output_term": "(pow (+ (* (/ (pow (* a (+ b -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (* -1 (+ (+ (pow 1 b) (/ 1 c)) (+ e (/ d e))))) (pow (* (+ a (- 1 c)) (/ a -1)) (pow c e)))",
      "output_weight_simple": 33,
      "output_weight_complex": 87,
      "output_depth": 8,
      "simplification_time": 0.001037085
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001619)",
      "output_term": "(pow (- (* (/ (pow (* a (- b 1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (+ e (+ (/ d e) (+ (pow 1 b) (/ 1 c))))) (pow (* (+ a (- 1 c)) (/ a -1)) (pow c e)))",
      "output_weight_simple": 32,
      "output_weight_complex": 85,
      "output_depth": 8,
      "simplification_time": 0.001010376
    },
    "speedup": 1.0264347134136205,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (- (/ (- (+ (pow (- (* -1 -1) -1) (* a b)) (pow b -1)) (+ (- -1 c) -1)) (+ d 1)) (* (+ (+ 1 0) d) (+ -1 a))) (- (- (+ 1 c) -1) (/ b -1))) (* (* (* -1 (/ 0 c)) (/ b d)) (+ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001054811)",
      "output_term": "(* (- (/ (+ (pow 2 (* a b)) (+ (pow b -1) (+ 2 c))) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (- (+ 2 c) (/ b -1)))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.0010821820000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001027307)",
      "output_term": "(* (- (/ (- (+ (pow 2 (* a b)) (/ 1 b)) (- -2 c)) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (- c (- (/ b -1) 2)))",
      "output_weight_simple": 23,
      "output_weight_complex": 45,
      "output_depth": 8,
      "simplification_time": 0.0010542960000000001
    },
    "speedup": 1.02644987745377,
    "weight_simple_diff": -2,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (+ (* a a) a) (/ (* 1 a) 1)) (pow (/ 1 a) b)) (+ (pow a -1) b)) (+ (pow (/ d 0) 1) (+ -1 c))) (/ (pow (- 0 0) -1) (pow 1 c))) (+ (+ (pow (* e 1) e) (- a d)) (/ b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001019344)",
      "output_term": "(+ (/ (- (- (pow (+ a (+ (* a a) (/ a 1))) (pow (/ 1 a) b)) (+ b (pow a -1))) (+ (/ d 0) (+ -1 c))) (/ (pow 0 -1) (pow 1 c))) (+ (pow e e) (+ (- a d) (/ b 1))))",
      "output_weight_simple": 32,
      "output_weight_complex": 80,
      "output_depth": 9,
      "simplification_time": 0.001046359
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001001173)",
      "output_term": "(+ b (+ (/ (- (pow (* a (+ a 2)) (pow (/ 1 a) b)) (+ c (+ (+ (/ 1 a) (+ b -1)) (/ d 0)))) (/ (pow 0 -1) (pow 1 c))) (+ (pow e e) (- a d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.001019236
    },
    "speedup": 1.0266111087128005,
    "weight_simple_diff": 3,
    "weight_complex_diff": 14,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (/ (- (+ (* (- (* 1 a) b) (/ (- b a) 1)) (/ 1 (+ d c))) (* (/ d 1) a)) (- (/ (/ 1 -1) 1) (- c 0))) (+ (+ (+ -1 c) e) (/ 1 c))) (/ (+ (+ (/ -1 -1) e) (+ 0 1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009232)",
      "output_term": "(/ (+ -1 (+ (+ c e) (+ (/ (- (+ (* (- a b) (/ (- b a) 1)) (/ 1 (+ d c))) (* a (/ d 1))) (- -1 c)) (/ 1 c)))) (/ (+ e 2) 0))",
      "output_weight_simple": 29,
      "output_weight_complex": 64,
      "output_depth": 11,
      "simplification_time": 0.00104247
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001567)",
      "output_term": "(/ (+ (/ (- (+ (* (- a b) (- b a)) (/ 1 (+ d c))) (* a d)) (- -1 c)) (+ c (+ e (+ -1 (/ 1 c))))) (/ (+ e 2) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.001015435
    },
    "speedup": 1.0266240576698655,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 3
  },
  {
    "base_term": "(pow (* (+ (- (pow (+ (- (+ (/ a a) -1) (+ 1 -1)) (* 0 b)) (/ (pow 1 0) a)) (- (pow 1 e) a)) (* (/ (/ c e) 1) (pow e -1))) (+ (+ b (pow -1 e)) (+ 1 e))) (- (pow 0 (+ (- 1 c) -1)) (/ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.0010113)",
      "output_term": "(pow (* (+ (- (pow (+ (/ a a) -1) (/ 1 a)) (- (pow 1 e) a)) (* (/ (/ c e) 1) (pow e -1))) (+ 1 (+ (+ e b) (pow -1 e)))) (+ 1 (pow 0 (* -1 c))))",
      "output_weight_simple": 28,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.001033085
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002128)",
      "output_term": "(pow (* (+ (- (pow 0 (/ 1 a)) (- (pow 1 e) a)) (* c (pow e -2))) (+ 1 (+ b (+ e (pow -1 e))))) (+ 1 (pow 0 (- 0 c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.001006292
    },
    "speedup": 1.026625472526861,
    "weight_simple_diff": 3,
    "weight_complex_diff": 16,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (- (* (pow (+ (- (- (/ 0 1) 0) (* a 0)) (pow b 1)) (* 1 (+ a 0))) (+ (* 1 b) b)) (/ (+ (+ c -1) 0) (/ -1 c))) (pow (/ (pow d 1) d) (/ c 1))) (* (+ (* (+ -1 d) d) (- -1 0)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008794)",
      "output_term": "(* (+ (- (* b (* (pow b a) 2)) (/ (+ c -1) (/ -1 c))) (pow (/ d d) (/ c 1))) (* b (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.001039812
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001089)",
      "output_term": "(* b (* (+ (- (* b (* (pow b a) 2)) (/ (+ c -1) (/ -1 c))) (pow 1 c)) (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.001012769
    },
    "speedup": 1.0267020416304211,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": -1
  },
  {
    "base_term": "(- (* (/ (- (+ (pow (- 0 (+ (+ -1 a) a)) (+ b -1)) (+ 0 a)) (+ (- 0 b) 0)) (- (* (/ 1 a) 0) 0)) (* (- (+ b (pow 1 1)) (* -1 c)) (pow d 1))) (- (* (pow b (* b -1)) (pow a 1)) (- -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008103)",
      "output_term": "(- (* (/ (+ a (+ b (pow (+ 1 (* -1 (+ a a))) (+ -1 b)))) 0) (* (+ 1 (+ b c)) d)) (+ c (+ 1 (* a (pow b (- 0 b))))))",
      "output_weight_simple": 25,
      "output_weight_complex": 43,
      "output_depth": 10,
      "simplification_time": 0.00103969
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002264)",
      "output_term": "(- (* (/ (+ b (+ a (pow (- 1 (+ a a)) (+ -1 b)))) 0) (* (+ (+ b 1) c) d)) (+ (* a (pow b (- 0 b))) (+ 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 41,
      "output_depth": 9,
      "simplification_time": 0.001012425
    },
    "speedup": 1.0269303899054252,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (pow (/ (* (+ (* (* -1 (+ a 1)) (- -1 b)) (- -1 a)) (* (* b b) 0)) (- (* a 1) 1)) (pow c (pow (- -1 d) 1))) (* (* -1 (- b d)) (+ 1 0))) (pow (* (+ (+ b a) a) (* c a)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001038983)",
      "output_term": "(/ (+ (pow (/ 0 (+ -1 a)) (pow c (- -1 d))) (- b d)) (* a (* c (+ b (+ a a)))))",
      "output_weight_simple": 18,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.001060549
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001014123)",
      "output_term": "(/ (+ (pow (/ 0 (- a 1)) (pow c (- -1 d))) (- b d)) (* a (* c (+ a (+ a b)))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.0010324980000000002
    },
    "speedup": 1.027168091366763,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (- (- (- 0 (* (+ (+ (- -1 -1) 0) -1) (/ a b))) (pow (- (pow a c) -1) (* -1 a))) (- (+ (pow a a) 1) (- 0 -1))) (/ (- c (* b 1)) (- b -1))) (- (- (+ d (pow -1 1)) (+ -1 b)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 100,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005487)",
      "output_term": "(/ (pow (- (- (/ a b) (pow (+ (pow a c) 1) (* -1 a))) (pow a a)) (/ (- c b) (+ b 1))) (+ -1 (+ d (* -1 (+ d b)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.00104991
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004522)",
      "output_term": "(/ (pow (- (/ a b) (+ (pow (+ (pow a c) 1) (- 0 a)) (pow a a))) (/ (- c b) (+ b 1))) (- -1 b))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.001022091
    },
    "speedup": 1.0272177330589938,
    "weight_simple_diff": 3,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (/ (- (+ (* (- (* 1 a) b) (/ (- b a) 1)) (/ 1 (+ d c))) (* (/ d 1) a)) (- (/ (/ 1 -1) 1) (- c 0))) (+ (+ (+ -1 c) e) (/ 1 c))) (/ (+ (+ (/ -1 -1) e) (+ 0 1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008666)",
      "output_term": "(/ (+ -1 (+ (+ c e) (+ (/ (- (+ (* (- a b) (/ (- b a) 1)) (/ 1 (+ d c))) (* a (/ d 1))) (- -1 c)) (/ 1 c)))) (/ (+ e 2) 0))",
      "output_weight_simple": 29,
      "output_weight_complex": 64,
      "output_depth": 11,
      "simplification_time": 0.001042175
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000552)",
      "output_term": "(/ (+ (/ (- (+ (* (- a b) (- b a)) (/ 1 (+ d c))) (* a d)) (- -1 c)) (+ c (+ e (+ -1 (/ 1 c))))) (/ (+ e 2) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.001014487
    },
    "speedup": 1.0272926119309564,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 3
  },
  {
    "base_term": "(- (+ (- (/ (/ (* (- 1 (pow (+ 0 a) 1)) (* -1 a)) (/ (/ 0 a) 0)) (/ b (* 1 -1))) (/ (+ (/ 0 0) a) (* a 1))) (+ (pow (- 0 b) 0) (* 0 0))) (/ (- (* (pow d c) 1) (pow a a)) (- e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001022061)",
      "output_term": "(- (+ 1 (- (/ (/ (* a (+ a -1)) (/ (/ 0 a) 0)) (/ b -1)) (/ (+ a (/ 0 0)) a))) (/ (- (pow d c) (pow a a)) (- e d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.001039634
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002704)",
      "output_term": "(- (/ (/ (* a (- a 1)) (/ b -1)) (/ (/ 0 a) 0)) (+ (/ (+ a (/ 0 0)) a) (- (/ (- (pow d c) (pow a a)) (- e d)) 1)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 7,
      "simplification_time": 0.001011936
    },
    "speedup": 1.027371296208456,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (- (* (pow (+ (- (- (/ 0 1) 0) (* a 0)) (pow b 1)) (* 1 (+ a 0))) (+ (* 1 b) b)) (/ (+ (+ c -1) 0) (/ -1 c))) (pow (/ (pow d 1) d) (/ c 1))) (* (+ (* (+ -1 d) d) (- -1 0)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010762)",
      "output_term": "(* (+ (- (* b (* (pow b a) 2)) (/ (+ c -1) (/ -1 c))) (pow (/ d d) (/ c 1))) (* b (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.001041782
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002162)",
      "output_term": "(* b (* (+ (- (* b (* (pow b a) 2)) (/ (+ c -1) (/ -1 c))) (pow 1 c)) (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.001014014
    },
    "speedup": 1.027384237298499,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": -1
  },
  {
    "base_term": "(* (+ (+ (- (+ 0 (/ (- (/ (- 0 a) a) (- 1 0)) a)) (+ -1 (- b (- a -1)))) (+ (pow 1 b) (+ 1 1))) (* (* (* (/ 1 a) 0) (pow d 0)) (- 1 1))) (/ (/ (/ (* -1 -1) d) (/ d 1)) (pow a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002803)",
      "output_term": "(* (+ (- (/ (+ (/ (- 0 a) a) -1) a) (+ -1 (- b (+ a 1)))) (+ (pow 1 b) 2)) (/ (/ (/ 1 d) (/ d 1)) (pow a a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.001045175
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100004)",
      "output_term": "(/ (/ (/ (+ (- (/ (- (/ (- 0 a) a) 1) a) (- b (+ a 2))) (+ (pow 1 b) 2)) d) d) (pow a a))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 10,
      "simplification_time": 0.00101716
    },
    "speedup": 1.027542372881356,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": -2
  },
  {
    "base_term": "(/ (+ (- (pow (* (* a (- b (pow (/ 1 a) -1))) (- (* -1 -1) -1)) (pow (* c b) 0)) (pow (- (/ a 0) -1) b)) (+ (* (* (* a d) b) (* e e)) (pow 0 e))) (- (- (* (+ -1 0) -1) (* 1 0)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001015893)",
      "output_term": "(/ (+ (- (* (- b (pow (/ 1 a) -1)) (* a 2)) (pow (+ 1 (/ a 0)) b)) (+ (* a (* d (* b (* e e)))) (pow 0 e))) (* -1 e))",
      "output_weight_simple": 26,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.001037392
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001009765)",
      "output_term": "(/ (- (+ (pow 0 e) (* a (+ (* (- b a) 2) (* b (* d (* e e)))))) (pow (+ 1 (/ a 0)) b)) (- 0 e))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 9,
      "simplification_time": 0.001009351
    },
    "speedup": 1.0277812178320527,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": -1
  },
  {
    "base_term": "(* (pow (* (/ (/ (- (+ 0 (- (- 1 -1) a)) (/ b 0)) (+ (pow a a) -1)) c) (+ (+ 0 (* c d)) (* -1 c))) (- (* (pow (pow c 0) c) (/ 1 -1)) (* -1 -1))) (- (pow (- 1 (+ e b)) (/ a e)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003356)",
      "output_term": "(* (pow (* (/ (/ (- (- 2 a) (/ b 0)) (+ -1 (pow a a))) c) (* c (+ -1 d))) (+ -1 (* -1 (pow 1 c)))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.0010362219999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001396)",
      "output_term": "(* (pow (* (/ (- (- 2 a) (/ b 0)) (+ -1 (pow a a))) (+ -1 d)) (- -1 (pow 1 c))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.0010077039999999999
    },
    "speedup": 1.0282999769773664,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (* (pow (* (/ (- 1 (pow (/ (/ 1 a) 0) (/ 0 1))) (/ (/ a 1) 0)) (* (- a b) b)) (/ (pow c (/ 0 a)) (pow c d))) (+ (- (+ c b) 0) (pow a e))) (/ (/ (+ d (/ 1 -1)) (pow e c)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 143,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001020639)",
      "output_term": "(pow (* (pow (* (/ 0 (/ (/ a 1) 0)) (* b (- a b))) (/ (pow c (/ 0 a)) (pow c d))) (+ b (+ c (pow a e)))) (/ (/ (+ d -1) (pow e c)) (- e b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 83,
      "output_depth": 8,
      "simplification_time": 0.001052819
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002929)",
      "output_term": "(pow (* (pow (/ 0 (/ a 0)) (/ (pow c (/ 0 a)) (pow c d))) (+ c (+ b (pow a e)))) (/ (/ (- d 1) (- e b)) (pow e c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.001023689
    },
    "speedup": 1.0284559079954947,
    "weight_simple_diff": 5,
    "weight_complex_diff": 11,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (+ (- (pow (- (/ 0 -1) (- (pow 1 -1) -1)) (- a (- 1 b))) (- a c)) (- (+ (* 1 d) a) (* e a))) (* (pow (pow (* b 0) 0) (/ -1 0)) (* e 0))) (- (pow (pow -1 (* 0 0)) (* 0 -1)) (+ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002196)",
      "output_term": "(/ (+ (- (pow (+ -1 (* -1 (pow 1 -1))) (+ a (+ -1 b))) (- a c)) (- (+ a d) (* a e))) (+ (* -1 c) 2))",
      "output_weight_simple": 23,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.001033227
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000893)",
      "output_term": "(/ (+ (- (pow -2 (- a (- 1 b))) (- a c)) (- (+ a d) (* a e))) (- 1 (- c 1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 32,
      "output_depth": 7,
      "simplification_time": 0.00100447
    },
    "speedup": 1.0286290282437505,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (* (+ (+ -1 a) 1) (+ (- a b) a)) (/ (* d d) b)) (* (+ 0 c) 1)) (+ (+ 1 (pow -1 b)) (+ -1 1))) (pow (+ (- c 1) b) (* 0 e))) (- (* (+ 1 (pow e a)) (pow c 0)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001019825)",
      "output_term": "(/ (+ (pow (pow (* a (+ a (- a b))) (/ (* d d) b)) c) (+ 1 (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.00105356
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000269)",
      "output_term": "(/ (+ 1 (+ (pow (pow (* a (+ a (- a b))) (/ (* d d) b)) c) (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.001023648
    },
    "speedup": 1.0292209822126357,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (pow (- (- (+ (pow a a) (+ (pow b (- 1 c)) (/ 0 -1))) (- (- (* 1 0) -1) (/ b a))) (- (pow (* 0 1) 0) (pow 0 e))) (/ (/ a (* a 1)) (/ 1 1))) (* (/ (* (/ e c) -1) (+ e e)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001021492)",
      "output_term": "(pow (pow (- (+ (pow b (- 1 c)) (+ (pow a a) (+ -1 (/ b a)))) (- (pow 0 0) (pow 0 e))) (/ (/ a a) 1)) (* c (/ (* -1 (/ e c)) (+ e e))))",
      "output_weight_simple": 27,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001049269
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003118)",
      "output_term": "(pow (- (+ (pow a a) (pow b (- 1 c))) (- (pow 0 0) (+ (pow 0 e) (- (/ b a) 1)))) (/ (- 0 e) (+ e e)))",
      "output_weight_simple": 21,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001019465
    },
    "speedup": 1.0292349418567581,
    "weight_simple_diff": 6,
    "weight_complex_diff": 23,
    "depth_diff": 1
  },
  {
    "base_term": "(* (- (- (* (/ (+ (* (- (+ 0 0) a) (+ 1 a)) (- -1 c)) (* (- 1 c) -1)) (* (/ 1 e) 0)) (* (/ b (+ -1 1)) (* -1 -1))) (+ (/ (* 1 b) -1) (* 1 0))) (- (- -1 (* d (+ 0 c))) (+ a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010765)",
      "output_term": "(* (- (- 0 (/ b 0)) (/ b -1)) (- (- -1 (* c d)) (+ a e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 5,
      "simplification_time": 0.001042764
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100242)",
      "output_term": "(* (- (- 0 (/ b 0)) (/ b -1)) (- -1 (+ a (+ e (* c d)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.001013121
    },
    "speedup": 1.029259091460941,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (pow (- (/ (- (- (- a (+ a 1)) (+ a 0)) (* c -1)) (pow (/ d c) 0)) c) (- (* a d) (- 0 1))) (+ (+ (* (- 1 -1) 1) (* d 1)) (- d c))) (+ (* (/ (/ -1 d) -1) (+ a 1)) (- 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001019695)",
      "output_term": "(/ (* (pow (- (/ (+ c (- -1 a)) 1) c) (+ 1 (* a d))) (+ d (+ 2 (- d c)))) (+ (* (+ a 1) (/ (/ -1 d) -1)) (- 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.001048478
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003037)",
      "output_term": "(/ (* (pow (- -1 a) (+ 1 (* a d))) (+ d (+ 2 (- d c)))) (+ (/ (+ a 1) d) (- 1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 35,
      "output_depth": 6,
      "simplification_time": 0.001018553
    },
    "speedup": 1.0293799144472602,
    "weight_simple_diff": 5,
    "weight_complex_diff": 14,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (* (* (- (* (/ (/ (pow (* -1 1) 1) (* -1 1)) (- 1 -1)) (/ (* a a) 0)) (pow (- b -1) 1)) (pow (- (+ c a) a) (* b c))) (/ (pow (/ b 1) b) (/ 0 d))) (+ (* (* e d) -1) (pow (/ b -1) d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006376)",
      "output_term": "(/ (* (- (* 0.5 (/ (* a a) 0)) (+ 1 b)) (* (pow c (* b c)) (/ (pow (/ b 1) b) (/ 0 d)))) (+ (* e (* -1 d)) (pow (/ b -1) d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001042135
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100325)",
      "output_term": "(/ (* (- (* 0.5 (/ (* a a) 0)) (+ 1 b)) (* (pow c (* b c)) (/ (pow b b) (/ 0 d)))) (- (pow (/ b -1) d) (* d e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.001012384
    },
    "speedup": 1.0293870705186965,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (/ (/ (* (+ 0 (* -1 a)) (- (+ a a) -1)) (pow (+ -1 (/ a a)) -1)) (- (/ (+ a -1) a) (- c 0))) (pow (+ (pow (pow -1 1) -1) (pow -1 e)) (* a c))) (- (- (* c (pow e -1)) (+ -1 b)) (/ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 8,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009366)",
      "output_term": "(* (/ (/ (* -1 (+ a (* a (+ a a)))) (pow (+ -1 (/ a a)) -1)) (- (/ (+ -1 a) a) c)) (* (pow (+ (pow -1 -1) (pow -1 e)) (* a c)) (- (* c (pow e -1)) (+ -1 b))))",
      "output_weight_simple": 28,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.001042516
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000061)",
      "output_term": "(* (/ (/ (* a (- -1 (+ a a))) (/ 1 0)) (- (/ (+ -1 a) a) c)) (* (pow (+ -1 (pow -1 e)) (* a c)) (- (/ c e) (+ -1 b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.001012666
    },
    "speedup": 1.0294766487667208,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (* (+ (+ (- (+ a (pow a 1)) (pow a (/ b a))) 0) (* 1 (+ (* d d) d))) (+ 1 (- (+ 0 -1) b))) (+ (/ (- (+ b 1) c) (- 0 0)) (/ d -1))) (+ (pow (pow (* 1 -1) -1) (pow a d)) (pow 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00100741)",
      "output_term": "(+ (* (+ (- (+ a a) (pow a (/ b a))) (+ d (* d d))) (* (* b -1) (+ (/ (- (+ 1 b) c) 0) (/ d -1)))) (+ (pow (pow -1 -1) (pow a d)) (pow 1 e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001043959
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001098)",
      "output_term": "(+ (- 0 (* (+ (* d d) (- (+ a (+ d a)) (pow a (/ b a)))) (* b (+ (/ (- b (- c 1)) 0) (/ d -1))))) (+ (pow -1 (pow a d)) (pow 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.00101382
    },
    "speedup": 1.0297281568720285,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (+ (+ (- (pow (- (/ 0 -1) (- (pow 1 -1) -1)) (- a (- 1 b))) (- a c)) (- (+ (* 1 d) a) (* e a))) (* (pow (pow (* b 0) 0) (/ -1 0)) (* e 0))) (- (pow (pow -1 (* 0 0)) (* 0 -1)) (+ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000793)",
      "output_term": "(/ (+ (- (pow (+ -1 (* -1 (pow 1 -1))) (+ a (+ -1 b))) (- a c)) (- (+ a d) (* a e))) (+ (* -1 c) 2))",
      "output_weight_simple": 23,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.0010346980000000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001319)",
      "output_term": "(/ (+ (- (pow -2 (- a (- 1 b))) (- a c)) (- (+ a d) (* a e))) (- 1 (- c 1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 32,
      "output_depth": 7,
      "simplification_time": 0.001004774
    },
    "speedup": 1.0297818215837593,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (/ (* (/ (- (- (- (* 0 a) a) (pow a -1)) (+ 0 -1)) (* (pow 1 a) 0)) (/ a (- -1 c))) (* (/ (pow d b) c) 1)) (/ (pow -1 (/ e 1)) (pow -1 e))) (- (+ (pow 1 (+ 1 a)) (+ d -1)) (* -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001031441)",
      "output_term": "(+ (/ (* (/ (+ (- (- 0 a) (pow a -1)) 1) 0) (/ a (- -1 c))) (/ (pow d b) c)) (+ -1 (+ (/ (pow -1 (/ e 1)) (pow -1 e)) (+ d (pow 1 (+ a 1))))))",
      "output_weight_simple": 29,
      "output_weight_complex": 74,
      "output_depth": 8,
      "simplification_time": 0.0010472749999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002243)",
      "output_term": "(+ d (+ (/ (* (/ (- 1 (+ a (/ 1 a))) 0) (/ a (- -1 c))) (/ (pow d b) c)) (pow 1 a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 51,
      "output_depth": 9,
      "simplification_time": 0.0010167800000000001
    },
    "speedup": 1.029991738625858,
    "weight_simple_diff": 9,
    "weight_complex_diff": 23,
    "depth_diff": -1
  },
  {
    "base_term": "(* (/ (- (+ (* (+ (* (/ a (/ a a)) (+ b b)) (/ a -1)) (+ b -1)) (- 0 (- 0 b))) (+ (+ (/ a 0) b) (pow d 0))) (pow (- -1 (+ 0 -1)) (pow 0 0))) (/ (+ (+ (* 1 1) 1) (+ -1 e)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012522)",
      "output_term": "(* (/ (- (+ b (* (+ (* (/ a (/ a a)) (+ b b)) (/ a -1)) (+ b -1))) (+ b (+ (/ a 0) 1))) (pow 0 (pow 0 0))) (/ (+ 1 e) 1))",
      "output_weight_simple": 25,
      "output_weight_complex": 61,
      "output_depth": 10,
      "simplification_time": 0.001043161
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003752)",
      "output_term": "(* (/ (- (* (+ (* b (+ a a)) (/ a -1)) (+ b -1)) (+ (/ a 0) 1)) (pow 0 (pow 0 0))) (+ 1 e))",
      "output_weight_simple": 20,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.001012733
    },
    "speedup": 1.03004543152045,
    "weight_simple_diff": 5,
    "weight_complex_diff": 17,
    "depth_diff": 2
  },
  {
    "base_term": "(* (/ (- (+ (* (+ (* (/ a (/ a a)) (+ b b)) (/ a -1)) (+ b -1)) (- 0 (- 0 b))) (+ (+ (/ a 0) b) (pow d 0))) (pow (- -1 (+ 0 -1)) (pow 0 0))) (/ (+ (+ (* 1 1) 1) (+ -1 e)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012047)",
      "output_term": "(* (/ (- (+ b (* (+ (* (/ a (/ a a)) (+ b b)) (/ a -1)) (+ b -1))) (+ b (+ (/ a 0) 1))) (pow 0 (pow 0 0))) (/ (+ 1 e) 1))",
      "output_weight_simple": 25,
      "output_weight_complex": 61,
      "output_depth": 10,
      "simplification_time": 0.001042242
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002631)",
      "output_term": "(* (/ (- (* (+ (* b (+ a a)) (/ a -1)) (+ b -1)) (+ (/ a 0) 1)) (pow 0 (pow 0 0))) (+ 1 e))",
      "output_weight_simple": 20,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.001011744
    },
    "speedup": 1.0301439889932633,
    "weight_simple_diff": 5,
    "weight_complex_diff": 17,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (* (* (- (* (/ (/ (pow (* -1 1) 1) (* -1 1)) (- 1 -1)) (/ (* a a) 0)) (pow (- b -1) 1)) (pow (- (+ c a) a) (* b c))) (/ (pow (/ b 1) b) (/ 0 d))) (+ (* (* e d) -1) (pow (/ b -1) d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004492)",
      "output_term": "(/ (* (- (* 0.5 (/ (* a a) 0)) (+ 1 b)) (* (pow c (* b c)) (/ (pow (/ b 1) b) (/ 0 d)))) (+ (* e (* -1 d)) (pow (/ b -1) d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001040181
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000032)",
      "output_term": "(/ (* (- (* 0.5 (/ (* a a) 0)) (+ 1 b)) (* (pow c (* b c)) (/ (pow b b) (/ 0 d)))) (- (pow (/ b -1) d) (* d e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.00100946
    },
    "speedup": 1.0304331028470668,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (+ (- (/ 0 (+ (- (pow (- -1 0) -1) (* a a)) -1)) (pow (- (/ a -1) 0) (/ a 0))) (* (+ (+ 0 b) a) (* 0 e))) (/ (+ (* 1 a) 1) (pow 1 e))) (* (* (pow (- 0 1) 1) (pow d -1)) (- d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009333)",
      "output_term": "(+ (- (- (/ 0 (+ -1 (- (pow -1 -1) (* a a)))) (pow (/ a -1) (/ a 0))) (/ (+ a 1) (pow 1 e))) (* (pow d -1) (- d e)))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.001037266
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002334)",
      "output_term": "(+ (- (/ 0 (- -2 (* a a))) (+ (pow (/ a -1) (/ a 0)) (/ (+ a 1) (pow 1 e)))) (/ (- d e) d))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.001006394
    },
    "speedup": 1.030675858560365,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (/ (+ (- (+ (- (* (pow (/ -1 a) 1) (* 1 -1)) (* -1 -1)) (pow (* b -1) 1)) (* (/ a b) b)) (- (+ (+ b 0) c) (+ 0 1))) (- (* (pow 0 b) 0) (/ d d))) (+ (* (- (- 0 a) c) d) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009688)",
      "output_term": "(+ (/ (+ -1 (+ -1 (+ (+ b c) (* -1 (+ (* b (/ a b)) (+ (/ -1 a) b)))))) (- 0 (/ d d))) (* (* -1 d) (+ a c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 47,
      "output_depth": 10,
      "simplification_time": 0.001050847
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004534)",
      "output_term": "(- (/ (- (- (+ (- -1 (/ -1 a)) c) a) 1) -1) (* d (+ a c)))",
      "output_weight_simple": 14,
      "output_weight_complex": 26,
      "output_depth": 8,
      "simplification_time": 0.001018688
    },
    "speedup": 1.0315690378211975,
    "weight_simple_diff": 9,
    "weight_complex_diff": 21,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (* (* (pow (pow (* (- (+ -1 (pow a b)) (+ -1 b)) (+ a a)) (/ (* a b) 1)) (+ b (- b a))) (/ c (/ (- b a) -1))) (pow (pow (pow c 0) d) (- a c))) (- (+ (+ (/ c -1) b) (pow b 1)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002122)",
      "output_term": "(/ (* (pow (pow (* a (* (- (+ -1 (pow a b)) (+ -1 b)) 2)) (/ (* a b) 1)) (+ b (- b a))) (* (/ c (/ (- b a) -1)) (pow (pow 1 d) (- a c)))) (- (+ (/ c -1) (+ b b)) (* a b)))",
      "output_weight_simple": 31,
      "output_weight_complex": 75,
      "output_depth": 10,
      "simplification_time": 0.001035187
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004728)",
      "output_term": "(/ (* (pow (pow (* a (* (- (pow a b) b) 2)) (* a b)) (+ b (- b a))) (* (/ c (/ (- b a) -1)) (pow (pow 1 d) (- a c)))) (- (+ b (+ b (/ c -1))) (* a b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.001003354
    },
    "speedup": 1.0317265890204255,
    "weight_simple_diff": 3,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (+ (- (pow (- (/ 0 -1) (- (pow 1 -1) -1)) (- a (- 1 b))) (- a c)) (- (+ (* 1 d) a) (* e a))) (* (pow (pow (* b 0) 0) (/ -1 0)) (* e 0))) (- (pow (pow -1 (* 0 0)) (* 0 -1)) (+ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001007902)",
      "output_term": "(/ (+ (- (pow (+ -1 (* -1 (pow 1 -1))) (+ a (+ -1 b))) (- a c)) (- (+ a d) (* a e))) (+ (* -1 c) 2))",
      "output_weight_simple": 23,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.001037968
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002083)",
      "output_term": "(/ (+ (- (pow -2 (- a (- 1 b))) (- a c)) (- (+ a d) (* a e))) (- 1 (- c 1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 32,
      "output_depth": 7,
      "simplification_time": 0.001005956
    },
    "speedup": 1.031822465396101,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (* (+ (- (pow (pow (+ (* 1 a) 1) (- a a)) (pow a -1)) (* b (/ a b))) (pow d (- b -1))) (+ (pow (* d c) -1) (pow c b))) (+ (+ e (+ 0 -1)) (/ -1 1))) (- (+ (pow (pow -1 a) d) -1) (pow e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.0010115)",
      "output_term": "(pow (- (* (+ (- (pow 1 (pow a -1)) (* b (/ a b))) (pow d (+ 1 b))) (+ (pow (* d c) -1) (pow c b))) (+ e -2)) (- (+ -1 (pow (pow -1 a) d)) (pow e c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.001041026
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001003783)",
      "output_term": "(pow (- (* (+ (- (pow 1 (/ 1 a)) a) (pow d (+ 1 b))) (+ (/ 1 (* d c)) (pow c b))) (+ e -2)) (- (pow (pow -1 a) d) (+ 1 (pow e c))))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.001008917
    },
    "speedup": 1.0318252145617528,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (- (* (pow (* (- (/ (* a 0) b) (pow 1 c)) (+ b b)) (/ (+ d e) d)) (- (- a 1) 1)) (/ (+ (pow d -1) b) (/ a a))) (* b (pow e (* e e)))) (* (+ (pow (+ 0 0) e) (/ a e)) (- d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005793)",
      "output_term": "(+ (pow (- (* (pow (* b (* (- (/ 0 b) (pow 1 c)) 2)) (/ (+ d e) d)) (+ a -2)) (/ (+ b (pow d -1)) (/ a a))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 35,
      "output_weight_complex": 84,
      "output_depth": 10,
      "simplification_time": 0.00103942
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000511)",
      "output_term": "(+ (pow (- (* (pow (* b (- (/ 0 b) (* (pow 1 c) 2))) (/ (+ d e) d)) (- a 2)) (+ b (/ 1 d))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 73,
      "output_depth": 10,
      "simplification_time": 0.001007286
    },
    "speedup": 1.0319015651959822,
    "weight_simple_diff": 4,
    "weight_complex_diff": 11,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (+ (- a (+ (+ (/ a a) 1) (/ a 1))) (- (pow a -1) b)) (/ (* b b) 0)) (- (+ (/ -1 1) 1) (+ 0 1))) (- (- (pow 0 a) 1) (- d d))) (- (+ (/ -1 (- 0 d)) (/ 1 a)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012405)",
      "output_term": "(pow (- (+ (- a (+ (/ a a) (+ 1 (/ a 1)))) (+ 1 (+ (- (pow a -1) b) (/ (* b b) 0)))) (+ -1 (pow 0 a))) (+ (/ -1 (- 0 d)) (/ 1 a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.0010548089999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004322)",
      "output_term": "(pow (- (+ (+ -2 (- (/ 1 a) b)) (/ (* b b) 0)) (+ (pow 0 a) -2)) (+ (/ 1 a) (/ -1 (- 0 d))))",
      "output_weight_simple": 20,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.001022167
    },
    "speedup": 1.0319341164408553,
    "weight_simple_diff": 6,
    "weight_complex_diff": 17,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (* (pow (* (/ (- 1 (pow (/ (/ 1 a) 0) (/ 0 1))) (/ (/ a 1) 0)) (* (- a b) b)) (/ (pow c (/ 0 a)) (pow c d))) (+ (- (+ c b) 0) (pow a e))) (/ (/ (+ d (/ 1 -1)) (pow e c)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 143,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001023304)",
      "output_term": "(pow (* (pow (* (/ 0 (/ (/ a 1) 0)) (* b (- a b))) (/ (pow c (/ 0 a)) (pow c d))) (+ b (+ c (pow a e)))) (/ (/ (+ d -1) (pow e c)) (- e b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 83,
      "output_depth": 8,
      "simplification_time": 0.001055983
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002487)",
      "output_term": "(pow (* (pow (/ 0 (/ a 0)) (/ (pow c (/ 0 a)) (pow c d))) (+ c (+ b (pow a e)))) (/ (/ (- d 1) (- e b)) (pow e c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.001023264
    },
    "speedup": 1.0319751305625917,
    "weight_simple_diff": 5,
    "weight_complex_diff": 11,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (- (* (pow (* (- (/ (* a 0) b) (pow 1 c)) (+ b b)) (/ (+ d e) d)) (- (- a 1) 1)) (/ (+ (pow d -1) b) (/ a a))) (* b (pow e (* e e)))) (* (+ (pow (+ 0 0) e) (/ a e)) (- d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004767)",
      "output_term": "(+ (pow (- (* (pow (* b (* (- (/ 0 b) (pow 1 c)) 2)) (/ (+ d e) d)) (+ a -2)) (/ (+ b (pow d -1)) (/ a a))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 35,
      "output_weight_complex": 84,
      "output_depth": 10,
      "simplification_time": 0.001038064
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000675)",
      "output_term": "(+ (pow (- (* (pow (* b (- (/ 0 b) (* (pow 1 c) 2))) (/ (+ d e) d)) (- a 2)) (+ b (/ 1 d))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 73,
      "output_depth": 10,
      "simplification_time": 0.001005514
    },
    "speedup": 1.032371503529538,
    "weight_simple_diff": 4,
    "weight_complex_diff": 11,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (- (* (+ (+ 1 a) (+ (pow (- 0 1) 0) (pow -1 b))) (/ (+ b -1) c)) (+ (+ (/ a -1) 1) (+ a b))) (* (+ (pow (* d -1) -1) (- d d)) (+ -1 d))) (* (pow (pow (/ c -1) e) (/ -1 b)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001022383)",
      "output_term": "(+ (/ (- (* (+ a (+ 2 (pow -1 b))) (/ (+ -1 b) c)) (+ 1 (+ (/ a -1) (+ a b)))) (* (pow (* -1 d) -1) (+ -1 d))) (pow (pow (/ c -1) e) (/ -1 b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.001049448
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004822)",
      "output_term": "(+ (/ (- (* (+ (pow -1 b) (+ a 2)) (/ (+ -1 b) c)) (+ 1 (+ (/ a -1) (+ a b)))) (/ (+ -1 d) (- 0 d))) (pow (pow (/ c -1) e) (/ -1 b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.001016513
    },
    "speedup": 1.0323999791443887,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (- (+ (* (pow (* (- (+ 0 a) b) (pow 1 -1)) (pow 1 -1)) (* (pow a 1) 1)) (+ (pow a 0) 0)) (- (* b (pow c -1)) (* 1 c))) (* (pow (* -1 0) 1) c)) (+ (pow (- (pow c c) 1) (/ 0 b)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001029534)",
      "output_term": "(+ (* -1 (pow (+ -1 (pow c c)) (/ 0 b))) (+ (* a (pow (* (- a b) (pow 1 -1)) (pow 1 -1))) (+ c (* (pow c -1) (* b -1)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001047452
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000746)",
      "output_term": "(- (* a (- a b)) (+ (- (/ b c) c) (pow (- (pow c c) 1) (/ 0 b))))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.001014541
    },
    "speedup": 1.0324393001367118,
    "weight_simple_diff": 7,
    "weight_complex_diff": 16,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (- (- (pow (+ (+ (+ a 1) -1) (- 0 1)) (* a -1)) (/ (* 0 c) d)) (pow (pow c d) a)) (- d (- (pow e b) e))) (- (- (+ c 1) -1) (+ -1 c))) (* (pow (* (/ 1 a) -1) (* e c)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001019198)",
      "output_term": "(/ (* (pow (- (- (pow (+ a -1) (* a -1)) (/ 0 d)) (pow (pow c d) a)) (- d (- (pow e b) e))) (- (+ c 2) (+ -1 c))) (* (pow (* -1 (/ 1 a)) (* c e)) (/ a b)))",
      "output_weight_simple": 32,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.001055894
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004134)",
      "output_term": "(/ (* (pow (- (pow (+ a -1) (- 0 a)) (+ (/ 0 d) (pow (pow c d) a))) (- d (- (pow e b) e))) 3) (* (pow (/ -1 a) (* c e)) (/ a b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.001022708
    },
    "speedup": 1.0324491448194402,
    "weight_simple_diff": 5,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (+ (/ (/ (* (/ (pow (pow a a) a) (* 1 -1)) (pow 1 b)) (- (- b 0) -1)) (+ (/ 1 a) 0)) (+ (/ (- b -1) a) (+ -1 d))) (/ (- (+ c b) -1) (/ e c))) (- (* (- (+ a 0) 1) (+ d 1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00102516)",
      "output_term": "(- (+ (/ (/ (* (/ (pow (pow a a) a) -1) (pow 1 b)) (+ 1 b)) (/ 1 a)) (+ -1 (+ (/ (+ 1 (+ b c)) (/ e c)) (+ (/ (+ 1 b) a) d)))) (- (* (+ a -1) (+ 1 d)) e))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 9,
      "simplification_time": 0.001047578
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000588)",
      "output_term": "(- (+ -1 (+ (/ (/ (* (/ (pow (pow a a) a) -1) (pow 1 b)) (+ 1 b)) (/ 1 a)) (+ (/ (+ b (+ 1 c)) (/ e c)) (+ (/ (+ 1 b) a) d)))) (- (* (- a 1) (+ 1 d)) e))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.001014336
    },
    "speedup": 1.0327721780553978,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (* (/ (* (- (/ a (+ (pow (- a b) -1) (pow 0 1))) (pow (pow a b) 1)) (+ (/ 1 0) b)) (/ (- (* 0 1) b) (pow b d))) (+ (- 0 (* b -1)) (/ 0 d))) (pow (- (/ (+ 0 e) 1) (* d 0)) (- e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001042355)",
      "output_term": "(+ (* (/ (* (- (/ a (pow (- a b) -1)) (pow a b)) (+ b (/ 1 0))) (/ (- 0 b) (pow b d))) (+ b (/ 0 d))) (pow (/ e 1) e))",
      "output_weight_simple": 25,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.001041724
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000586)",
      "output_term": "(+ (* (/ (* (- (/ a (/ 1 (- a b))) (pow a b)) (+ b (/ 1 0))) (/ (- 0 b) (pow b d))) (+ b (/ 0 d))) (pow e e))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.001008653
    },
    "speedup": 1.0327872915660787,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (+ (* (pow (* (- (+ 0 a) b) (pow 1 -1)) (pow 1 -1)) (* (pow a 1) 1)) (+ (pow a 0) 0)) (- (* b (pow c -1)) (* 1 c))) (* (pow (* -1 0) 1) c)) (+ (pow (- (pow c c) 1) (/ 0 b)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001034297)",
      "output_term": "(+ (* -1 (pow (+ -1 (pow c c)) (/ 0 b))) (+ (* a (pow (* (- a b) (pow 1 -1)) (pow 1 -1))) (+ c (* (pow c -1) (* b -1)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001051774
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007264)",
      "output_term": "(- (* a (- a b)) (+ (- (/ b c) c) (pow (- (pow c c) 1) (/ 0 b))))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.0010183380000000001
    },
    "speedup": 1.03283389208691,
    "weight_simple_diff": 7,
    "weight_complex_diff": 16,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (+ (- (+ 0 (/ (- (/ (- 0 a) a) (- 1 0)) a)) (+ -1 (- b (- a -1)))) (+ (pow 1 b) (+ 1 1))) (* (* (* (/ 1 a) 0) (pow d 0)) (- 1 1))) (/ (/ (/ (* -1 -1) d) (/ d 1)) (pow a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005402)",
      "output_term": "(* (+ (- (/ (+ (/ (- 0 a) a) -1) a) (+ -1 (- b (+ a 1)))) (+ (pow 1 b) 2)) (/ (/ (/ 1 d) (/ d 1)) (pow a a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.001048015
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001844)",
      "output_term": "(/ (/ (/ (+ (- (/ (- (/ (- 0 a) a) 1) a) (- b (+ a 2))) (+ (pow 1 b) 2)) d) d) (pow a a))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 10,
      "simplification_time": 0.001014636
    },
    "speedup": 1.0328975120141608,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": -2
  },
  {
    "base_term": "(/ (- (+ (/ (/ (* (- (- -1 (/ 0 -1)) (+ a 0)) (+ a a)) (+ (+ a a) -1)) (pow (pow -1 0) 0)) (/ (- (pow 0 1) a) (- 0 b))) (* (pow (- b -1) b) (pow 1 0))) (+ (* 0 (/ (pow a 0) c)) (- -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001018857)",
      "output_term": "(/ (- (+ (/ (/ (* a (+ (* a -2) -2)) (+ -1 (+ a a))) 1) (/ (- 0 a) (- 0 b))) (pow (- b -1) b)) (- -1 a))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 9,
      "simplification_time": 0.001038183
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000276)",
      "output_term": "(/ (- (+ (/ (* (- -1 a) (+ a a)) (+ -1 (+ a a))) (/ (- 0 a) (- 0 b))) (pow (+ 1 b) b)) (- -1 a))",
      "output_weight_simple": 18,
      "output_weight_complex": 36,
      "output_depth": 7,
      "simplification_time": 0.0010050850000000002
    },
    "speedup": 1.032930548162593,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (* (+ (+ -1 a) 1) (+ (- a b) a)) (/ (* d d) b)) (* (+ 0 c) 1)) (+ (+ 1 (pow -1 b)) (+ -1 1))) (pow (+ (- c 1) b) (* 0 e))) (- (* (+ 1 (pow e a)) (pow c 0)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.0010275)",
      "output_term": "(/ (+ (pow (pow (* a (+ a (- a b))) (/ (* d d) b)) c) (+ 1 (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.001061312
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003288)",
      "output_term": "(/ (+ 1 (+ (pow (pow (* a (+ a (- a b))) (/ (* d d) b)) c) (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.001027354
    },
    "speedup": 1.0330538451205717,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (- (* (pow (* (- (/ (* a 0) b) (pow 1 c)) (+ b b)) (/ (+ d e) d)) (- (- a 1) 1)) (/ (+ (pow d -1) b) (/ a a))) (* b (pow e (* e e)))) (* (+ (pow (+ 0 0) e) (/ a e)) (- d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008124)",
      "output_term": "(+ (pow (- (* (pow (* b (* (- (/ 0 b) (pow 1 c)) 2)) (/ (+ d e) d)) (+ a -2)) (/ (+ b (pow d -1)) (/ a a))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 35,
      "output_weight_complex": 84,
      "output_depth": 10,
      "simplification_time": 0.001041325
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001001198)",
      "output_term": "(+ (pow (- (* (pow (* b (- (/ 0 b) (* (pow 1 c) 2))) (/ (+ d e) d)) (- a 2)) (+ b (/ 1 d))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 73,
      "output_depth": 10,
      "simplification_time": 0.0010079149999999999
    },
    "speedup": 1.0331476364574397,
    "weight_simple_diff": 4,
    "weight_complex_diff": 11,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (/ (+ (/ (* (- (/ 1 (+ -1 -1)) (pow a a)) (- a -1)) (pow (pow 1 b) -1)) (+ (* b 0) 1)) (* (* (* c -1) c) (* d a))) (- (* (* c 0) c) 1)) (/ (* (* (- 1 1) a) (+ -1 1)) (* -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001046117)",
      "output_term": "(+ (/ (/ (+ 1 (/ (* (- -0.5 (pow a a)) (+ 1 a)) (pow (pow 1 b) -1))) (* -1 (* a (* d (* c c))))) -1) (/ 0 (* -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.0010454330000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000827)",
      "output_term": "(+ (/ (/ (+ 1 (/ (* (- -0.5 (pow a a)) (+ 1 a)) (/ 1 (pow 1 b)))) -1) (- 0 (* a (* d (* c c))))) (/ 0 (- 0 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001011747
    },
    "speedup": 1.0332948849860688,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (/ (+ (+ (/ (+ (* (/ a 0) a) (* 1 a)) (- -1 b)) (- (- b b) 0)) d) (/ e (- (/ c e) d))) (+ (- (* (* 0 d) d) (/ 1 a)) (+ b 0))) (- (* (pow (pow e b) 0) (/ e -1)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004447)",
      "output_term": "(+ (/ (+ (/ (* a (+ (/ a 0) 1)) (- -1 b)) d) (/ e (- (/ c e) d))) (+ (/ 1 a) (* -1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.00104253
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003321)",
      "output_term": "(- (/ (+ (/ (+ a (* a (/ a 0))) (- -1 b)) d) (/ e (- (/ c e) d))) (- b (/ 1 a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.0010089060000000002
    },
    "speedup": 1.0333271880631099,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (- (/ (+ (/ (/ -1 a) a) (* a -1)) (/ a a)) (* (+ 1 1) b)) (- b (pow -1 a))) (/ (+ (pow 0 c) -1) (+ b d))) (* (pow (- 1 e) 0) (/ -1 -1))) (- 0 (pow (/ d (pow d 0)) (* 0 c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00104823)",
      "output_term": "(pow (+ -1 (+ (+ (/ (+ (/ (/ -1 a) a) (* -1 a)) (/ a a)) (* -1 b)) (* -1 (+ (/ (+ -1 (pow 0 c)) (+ b d)) (pow -1 a))))) -1)",
      "output_weight_simple": 24,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001047545
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000806)",
      "output_term": "(/ 1 (- (- (+ (/ (/ -1 a) a) (- b a)) (+ (* 2 b) (+ (pow -1 a) (/ (+ -1 (pow 0 c)) (+ b d))))) 1))",
      "output_weight_simple": 23,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.00101354
    },
    "speedup": 1.0335507232077668,
    "weight_simple_diff": 1,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (pow (- (/ (* a (* 0 (+ (- 1 1) a))) (- (- a b) d)) (pow (+ c c) 0)) (pow (/ -1 0) (* e 1))) (+ (/ (- (- e d) 0) (+ 1 0)) (* 0 d))) (* (- (* (pow -1 1) e) (* -1 c)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009688)",
      "output_term": "(+ (pow (+ (/ 0 (- (- a b) d)) -1) (pow (/ -1 0) e)) (+ (/ (- e d) 1) (* (+ d -1) (+ e (* c -1)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001038717
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000175)",
      "output_term": "(+ (pow (- (/ 0 (- a (+ b d))) 1) (pow (/ -1 0) e)) (+ (- e d) (* (- d 1) (- e c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.001004823
    },
    "speedup": 1.0337313138731896,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (+ (- a (+ (+ (/ a a) 1) (/ a 1))) (- (pow a -1) b)) (/ (* b b) 0)) (- (+ (/ -1 1) 1) (+ 0 1))) (- (- (pow 0 a) 1) (- d d))) (- (+ (/ -1 (- 0 d)) (/ 1 a)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00101308)",
      "output_term": "(pow (- (+ (- a (+ (/ a a) (+ 1 (/ a 1)))) (+ 1 (+ (- (pow a -1) b) (/ (* b b) 0)))) (+ -1 (pow 0 a))) (+ (/ -1 (- 0 d)) (/ 1 a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.001055886
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003227)",
      "output_term": "(pow (- (+ (+ -2 (- (/ 1 a) b)) (/ (* b b) 0)) (+ (pow 0 a) -2)) (+ (/ 1 a) (/ -1 (- 0 d))))",
      "output_weight_simple": 20,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.001021365
    },
    "speedup": 1.0337988867838628,
    "weight_simple_diff": 6,
    "weight_complex_diff": 17,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (/ (- (* (+ (* (- (- (- 1 a) a) (- 1 -1)) (pow -1 b)) (pow (pow 0 1) -1)) (/ (+ b b) 1)) (* (- c (* 1 0)) (* a a))) (* (pow (pow b e) 1) (* 0 1))) (+ (* (* (- a b) a) (- d 1)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018698)",
      "output_term": "(/ (/ (- (* (+ (* (+ (+ 1 (* a -2)) -2) (pow -1 b)) (pow 0 -1)) (/ (+ b b) 1)) (* a (* a c))) 0) (+ b (* a (* (- a b) (+ -1 d)))))",
      "output_weight_simple": 28,
      "output_weight_complex": 57,
      "output_depth": 10,
      "simplification_time": 0.001042338
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002543)",
      "output_term": "(/ (/ (- (* (+ (* (- 1 (+ a (+ a 2))) (pow -1 b)) (pow 0 -1)) (+ b b)) (* a (* a c))) 0) (+ b (* (- a b) (* a (- d 1)))))",
      "output_weight_simple": 27,
      "output_weight_complex": 51,
      "output_depth": 10,
      "simplification_time": 0.001008138
    },
    "speedup": 1.0339239270814116,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (pow (pow a (- -1 (pow (* (- a a) -1) (/ 1 d)))) (+ d (* a (pow 1 -1)))) (* b (- (* a 0) a))) (* (* (/ (- -1 d) a) (- 1 -1)) (- c a))) (pow (* (+ (+ c 0) a) (* b 0)) (+ c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001018101)",
      "output_term": "(/ (pow (+ (pow (pow a (- -1 (pow 0 (/ 1 d)))) (+ d (* a (pow 1 -1)))) (* a (* -1 b))) (* (/ (- -1 d) a) (* 2 (- c a)))) (pow 0 (+ d c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.001038085
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000241)",
      "output_term": "(/ (pow (- (pow (pow a (- -1 (pow 0 (/ 1 d)))) (+ a d)) (* a b)) (* (/ (- -1 d) a) (* 2 (- c a)))) (pow 0 (+ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001003625
    },
    "speedup": 1.0343355336903723,
    "weight_simple_diff": 3,
    "weight_complex_diff": 8,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (+ (+ (- (- (/ (* a (pow a 1)) (* -1 0)) a) 0) (pow (* a (* b a)) (* 1 -1))) (* (+ (pow a 1) a) (+ -1 b))) (* (- (* 0 c) 0) (* a a))) (pow (+ (* 0 (/ 1 d)) (/ c 1)) (+ c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001067)",
      "output_term": "(+ (/ (+ (- (/ (* a a) 0) a) (+ (pow (* b (* a a)) -1) (* a (* (+ -1 b) 2)))) 0) (pow (/ c 1) (+ 1 c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.001041219
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00100106)",
      "output_term": "(+ (/ (+ (- (/ (* a a) 0) a) (+ (/ 1 (* b (* a a))) (* a (+ b (+ b -2))))) 0) (pow c (+ 1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.001006574
    },
    "speedup": 1.034418731260692,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (+ (- (+ (- (* (pow (/ -1 a) 1) (* 1 -1)) (* -1 -1)) (pow (* b -1) 1)) (* (/ a b) b)) (- (+ (+ b 0) c) (+ 0 1))) (- (* (pow 0 b) 0) (/ d d))) (+ (* (- (- 0 a) c) d) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012137)",
      "output_term": "(+ (/ (+ -1 (+ -1 (+ (+ b c) (* -1 (+ (* b (/ a b)) (+ (/ -1 a) b)))))) (- 0 (/ d d))) (* (* -1 d) (+ a c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 47,
      "output_depth": 10,
      "simplification_time": 0.0010529609999999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003755)",
      "output_term": "(- (/ (- (- (+ (- -1 (/ -1 a)) c) a) 1) -1) (* d (+ a c)))",
      "output_weight_simple": 14,
      "output_weight_complex": 26,
      "output_depth": 8,
      "simplification_time": 0.001017886
    },
    "speedup": 1.0344586721892235,
    "weight_simple_diff": 9,
    "weight_complex_diff": 21,
    "depth_diff": 2
  },
  {
    "base_term": "(* (* (pow (+ (* (pow (+ (pow 1 (pow a 1)) (+ b a)) (* b c)) (* c (- 1 c))) (+ (pow e b) a)) (* (pow 0 (- c 0)) (- -1 0))) (* (/ d (pow c e)) -1)) (/ (- (- c (- 0 0)) (/ -1 1)) (* e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001037748)",
      "output_term": "(* (pow (+ a (+ (* c (* (pow (+ a (+ (pow 1 a) b)) (* b c)) (- 1 c))) (pow e b))) (* (pow 0 c) -1)) (* (* -1 (/ d (pow c e))) (/ (+ 1 c) (* c e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 11,
      "simplification_time": 0.001065419
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001009352)",
      "output_term": "(* (pow (+ (* (pow (+ a (+ (pow 1 a) b)) (* b c)) (- c (pow c 2))) (+ a (pow e b))) (- 0 (pow 0 c))) (/ (* (/ d (pow c e)) (* -1 (+ 1 c))) (* c e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001029735
    },
    "speedup": 1.0346535759200184,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (/ (/ (+ (/ (* (- (/ 1 (+ -1 -1)) (pow a a)) (- a -1)) (pow (pow 1 b) -1)) (+ (* b 0) 1)) (* (* (* c -1) c) (* d a))) (- (* (* c 0) c) 1)) (/ (* (* (- 1 1) a) (+ -1 1)) (* -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001048354)",
      "output_term": "(+ (/ (/ (+ 1 (/ (* (- -0.5 (pow a a)) (+ 1 a)) (pow (pow 1 b) -1))) (* -1 (* a (* d (* c c))))) -1) (/ 0 (* -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001046313
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000374)",
      "output_term": "(+ (/ (/ (+ 1 (/ (* (- -0.5 (pow a a)) (+ 1 a)) (/ 1 (pow 1 b)))) -1) (- 0 (* a (* d (* c c))))) (/ 0 (- 0 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001011014
    },
    "speedup": 1.0349144522232137,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (* (+ (+ (* a (/ (/ a 0) a)) (* a a)) (+ (pow -1 a) -1)) (* (- 0 a) c)) (- (pow (* -1 a) b) (+ a a))) (* (* (/ 0 b) 0) (+ a 0))) (+ (/ (* (+ -1 b) 0) (/ -1 -1)) (* d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00102156)",
      "output_term": "(pow (+ (pow (- 0 a) b) (* (- 0 a) (+ (* (+ (* a (+ a (/ (/ a 0) a))) (+ -1 (pow -1 a))) c) 2))) (* c d))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 11,
      "simplification_time": 0.0010468959999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002777)",
      "output_term": "(pow (- (pow (- 0 a) b) (+ (* a (* (+ (/ a 0) (+ (pow -1 a) (+ (* a a) -1))) c)) (+ a a))) (* c d))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 10,
      "simplification_time": 0.001010653
    },
    "speedup": 1.035860973054055,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (+ (* -1 (pow (pow (/ a (* (/ 0 b) a)) (pow 1 c)) (/ (* -1 a) 0))) (/ (pow (+ b d) 1) (pow b 0))) (pow (- (* d (+ b -1)) (+ 1 -1)) (/ c 1))) (- (pow (pow (+ e 0) d) (/ 0 b)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001033016)",
      "output_term": "(+ (/ (+ b d) 1) (+ (- (pow (pow e d) (/ 0 b)) (/ b a)) (* -1 (+ (pow (pow (/ a (* a (/ 0 b))) (pow 1 c)) (/ (* -1 a) 0)) (pow (* d (+ -1 b)) (/ c 1))))))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 10,
      "simplification_time": 0.001058031
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000008)",
      "output_term": "(- (- (+ d (+ b (pow (pow e d) (/ 0 b)))) (+ (pow (pow (/ a (/ 0 b)) (pow 1 c)) (/ (- 0 a) 0)) (pow (* d (+ -1 b)) c))) (/ b a))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.001021323
    },
    "speedup": 1.035941616902782,
    "weight_simple_diff": 4,
    "weight_complex_diff": 15,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (/ (* (- (+ (+ (pow (* (+ 1 a) a) 0) (pow a 1)) (* -1 (/ a 1))) (* (* 1 -1) a)) (+ (- a (* -1 b)) (- -1 1))) (- (* (+ 0 -1) -1) (* -1 0))) (* (pow (* (+ a -1) a) (+ 0 0)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008494)",
      "output_term": "(pow (/ (* (+ (* -1 (/ a 1)) (+ a (+ 1 a))) (+ b (+ a -2))) 1) (/ b b))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 7,
      "simplification_time": 0.001049848
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002199)",
      "output_term": "(* (+ 1 a) (+ a (+ b -2)))",
      "output_weight_simple": 8,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.0010131220000000002
    },
    "speedup": 1.0362503232582057,
    "weight_simple_diff": 8,
    "weight_complex_diff": 24,
    "depth_diff": 3
  },
  {
    "base_term": "(/ (+ (- (pow (* (* a (- b (pow (/ 1 a) -1))) (- (* -1 -1) -1)) (pow (* c b) 0)) (pow (- (/ a 0) -1) b)) (+ (* (* (* a d) b) (* e e)) (pow 0 e))) (- (- (* (+ -1 0) -1) (* 1 0)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001028151)",
      "output_term": "(/ (+ (- (* (- b (pow (/ 1 a) -1)) (* a 2)) (pow (+ 1 (/ a 0)) b)) (+ (* a (* d (* b (* e e)))) (pow 0 e))) (* -1 e))",
      "output_weight_simple": 26,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.001049922
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000016)",
      "output_term": "(/ (- (+ (pow 0 e) (* a (+ (* (- b a) 2) (* b (* d (* e e)))))) (pow (+ 1 (/ a 0)) b)) (- 0 e))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 9,
      "simplification_time": 0.001013166
    },
    "speedup": 1.0362783591237763,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": -1
  },
  {
    "base_term": "(* (/ (- (+ (* (+ (* (/ a (/ a a)) (+ b b)) (/ a -1)) (+ b -1)) (- 0 (- 0 b))) (+ (+ (/ a 0) b) (pow d 0))) (pow (- -1 (+ 0 -1)) (pow 0 0))) (/ (+ (+ (* 1 1) 1) (+ -1 e)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001023791)",
      "output_term": "(* (/ (- (+ b (* (+ (* (/ a (/ a a)) (+ b b)) (/ a -1)) (+ b -1))) (+ b (+ (/ a 0) 1))) (pow 0 (pow 0 0))) (/ (+ 1 e) 1))",
      "output_weight_simple": 25,
      "output_weight_complex": 61,
      "output_depth": 10,
      "simplification_time": 0.001053692
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001001811)",
      "output_term": "(* (/ (- (* (+ (* b (+ a a)) (/ a -1)) (+ b -1)) (+ (/ a 0) 1)) (pow 0 (pow 0 0))) (+ 1 e))",
      "output_weight_simple": 20,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.0010166860000000002
    },
    "speedup": 1.0363986520912059,
    "weight_simple_diff": 5,
    "weight_complex_diff": 17,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (* (+ (- (pow (+ (- (+ (/ a a) -1) (+ 1 -1)) (* 0 b)) (/ (pow 1 0) a)) (- (pow 1 e) a)) (* (/ (/ c e) 1) (pow e -1))) (+ (+ b (pow -1 e)) (+ 1 e))) (- (pow 0 (+ (- 1 c) -1)) (/ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018927)",
      "output_term": "(pow (* (+ (- (pow (+ (/ a a) -1) (/ 1 a)) (- (pow 1 e) a)) (* (/ (/ c e) 1) (pow e -1))) (+ 1 (+ (+ e b) (pow -1 e)))) (+ 1 (pow 0 (* -1 c))))",
      "output_weight_simple": 28,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.00104087
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000534)",
      "output_term": "(pow (* (+ (- (pow 0 (/ 1 a)) (- (pow 1 e) a)) (* c (pow e -2))) (+ 1 (+ b (+ e (pow -1 e))))) (+ 1 (pow 0 (- 0 c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.0010041100000000001
    },
    "speedup": 1.0366095348119229,
    "weight_simple_diff": 3,
    "weight_complex_diff": 16,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (+ (* (- (* 1 a) b) (/ (- b a) 1)) (/ 1 (+ d c))) (* (/ d 1) a)) (- (/ (/ 1 -1) 1) (- c 0))) (+ (+ (+ -1 c) e) (/ 1 c))) (/ (+ (+ (/ -1 -1) e) (+ 0 1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001019243)",
      "output_term": "(/ (+ -1 (+ (+ c e) (+ (/ (- (+ (* (- a b) (/ (- b a) 1)) (/ 1 (+ d c))) (* a (/ d 1))) (- -1 c)) (/ 1 c)))) (/ (+ e 2) 0))",
      "output_weight_simple": 29,
      "output_weight_complex": 64,
      "output_depth": 11,
      "simplification_time": 0.001052481
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001411)",
      "output_term": "(/ (+ (/ (- (+ (* (- a b) (- b a)) (/ 1 (+ d c))) (* a d)) (- -1 c)) (+ c (+ e (+ -1 (/ 1 c))))) (/ (+ e 2) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.001015233
    },
    "speedup": 1.0366891147155384,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 3
  },
  {
    "base_term": "(+ (- (/ (+ (+ (/ (+ (* (/ a 0) a) (* 1 a)) (- -1 b)) (- (- b b) 0)) d) (/ e (- (/ c e) d))) (+ (- (* (* 0 d) d) (/ 1 a)) (+ b 0))) (- (* (pow (pow e b) 0) (/ e -1)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006407)",
      "output_term": "(+ (/ (+ (/ (* a (+ (/ a 0) 1)) (- -1 b)) d) (/ e (- (/ c e) d))) (+ (/ 1 a) (* -1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.0010455260000000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002758)",
      "output_term": "(- (/ (+ (/ (+ a (* a (/ a 0))) (- -1 b)) d) (/ e (- (/ c e) d))) (- b (/ 1 a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.001008524
    },
    "speedup": 1.0366892607414402,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (- (* (+ (+ 1 a) (+ (pow (- 0 1) 0) (pow -1 b))) (/ (+ b -1) c)) (+ (+ (/ a -1) 1) (+ a b))) (* (+ (pow (* d -1) -1) (- d d)) (+ -1 d))) (* (pow (pow (/ c -1) e) (/ -1 b)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001021086)",
      "output_term": "(+ (/ (- (* (+ a (+ 2 (pow -1 b))) (/ (+ -1 b) c)) (+ 1 (+ (/ a -1) (+ a b)))) (* (pow (* -1 d) -1) (+ -1 d))) (pow (pow (/ c -1) e) (/ -1 b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.0010491440000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000499)",
      "output_term": "(+ (/ (- (* (+ (pow -1 b) (+ a 2)) (/ (+ -1 b) c)) (+ 1 (+ (/ a -1) (+ a b)))) (/ (+ -1 d) (- 0 d))) (pow (pow (/ c -1) e) (/ -1 b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.001012004
    },
    "speedup": 1.0366994596859302,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (- (- (pow (* (+ (+ (/ a a) -1) (/ a b)) (pow 0 0)) (* (pow a -1) 1)) (- 1 a)) (+ a (* d b))) (/ (- (+ (- -1 -1) 0) (pow c 0)) (/ 0 d))) (/ (pow (+ (- 1 c) 1) (+ b 1)) (+ e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001027109)",
      "output_term": "(+ (- (- (+ (pow (* (+ (/ a a) (+ -1 (/ a b))) (pow 0 0)) (pow a -1)) (+ a -1)) (+ a (* b d))) (/ -1 (/ 0 d))) (/ (pow (+ 1 (- 1 c)) (+ b 1)) (+ 1 e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.0010661849999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001918)",
      "output_term": "(+ (- (pow (* (/ a b) (pow 0 0)) (/ 1 a)) (+ 1 (+ (* b d) (/ -1 (/ 0 d))))) (/ (pow (- 2 c) (+ b 1)) (+ 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001028129
    },
    "speedup": 1.037014810398306,
    "weight_simple_diff": 5,
    "weight_complex_diff": 8,
    "depth_diff": 3
  },
  {
    "base_term": "(pow (- (- (+ (- (/ (+ (/ (/ -1 a) a) (* a -1)) (/ a a)) (* (+ 1 1) b)) (- b (pow -1 a))) (/ (+ (pow 0 c) -1) (+ b d))) (* (pow (- 1 e) 0) (/ -1 -1))) (- 0 (pow (/ d (pow d 0)) (* 0 c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003668)",
      "output_term": "(pow (+ -1 (+ (+ (/ (+ (/ (/ -1 a) a) (* -1 a)) (/ a a)) (* -1 b)) (* -1 (+ (/ (+ -1 (pow 0 c)) (+ b d)) (pow -1 a))))) -1)",
      "output_weight_simple": 24,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001051937
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000959)",
      "output_term": "(/ 1 (- (- (+ (/ (/ -1 a) a) (- b a)) (+ (* 2 b) (+ (pow -1 a) (/ (+ -1 (pow 0 c)) (+ b d))))) 1))",
      "output_weight_simple": 23,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.0010139020000000001
    },
    "speedup": 1.037513487496819,
    "weight_simple_diff": 1,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (pow (/ (pow (* -1 (+ (+ -1 (pow a 1)) (+ a a))) b) (+ 1 (* (+ 0 a) -1))) (pow (pow 1 (pow a b)) c)) (+ (- (pow b (pow -1 a)) (* 0 1)) (+ a 0))) (- (- (+ (* c c) d) (- 0 d)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00101107)",
      "output_term": "(* (- (pow (/ (pow (+ 1 (* a -3)) b) (+ 1 (* -1 a))) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ 1 (+ (* c c) (+ d d))))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.001046204
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100056)",
      "output_term": "(* (- (pow (/ (pow (- 1 (* a 3)) b) (- 1 a)) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ (* c c) (+ 1 (+ d d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.0010083359999999999
    },
    "speedup": 1.0375549420034593,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (pow (* (+ (+ 0 (pow (+ (/ a 0) a) (pow -1 a))) (+ 0 (/ -1 1))) (pow (/ -1 0) b)) (- (pow (* a b) d) (pow a 0))) (- (/ (* b a) 1) (- -1 a))) (+ (- (- (+ 1 b) b) (* a 1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001016592)",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (+ -1 (pow (* a b) d))) (* (+ a (+ 1 (/ (* a b) 1))) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 27,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.0010410039999999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000798)",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (- (pow (* a b) d) 1)) (* (- (* a b) (- -1 a)) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001003123
    },
    "speedup": 1.0377630659450534,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (/ (* (/ (- (- (- (* 0 a) a) (pow a -1)) (+ 0 -1)) (* (pow 1 a) 0)) (/ a (- -1 c))) (* (/ (pow d b) c) 1)) (/ (pow -1 (/ e 1)) (pow -1 e))) (- (+ (pow 1 (+ 1 a)) (+ d -1)) (* -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001037467)",
      "output_term": "(+ (/ (* (/ (+ (- (- 0 a) (pow a -1)) 1) 0) (/ a (- -1 c))) (/ (pow d b) c)) (+ -1 (+ (/ (pow -1 (/ e 1)) (pow -1 e)) (+ d (pow 1 (+ a 1))))))",
      "output_weight_simple": 29,
      "output_weight_complex": 74,
      "output_depth": 8,
      "simplification_time": 0.001053999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001266)",
      "output_term": "(+ d (+ (/ (* (/ (- 1 (+ a (/ 1 a))) 0) (/ a (- -1 c))) (/ (pow d b) c)) (pow 1 a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 51,
      "output_depth": 9,
      "simplification_time": 0.001015452
    },
    "speedup": 1.0379604353529264,
    "weight_simple_diff": 9,
    "weight_complex_diff": 23,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (* (+ (+ (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) d)) (+ (+ 1 c) a)) (/ (+ (* d e) 1) -1)) (+ (- (* (/ d e) d) (/ c 1)) (/ -1 -1))) (+ (- (pow (pow -1 -1) 1) (* d d)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001014551)",
      "output_term": "(+ (* (+ (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) d)) (+ (+ c (+ 1 a)) (/ (+ 1 (* d e)) -1))) (+ 1 (- (* d (/ d e)) (/ c 1)))) (+ c (- (pow -1 -1) (* d d))))",
      "output_weight_simple": 32,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001071319
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000201)",
      "output_term": "(+ (* (+ 1 (+ (+ a c) (+ (pow (- (pow 1 a) (+ b c)) c) (+ (+ (pow 1 c) d) (/ (+ 1 (* d e)) -1))))) (- (/ (* d d) e) (+ c -1))) (- c (+ 1 (* d d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 54,
      "output_depth": 10,
      "simplification_time": 0.001032038
    },
    "speedup": 1.0380615830037265,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": -2
  },
  {
    "base_term": "(* (- (pow (+ (/ (+ (+ (- (/ 0 -1) -1) (+ -1 a)) (/ b b)) (- (+ b b) c)) (* b 1)) (* (/ (pow -1 d) c) (- 1 -1))) (/ (- (* -1 d) e) (* -1 0))) (- (* (* (- d 0) -1) (- e 0)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002372)",
      "output_term": "(* (- (pow (+ b (/ (+ a (/ b b)) (- (+ b b) c))) (* (/ (pow -1 d) c) 2)) (/ (* -1 (+ d e)) 0)) (+ -1 (* -1 (* d e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.001043702
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000908)",
      "output_term": "(* (- (pow (+ b (/ (+ 1 a) (- (+ b b) c))) (* (/ (pow -1 d) c) 2)) (/ (- 0 (+ d e)) 0)) (- -1 (* d e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.001005416
    },
    "speedup": 1.0380797600197331,
    "weight_simple_diff": 1,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (* (- (+ (+ (pow (* (+ 1 a) a) 0) (pow a 1)) (* -1 (/ a 1))) (* (* 1 -1) a)) (+ (- a (* -1 b)) (- -1 1))) (- (* (+ 0 -1) -1) (* -1 0))) (* (pow (* (+ a -1) a) (+ 0 0)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005313)",
      "output_term": "(pow (/ (* (+ (* -1 (/ a 1)) (+ a (+ 1 a))) (+ b (+ a -2))) 1) (/ b b))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 7,
      "simplification_time": 0.001050341
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100066)",
      "output_term": "(* (+ 1 a) (+ a (+ b -2)))",
      "output_weight_simple": 8,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.001011607
    },
    "speedup": 1.0382895729270358,
    "weight_simple_diff": 8,
    "weight_complex_diff": 24,
    "depth_diff": 3
  },
  {
    "base_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ -1 a))) (+ (pow -1 c) -1)) (- (* -1 c) 1)) (/ (- (+ (* b 1) 0) (/ 0 0)) (/ e 1))) (/ (/ (+ (* d 1) a) (* 0 c)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004592)",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ a -1))) (+ -1 (pow -1 c))) (+ -1 (* c -1))) (/ (- b (/ 0 0)) (/ e 1))) (/ (/ (+ a d) 0) (/ b b)))",
      "output_weight_simple": 32,
      "output_weight_complex": 85,
      "output_depth": 10,
      "simplification_time": 0.001034915
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ a -1))) (+ -1 (pow -1 c))) (- -1 c)) (/ (- b (/ 0 0)) e)) (/ (+ a d) 0))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.000996724
    },
    "speedup": 1.0383165249356892,
    "weight_simple_diff": 4,
    "weight_complex_diff": 17,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (- (- (+ (- (+ (pow (* a a) b) (* b a)) (+ c -1)) (+ b (pow c -1))) (* -1 (/ a d))) (+ (- (- a d) -1) (- b 1))) (- (pow (pow -1 -1) 0) (+ e c))) (- (- a (* (pow e a) c)) (* 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001006797)",
      "output_term": "(+ (* (- (+ (- (+ (pow (* a a) b) (* a b)) (+ c -1)) (+ (+ b (pow c -1)) (/ a d))) (+ (- a d) (+ 1 (+ b -1)))) (- 1 (+ c e))) (- (- a (* c (pow e a))) b))",
      "output_weight_simple": 31,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.001075667
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001012317)",
      "output_term": "(+ (* (- (+ b (- (+ (pow (* a a) b) (+ (* a b) (/ 1 c))) (+ c -1))) (- (+ b (- a d)) (/ a d))) (- 1 (+ c e))) (- a (+ b (* c (pow e a)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.001035884
    },
    "speedup": 1.038404879310811,
    "weight_simple_diff": 2,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (- (* (+ (* (- (- (- 1 a) a) (- 1 -1)) (pow -1 b)) (pow (pow 0 1) -1)) (/ (+ b b) 1)) (* (- c (* 1 0)) (* a a))) (* (pow (pow b e) 1) (* 0 1))) (+ (* (* (- a b) a) (- d 1)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001023075)",
      "output_term": "(/ (/ (- (* (+ (* (+ (+ 1 (* a -2)) -2) (pow -1 b)) (pow 0 -1)) (/ (+ b b) 1)) (* a (* a c))) 0) (+ b (* a (* (- a b) (+ -1 d)))))",
      "output_weight_simple": 28,
      "output_weight_complex": 57,
      "output_depth": 10,
      "simplification_time": 0.001046668
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001769)",
      "output_term": "(/ (/ (- (* (+ (* (- 1 (+ a (+ a 2))) (pow -1 b)) (pow 0 -1)) (+ b b)) (* a (* a c))) 0) (+ b (* (- a b) (* a (- d 1)))))",
      "output_weight_simple": 27,
      "output_weight_complex": 51,
      "output_depth": 10,
      "simplification_time": 0.001007761
    },
    "speedup": 1.0386073682152812,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (* (+ (/ (* (pow (* (* 0 0) 0) (+ 0 -1)) a) a) (- (pow (pow a a) b) (/ a e))) (* (* (* 1 0) d) (* a 1))) (- (/ (pow a 1) b) (+ -1 b))) (pow (* (* (+ 0 1) b) (pow 1 -1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001024016)",
      "output_term": "(* b (* (+ (+ -1 b) (* -1 (/ a b))) (pow 1 -1)))",
      "output_weight_simple": 11,
      "output_weight_complex": 23,
      "output_depth": 6,
      "simplification_time": 0.001057934
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005199)",
      "output_term": "(* b (- (+ -1 b) (/ a b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 14,
      "output_depth": 4,
      "simplification_time": 0.001018452
    },
    "speedup": 1.0387666772709956,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": 2
  },
  {
    "base_term": "(- (+ (+ (/ (/ (* (/ (pow (pow a a) a) (* 1 -1)) (pow 1 b)) (- (- b 0) -1)) (+ (/ 1 a) 0)) (+ (/ (- b -1) a) (+ -1 d))) (/ (- (+ c b) -1) (/ e c))) (- (* (- (+ a 0) 1) (+ d 1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001033029)",
      "output_term": "(- (+ (/ (/ (* (/ (pow (pow a a) a) -1) (pow 1 b)) (+ 1 b)) (/ 1 a)) (+ -1 (+ (/ (+ 1 (+ b c)) (/ e c)) (+ (/ (+ 1 b) a) d)))) (- (* (+ a -1) (+ 1 d)) e))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 9,
      "simplification_time": 0.001055558
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001796)",
      "output_term": "(- (+ -1 (+ (/ (/ (* (/ (pow (pow a a) a) -1) (pow 1 b)) (+ 1 b)) (/ 1 a)) (+ (/ (+ b (+ 1 c)) (/ e c)) (+ (/ (+ 1 b) a) d)))) (- (* (- a 1) (+ 1 d)) e))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.0010159980000000002
    },
    "speedup": 1.0389370845218198,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (+ (* -1 (pow (pow (/ a (* (/ 0 b) a)) (pow 1 c)) (/ (* -1 a) 0))) (/ (pow (+ b d) 1) (pow b 0))) (pow (- (* d (+ b -1)) (+ 1 -1)) (/ c 1))) (- (pow (pow (+ e 0) d) (/ 0 b)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001036833)",
      "output_term": "(+ (/ (+ b d) 1) (+ (- (pow (pow e d) (/ 0 b)) (/ b a)) (* -1 (+ (pow (pow (/ a (* a (/ 0 b))) (pow 1 c)) (/ (* -1 a) 0)) (pow (* d (+ -1 b)) (/ c 1))))))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 10,
      "simplification_time": 0.001061691
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100027)",
      "output_term": "(- (- (+ d (+ b (pow (pow e d) (/ 0 b)))) (+ (pow (pow (/ a (/ 0 b)) (pow 1 c)) (/ (- 0 a) 0)) (pow (* d (+ -1 b)) c))) (/ b a))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.00102148
    },
    "speedup": 1.0393654305517486,
    "weight_simple_diff": 4,
    "weight_complex_diff": 15,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (* (pow (- (/ (+ (- (- (+ a a) 1) a) (* -1 a)) (pow a (/ a 0))) d) (/ (* (pow 0 0) -1) (* a 0))) (* (+ (* (/ b 0) d) (* -1 1)) (/ a -1))) (* (+ (/ (+ b c) -1) (- 1 -1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001013902)",
      "output_term": "(pow (* (pow (- (/ (+ a (+ -1 (* a -1))) (pow a (/ a 0))) d) (/ (* -1 (pow 0 0)) 0)) (* (+ -1 (* d (/ b 0))) (/ a -1))) (* (+ (/ (+ b c) -1) 2) (pow -1 e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 81,
      "output_depth": 9,
      "simplification_time": 0.0010560110000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003434)",
      "output_term": "(pow (* (pow (- (/ -1 (pow a (/ a 0))) d) (/ (- 0 (pow 0 0)) 0)) (* (+ -1 (* d (/ b 0))) (/ a -1))) (* (+ (/ (+ b c) -1) 2) (pow -1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.001015589
    },
    "speedup": 1.039801533888217,
    "weight_simple_diff": 3,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (pow (- (/ (* a (* 0 (+ (- 1 1) a))) (- (- a b) d)) (pow (+ c c) 0)) (pow (/ -1 0) (* e 1))) (+ (/ (- (- e d) 0) (+ 1 0)) (* 0 d))) (* (- (* (pow -1 1) e) (* -1 c)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001013698)",
      "output_term": "(+ (pow (+ (/ 0 (- (- a b) d)) -1) (pow (/ -1 0) e)) (+ (/ (- e d) 1) (* (+ d -1) (+ e (* c -1)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.0010443280000000002
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001837)",
      "output_term": "(+ (pow (- (/ 0 (- a (+ b d))) 1) (pow (/ -1 0) e)) (+ (- e d) (* (- d 1) (- e c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.0010043320000000001
    },
    "speedup": 1.0398234846644336,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (pow (* (+ (+ 0 (pow (+ (/ a 0) a) (pow -1 a))) (+ 0 (/ -1 1))) (pow (/ -1 0) b)) (- (pow (* a b) d) (pow a 0))) (- (/ (* b a) 1) (- -1 a))) (+ (- (- (+ 1 b) b) (* a 1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00101868)",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (+ -1 (pow (* a b) d))) (* (+ a (+ 1 (/ (* a b) 1))) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 27,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001043385
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00100063)",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (- (pow (* a b) d) 1)) (* (- (* a b) (- -1 a)) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001003372
    },
    "speedup": 1.039878529598195,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (/ (* (- (/ a (+ (pow (- a b) -1) (pow 0 1))) (pow (pow a b) 1)) (+ (/ 1 0) b)) (/ (- (* 0 1) b) (pow b d))) (+ (- 0 (* b -1)) (/ 0 d))) (pow (- (/ (+ 0 e) 1) (* d 0)) (- e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001846)",
      "output_term": "(+ (* (/ (* (- (/ a (pow (- a b) -1)) (pow a b)) (+ b (/ 1 0))) (/ (- 0 b) (pow b d))) (+ b (/ 0 d))) (pow (/ e 1) e))",
      "output_weight_simple": 25,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.001048652
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000257)",
      "output_term": "(+ (* (/ (* (- (/ a (/ 1 (- a b))) (pow a b)) (+ b (/ 1 0))) (/ (- 0 b) (pow b d))) (+ b (/ 0 d))) (pow e e))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.0010084150000000001
    },
    "speedup": 1.0399012311399571,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (- (pow (* (* a (- b (pow (/ 1 a) -1))) (- (* -1 -1) -1)) (pow (* c b) 0)) (pow (- (/ a 0) -1) b)) (+ (* (* (* a d) b) (* e e)) (pow 0 e))) (- (- (* (+ -1 0) -1) (* 1 0)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001021099)",
      "output_term": "(/ (+ (- (* (- b (pow (/ 1 a) -1)) (* a 2)) (pow (+ 1 (/ a 0)) b)) (+ (* a (* d (* b (* e e)))) (pow 0 e))) (* -1 e))",
      "output_weight_simple": 26,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.001042779
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001003245)",
      "output_term": "(/ (- (+ (pow 0 e) (* a (+ (* (- b a) 2) (* b (* d (* e e)))))) (pow (+ 1 (/ a 0)) b)) (- 0 e))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 9,
      "simplification_time": 0.0010027600000000001
    },
    "speedup": 1.0399088515696675,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (pow (pow (* (- (+ 1 (+ (pow (pow a b) 1) (* 0 0))) (* (- 0 0) a)) (/ 0 (/ a 1))) (+ (* 1 (+ c 1)) (pow -1 b))) (- (+ (* 0 1) -1) (pow c 1))) (* (- (pow (* 1 e) e) (/ a b)) (+ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001031227)",
      "output_term": "(pow (pow (pow (* (+ 1 (pow a b)) (/ 0 (/ a 1))) (+ 1 (+ c (pow -1 b)))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.001053257
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00101379)",
      "output_term": "(pow (pow (pow (/ 0 a) (+ 1 (+ c (pow -1 b)))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 20,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001012827
    },
    "speedup": 1.039917972170963,
    "weight_simple_diff": 4,
    "weight_complex_diff": 12,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (* (+ (- (pow (pow (+ (* 1 a) 1) (- a a)) (pow a -1)) (* b (/ a b))) (pow d (- b -1))) (+ (pow (* d c) -1) (pow c b))) (+ (+ e (+ 0 -1)) (/ -1 1))) (- (+ (pow (pow -1 a) d) -1) (pow e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001017213)",
      "output_term": "(pow (- (* (+ (- (pow 1 (pow a -1)) (* b (/ a b))) (pow d (+ 1 b))) (+ (pow (* d c) -1) (pow c b))) (+ e -2)) (- (+ -1 (pow (pow -1 a) d)) (pow e c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.001051312
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005435)",
      "output_term": "(pow (- (* (+ (- (pow 1 (/ 1 a)) a) (pow d (+ 1 b))) (+ (/ 1 (* d c)) (pow c b))) (+ e -2)) (- (pow (pow -1 a) d) (+ 1 (pow e c))))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.00101085
    },
    "speedup": 1.0400276994608497,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (* (+ (+ (* a (/ (/ a 0) a)) (* a a)) (+ (pow -1 a) -1)) (* (- 0 a) c)) (- (pow (* -1 a) b) (+ a a))) (* (* (/ 0 b) 0) (+ a 0))) (+ (/ (* (+ -1 b) 0) (/ -1 -1)) (* d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001021259)",
      "output_term": "(pow (+ (pow (- 0 a) b) (* (- 0 a) (+ (* (+ (* a (+ a (/ (/ a 0) a))) (+ -1 (pow -1 a))) c) 2))) (* c d))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 11,
      "simplification_time": 0.001046751
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001006771)",
      "output_term": "(pow (- (pow (- 0 a) b) (+ (* a (* (+ (/ a 0) (+ (pow -1 a) (+ (* a a) -1))) c)) (+ a a))) (* c d))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 10,
      "simplification_time": 0.001006378
    },
    "speedup": 1.0401171329261967,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (/ (+ (- (+ (- (* (pow (/ -1 a) 1) (* 1 -1)) (* -1 -1)) (pow (* b -1) 1)) (* (/ a b) b)) (- (+ (+ b 0) c) (+ 0 1))) (- (* (pow 0 b) 0) (/ d d))) (+ (* (- (- 0 a) c) d) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018396)",
      "output_term": "(+ (/ (+ -1 (+ -1 (+ (+ b c) (* -1 (+ (* b (/ a b)) (+ (/ -1 a) b)))))) (- 0 (/ d d))) (* (* -1 d) (+ a c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 47,
      "output_depth": 10,
      "simplification_time": 0.001059517
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002831)",
      "output_term": "(- (/ (- (- (+ (- -1 (/ -1 a)) c) a) 1) -1) (* d (+ a c)))",
      "output_weight_simple": 14,
      "output_weight_complex": 26,
      "output_depth": 8,
      "simplification_time": 0.001016932
    },
    "speedup": 1.0418759563077966,
    "weight_simple_diff": 9,
    "weight_complex_diff": 21,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ -1 a))) (+ (pow -1 c) -1)) (- (* -1 c) 1)) (/ (- (+ (* b 1) 0) (/ 0 0)) (/ e 1))) (/ (/ (+ (* d 1) a) (* 0 c)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000583)",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ a -1))) (+ -1 (pow -1 c))) (+ -1 (* c -1))) (/ (- b (/ 0 0)) (/ e 1))) (/ (/ (+ a d) 0) (/ b b)))",
      "output_weight_simple": 32,
      "output_weight_complex": 85,
      "output_depth": 10,
      "simplification_time": 0.001031348
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ a -1))) (+ -1 (pow -1 c))) (- -1 c)) (/ (- b (/ 0 0)) e)) (/ (+ a d) 0))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.00098949
    },
    "speedup": 1.0423026003294626,
    "weight_simple_diff": 4,
    "weight_complex_diff": 17,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (+ (* -1 (pow (pow (/ a (* (/ 0 b) a)) (pow 1 c)) (/ (* -1 a) 0))) (/ (pow (+ b d) 1) (pow b 0))) (pow (- (* d (+ b -1)) (+ 1 -1)) (/ c 1))) (- (pow (pow (+ e 0) d) (/ 0 b)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001040759)",
      "output_term": "(+ (/ (+ b d) 1) (+ (- (pow (pow e d) (/ 0 b)) (/ b a)) (* -1 (+ (pow (pow (/ a (* a (/ 0 b))) (pow 1 c)) (/ (* -1 a) 0)) (pow (* d (+ -1 b)) (/ c 1))))))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 10,
      "simplification_time": 0.001065373
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000156)",
      "output_term": "(- (- (+ d (+ b (pow (pow e d) (/ 0 b)))) (+ (pow (pow (/ a (/ 0 b)) (pow 1 c)) (/ (- 0 a) 0)) (pow (* d (+ -1 b)) c))) (/ b a))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.001021935
    },
    "speedup": 1.0425056388126446,
    "weight_simple_diff": 4,
    "weight_complex_diff": 15,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (* (pow (+ 0 (/ (* (/ (pow (/ a a) -1) (- 1 a)) (pow a a)) (* a (- a b)))) (/ (* (+ 0 1) -1) b)) (* (* (pow 0 (* 1 1)) (- -1 c)) (* b e))) (+ (- (+ (/ a 0) 0) (- 1 a)) (- a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001036779)",
      "output_term": "(+ a (+ -1 (+ (/ a 0) (+ a 1))))",
      "output_weight_simple": 9,
      "output_weight_complex": 14,
      "output_depth": 5,
      "simplification_time": 0.001067878
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.0010027)",
      "output_term": "(+ a (- (/ a 0) (- 0 a)))",
      "output_weight_simple": 6,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.001024127
    },
    "speedup": 1.0427202876205783,
    "weight_simple_diff": 3,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (- (pow (* (- (/ (/ (* -1 a) a) (- a a)) (/ c a)) (pow (* c b) 0)) 1) (- a (pow c (* 1 1)))) (- (- (- (/ 0 1) d) (pow -1 1)) (/ 1 1))) (/ (+ (pow (/ 1 -1) a) (/ 0 a)) (pow a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008163)",
      "output_term": "(- (+ (- (- (/ (/ (* -1 a) a) 0) (/ c a)) (- a c)) d) (/ (+ (pow -1 a) (/ 0 a)) 1))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.001072669
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001273)",
      "output_term": "(- (/ -1 0) (+ (/ c a) (+ (pow -1 a) (+ (/ 0 a) (- a (+ d c))))))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.001028349
    },
    "speedup": 1.0430982088765586,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (+ (- (+ 0 (/ (- (/ (- 0 a) a) (- 1 0)) a)) (+ -1 (- b (- a -1)))) (+ (pow 1 b) (+ 1 1))) (* (* (* (/ 1 a) 0) (pow d 0)) (- 1 1))) (/ (/ (/ (* -1 -1) d) (/ d 1)) (pow a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001014814)",
      "output_term": "(* (+ (- (/ (+ (/ (- 0 a) a) -1) a) (+ -1 (- b (+ a 1)))) (+ (pow 1 b) 2)) (/ (/ (/ 1 d) (/ d 1)) (pow a a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.001057533
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000995)",
      "output_term": "(/ (/ (/ (+ (- (/ (- (/ (- 0 a) a) 1) a) (- b (+ a 2))) (+ (pow 1 b) 2)) d) d) (pow a a))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 10,
      "simplification_time": 0.00101365
    },
    "speedup": 1.0432920633354708,
    "weight_simple_diff": 4,
    "weight_complex_diff": 9,
    "depth_diff": -2
  },
  {
    "base_term": "(- (- (+ (- (/ 0 (+ (- (pow (- -1 0) -1) (* a a)) -1)) (pow (- (/ a -1) 0) (/ a 0))) (* (+ (+ 0 b) a) (* 0 e))) (/ (+ (* 1 a) 1) (pow 1 e))) (* (* (pow (- 0 1) 1) (pow d -1)) (- d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001014827)",
      "output_term": "(+ (- (- (/ 0 (+ -1 (- (pow -1 -1) (* a a)))) (pow (/ a -1) (/ a 0))) (/ (+ a 1) (pow 1 e))) (* (pow d -1) (- d e)))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.001042101
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000321)",
      "output_term": "(+ (- (/ 0 (- -2 (* a a))) (+ (pow (/ a -1) (/ a 0)) (/ (+ a 1) (pow 1 e)))) (/ (- d e) d))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.0009988100000000001
    },
    "speedup": 1.043342577667424,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ -1 a))) (+ (pow -1 c) -1)) (- (* -1 c) 1)) (/ (- (+ (* b 1) 0) (/ 0 0)) (/ e 1))) (/ (/ (+ (* d 1) a) (* 0 c)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001016286)",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ a -1))) (+ -1 (pow -1 c))) (+ -1 (* c -1))) (/ (- b (/ 0 0)) (/ e 1))) (/ (/ (+ a d) 0) (/ b b)))",
      "output_weight_simple": 32,
      "output_weight_complex": 85,
      "output_depth": 10,
      "simplification_time": 0.0010464860000000001
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000073)",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ a -1))) (+ -1 (pow -1 c))) (- -1 c)) (/ (- b (/ 0 0)) e)) (/ (+ a d) 0))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.001002925
    },
    "speedup": 1.0434339556796373,
    "weight_simple_diff": 4,
    "weight_complex_diff": 17,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (- (/ (+ (- (- (+ a a) 1) a) (* -1 a)) (pow a (/ a 0))) d) (/ (* (pow 0 0) -1) (* a 0))) (* (+ (* (/ b 0) d) (* -1 1)) (/ a -1))) (* (+ (/ (+ b c) -1) (- 1 -1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018795)",
      "output_term": "(pow (* (pow (- (/ (+ a (+ -1 (* a -1))) (pow a (/ a 0))) d) (/ (* -1 (pow 0 0)) 0)) (* (+ -1 (* d (/ b 0))) (/ a -1))) (* (+ (/ (+ b c) -1) 2) (pow -1 e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 81,
      "output_depth": 9,
      "simplification_time": 0.0010569239999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001021)",
      "output_term": "(pow (* (pow (- (/ -1 (pow a (/ a 0))) d) (/ (- 0 (pow 0 0)) 0)) (* (+ -1 (* d (/ b 0))) (/ a -1))) (* (+ (/ (+ b c) -1) 2) (pow -1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.001012904
    },
    "speedup": 1.043459202451565,
    "weight_simple_diff": 3,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(* (pow (* (/ (/ (- (+ 0 (- (- 1 -1) a)) (/ b 0)) (+ (pow a a) -1)) c) (+ (+ 0 (* c d)) (* -1 c))) (- (* (pow (pow c 0) c) (/ 1 -1)) (* -1 -1))) (- (pow (- 1 (+ e b)) (/ a e)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00102407)",
      "output_term": "(* (pow (* (/ (/ (- (- 2 a) (/ b 0)) (+ -1 (pow a a))) c) (* c (+ -1 d))) (+ -1 (* -1 (pow 1 c)))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.00105186
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100882)",
      "output_term": "(* (pow (* (+ -1 d) (/ (- (- 2 a) (/ b 0)) (+ -1 (pow a a)))) (- -1 (pow 1 c))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001007736
    },
    "speedup": 1.0437852770963825,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (- (+ (- (/ (+ (/ (/ -1 a) a) (* a -1)) (/ a a)) (* (+ 1 1) b)) (- b (pow -1 a))) (/ (+ (pow 0 c) -1) (+ b d))) (* (pow (- 1 e) 0) (/ -1 -1))) (- 0 (pow (/ d (pow d 0)) (* 0 c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010148)",
      "output_term": "(pow (+ -1 (+ (+ (/ (+ (/ (/ -1 a) a) (* -1 a)) (/ a a)) (* -1 b)) (* -1 (+ (/ (+ -1 (pow 0 c)) (+ b d)) (pow -1 a))))) -1)",
      "output_weight_simple": 24,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001058226
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000723)",
      "output_term": "(/ 1 (- (- (+ (/ (/ -1 a) a) (- b a)) (+ (* 2 b) (+ (pow -1 a) (/ (+ -1 (pow 0 c)) (+ b d))))) 1))",
      "output_weight_simple": 23,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.0010133249999999998
    },
    "speedup": 1.0443105617644883,
    "weight_simple_diff": 1,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (+ (* (pow (* (- (+ 0 a) b) (pow 1 -1)) (pow 1 -1)) (* (pow a 1) 1)) (+ (pow a 0) 0)) (- (* b (pow c -1)) (* 1 c))) (* (pow (* -1 0) 1) c)) (+ (pow (- (pow c c) 1) (/ 0 b)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001040937)",
      "output_term": "(+ (* -1 (pow (+ -1 (pow c c)) (/ 0 b))) (+ (* a (pow (* (- a b) (pow 1 -1)) (pow 1 -1))) (+ c (* (pow c -1) (* b -1)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.00105824
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000422)",
      "output_term": "(- (* a (- a b)) (+ (- (/ b c) c) (pow (- (pow c c) 1) (/ 0 b))))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.001013327
    },
    "speedup": 1.044322316488162,
    "weight_simple_diff": 7,
    "weight_complex_diff": 16,
    "depth_diff": 1
  },
  {
    "base_term": "(* (- (pow (/ (pow (* -1 (+ (+ -1 (pow a 1)) (+ a a))) b) (+ 1 (* (+ 0 a) -1))) (pow (pow 1 (pow a b)) c)) (+ (- (pow b (pow -1 a)) (* 0 1)) (+ a 0))) (- (- (+ (* c c) d) (- 0 d)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001013514)",
      "output_term": "(* (- (pow (/ (pow (+ 1 (* a -3)) b) (+ 1 (* -1 a))) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ 1 (+ (* c c) (+ d d))))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.001053455
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000691)",
      "output_term": "(* (- (pow (/ (pow (- 1 (* a 3)) b) (- 1 a)) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ (* c c) (+ 1 (+ d d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.0010086820000000001
    },
    "speedup": 1.0443876266256362,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (* (- (* (/ (/ (pow (* -1 1) 1) (* -1 1)) (- 1 -1)) (/ (* a a) 0)) (pow (- b -1) 1)) (pow (- (+ c a) a) (* b c))) (/ (pow (/ b 1) b) (/ 0 d))) (+ (* (* e d) -1) (pow (/ b -1) d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001020689)",
      "output_term": "(/ (* (- (* 0.5 (/ (* a a) 0)) (+ 1 b)) (* (pow c (* b c)) (/ (pow (/ b 1) b) (/ 0 d)))) (+ (* e (* -1 d)) (pow (/ b -1) d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.0010568279999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002264)",
      "output_term": "(/ (* (- (* 0.5 (/ (* a a) 0)) (+ 1 b)) (* (pow c (* b c)) (/ (pow b b) (/ 0 d)))) (- (pow (/ b -1) d) (* d e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.001011069
    },
    "speedup": 1.0452580387688672,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (- (/ (+ (- (- (+ a a) 1) a) (* -1 a)) (pow a (/ a 0))) d) (/ (* (pow 0 0) -1) (* a 0))) (* (+ (* (/ b 0) d) (* -1 1)) (/ a -1))) (* (+ (/ (+ b c) -1) (- 1 -1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001021328)",
      "output_term": "(pow (* (pow (- (/ (+ a (+ -1 (* a -1))) (pow a (/ a 0))) d) (/ (* -1 (pow 0 0)) 0)) (* (+ -1 (* d (/ b 0))) (/ a -1))) (* (+ (/ (+ b c) -1) 2) (pow -1 e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 81,
      "output_depth": 9,
      "simplification_time": 0.001059514
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100225)",
      "output_term": "(pow (* (pow (- (/ -1 (pow a (/ a 0))) d) (/ (- 0 (pow 0 0)) 0)) (* (+ -1 (* d (/ b 0))) (/ a -1))) (* (+ (/ (+ b c) -1) 2) (pow -1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.001013239
    },
    "speedup": 1.0456703699719414,
    "weight_simple_diff": 3,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (* (+ (+ (- (* (* (+ a b) c) (/ 0 b)) b) a) (/ (pow (* 1 -1) b) (- 1 e))) (- (* (+ b e) a) (+ d a))) (/ (+ (pow 0 -1) 0) (* b 1))) (/ (+ (+ c (+ e c)) (* d 1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001076908)",
      "output_term": "(/ (pow (* (+ a (+ (- (* (+ a b) (* c (/ 0 b))) b) (/ (pow -1 b) (- 1 e)))) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (/ (+ (+ e d) (+ c c)) 1))",
      "output_weight_simple": 31,
      "output_weight_complex": 69,
      "output_depth": 10,
      "simplification_time": 0.0010764659999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001017396)",
      "output_term": "(/ (pow (* (+ (- (/ 0 b) b) (+ a (/ (pow -1 b) (- 1 e)))) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (+ c (+ c (+ e d))))",
      "output_weight_simple": 27,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.001028426
    },
    "speedup": 1.0467121601359746,
    "weight_simple_diff": 4,
    "weight_complex_diff": 10,
    "depth_diff": 2
  },
  {
    "base_term": "(- (- (- (pow (* (- (/ (/ (* -1 a) a) (- a a)) (/ c a)) (pow (* c b) 0)) 1) (- a (pow c (* 1 1)))) (- (- (- (/ 0 1) d) (pow -1 1)) (/ 1 1))) (/ (+ (pow (/ 1 -1) a) (/ 0 a)) (pow a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012291)",
      "output_term": "(- (+ (- (- (/ (/ (* -1 a) a) 0) (/ c a)) (- a c)) d) (/ (+ (pow -1 a) (/ 0 a)) 1))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.0010762950000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100065)",
      "output_term": "(- (/ -1 0) (+ (/ c a) (+ (pow -1 a) (+ (/ 0 a) (- a (+ d c))))))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.001027884
    },
    "speedup": 1.0470977269808657,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (pow (pow (* (- (+ 1 (+ (pow (pow a b) 1) (* 0 0))) (* (- 0 0) a)) (/ 0 (/ a 1))) (+ (* 1 (+ c 1)) (pow -1 b))) (- (+ (* 0 1) -1) (pow c 1))) (* (- (pow (* 1 e) e) (/ a b)) (+ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001034385)",
      "output_term": "(pow (pow (pow (* (+ 1 (pow a b)) (/ 0 (/ a 1))) (+ 1 (+ c (pow -1 b)))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.001056597
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001010145)",
      "output_term": "(pow (pow (pow (/ 0 a) (+ 1 (+ c (pow -1 b)))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 20,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001009044
    },
    "speedup": 1.047126785353265,
    "weight_simple_diff": 4,
    "weight_complex_diff": 12,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (+ (+ (- (- (/ (* a (pow a 1)) (* -1 0)) a) 0) (pow (* a (* b a)) (* 1 -1))) (* (+ (pow a 1) a) (+ -1 b))) (* (- (* 0 c) 0) (* a a))) (pow (+ (* 0 (/ 1 d)) (/ c 1)) (+ c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010775)",
      "output_term": "(+ (/ (+ (- (/ (* a a) 0) a) (+ (pow (* b (* a a)) -1) (* a (* (+ -1 b) 2)))) 0) (pow (/ c 1) (+ 1 c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.00105082
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000671)",
      "output_term": "(+ (/ (+ (- (/ (* a a) 0) a) (+ (/ 1 (* b (* a a))) (* a (+ b (+ b -2))))) 0) (pow c (+ 1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.0010035159999999999
    },
    "speedup": 1.0471382618712608,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (- (+ (/ (+ -1 (pow (pow (pow a b) -1) (+ -1 b))) (pow (pow 1 -1) b)) (* (/ a 0) -1)) (- (- (+ 0 b) 1) (pow b c))) (/ (/ (* a d) -1) (* -1 1))) (pow (- (/ b (/ -1 a)) (pow e -1)) (/ e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009981)",
      "output_term": "(* (- (+ (/ (+ -1 (pow (pow (pow a b) -1) (+ -1 b))) (pow (pow 1 -1) b)) (* -1 (+ (/ a 0) (- (+ -1 b) (pow b c))))) (/ (/ (* a d) -1) -1)) (pow (- (/ b (/ -1 a)) (pow e -1)) (/ e e)))",
      "output_weight_simple": 33,
      "output_weight_complex": 93,
      "output_depth": 9,
      "simplification_time": 0.0010592660000000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001168)",
      "output_term": "(* (- (/ (+ -1 (pow (/ 1 (pow a b)) (+ -1 b))) (pow 1 b)) (+ (/ a 0) (+ (- b (+ 1 (pow b c))) (/ (/ (* a d) -1) -1)))) (- (/ b (/ -1 a)) (/ 1 e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.001011414
    },
    "speedup": 1.0473119810483147,
    "weight_simple_diff": 3,
    "weight_complex_diff": 12,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (* (+ (+ (- (* (* (+ a b) c) (/ 0 b)) b) a) (/ (pow (* 1 -1) b) (- 1 e))) (- (* (+ b e) a) (+ d a))) (/ (+ (pow 0 -1) 0) (* b 1))) (/ (+ (+ c (+ e c)) (* d 1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000498)",
      "output_term": "(/ (pow (* (+ a (+ (- (* (+ a b) (* c (/ 0 b))) b) (/ (pow -1 b) (- 1 e)))) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (/ (+ (+ e d) (+ c c)) 1))",
      "output_weight_simple": 31,
      "output_weight_complex": 69,
      "output_depth": 10,
      "simplification_time": 0.0010781649999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00101807)",
      "output_term": "(/ (pow (* (+ (- (/ 0 b) b) (+ a (/ (pow -1 b) (- 1 e)))) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (+ c (+ c (+ e d))))",
      "output_weight_simple": 27,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.001029326
    },
    "speedup": 1.047447553058992,
    "weight_simple_diff": 4,
    "weight_complex_diff": 10,
    "depth_diff": 2
  },
  {
    "base_term": "(* (* (/ (/ (/ (+ (/ (pow (- a 0) a) (/ a a)) (pow a 1)) (pow (/ 0 0) b)) (pow -1 (+ -1 a))) (/ (* (pow -1 -1) d) (* b 1))) (+ (+ (- -1 c) 1) (pow c -1))) (/ a (/ (pow (/ 0 b) 1) (- 0 d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001030382)",
      "output_term": "(* (/ (/ (/ (+ a (/ (pow a a) (/ a a))) (pow (/ 0 0) b)) (pow -1 (+ a -1))) (/ (* (pow -1 -1) d) b)) (* (+ (* -1 c) (pow c -1)) (/ a (/ (/ 0 b) (- 0 d)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 92,
      "output_depth": 8,
      "simplification_time": 0.001066821
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006111)",
      "output_term": "(* (/ (/ (/ (+ a (pow a a)) (pow -1 (- a 1))) (pow (/ 0 0) b)) (/ (- 0 d) b)) (/ (* a (- (/ 1 c) c)) (/ (/ 0 b) (- 0 d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 76,
      "output_depth": 7,
      "simplification_time": 0.001018452
    },
    "speedup": 1.0474926653391616,
    "weight_simple_diff": 4,
    "weight_complex_diff": 16,
    "depth_diff": 1
  },
  {
    "base_term": "(* (- (- (+ (/ (+ -1 (pow (pow (pow a b) -1) (+ -1 b))) (pow (pow 1 -1) b)) (* (/ a 0) -1)) (- (- (+ 0 b) 1) (pow b c))) (/ (/ (* a d) -1) (* -1 1))) (pow (- (/ b (/ -1 a)) (pow e -1)) (/ e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008234)",
      "output_term": "(* (- (+ (/ (+ -1 (pow (pow (pow a b) -1) (+ -1 b))) (pow (pow 1 -1) b)) (* -1 (+ (/ a 0) (- (+ -1 b) (pow b c))))) (/ (/ (* a d) -1) -1)) (pow (- (/ b (/ -1 a)) (pow e -1)) (/ e e)))",
      "output_weight_simple": 33,
      "output_weight_complex": 93,
      "output_depth": 9,
      "simplification_time": 0.001057837
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000121)",
      "output_term": "(* (- (/ (+ -1 (pow (/ 1 (pow a b)) (+ -1 b))) (pow 1 b)) (+ (/ a 0) (+ (- b (+ 1 (pow b c))) (/ (/ (* a d) -1) -1)))) (- (/ b (/ -1 a)) (/ 1 e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.0010098420000000002
    },
    "speedup": 1.0475272369340944,
    "weight_simple_diff": 3,
    "weight_complex_diff": 12,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (* (+ (* (* (* a (+ (/ a a) 0)) (pow b b)) (/ a (+ a a))) (pow 0 1)) (- b (* 1 (/ c b)))) (* (/ (/ (+ -1 a) c) (+ -1 -1)) (* 1 a))) (pow (- (/ (/ 0 -1) -1) (/ d e)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001041304)",
      "output_term": "(+ (pow (* (* a (/ a a)) (* (pow b b) (* (/ a (+ a a)) (- b (/ c b))))) (* a (/ (/ (+ a -1) c) -2))) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001075447
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001013144)",
      "output_term": "(+ (pow (* (pow b b) (* a (* (/ a (+ a a)) (- b (/ c b))))) (/ (* a (/ (- a 1) c)) -2)) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 27,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001026601
    },
    "speedup": 1.047580316013719,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (+ (/ (/ (* (/ (pow (pow a a) a) (* 1 -1)) (pow 1 b)) (- (- b 0) -1)) (+ (/ 1 a) 0)) (+ (/ (- b -1) a) (+ -1 d))) (/ (- (+ c b) -1) (/ e c))) (- (* (- (+ a 0) 1) (+ d 1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001006261)",
      "output_term": "(- (+ (/ (/ (* (/ (pow (pow a a) a) -1) (pow 1 b)) (+ 1 b)) (/ 1 a)) (+ -1 (+ (/ (+ 1 (+ b c)) (/ e c)) (+ (/ (+ 1 b) a) d)))) (- (* (+ a -1) (+ 1 d)) e))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 9,
      "simplification_time": 0.0010635850000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000955)",
      "output_term": "(- (+ -1 (+ (/ (/ (* (/ (pow (pow a a) a) -1) (pow 1 b)) (+ 1 b)) (/ 1 a)) (+ (/ (+ b (+ 1 c)) (/ e c)) (+ (/ (+ 1 b) a) d)))) (- (* (- a 1) (+ 1 d)) e))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.001014996
    },
    "speedup": 1.0478711246152697,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (+ (/ (* (* (- (+ (+ (* 1 a) a) (* a 1)) (/ 0 a)) (- c (/ d b))) (* (* d -1) d)) (/ (- (- -1 1) c) (* a d))) (/ (- (- a b) d) 1)) (- (- (* (pow 0 b) 1) (+ 1 e)) (+ c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001069055)",
      "output_term": "(pow (+ (/ (* (- (* a 3) (/ 0 a)) (* (- c (/ d b)) (* -1 (* d d)))) (/ (- -2 c) (* a d))) (/ (- (- a b) d) 1)) (+ (- (pow 0 b) (+ 1 e)) (* c -2)))",
      "output_weight_simple": 33,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001068594
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00100024)",
      "output_term": "(pow (+ (/ (* (- (* a 3) (/ 0 a)) (* d (* (- c (/ d b)) (- 0 d)))) (/ (- -2 c) (* a d))) (- a (+ d b))) (- (pow 0 b) (+ e (+ 1 (+ c c)))))",
      "output_weight_simple": 31,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001019748
    },
    "speedup": 1.0479000694289178,
    "weight_simple_diff": 2,
    "weight_complex_diff": 8,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (/ (* (- (+ (+ (pow (* (+ 1 a) a) 0) (pow a 1)) (* -1 (/ a 1))) (* (* 1 -1) a)) (+ (- a (* -1 b)) (- -1 1))) (- (* (+ 0 -1) -1) (* -1 0))) (* (pow (* (+ a -1) a) (+ 0 0)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001026051)",
      "output_term": "(pow (/ (* (+ (* -1 (/ a 1)) (+ a (+ 1 a))) (+ b (+ a -2))) 1) (/ b b))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 7,
      "simplification_time": 0.0010661310000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001008092)",
      "output_term": "(* (+ 1 a) (+ a (+ b -2)))",
      "output_weight_simple": 8,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.001017046
    },
    "speedup": 1.0482623204850126,
    "weight_simple_diff": 8,
    "weight_complex_diff": 24,
    "depth_diff": 3
  },
  {
    "base_term": "(- (- (- (pow (* (- (/ (/ (* -1 a) a) (- a a)) (/ c a)) (pow (* c b) 0)) 1) (- a (pow c (* 1 1)))) (- (- (- (/ 0 1) d) (pow -1 1)) (/ 1 1))) (/ (+ (pow (/ 1 -1) a) (/ 0 a)) (pow a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001016957)",
      "output_term": "(- (+ (- (- (/ (/ (* -1 a) a) 0) (/ c a)) (- a c)) d) (/ (+ (pow -1 a) (/ 0 a)) 1))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.001082842
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005306)",
      "output_term": "(- (/ -1 0) (+ (/ c a) (+ (pow -1 a) (+ (/ 0 a) (- a (+ d c))))))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.001032686
    },
    "speedup": 1.0485684903252295,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (/ (* (- (/ a (+ (pow (- a b) -1) (pow 0 1))) (pow (pow a b) 1)) (+ (/ 1 0) b)) (/ (- (* 0 1) b) (pow b d))) (+ (- 0 (* b -1)) (/ 0 d))) (pow (- (/ (+ 0 e) 1) (* d 0)) (- e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006454)",
      "output_term": "(+ (* (/ (* (- (/ a (pow (- a b) -1)) (pow a b)) (+ b (/ 1 0))) (/ (- 0 b) (pow b d))) (+ b (/ 0 d))) (pow (/ e 1) e))",
      "output_weight_simple": 25,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.001059157
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002131)",
      "output_term": "(+ (* (/ (* (- (/ a (/ 1 (- a b))) (pow a b)) (+ b (/ 1 0))) (/ (- 0 b) (pow b d))) (+ b (/ 0 d))) (pow e e))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.0010092209999999998
    },
    "speedup": 1.0494797472506023,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (pow (+ 0 (/ (* (/ (pow (/ a a) -1) (- 1 a)) (pow a a)) (* a (- a b)))) (/ (* (+ 0 1) -1) b)) (* (* (pow 0 (* 1 1)) (- -1 c)) (* b e))) (+ (- (+ (/ a 0) 0) (- 1 a)) (- a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001027713)",
      "output_term": "(+ a (+ -1 (+ (/ a 0) (+ a 1))))",
      "output_weight_simple": 9,
      "output_weight_complex": 14,
      "output_depth": 5,
      "simplification_time": 0.0010589319999999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000284)",
      "output_term": "(+ a (- (/ a 0) (- 0 a)))",
      "output_weight_simple": 6,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.001008545
    },
    "speedup": 1.049960091022215,
    "weight_simple_diff": 3,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (* (+ (+ (- (* (* (+ a b) c) (/ 0 b)) b) a) (/ (pow (* 1 -1) b) (- 1 e))) (- (* (+ b e) a) (+ d a))) (/ (+ (pow 0 -1) 0) (* b 1))) (/ (+ (+ c (+ e c)) (* d 1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001007159)",
      "output_term": "(/ (pow (* (+ a (+ (- (* (+ a b) (* c (/ 0 b))) b) (/ (pow -1 b) (- 1 e)))) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (/ (+ (+ e d) (+ c c)) 1))",
      "output_weight_simple": 31,
      "output_weight_complex": 69,
      "output_depth": 10,
      "simplification_time": 0.001084514
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001021781)",
      "output_term": "(/ (pow (* (+ (- (/ 0 b) b) (+ a (/ (pow -1 b) (- 1 e)))) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (+ c (+ c (+ e d))))",
      "output_weight_simple": 27,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.001032903
    },
    "speedup": 1.0499669378441152,
    "weight_simple_diff": 4,
    "weight_complex_diff": 10,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (/ (+ (+ (- (- (/ (* a (pow a 1)) (* -1 0)) a) 0) (pow (* a (* b a)) (* 1 -1))) (* (+ (pow a 1) a) (+ -1 b))) (* (- (* 0 c) 0) (* a a))) (pow (+ (* 0 (/ 1 d)) (/ c 1)) (+ c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001017472)",
      "output_term": "(+ (/ (+ (- (/ (* a a) 0) a) (+ (pow (* b (* a a)) -1) (* a (* (+ -1 b) 2)))) 0) (pow (/ c 1) (+ 1 c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.001057298
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000956)",
      "output_term": "(+ (/ (+ (- (/ (* a a) 0) a) (+ (/ 1 (* b (* a a))) (* a (+ b (+ b -2))))) 0) (pow c (+ 1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.001006517
    },
    "speedup": 1.050452202993094,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (pow (/ (pow (* -1 (+ (+ -1 (pow a 1)) (+ a a))) b) (+ 1 (* (+ 0 a) -1))) (pow (pow 1 (pow a b)) c)) (+ (- (pow b (pow -1 a)) (* 0 1)) (+ a 0))) (- (- (+ (* c c) d) (- 0 d)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001023458)",
      "output_term": "(* (- (pow (/ (pow (+ 1 (* a -3)) b) (+ 1 (* -1 a))) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ 1 (+ (* c c) (+ d d))))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.001059089
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000643)",
      "output_term": "(* (- (pow (/ (pow (- 1 (* a 3)) b) (- 1 a)) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ (* c c) (+ 1 (+ d d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.001008155
    },
    "speedup": 1.0505219931458953,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (- (pow (/ (* (- (- 0 1) -1) -1) (+ a b)) (+ 1 (- a -1))) (/ (pow c d) 1)) (pow (pow (/ d -1) -1) (pow -1 0))) (* (- (+ c e) 1) (- 0 d))) (* (pow (pow (- c a) c) (pow 0 1)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000532)",
      "output_term": "(pow (+ (- (pow (/ 0 (+ a b)) (+ a 2)) (/ (pow c d) 1)) (+ (pow (/ d -1) -1) (+ (* (+ c e) (- 0 d)) d))) (* -1 c))",
      "output_weight_simple": 26,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.001053932
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000657)",
      "output_term": "(pow (- (+ (- (pow (/ 0 (+ a b)) (+ a 2)) (pow c d)) (/ 1 (/ d -1))) (* d (- (+ c e) 1))) (- 0 c))",
      "output_weight_simple": 24,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.0010030400000000002
    },
    "speedup": 1.050737757218057,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (* (* (- (* (+ (* (- (+ -1 a) a) (pow a 1)) (- -1 b)) (/ (pow a 0) d)) (pow (* b e) a)) (- (* (+ c 1) d) (* -1 a))) (- (* (/ 1 0) 1) (* a d))) (* (+ (+ 0 -1) (pow 1 a)) (pow 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001001561)",
      "output_term": "(pow (* (- (* (+ (* a (- (+ -1 a) a)) (- -1 b)) (/ 1 d)) (pow (* b e) a)) (* (+ a (+ d (* d c))) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.0010651039999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002561)",
      "output_term": "(pow (* (- (/ (- -1 (+ a b)) d) (pow (* b e) a)) (* (+ a (* d (+ 1 c))) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.0010132070000000001
    },
    "speedup": 1.0512205304542899,
    "weight_simple_diff": 4,
    "weight_complex_diff": 6,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (pow (- (- (- (- (* (* (/ a a) b) (pow a 0)) (/ 1 b)) (pow (/ d b) c)) (+ (/ a a) 1)) (- (pow c (pow 0 1)) (/ -1 a))) (/ (pow (- -1 -1) 0) e)) (- (- (pow -1 (+ b 0)) (/ e 1)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009162)",
      "output_term": "(+ (pow (+ (- (- (- (* (/ a a) b) (/ 1 b)) (pow (/ d b) c)) (+ (/ a a) 1)) (+ -1 (/ -1 a))) (/ (pow 0 0) e)) (+ a (- (pow -1 b) (/ e 1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 70,
      "output_depth": 9,
      "simplification_time": 0.00106134
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003944)",
      "output_term": "(+ (pow (- b (+ (/ 1 b) (+ (pow (/ d b) c) (- 3 (/ -1 a))))) (/ (pow 0 0) e)) (- (pow -1 b) (- e a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.001009577
    },
    "speedup": 1.0512719683590257,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (+ (* (/ (/ (* (- (* a a) c) (* -1 1)) (- -1 c)) (+ (/ b 1) e)) (pow (- b c) b)) (* (- (+ -1 e) 0) (- b -1))) (* (- (- c a) -1) (pow -1 1))) (+ (/ 1 (+ (* -1 b) b)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001031617)",
      "output_term": "(+ (* (+ (* (/ (/ (+ c (* (* a a) -1)) (- -1 c)) (+ (/ b 1) e)) (pow (- b c) b)) (* (+ -1 e) (+ 1 b))) (+ (- -1 c) a)) (/ 1 0))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 10,
      "simplification_time": 0.0010606209999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100172)",
      "output_term": "(+ (* (+ (* (/ (/ (- c (* a a)) (+ b e)) (- -1 c)) (pow (- b c) b)) (* (- e 1) (+ 1 b))) (- a (+ c 1))) (/ 1 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 48,
      "output_depth": 9,
      "simplification_time": 0.001008744
    },
    "speedup": 1.0514273195181334,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (/ (+ (+ (/ (+ (* (/ a 0) a) (* 1 a)) (- -1 b)) (- (- b b) 0)) d) (/ e (- (/ c e) d))) (+ (- (* (* 0 d) d) (/ 1 a)) (+ b 0))) (- (* (pow (pow e b) 0) (/ e -1)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100949)",
      "output_term": "(+ (/ (+ (/ (* a (+ (/ a 0) 1)) (- -1 b)) d) (/ e (- (/ c e) d))) (+ (/ 1 a) (* -1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.001058526
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000338)",
      "output_term": "(- (/ (+ (/ (+ a (* a (/ a 0))) (- -1 b)) d) (/ e (- (/ c e) d))) (- b (/ 1 a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.001006229
    },
    "speedup": 1.0519732585723527,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (pow (+ 0 (/ (* (/ (pow (/ a a) -1) (- 1 a)) (pow a a)) (* a (- a b)))) (/ (* (+ 0 1) -1) b)) (* (* (pow 0 (* 1 1)) (- -1 c)) (* b e))) (+ (- (+ (/ a 0) 0) (- 1 a)) (- a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001033752)",
      "output_term": "(+ a (+ -1 (+ (/ a 0) (+ a 1))))",
      "output_weight_simple": 9,
      "output_weight_complex": 14,
      "output_depth": 5,
      "simplification_time": 0.001065995
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004624)",
      "output_term": "(+ a (- (/ a 0) (- 0 a)))",
      "output_weight_simple": 6,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.001013257
    },
    "speedup": 1.052047999668396,
    "weight_simple_diff": 3,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (/ (- (* (+ (* (- (- (- 1 a) a) (- 1 -1)) (pow -1 b)) (pow (pow 0 1) -1)) (/ (+ b b) 1)) (* (- c (* 1 0)) (* a a))) (* (pow (pow b e) 1) (* 0 1))) (+ (* (* (- a b) a) (- d 1)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001034613)",
      "output_term": "(/ (/ (- (* (+ (* (+ (+ 1 (* a -2)) -2) (pow -1 b)) (pow 0 -1)) (/ (+ b b) 1)) (* a (* a c))) 0) (+ b (* a (* (- a b) (+ -1 d)))))",
      "output_weight_simple": 28,
      "output_weight_complex": 57,
      "output_depth": 10,
      "simplification_time": 0.00105861
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000592)",
      "output_term": "(/ (/ (- (* (+ (* (- 1 (+ a (+ a 2))) (pow -1 b)) (pow 0 -1)) (+ b b)) (* a (* a c))) 0) (+ b (* (- a b) (* a (- d 1)))))",
      "output_weight_simple": 27,
      "output_weight_complex": 51,
      "output_depth": 10,
      "simplification_time": 0.001005831
    },
    "speedup": 1.0524730297634493,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (- (* a (+ (/ (+ (pow -1 -1) 1) (+ a 0)) 1)) (/ (+ 0 (/ -1 1)) (/ b b))) (+ (* 1 (pow b c)) (pow b 0))) (pow (* (* -1 -1) -1) (- b c))) (+ (+ (* (+ -1 a) a) (* a c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00105604)",
      "output_term": "(- (+ (- (- (+ a (* a (/ (+ (pow -1 -1) 1) a))) (/ -1 (/ b b))) (+ 1 (pow b c))) (pow -1 (- b c))) (+ -1 (+ (* a (+ a (+ -1 c))) d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 53,
      "output_depth": 10,
      "simplification_time": 0.001089168
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001014932)",
      "output_term": "(- (+ (- (* a (+ 1 (/ 0 a))) (pow b c)) (pow -1 (- b c))) (+ (* a (+ a (+ -1 c))) (- d 1)))",
      "output_weight_simple": 21,
      "output_weight_complex": 37,
      "output_depth": 7,
      "simplification_time": 0.001034656
    },
    "speedup": 1.0526861101660843,
    "weight_simple_diff": 5,
    "weight_complex_diff": 16,
    "depth_diff": 3
  },
  {
    "base_term": "(+ (/ (pow (- (pow 1 (pow -1 a)) (+ (- (+ (* a 1) 0) (* b c)) (* -1 c))) (pow (- (/ b d) 1) (/ c 1))) (/ (* (pow (/ -1 e) b) (* 1 1)) (- b 1))) (+ (pow (* (* -1 d) e) (* b e)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003459)",
      "output_term": "(+ (/ (pow (+ (pow 1 (pow -1 a)) (+ (* -1 a) (+ c (* b c)))) (pow (+ -1 (/ b d)) (/ c 1))) (/ (pow (/ -1 e) b) (+ -1 b))) (+ -1 (pow (* -1 (* d e)) (* b e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 78,
      "output_depth": 8,
      "simplification_time": 0.0010118570000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ -1 (+ (/ (pow (- (pow 1 (pow -1 a)) (- (- a c) (* b c))) (pow (- (/ b d) 1) c)) (/ (pow (/ -1 e) b) (- b 1))) (pow (- 0 (* d e)) (* b e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.00096108
    },
    "speedup": 1.052833270903567,
    "weight_simple_diff": 1,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (/ (pow (pow (/ (/ (/ (pow a 1) b) (/ 0 b)) (+ c c)) (/ -1 (+ -1 b))) (/ 0 (pow e c))) (+ 0 (/ d (pow e 1)))) (+ (- (+ b e) d) (* 1 e))) (/ (* (pow 1 (pow c -1)) (pow c 0)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001036479)",
      "output_term": "(pow (- (/ (pow (pow (/ (/ (/ a b) (/ 0 b)) (+ c c)) (/ -1 (+ b -1))) (/ 0 (pow e c))) (/ d e)) (+ e (- (+ b e) d))) (/ (pow 1 (pow c -1)) (* a -1)))",
      "output_weight_simple": 30,
      "output_weight_complex": 90,
      "output_depth": 9,
      "simplification_time": 0.001063208
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001001997)",
      "output_term": "(pow (- (/ (pow (pow (/ (/ (/ a b) (/ 0 b)) (+ c c)) (/ -1 (+ b -1))) (/ 0 (pow e c))) (/ d e)) (+ e (- (+ b e) d))) (/ (pow 1 (/ 1 c)) (- 0 a)))",
      "output_weight_simple": 30,
      "output_weight_complex": 90,
      "output_depth": 9,
      "simplification_time": 0.001009536
    },
    "speedup": 1.0531650183846837,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (* (+ (+ (- (- 0 (/ (* a b) b)) (pow a b)) -1) (* (/ 0 (* -1 d)) (* -1 a))) (* (+ (/ a a) d) (- -1 e))) (- (+ (- -1 b) 0) (- -1 a))) (* (* (+ (* c d) 1) (/ -1 c)) (+ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00104445)",
      "output_term": "(* (- (* (+ (* -1 (+ (/ (* a b) b) (pow a b))) (+ -1 (* a (* -1 (/ 0 (* -1 d)))))) (* (+ d (/ a a)) (- -1 e))) (+ (- -1 b) (+ a 1))) (* (+ (* d c) 1) (* (/ -1 c) (+ -1 e))))",
      "output_weight_simple": 35,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.001095575
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001021664)",
      "output_term": "(* (- (* (+ (- (- -1 a) (pow a b)) (/ 0 (- 0 d))) (* (+ d 1) (- -1 e))) (- -1 (+ b (- -1 a)))) (* (/ (- -1 (* d c)) c) (+ -1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001040199
    },
    "speedup": 1.0532359673485556,
    "weight_simple_diff": 8,
    "weight_complex_diff": 22,
    "depth_diff": 3
  },
  {
    "base_term": "(* (+ (- (pow (* (* a (/ (/ (- a b) b) (pow 1 a))) (pow (* a -1) -1)) (pow (+ b b) b)) (pow (+ (pow c -1) a) (/ 0 c))) (+ (* (pow 1 0) e) (* c 0))) (- (/ (pow 0 (pow -1 0)) (pow d d)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001033459)",
      "output_term": "(* (+ (- (pow (* a (* (/ (/ (- a b) b) (pow 1 a)) (pow (* a -1) -1))) (pow (+ b b) b)) (pow (+ a (pow c -1)) (/ 0 c))) e) (- (/ 0 (pow d d)) (- e b)))",
      "output_weight_simple": 30,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.00107966
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009667)",
      "output_term": "(* (+ (- (pow (/ (/ (/ (* a (- a b)) (pow 1 a)) (- 0 a)) b) (pow (+ b b) b)) (pow (+ a (/ 1 c)) (/ 0 c))) e) (- (/ 0 (pow d d)) (- e b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.0010248330000000002
    },
    "speedup": 1.0534984724340453,
    "weight_simple_diff": 2,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (pow (- (pow 1 (pow -1 a)) (+ (- (+ (* a 1) 0) (* b c)) (* -1 c))) (pow (- (/ b d) 1) (/ c 1))) (/ (* (pow (/ -1 e) b) (* 1 1)) (- b 1))) (+ (pow (* (* -1 d) e) (* b e)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005076)",
      "output_term": "(+ (/ (pow (+ (pow 1 (pow -1 a)) (+ (* -1 a) (+ c (* b c)))) (pow (+ -1 (/ b d)) (/ c 1))) (/ (pow (/ -1 e) b) (+ -1 b))) (+ -1 (pow (* -1 (* d e)) (* b e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 78,
      "output_depth": 8,
      "simplification_time": 0.001015127
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ -1 (+ (/ (pow (- (pow 1 (pow -1 a)) (- (- a c) (* b c))) (pow (- (/ b d) 1) c)) (/ (pow (/ -1 e) b) (- b 1))) (pow (- 0 (* d e)) (* b e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.0009635749999999999
    },
    "speedup": 1.0535007653789275,
    "weight_simple_diff": 1,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (- (- (- (- (* (* (/ a a) b) (pow a 0)) (/ 1 b)) (pow (/ d b) c)) (+ (/ a a) 1)) (- (pow c (pow 0 1)) (/ -1 a))) (/ (pow (- -1 -1) 0) e)) (- (- (pow -1 (+ b 0)) (/ e 1)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001011049)",
      "output_term": "(+ (pow (+ (- (- (- (* (/ a a) b) (/ 1 b)) (pow (/ d b) c)) (+ (/ a a) 1)) (+ -1 (/ -1 a))) (/ (pow 0 0) e)) (+ a (- (pow -1 b) (/ e 1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 70,
      "output_depth": 9,
      "simplification_time": 0.001063834
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003813)",
      "output_term": "(+ (pow (- b (+ (/ 1 b) (+ (pow (/ d b) c) (- 3 (/ -1 a))))) (/ (pow 0 0) e)) (- (pow -1 b) (- e a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.001009426
    },
    "speedup": 1.0538999391733521,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (/ (- (+ (pow (- 0 (+ (+ -1 a) a)) (+ b -1)) (+ 0 a)) (+ (- 0 b) 0)) (- (* (/ 1 a) 0) 0)) (* (- (+ b (pow 1 1)) (* -1 c)) (pow d 1))) (- (* (pow b (* b -1)) (pow a 1)) (- -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00102793)",
      "output_term": "(- (* (/ (+ a (+ b (pow (+ 1 (* -1 (+ a a))) (+ -1 b)))) 0) (* (+ 1 (+ b c)) d)) (+ c (+ 1 (* a (pow b (- 0 b))))))",
      "output_weight_simple": 25,
      "output_weight_complex": 43,
      "output_depth": 10,
      "simplification_time": 0.001062557
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000813)",
      "output_term": "(- (* (/ (+ b (+ a (pow (- 1 (+ a a)) (+ -1 b)))) 0) (* (+ (+ b 1) c) d)) (+ 1 (+ (* a (pow b (- 0 b))) c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 41,
      "output_depth": 9,
      "simplification_time": 0.001007932
    },
    "speedup": 1.0541951242742567,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (- (- (* a (+ (/ (+ (pow -1 -1) 1) (+ a 0)) 1)) (/ (+ 0 (/ -1 1)) (/ b b))) (+ (* 1 (pow b c)) (pow b 0))) (pow (* (* -1 -1) -1) (- b c))) (+ (+ (* (+ -1 a) a) (* a c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001046663)",
      "output_term": "(- (+ (- (- (+ a (* a (/ (+ (pow -1 -1) 1) a))) (/ -1 (/ b b))) (+ 1 (pow b c))) (pow -1 (- b c))) (+ -1 (+ (* a (+ a (+ -1 c))) d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 53,
      "output_depth": 10,
      "simplification_time": 0.001079518
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003353)",
      "output_term": "(- (+ (- (* a (+ 1 (/ 0 a))) (pow b c)) (pow -1 (- b c))) (+ (* a (+ a (+ -1 c))) (- d 1)))",
      "output_weight_simple": 21,
      "output_weight_complex": 37,
      "output_depth": 7,
      "simplification_time": 0.0010231440000000001
    },
    "speedup": 1.0550987935227103,
    "weight_simple_diff": 5,
    "weight_complex_diff": 16,
    "depth_diff": 3
  },
  {
    "base_term": "(* (* (/ (/ (/ (+ (/ (pow (- a 0) a) (/ a a)) (pow a 1)) (pow (/ 0 0) b)) (pow -1 (+ -1 a))) (/ (* (pow -1 -1) d) (* b 1))) (+ (+ (- -1 c) 1) (pow c -1))) (/ a (/ (pow (/ 0 b) 1) (- 0 d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00103554)",
      "output_term": "(* (/ (/ (/ (+ a (/ (pow a a) (/ a a))) (pow (/ 0 0) b)) (pow -1 (+ a -1))) (/ (* (pow -1 -1) d) b)) (* (+ (* -1 c) (pow c -1)) (/ a (/ (/ 0 b) (- 0 d)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 92,
      "output_depth": 8,
      "simplification_time": 0.0010724430000000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003944)",
      "output_term": "(* (/ (/ (/ (+ a (pow a a)) (pow -1 (- a 1))) (pow (/ 0 0) b)) (/ (- 0 d) b)) (/ (* a (- (/ 1 c) c)) (/ (/ 0 b) (- 0 d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 76,
      "output_depth": 7,
      "simplification_time": 0.001016254
    },
    "speedup": 1.0552903112804477,
    "weight_simple_diff": 4,
    "weight_complex_diff": 16,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (+ (* (/ (/ (* (- (* a a) c) (* -1 1)) (- -1 c)) (+ (/ b 1) e)) (pow (- b c) b)) (* (- (+ -1 e) 0) (- b -1))) (* (- (- c a) -1) (pow -1 1))) (+ (/ 1 (+ (* -1 b) b)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001034209)",
      "output_term": "(+ (* (+ (* (/ (/ (+ c (* (* a a) -1)) (- -1 c)) (+ (/ b 1) e)) (pow (- b c) b)) (* (+ -1 e) (+ 1 b))) (+ (- -1 c) a)) (/ 1 0))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 10,
      "simplification_time": 0.001063153
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000252)",
      "output_term": "(+ (* (+ (* (/ (/ (- c (* a a)) (+ b e)) (- -1 c)) (pow (- b c) b)) (* (- e 1) (+ 1 b))) (- a (+ c 1))) (/ 1 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 48,
      "output_depth": 9,
      "simplification_time": 0.001007142
    },
    "speedup": 1.0556138061961473,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (/ (pow (pow (/ (/ (/ (pow a 1) b) (/ 0 b)) (+ c c)) (/ -1 (+ -1 b))) (/ 0 (pow e c))) (+ 0 (/ d (pow e 1)))) (+ (- (+ b e) d) (* 1 e))) (/ (* (pow 1 (pow c -1)) (pow c 0)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001037821)",
      "output_term": "(pow (- (/ (pow (pow (/ (/ (/ a b) (/ 0 b)) (+ c c)) (/ -1 (+ b -1))) (/ 0 (pow e c))) (/ d e)) (+ e (- (+ b e) d))) (/ (pow 1 (pow c -1)) (* a -1)))",
      "output_weight_simple": 30,
      "output_weight_complex": 90,
      "output_depth": 9,
      "simplification_time": 0.001065346
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001001352)",
      "output_term": "(pow (- (/ (pow (pow (/ (/ (/ a b) (/ 0 b)) (+ c c)) (/ -1 (+ b -1))) (/ 0 (pow e c))) (/ d e)) (+ e (- (+ b e) d))) (/ (pow 1 (/ 1 c)) (- 0 a)))",
      "output_weight_simple": 30,
      "output_weight_complex": 90,
      "output_depth": 9,
      "simplification_time": 0.0010092159999999998
    },
    "speedup": 1.0556174297672651,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (* (* (- (+ (+ (* 1 a) a) (* a 1)) (/ 0 a)) (- c (/ d b))) (* (* d -1) d)) (/ (- (- -1 1) c) (* a d))) (/ (- (- a b) d) 1)) (- (- (* (pow 0 b) 1) (+ 1 e)) (+ c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000231)",
      "output_term": "(pow (+ (/ (* (- (* a 3) (/ 0 a)) (* (- c (/ d b)) (* -1 (* d d)))) (/ (- -2 c) (* a d))) (/ (- (- a b) d) 1)) (+ (- (pow 0 b) (+ 1 e)) (* c -2)))",
      "output_weight_simple": 33,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001077191
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000161)",
      "output_term": "(pow (+ (/ (* (- (* a 3) (/ 0 a)) (* d (* (- c (/ d b)) (- 0 d)))) (/ (- -2 c) (* a d))) (- a (+ d b))) (- (pow 0 b) (+ e (+ 1 (+ c c)))))",
      "output_weight_simple": 31,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001020137
    },
    "speedup": 1.0559277822488549,
    "weight_simple_diff": 2,
    "weight_complex_diff": 8,
    "depth_diff": -1
  },
  {
    "base_term": "(* (/ (pow (pow (* (/ a (- (* (pow a b) 1) (pow b 1))) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow (pow (pow 1 -1) 0) (- d c))) (/ (* (pow c -1) 1) (- a 0))) (pow (+ (+ (* e b) b) (+ a c)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001003188)",
      "output_term": "(/ (pow (pow (* (/ a (- (pow a b) b)) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (pow c -1) a))",
      "output_weight_simple": 22,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.00101361
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (* (/ a (- (pow a b) b)) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (/ 1 c) a))",
      "output_weight_simple": 21,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.00095991
    },
    "speedup": 1.0559427446323093,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 (/ 0 -1))) (- (+ (+ d c) 0) (+ a 1))) (- (- (* -1 (+ d -1)) (pow d 1)) (+ -1 -1))) (* (- (+ (- 1 b) 0) (- e 0)) (* d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001037277)",
      "output_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 0)) (- (+ c d) (+ a 1))) (+ (+ 2 (* d -2)) 1)) (* d (* d (- (- 1 b) e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.001067905
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000784)",
      "output_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 0)) (- (+ c d) (+ a 1))) (- (- 1 (+ d d)) -2)) (* d (* d (- 1 (+ b e)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.001009648
    },
    "speedup": 1.057700307433878,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (pow (* -1 (pow (- (/ (pow (* 1 a) 1) (/ 0 a)) a) (pow (* -1 1) 0))) (pow (+ (- 0 a) b) (/ 0 0))) (+ (+ (* -1 (- 1 b)) (pow c b)) (* 1 1))) (* (/ (* 1 (pow -1 a)) (* -1 1)) (+ c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00104207)",
      "output_term": "(- (+ b (+ (pow (+ a (* -1 (/ a (/ 0 a)))) (pow (+ (- 0 a) b) (/ 0 0))) (pow c b))) (* (/ (pow -1 a) -1) (+ -1 c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.001078758
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003626)",
      "output_term": "(- (+ (pow (- a (/ a (/ 0 a))) (pow (- b a) (/ 0 0))) (+ b (pow c b))) (* (/ (pow -1 a) -1) (+ -1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.001019449
    },
    "speedup": 1.0581775056918001,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (+ (/ (* a (/ (* (* (pow (pow 1 b) -1) 1) (/ 0 a)) (+ (- c b) -1))) (* (pow d (+ 1 a)) (- e b))) (* (+ (- (+ -1 d) -1) (* -1 b)) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001057221)",
      "output_term": "(pow (+ (/ (* a (/ (* (pow (pow 1 b) -1) (/ 0 a)) (+ -1 (- c b)))) (* (pow d (+ a 1)) (- e b))) (* (+ d (* b -1)) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* -1 c)))",
      "output_weight_simple": 33,
      "output_weight_complex": 83,
      "output_depth": 9,
      "simplification_time": 0.0011162210000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001023488)",
      "output_term": "(pow (+ (/ (/ (/ 0 a) (- (+ -1 c) b)) (* (pow d (+ a 1)) (- e b))) (* (- d b) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* -1 c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 69,
      "output_depth": 7,
      "simplification_time": 0.001054671
    },
    "speedup": 1.0583594315194027,
    "weight_simple_diff": 5,
    "weight_complex_diff": 14,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (* (- (- (+ (- (+ (pow (* a a) b) (* b a)) (+ c -1)) (+ b (pow c -1))) (* -1 (/ a d))) (+ (- (- a d) -1) (- b 1))) (- (pow (pow -1 -1) 0) (+ e c))) (- (- a (* (pow e a) c)) (* 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001016502)",
      "output_term": "(+ (* (- (+ (- (+ (pow (* a a) b) (* a b)) (+ c -1)) (+ (+ b (pow c -1)) (/ a d))) (+ (- a d) (+ 1 (+ b -1)))) (- 1 (+ c e))) (- (- a (* c (pow e a))) b))",
      "output_weight_simple": 31,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.0010854579999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000681)",
      "output_term": "(+ (* (- (+ b (- (+ (pow (* a a) b) (+ (* a b) (/ 1 c))) (+ c -1))) (- (+ b (- a d)) (/ a d))) (- 1 (+ c e))) (- a (+ b (* c (pow e a)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.0010241030000000002
    },
    "speedup": 1.0599109659868193,
    "weight_simple_diff": 2,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (- (+ (/ (+ -1 (pow (pow (pow a b) -1) (+ -1 b))) (pow (pow 1 -1) b)) (* (/ a 0) -1)) (- (- (+ 0 b) 1) (pow b c))) (/ (/ (* a d) -1) (* -1 1))) (pow (- (/ b (/ -1 a)) (pow e -1)) (/ e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001021616)",
      "output_term": "(* (- (+ (/ (+ -1 (pow (pow (pow a b) -1) (+ -1 b))) (pow (pow 1 -1) b)) (* -1 (+ (/ a 0) (- (+ -1 b) (pow b c))))) (/ (/ (* a d) -1) -1)) (pow (- (/ b (/ -1 a)) (pow e -1)) (/ e e)))",
      "output_weight_simple": 33,
      "output_weight_complex": 93,
      "output_depth": 9,
      "simplification_time": 0.0010708999999999998
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000132)",
      "output_term": "(* (- (/ (+ -1 (pow (/ 1 (pow a b)) (+ -1 b))) (pow 1 b)) (+ (/ a 0) (+ (- b (+ 1 (pow b c))) (/ (/ (* a d) -1) -1)))) (- (/ b (/ -1 a)) (/ 1 e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.001010071
    },
    "speedup": 1.0602224992104514,
    "weight_simple_diff": 3,
    "weight_complex_diff": 12,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (- (- (- (- (* (* (/ a a) b) (pow a 0)) (/ 1 b)) (pow (/ d b) c)) (+ (/ a a) 1)) (- (pow c (pow 0 1)) (/ -1 a))) (/ (pow (- -1 -1) 0) e)) (- (- (pow -1 (+ b 0)) (/ e 1)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001036495)",
      "output_term": "(+ (pow (+ (- (- (- (* (/ a a) b) (/ 1 b)) (pow (/ d b) c)) (+ (/ a a) 1)) (+ -1 (/ -1 a))) (/ (pow 0 0) e)) (+ a (- (pow -1 b) (/ e 1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 70,
      "output_depth": 9,
      "simplification_time": 0.00106865
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002212)",
      "output_term": "(+ (pow (- b (+ (/ 1 b) (+ (pow (/ d b) c) (- 3 (/ -1 a))))) (/ (pow 0 0) e)) (- (pow -1 b) (- e a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.0010065590000000002
    },
    "speedup": 1.061686398909552,
    "weight_simple_diff": 4,
    "weight_complex_diff": 13,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (- (+ a (+ (- 1 (/ (+ (* a 0) a) (* 0 b))) (- a (+ a -1)))) (- (* (pow 1 0) a) (pow 1 e))) (pow (pow (- (/ e 1) a) (pow 1 b)) (pow 0 -1))) (* (* (+ (pow d -1) e) (- -1 -1)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001047)",
      "output_term": "(- (+ (+ (* (/ a 0) -1) 2) (pow 1 e)) (pow (pow (- (/ e 1) a) (pow 1 b)) (pow 0 -1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.001084638
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002979)",
      "output_term": "(- (+ a (- 2 (/ a 0))) (+ (- a (pow 1 e)) (pow (pow (- e a) (pow 1 b)) (pow 0 -1))))",
      "output_weight_simple": 19,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.0010215600000000001
    },
    "speedup": 1.0617467402795722,
    "weight_simple_diff": 0,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (* (- (* (+ (pow a 1) 1) (* -1 a)) (pow a b)) (+ (- 0 a) a)) (+ (+ 0 0) 0)) (/ (+ (pow 0 0) 0) (pow b 1))) (* a (* (- c b) 1))) (- (- (- (- c 0) -1) (pow a -1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00104009)",
      "output_term": "(pow (- (- 0 (/ (pow 0 0) b)) (* a (- c b))) (- (- c -1) (pow a -1)))",
      "output_weight_simple": 15,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.001071995
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002731)",
      "output_term": "(pow (- (- 0 (/ (pow 0 0) b)) (* a (- c b))) (- (+ 1 c) (/ 1 a)))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.001009616
    },
    "speedup": 1.061784876626361,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (pow 1 (* (/ (* (pow (* a -1) a) (+ a 0)) (pow 1 -1)) (* (- b 0) 0))) (- (+ 1 b) (* b a))) (pow (+ (+ (/ b d) c) (/ 1 -1)) (+ 1 d))) (* (- (+ (/ -1 a) b) (+ 1 b)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001028211)",
      "output_term": "(* (+ (+ (* a b) (* -1 b)) (pow (+ (/ b d) (+ -1 c)) (+ 1 d))) (- (+ b (/ -1 a)) (+ 1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.001067481
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001907)",
      "output_term": "(* (- (pow (+ -1 (+ (/ b d) c)) (+ 1 d)) (- b (* a b))) (- (/ -1 a) 1))",
      "output_weight_simple": 17,
      "output_weight_complex": 34,
      "output_depth": 7,
      "simplification_time": 0.001004629
    },
    "speedup": 1.0625623986566184,
    "weight_simple_diff": 3,
    "weight_complex_diff": 4,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 (/ 0 -1))) (- (+ (+ d c) 0) (+ a 1))) (- (- (* -1 (+ d -1)) (pow d 1)) (+ -1 -1))) (* (- (+ (- 1 b) 0) (- e 0)) (* d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001044)",
      "output_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 0)) (- (+ c d) (+ a 1))) (+ (+ 2 (* d -2)) 1)) (* d (* d (- (- 1 b) e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.001073915
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000644)",
      "output_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 0)) (- (+ c d) (+ a 1))) (- (- 1 (+ d d)) -2)) (* d (* d (- 1 (+ b e)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.001009395
    },
    "speedup": 1.0639194765181124,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (- (- (+ (- (+ (pow (* a a) b) (* b a)) (+ c -1)) (+ b (pow c -1))) (* -1 (/ a d))) (+ (- (- a d) -1) (- b 1))) (- (pow (pow -1 -1) 0) (+ e c))) (- (- a (* (pow e a) c)) (* 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00102096)",
      "output_term": "(+ (* (- (+ (- (+ (pow (* a a) b) (* a b)) (+ c -1)) (+ (+ b (pow c -1)) (/ a d))) (+ (- a d) (+ 1 (+ b -1)))) (- 1 (+ c e))) (- (- a (* c (pow e a))) b))",
      "output_weight_simple": 31,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.001090507
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002346)",
      "output_term": "(+ (* (- (+ b (- (+ (pow (* a a) b) (+ (* a b) (/ 1 c))) (+ c -1))) (- (+ b (- a d)) (/ a d))) (- 1 (+ c e))) (- a (+ b (* c (pow e a)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.0010249880000000001
    },
    "speedup": 1.0639217239616463,
    "weight_simple_diff": 2,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (* (- (* (+ (pow a 1) 1) (* -1 a)) (pow a b)) (+ (- 0 a) a)) (+ (+ 0 0) 0)) (/ (+ (pow 0 0) 0) (pow b 1))) (* a (* (- c b) 1))) (- (- (- (- c 0) -1) (pow a -1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001044)",
      "output_term": "(pow (- (- 0 (/ (pow 0 0) b)) (* a (- c b))) (- (- c -1) (pow a -1)))",
      "output_weight_simple": 15,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.001075913
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002661)",
      "output_term": "(pow (- (- 0 (/ (pow 0 0) b)) (* a (- c b))) (- (+ 1 c) (/ 1 a)))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.001009413
    },
    "speedup": 1.0658798727577314,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (* (/ (/ (* (- (* a a) c) (* -1 1)) (- -1 c)) (+ (/ b 1) e)) (pow (- b c) b)) (* (- (+ -1 e) 0) (- b -1))) (* (- (- c a) -1) (pow -1 1))) (+ (/ 1 (+ (* -1 b) b)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001039923)",
      "output_term": "(+ (* (+ (* (/ (/ (+ c (* (* a a) -1)) (- -1 c)) (+ (/ b 1) e)) (pow (- b c) b)) (* (+ -1 e) (+ 1 b))) (+ (- -1 c) a)) (/ 1 0))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 10,
      "simplification_time": 0.001073624
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000248)",
      "output_term": "(+ (* (+ (* (/ (/ (- c (* a a)) (+ b e)) (- -1 c)) (pow (- b c) b)) (* (- e 1) (+ 1 b))) (- a (+ c 1))) (/ 1 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 48,
      "output_depth": 9,
      "simplification_time": 0.001007008
    },
    "speedup": 1.0661524039530967,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (/ (pow (pow (/ (/ (/ (pow a 1) b) (/ 0 b)) (+ c c)) (/ -1 (+ -1 b))) (/ 0 (pow e c))) (+ 0 (/ d (pow e 1)))) (+ (- (+ b e) d) (* 1 e))) (/ (* (pow 1 (pow c -1)) (pow c 0)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001048011)",
      "output_term": "(pow (- (/ (pow (pow (/ (/ (/ a b) (/ 0 b)) (+ c c)) (/ -1 (+ b -1))) (/ 0 (pow e c))) (/ d e)) (+ e (- (+ b e) d))) (/ (pow 1 (pow c -1)) (* a -1)))",
      "output_weight_simple": 30,
      "output_weight_complex": 90,
      "output_depth": 9,
      "simplification_time": 0.001074775
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000396)",
      "output_term": "(pow (- (/ (pow (pow (/ (/ (/ a b) (/ 0 b)) (+ c c)) (/ -1 (+ b -1))) (/ 0 (pow e c))) (/ d e)) (+ e (- (+ b e) d))) (/ (pow 1 (/ 1 c)) (- 0 a)))",
      "output_weight_simple": 30,
      "output_weight_complex": 90,
      "output_depth": 9,
      "simplification_time": 0.001007562
    },
    "speedup": 1.0667085499453135,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (pow (* -1 (pow (- (/ (pow (* 1 a) 1) (/ 0 a)) a) (pow (* -1 1) 0))) (pow (+ (- 0 a) b) (/ 0 0))) (+ (+ (* -1 (- 1 b)) (pow c b)) (* 1 1))) (* (/ (* 1 (pow -1 a)) (* -1 1)) (+ c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001048417)",
      "output_term": "(- (+ b (+ (pow (+ a (* -1 (/ a (/ 0 a)))) (pow (+ (- 0 a) b) (/ 0 0))) (pow c b))) (* (/ (pow -1 a) -1) (+ -1 c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.001084548
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000293)",
      "output_term": "(- (+ (pow (- a (/ a (/ 0 a))) (pow (- b a) (/ 0 0))) (+ b (pow c b))) (* (/ (pow -1 a) -1) (+ -1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.001016608
    },
    "speedup": 1.0668300859328277,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (- (- (+ (- (* (/ (/ (- a a) -1) b) (pow 1 -1)) (+ (* 1 a) 0)) (* (pow -1 1) c)) (pow (- (pow c c) 0) (* 1 c))) (+ (* -1 (pow e d)) (+ c b))) (* (* (- (/ b b) -1) (+ d c)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001031385)",
      "output_term": "(/ (+ (- (+ (- (* (/ 0 b) (pow 1 -1)) a) (* -1 c)) (pow (pow c c) c)) (+ (pow e d) (* -1 (+ b c)))) (* (+ 1 (/ b b)) (* (+ c d) (pow 0 0))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.001088936
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005267)",
      "output_term": "(/ (- (- (/ 0 b) (+ c a)) (+ (pow (pow c c) c) (- (+ b c) (pow e d)))) (* 2 (* (+ c d) (pow 0 0))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.0010201580000000002
    },
    "speedup": 1.0674189684343012,
    "weight_simple_diff": 7,
    "weight_complex_diff": 17,
    "depth_diff": 2
  },
  {
    "base_term": "(* (+ (- (pow (* (* a (/ (/ (- a b) b) (pow 1 a))) (pow (* a -1) -1)) (pow (+ b b) b)) (pow (+ (pow c -1) a) (/ 0 c))) (+ (* (pow 1 0) e) (* c 0))) (- (/ (pow 0 (pow -1 0)) (pow d d)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001041695)",
      "output_term": "(* (+ (- (pow (* a (* (/ (/ (- a b) b) (pow 1 a)) (pow (* a -1) -1))) (pow (+ b b) b)) (pow (+ a (pow c -1)) (/ 0 c))) e) (- (/ 0 (pow d d)) (- e b)))",
      "output_weight_simple": 30,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.0010878630000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003849)",
      "output_term": "(* (+ (- (pow (/ (/ (/ (* a (- a b)) (pow 1 a)) (- 0 a)) b) (pow (+ b b) b)) (pow (+ a (/ 1 c)) (/ 0 c))) e) (- (/ 0 (pow d d)) (- e b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.001018677
    },
    "speedup": 1.0679175047635316,
    "weight_simple_diff": 2,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (- (pow (+ (* (* -1 (* a a)) (/ b -1)) (pow b 0)) (+ (/ 0 -1) 1)) (pow (/ a a) d)) (+ (* (- 0 1) 0) (+ -1 1))) (+ (pow b (+ 0 1)) (/ d 1))) (+ (- (/ 1 (* -1 -1)) (* 0 1)) d))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001007533)",
      "output_term": "(/ (* (- (+ (* (* a a) (* -1 (/ b -1))) 1) (pow (/ a a) d)) (+ b (/ d 1))) (+ 1 d))",
      "output_weight_simple": 18,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.001076909
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001355)",
      "output_term": "(/ (* (- (* a (* a b)) (- (pow 1 d) 1)) (+ b d)) (+ 1 d))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 6,
      "simplification_time": 0.001008179
    },
    "speedup": 1.0681724177948557,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (+ (/ (* a (/ (* (* (pow (pow 1 b) -1) 1) (/ 0 a)) (+ (- c b) -1))) (* (pow d (+ 1 a)) (- e b))) (* (+ (- (+ -1 d) -1) (* -1 b)) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00105147)",
      "output_term": "(pow (+ (/ (* a (/ (* (pow (pow 1 b) -1) (/ 0 a)) (+ -1 (- c b)))) (* (pow d (+ a 1)) (- e b))) (* (+ d (* b -1)) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* -1 c)))",
      "output_weight_simple": 33,
      "output_weight_complex": 83,
      "output_depth": 9,
      "simplification_time": 0.001110424
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001009983)",
      "output_term": "(pow (+ (/ (/ (/ 0 a) (- (+ -1 c) b)) (* (pow d (+ a 1)) (- e b))) (* (- d b) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* -1 c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 69,
      "output_depth": 7,
      "simplification_time": 0.0010390299999999998
    },
    "speedup": 1.0687121642300994,
    "weight_simple_diff": 5,
    "weight_complex_diff": 14,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (/ (/ (* (* (+ 1 (- (* -1 (+ a 0)) (- b b))) -1) (+ (/ (- b 1) -1) (* -1 b))) (* (+ (- a 1) a) (/ -1 b))) (- (- (+ -1 b) 0) (pow 1 0))) (+ (/ (- (/ 0 e) -1) (- d 0)) (pow c a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001040679)",
      "output_term": "(pow (/ (/ (* (+ -1 a) (+ (/ (+ -1 b) -1) (* -1 b))) (* (+ -1 (+ a a)) (/ -1 b))) (+ b -2)) (+ (/ (+ 1 (/ 0 e)) d) (pow c a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.001076224
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000931)",
      "output_term": "(pow (/ (/ (* (- 1 a) (- b (/ (- b 1) -1))) (/ (- 1 (+ a a)) b)) (- b 2)) (+ (/ (+ 1 (/ 0 e)) d) (pow c a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.0010068750000000002
    },
    "speedup": 1.0688754810676597,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (/ (* (* (+ 1 (- (* -1 (+ a 0)) (- b b))) -1) (+ (/ (- b 1) -1) (* -1 b))) (* (+ (- a 1) a) (/ -1 b))) (- (- (+ -1 b) 0) (pow 1 0))) (+ (/ (- (/ 0 e) -1) (- d 0)) (pow c a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001041197)",
      "output_term": "(pow (/ (/ (* (+ -1 a) (+ (/ (+ -1 b) -1) (* -1 b))) (* (+ -1 (+ a a)) (/ -1 b))) (+ b -2)) (+ (/ (+ 1 (/ 0 e)) d) (pow c a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.0010766629999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002024)",
      "output_term": "(pow (/ (/ (* (- 1 a) (- b (/ (- b 1) -1))) (/ (- 1 (+ a a)) b)) (- b 2)) (+ (/ (+ 1 (/ 0 e)) d) (pow c a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.001006541
    },
    "speedup": 1.0696663126489632,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (pow 1 (* (/ (* (pow (* a -1) a) (+ a 0)) (pow 1 -1)) (* (- b 0) 0))) (- (+ 1 b) (* b a))) (pow (+ (+ (/ b d) c) (/ 1 -1)) (+ 1 d))) (* (- (+ (/ -1 a) b) (+ 1 b)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00103469)",
      "output_term": "(* (+ (+ (* a b) (* -1 b)) (pow (+ (/ b d) (+ -1 c)) (+ 1 d))) (- (+ b (/ -1 a)) (+ 1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.00107371
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000969)",
      "output_term": "(* (- (pow (+ -1 (+ (/ b d) c)) (+ 1 d)) (- b (* a b))) (- (/ -1 a) 1))",
      "output_weight_simple": 17,
      "output_weight_complex": 34,
      "output_depth": 7,
      "simplification_time": 0.001003496
    },
    "speedup": 1.0699693870229678,
    "weight_simple_diff": 3,
    "weight_complex_diff": 4,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (- (+ a (+ (- 1 (/ (+ (* a 0) a) (* 0 b))) (- a (+ a -1)))) (- (* (pow 1 0) a) (pow 1 e))) (pow (pow (- (/ e 1) a) (pow 1 b)) (pow 0 -1))) (* (* (+ (pow d -1) e) (- -1 -1)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001055287)",
      "output_term": "(- (+ (+ (* (/ a 0) -1) 2) (pow 1 e)) (pow (pow (- (/ e 1) a) (pow 1 b)) (pow 0 -1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.001093548
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003029)",
      "output_term": "(- (+ a (- 2 (/ a 0))) (+ (- a (pow 1 e)) (pow (pow (- e a) (pow 1 b)) (pow 0 -1))))",
      "output_weight_simple": 19,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.00102126
    },
    "speedup": 1.070783150226191,
    "weight_simple_diff": 0,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (* (- (* (+ (pow a 1) 1) (* -1 a)) (pow a b)) (+ (- 0 a) a)) (+ (+ 0 0) 0)) (/ (+ (pow 0 0) 0) (pow b 1))) (* a (* (- c b) 1))) (- (- (- (- c 0) -1) (pow a -1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001050054)",
      "output_term": "(pow (- (- 0 (/ (pow 0 0) b)) (* a (- c b))) (- (- c -1) (pow a -1)))",
      "output_weight_simple": 15,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.001082103
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002927)",
      "output_term": "(pow (- (- 0 (/ (pow 0 0) b)) (* a (- c b))) (- (+ 1 c) (/ 1 a)))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.001009083
    },
    "speedup": 1.0723627293295002,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (- (+ (- (- (- -1 (/ 1 (- 0 0))) (pow 1 -1)) (* (/ 0 -1) 1)) a) (pow (pow (pow 0 1) 0) (/ 0 0))) (pow (pow (pow (- -1 1) b) (pow 1 0)) (* b -1))) (* (+ (- (- a 0) 0) (- e e)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001050832)",
      "output_term": "(pow (* (- (+ (- (- -1 (/ 1 0)) (pow 1 -1)) a) (pow 1 (/ 0 0))) (pow (pow -2 b) (* -1 b))) (* -1 (* a c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.0011146530000000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001016954)",
      "output_term": "(pow (* (- a (+ (+ (/ 1 0) 2) (pow (pow 0 0) (/ 0 0)))) (pow (pow -2 b) (- 0 b))) (- 0 (* a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001039433
    },
    "speedup": 1.0723663766688187,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (* (* (- (* (+ (* (- (+ -1 a) a) (pow a 1)) (- -1 b)) (/ (pow a 0) d)) (pow (* b e) a)) (- (* (+ c 1) d) (* -1 a))) (- (* (/ 1 0) 1) (* a d))) (* (+ (+ 0 -1) (pow 1 a)) (pow 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.0010016)",
      "output_term": "(pow (* (- (* (+ (* a (- (+ -1 a) a)) (- -1 b)) (/ 1 d)) (pow (* b e) a)) (* (+ a (+ d (* d c))) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.001082338
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001438)",
      "output_term": "(pow (* (- (/ (- -1 (+ a b)) d) (pow (* b e) a)) (* (+ a (* d (+ 1 c))) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.001009291
    },
    "speedup": 1.0723745678897363,
    "weight_simple_diff": 4,
    "weight_complex_diff": 6,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (* (* (pow (pow (* (- (+ -1 (pow a b)) (+ -1 b)) (+ a a)) (/ (* a b) 1)) (+ b (- b a))) (/ c (/ (- b a) -1))) (pow (pow (pow c 0) d) (- a c))) (- (+ (+ (/ c -1) b) (pow b 1)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.0010506)",
      "output_term": "(/ (* (pow (pow (* a (* (- (+ -1 (pow a b)) (+ -1 b)) 2)) (/ (* a b) 1)) (+ b (- b a))) (* (/ c (/ (- b a) -1)) (pow (pow 1 d) (- a c)))) (- (+ (/ c -1) (+ b b)) (* a b)))",
      "output_weight_simple": 31,
      "output_weight_complex": 75,
      "output_depth": 10,
      "simplification_time": 0.001084801
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005227)",
      "output_term": "(/ (* (pow (pow (* a (* (- (pow a b) b) 2)) (* a b)) (+ b (- b a))) (* (/ c (/ (- b a) -1)) (pow (pow 1 d) (- a c)))) (- (+ b (+ b (/ c -1))) (* a b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.00101137
    },
    "speedup": 1.072605475740827,
    "weight_simple_diff": 3,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (+ (pow (* (* 0 a) (- (* 1 (* b a)) b)) (* (- (- a 1) -1) (- c b))) (pow (/ (pow 1 1) d) 1)) (- (pow (- (/ -1 1) 0) (+ d d)) (+ e -1))) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00102669)",
      "output_term": "(* (+ (pow 0 (* a (- c b))) (/ 1 d)) (* (- (pow -1 (+ d d)) (+ -1 e)) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.001098807
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012237)",
      "output_term": "(* (+ (pow 0 (* a (- c b))) (/ 1 d)) (* (- (pow -1 (+ d d)) (+ -1 e)) (- (/ (pow 0 -1) e) (+ (/ d c) (pow a b)))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 6,
      "simplification_time": 0.0010242930000000001
    },
    "speedup": 1.072746762889134,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (/ (- (+ (pow (pow (+ (- 1 (* 1 1)) (/ 0 1)) (pow -1 a)) (+ (- a a) 0)) (* (+ a 0) 1)) (* (- (/ 0 0) a) (/ c 1))) (/ 1 (* (/ d 0) d))) (+ (+ (/ (- c 0) 1) (/ -1 e)) (+ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00105611)",
      "output_term": "(+ a (+ (/ (- (+ 1 a) (* (- (/ 0 0) a) (/ c 1))) (/ 1 (* d (/ d 0)))) (+ (/ c 1) (+ a (/ -1 e)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.001091047
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003442)",
      "output_term": "(+ a (+ (/ (- (+ 1 a) (* (- (/ 0 0) a) c)) (/ 1 (* d (/ d 0)))) (+ (/ -1 e) (+ a c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.001016977
    },
    "speedup": 1.072833505575839,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (- (pow (+ (* (* -1 (* a a)) (/ b -1)) (pow b 0)) (+ (/ 0 -1) 1)) (pow (/ a a) d)) (+ (* (- 0 1) 0) (+ -1 1))) (+ (pow b (+ 0 1)) (/ d 1))) (+ (- (/ 1 (* -1 -1)) (* 0 1)) d))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100886)",
      "output_term": "(/ (* (- (+ (* (* a a) (* -1 (/ b -1))) 1) (pow (/ a a) d)) (+ b (/ d 1))) (+ 1 d))",
      "output_weight_simple": 18,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.0010895940000000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007374)",
      "output_term": "(/ (* (- (* a (* a b)) (- (pow 1 d) 1)) (+ b d)) (+ 1 d))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 6,
      "simplification_time": 0.0010152
    },
    "speedup": 1.073280141843972,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (- (+ a (+ (- 1 (/ (+ (* a 0) a) (* 0 b))) (- a (+ a -1)))) (- (* (pow 1 0) a) (pow 1 e))) (pow (pow (- (/ e 1) a) (pow 1 b)) (pow 0 -1))) (* (* (+ (pow d -1) e) (- -1 -1)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001067269)",
      "output_term": "(- (+ (+ (* (/ a 0) -1) 2) (pow 1 e)) (pow (pow (- (/ e 1) a) (pow 1 b)) (pow 0 -1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.001105538
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001007348)",
      "output_term": "(- (+ a (- 2 (/ a 0))) (+ (- a (pow 1 e)) (pow (pow (- e a) (pow 1 b)) (pow 0 -1))))",
      "output_weight_simple": 19,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.001029965
    },
    "speedup": 1.0733743379629406,
    "weight_simple_diff": 0,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (- (+ (pow (pow (+ (- 1 (* 1 1)) (/ 0 1)) (pow -1 a)) (+ (- a a) 0)) (* (+ a 0) 1)) (* (- (/ 0 0) a) (/ c 1))) (/ 1 (* (/ d 0) d))) (+ (+ (/ (- c 0) 1) (/ -1 e)) (+ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001054186)",
      "output_term": "(+ a (+ (/ (- (+ 1 a) (* (- (/ 0 0) a) (/ c 1))) (/ 1 (* d (/ d 0)))) (+ (/ c 1) (+ a (/ -1 e)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.001088705
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000494)",
      "output_term": "(+ a (+ (/ (- (+ 1 a) (* (- (/ 0 0) a) c)) (/ 1 (* d (/ d 0)))) (+ (/ -1 e) (+ a c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.001014147
    },
    "speedup": 1.0735179416790661,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (/ (* (* (+ 1 (- (* -1 (+ a 0)) (- b b))) -1) (+ (/ (- b 1) -1) (* -1 b))) (* (+ (- a 1) a) (/ -1 b))) (- (- (+ -1 b) 0) (pow 1 0))) (+ (/ (- (/ 0 e) -1) (- d 0)) (pow c a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001044197)",
      "output_term": "(pow (/ (/ (* (+ -1 a) (+ (/ (+ -1 b) -1) (* -1 b))) (* (+ -1 (+ a a)) (/ -1 b))) (+ b -2)) (+ (/ (+ 1 (/ 0 e)) d) (pow c a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.001079838
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100066)",
      "output_term": "(pow (/ (/ (* (- 1 a) (- b (/ (- b 1) -1))) (/ (- 1 (+ a a)) b)) (- b 2)) (+ (/ (+ 1 (/ 0 e)) d) (pow c a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.001005806
    },
    "speedup": 1.0736046513940065,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (* (+ (+ (- (- 0 (/ (* a b) b)) (pow a b)) -1) (* (/ 0 (* -1 d)) (* -1 a))) (* (+ (/ a a) d) (- -1 e))) (- (+ (- -1 b) 0) (- -1 a))) (* (* (+ (* c d) 1) (/ -1 c)) (+ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001051108)",
      "output_term": "(* (- (* (+ (* -1 (+ (/ (* a b) b) (pow a b))) (+ -1 (* a (* -1 (/ 0 (* -1 d)))))) (* (+ d (/ a a)) (- -1 e))) (+ (- -1 b) (+ a 1))) (* (+ (* d c) 1) (* (/ -1 c) (+ -1 e))))",
      "output_weight_simple": 35,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.001102057
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001009202)",
      "output_term": "(* (- (* (+ (- (- -1 a) (pow a b)) (/ 0 (- 0 d))) (* (+ d 1) (- -1 e))) (- -1 (+ b (- -1 a)))) (* (/ (- -1 (* d c)) c) (+ -1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.0010261229999999999
    },
    "speedup": 1.0740008751387506,
    "weight_simple_diff": 8,
    "weight_complex_diff": 22,
    "depth_diff": 3
  },
  {
    "base_term": "(pow (* (* (- (* (+ (* (- (+ -1 a) a) (pow a 1)) (- -1 b)) (/ (pow a 0) d)) (pow (* b e) a)) (- (* (+ c 1) d) (* -1 a))) (- (* (/ 1 0) 1) (* a d))) (* (+ (+ 0 -1) (pow 1 a)) (pow 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002305)",
      "output_term": "(pow (* (- (* (+ (* a (- (+ -1 a) a)) (- -1 b)) (/ 1 d)) (pow (* b e) a)) (* (+ a (+ d (* d c))) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.0010838549999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000028)",
      "output_term": "(pow (* (- (/ (- -1 (+ a b)) d) (pow (* b e) a)) (* (+ a (* d (+ 1 c))) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.001008712
    },
    "speedup": 1.0744940082005567,
    "weight_simple_diff": 4,
    "weight_complex_diff": 6,
    "depth_diff": 2
  },
  {
    "base_term": "(- (+ (+ (* (- (- (- (* a (/ 1 b)) (- b d)) (/ d 1)) (- 1 0)) (- (+ c d) -1)) (/ (pow (- b 1) -1) (+ 0 1))) (/ (/ (pow c b) a) (- a 1))) (* (+ (- 0 (/ e e)) (+ -1 c)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001009298)",
      "output_term": "(+ (* (+ (- (- (* a (/ 1 b)) (- b d)) (/ d 1)) -1) (+ 1 (+ d c))) (+ (* (/ 1 e) (+ (/ e e) (+ 1 (* c -1)))) (+ (/ (pow (+ b -1) -1) 1) (/ (/ (pow c b) a) (+ a -1)))))",
      "output_weight_simple": 33,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.001089014
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006108)",
      "output_term": "(- (+ (* (- (/ a b) (+ 1 b)) (+ c (+ 1 d))) (+ (/ 1 (- b 1)) (/ (/ (pow c b) a) (- a 1)))) (/ (+ c -2) e))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.0010134249999999999
    },
    "speedup": 1.0745876606556972,
    "weight_simple_diff": 9,
    "weight_complex_diff": 23,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 (/ 0 -1))) (- (+ (+ d c) 0) (+ a 1))) (- (- (* -1 (+ d -1)) (pow d 1)) (+ -1 -1))) (* (- (+ (- 1 b) 0) (- e 0)) (* d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001053697)",
      "output_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 0)) (- (+ c d) (+ a 1))) (+ (+ 2 (* d -2)) 1)) (* d (* d (- (- 1 b) e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.001084138
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000125)",
      "output_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 0)) (- (+ c d) (+ a 1))) (- (- 1 (+ d d)) -2)) (* d (* d (- 1 (+ b e)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.001008728
    },
    "speedup": 1.0747575163968879,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (* (pow 1 (pow (- (pow (pow a 1) 1) 0) (+ 1 0))) (pow (- (pow a a) a) (+ 1 b))) (pow (+ (/ 0 1) 1) (- 1 b))) (- (* (- a -1) b) (+ a -1))) (/ (pow (- b (- 1 1)) (/ c 1)) (- c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001732)",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ a (- 1 b)))) (+ 1 (+ b (* a (+ b -1))))) (/ (pow b (/ c 1)) (- c b)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.0010133599999999998
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ a (- 1 b)))) (- (* b (+ 1 a)) (+ a -1))) (/ (pow b c) (- c b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.000942515
    },
    "speedup": 1.0751659124788464,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (* (* (- (+ (+ (* 1 a) a) (* a 1)) (/ 0 a)) (- c (/ d b))) (* (* d -1) d)) (/ (- (- -1 1) c) (* a d))) (/ (- (- a b) d) 1)) (- (- (* (pow 0 b) 1) (+ 1 e)) (+ c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00102842)",
      "output_term": "(pow (+ (/ (* (- (* a 3) (/ 0 a)) (* (- c (/ d b)) (* -1 (* d d)))) (/ (- -2 c) (* a d))) (/ (- (- a b) d) 1)) (+ (- (pow 0 b) (+ 1 e)) (* c -2)))",
      "output_weight_simple": 33,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001106593
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00100867)",
      "output_term": "(pow (+ (/ (* (- (* a 3) (/ 0 a)) (* d (* (- c (/ d b)) (- 0 d)))) (/ (- -2 c) (* a d))) (- a (+ d b))) (- (pow 0 b) (+ e (+ 1 (+ c c)))))",
      "output_weight_simple": 31,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001028668
    },
    "speedup": 1.0757533042730987,
    "weight_simple_diff": 2,
    "weight_complex_diff": 8,
    "depth_diff": -1
  },
  {
    "base_term": "(* (+ (- (pow (* (* a (/ (/ (- a b) b) (pow 1 a))) (pow (* a -1) -1)) (pow (+ b b) b)) (pow (+ (pow c -1) a) (/ 0 c))) (+ (* (pow 1 0) e) (* c 0))) (- (/ (pow 0 (pow -1 0)) (pow d d)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001047307)",
      "output_term": "(* (+ (- (pow (* a (* (/ (/ (- a b) b) (pow 1 a)) (pow (* a -1) -1))) (pow (+ b b) b)) (pow (+ a (pow c -1)) (/ 0 c))) e) (- (/ 0 (pow d d)) (- e b)))",
      "output_weight_simple": 30,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.001093233
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002142)",
      "output_term": "(* (+ (- (pow (/ (/ (/ (* a (- a b)) (pow 1 a)) (- 0 a)) b) (pow (+ b b) b)) (pow (+ a (/ 1 c)) (/ 0 c))) e) (- (/ 0 (pow d d)) (- e b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.0010162209999999999
    },
    "speedup": 1.0757827283632204,
    "weight_simple_diff": 2,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (* (+ (+ (- (- 0 (/ (* a b) b)) (pow a b)) -1) (* (/ 0 (* -1 d)) (* -1 a))) (* (+ (/ a a) d) (- -1 e))) (- (+ (- -1 b) 0) (- -1 a))) (* (* (+ (* c d) 1) (/ -1 c)) (+ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001046481)",
      "output_term": "(* (- (* (+ (* -1 (+ (/ (* a b) b) (pow a b))) (+ -1 (* a (* -1 (/ 0 (* -1 d)))))) (* (+ d (/ a a)) (- -1 e))) (+ (- -1 b) (+ a 1))) (* (+ (* d c) 1) (* (/ -1 c) (+ -1 e))))",
      "output_weight_simple": 35,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.001097922
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002406)",
      "output_term": "(* (- (* (+ (- (- -1 a) (pow a b)) (/ 0 (- 0 d))) (* (+ d 1) (- -1 e))) (- -1 (+ b (- -1 a)))) (* (/ (- -1 (* d c)) c) (+ -1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.001019586
    },
    "speedup": 1.0768311844219125,
    "weight_simple_diff": 8,
    "weight_complex_diff": 22,
    "depth_diff": 3
  },
  {
    "base_term": "(/ (pow (* (* (pow 1 (pow (- (pow (pow a 1) 1) 0) (+ 1 0))) (pow (- (pow a a) a) (+ 1 b))) (pow (+ (/ 0 1) 1) (- 1 b))) (- (* (- a -1) b) (+ a -1))) (/ (pow (- b (- 1 1)) (/ c 1)) (- c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001008573)",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ a (- 1 b)))) (+ 1 (+ b (* a (+ b -1))))) (/ (pow b (/ c 1)) (- c b)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.001020299
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ a (- 1 b)))) (- (* b (+ 1 a)) (+ a -1))) (/ (pow b c) (- c b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.0009471620000000001
    },
    "speedup": 1.077216991391124,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (pow 1 (* (/ (* (pow (* a -1) a) (+ a 0)) (pow 1 -1)) (* (- b 0) 0))) (- (+ 1 b) (* b a))) (pow (+ (+ (/ b d) c) (/ 1 -1)) (+ 1 d))) (* (- (+ (/ -1 a) b) (+ 1 b)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001042021)",
      "output_term": "(* (+ (+ (* a b) (* -1 b)) (pow (+ (/ b d) (+ -1 c)) (+ 1 d))) (- (+ b (/ -1 a)) (+ 1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.001081192
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000296)",
      "output_term": "(* (- (pow (+ -1 (+ (/ b d) c)) (+ 1 d)) (- b (* a b))) (- (/ -1 a) 1))",
      "output_weight_simple": 17,
      "output_weight_complex": 34,
      "output_depth": 7,
      "simplification_time": 0.001001995
    },
    "speedup": 1.0790393165634558,
    "weight_simple_diff": 3,
    "weight_complex_diff": 4,
    "depth_diff": -1
  },
  {
    "base_term": "(* (/ (pow (pow (* (/ a (- (* (pow a b) 1) (pow b 1))) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow (pow (pow 1 -1) 0) (- d c))) (/ (* (pow c -1) 1) (- a 0))) (pow (+ (+ (* e b) b) (+ a c)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001007203)",
      "output_term": "(/ (pow (pow (* (/ a (- (pow a b) b)) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (pow c -1) a))",
      "output_weight_simple": 22,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.0010205989999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (* (/ a (- (pow a b) b)) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (/ 1 c) a))",
      "output_weight_simple": 21,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.0009456989999999999
    },
    "speedup": 1.0792006759021633,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (- (+ (pow (pow (+ (- 1 (* 1 1)) (/ 0 1)) (pow -1 a)) (+ (- a a) 0)) (* (+ a 0) 1)) (* (- (/ 0 0) a) (/ c 1))) (/ 1 (* (/ d 0) d))) (+ (+ (/ (- c 0) 1) (/ -1 e)) (+ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001060713)",
      "output_term": "(+ a (+ (/ (- (+ 1 a) (* (- (/ 0 0) a) (/ c 1))) (/ 1 (* d (/ d 0)))) (+ (/ c 1) (+ a (/ -1 e)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.001095499
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000977)",
      "output_term": "(+ a (+ (/ (- (+ 1 a) (* (- (/ 0 0) a) c)) (/ 1 (* d (/ d 0)))) (+ (/ -1 e) (+ a c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.0010141759999999999
    },
    "speedup": 1.0801862793045784,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (pow (* (/ (* (pow a 1) b) (+ 1 a)) (+ (pow b (+ 1 0)) (* 0 -1))) (* (- -1 (* c -1)) (pow b 0))) (* (pow (* (* a 0) b) (pow a 0)) (/ a 0))) (- (+ (- 1 (+ e e)) (- a 1)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 8,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001017436)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- (+ a (* e -2)) (pow -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.001087435
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001389)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- a (+ e (+ e (pow -1 b)))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.001006433
    },
    "speedup": 1.0804842448528618,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (pow (* -1 (pow (- (/ (pow (* 1 a) 1) (/ 0 a)) a) (pow (* -1 1) 0))) (pow (+ (- 0 a) b) (/ 0 0))) (+ (+ (* -1 (- 1 b)) (pow c b)) (* 1 1))) (* (/ (* 1 (pow -1 a)) (* -1 1)) (+ c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001061683)",
      "output_term": "(- (+ b (+ (pow (+ a (* -1 (/ a (/ 0 a)))) (pow (+ (- 0 a) b) (/ 0 0))) (pow c b))) (* (/ (pow -1 a) -1) (+ -1 c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.001098238
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000301)",
      "output_term": "(- (+ (pow (- a (/ a (/ 0 a))) (pow (- b a) (/ 0 0))) (+ b (pow c b))) (* (/ (pow -1 a) -1) (+ -1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.001016269
    },
    "speedup": 1.0806567946085142,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 2
  },
  {
    "base_term": "(* (pow (- (+ (/ (/ (pow (/ (- 1 1) -1) 0) -1) (* a a)) (pow (- b (- a 1)) (- b a))) (/ (+ (/ e 0) -1) (+ 0 d))) (+ (+ (- a 0) -1) (- 0 -1))) (- (pow (pow (pow e 0) 1) (* -1 1)) (pow b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001024057)",
      "output_term": "(* (pow (- (+ (/ (/ (pow 0 0) -1) (* a a)) (pow (+ 1 (- b a)) (- b a))) (/ (+ -1 (/ e 0)) d)) a) (- (pow 1 -1) (pow b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.001096557
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000589)",
      "output_term": "(* (pow (- (+ (/ (/ (pow 0 0) -1) (* a a)) (pow (- b (+ -1 a)) (- b a))) (/ (+ -1 (/ e 0)) d)) a) (- 1 (pow b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001014564
    },
    "speedup": 1.0808159958366352,
    "weight_simple_diff": 0,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (- (+ (- (- (- -1 (/ 1 (- 0 0))) (pow 1 -1)) (* (/ 0 -1) 1)) a) (pow (pow (pow 0 1) 0) (/ 0 0))) (pow (pow (pow (- -1 1) b) (pow 1 0)) (* b -1))) (* (+ (- (- a 0) 0) (- e e)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00104355)",
      "output_term": "(pow (* (- (+ (- (- -1 (/ 1 0)) (pow 1 -1)) a) (pow 1 (/ 0 0))) (pow (pow -2 b) (* -1 b))) (* -1 (* a c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.001107403
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001002205)",
      "output_term": "(pow (* (- a (+ (+ (/ 1 0) 2) (pow (pow 0 0) (/ 0 0)))) (pow (pow -2 b) (- 0 b))) (- 0 (* a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001024519
    },
    "speedup": 1.0809004030183922,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (/ (pow (* (/ (* (pow a 1) b) (+ 1 a)) (+ (pow b (+ 1 0)) (* 0 -1))) (* (- -1 (* c -1)) (pow b 0))) (* (pow (* (* a 0) b) (pow a 0)) (/ a 0))) (- (+ (- 1 (+ e e)) (- a 1)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 8,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001024851)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- (+ a (* e -2)) (pow -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.0010905309999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003769)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- a (+ e (+ e (pow -1 b)))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.001008765
    },
    "speedup": 1.0810555481207218,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (* (+ (+ (- (+ a (pow a 1)) (pow a (/ b a))) 0) (* 1 (+ (* d d) d))) (+ 1 (- (+ 0 -1) b))) (+ (/ (- (+ b 1) c) (- 0 0)) (/ d -1))) (+ (pow (pow (* 1 -1) -1) (pow a d)) (pow 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001018618)",
      "output_term": "(+ (* (+ (- (+ a a) (pow a (/ b a))) (* d (+ 1 d))) (* (* b -1) (+ (/ (- (+ 1 b) c) 0) (/ d -1)))) (+ (pow (pow -1 -1) (pow a d)) (pow 1 e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001100021
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004444)",
      "output_term": "(+ (- 0 (* (+ (* d d) (- (+ a (+ d a)) (pow a (/ b a)))) (* b (+ (/ (- b (- c 1)) 0) (/ d -1))))) (+ (pow -1 (pow a d)) (pow 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001017239
    },
    "speedup": 1.081379105598586,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": -1
  },
  {
    "base_term": "(* (/ (pow (pow (* (/ a (- (* (pow a b) 1) (pow b 1))) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow (pow (pow 1 -1) 0) (- d c))) (/ (* (pow c -1) 1) (- a 0))) (pow (+ (+ (* e b) b) (+ a c)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001011661)",
      "output_term": "(/ (pow (pow (* (/ a (- (pow a b) b)) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (pow c -1) a))",
      "output_weight_simple": 22,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001025186
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (* (/ a (- (pow a b) b)) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (/ 1 c) a))",
      "output_weight_simple": 21,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.000947893
    },
    "speedup": 1.0815419039912733,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (+ (- (+ (+ (pow a (+ (* a a) 0)) (+ a 1)) (/ (+ a -1) -1)) (* (+ a -1) -1)) (+ (pow (* 0 1) c) (/ b 0))) (- (- 1 (pow 1 b)) (pow 1 0))) (* (+ (/ c (pow -1 -1)) (pow a 0)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001120532)",
      "output_term": "(pow (+ (+ a -1) (+ (pow 1 b) (+ (pow a (* a a)) (+ (+ (pow 0 c) (/ b 0)) (+ (+ a 1) (/ (+ a -1) -1)))))) (* (+ 1 (/ c (pow -1 -1))) (pow 1 d)))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001157571
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001070689)",
      "output_term": "(pow (+ (+ 1 (+ (+ a (+ (pow a (* a a)) (+ (pow 0 c) (/ b 0)))) (/ (+ a -1) -1))) (+ (+ a -1) (pow 1 b))) (* (+ 1 (/ c -1)) (pow 1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001070295
    },
    "speedup": 1.0815438734180765,
    "weight_simple_diff": 1,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (+ (* (- (- (- (* a (/ 1 b)) (- b d)) (/ d 1)) (- 1 0)) (- (+ c d) -1)) (/ (pow (- b 1) -1) (+ 0 1))) (/ (/ (pow c b) a) (- a 1))) (* (+ (- 0 (/ e e)) (+ -1 c)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001015752)",
      "output_term": "(+ (* (+ (- (- (* a (/ 1 b)) (- b d)) (/ d 1)) -1) (+ 1 (+ d c))) (+ (* (/ 1 e) (+ (/ e e) (+ 1 (* c -1)))) (+ (/ (pow (+ b -1) -1) 1) (/ (/ (pow c b) a) (+ a -1)))))",
      "output_weight_simple": 33,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.001095048
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005039)",
      "output_term": "(- (+ (* (- (/ a b) (+ 1 b)) (+ c (+ 1 d))) (+ (/ 1 (- b 1)) (/ (/ (pow c b) a) (- a 1)))) (/ (+ c -2) e))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.0010124580000000002
    },
    "speedup": 1.0815737541705432,
    "weight_simple_diff": 9,
    "weight_complex_diff": 23,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (- (* (+ (/ (pow (/ 0 (* a a)) a) (+ b 0)) (* (+ -1 b) c)) (+ (/ 0 1) 1)) (* (+ 0 (- 1 a)) (- c d))) (+ (pow (+ c 1) e) (+ b 1))) (* (+ (- (* c 0) e) (/ 0 b)) (/ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001005719)",
      "output_term": "(+ (+ (/ (pow (/ 0 (* a a)) a) b) (+ (* (+ b -1) c) (* (- c d) (+ a -1)))) (+ (+ b (+ 1 (pow (+ c 1) e))) (* (/ -1 e) (+ e (* -1 (/ 0 b))))))",
      "output_weight_simple": 30,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.0011039180000000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006867)",
      "output_term": "(- (+ b (+ (pow (+ c 1) e) (- (+ (/ (pow (/ 0 (* a a)) a) b) (* (+ b -1) c)) (- (* (- 1 a) (- c d)) 1)))) (/ (- e (/ 0 b)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 58,
      "output_depth": 10,
      "simplification_time": 0.001019961
    },
    "speedup": 1.0823139316111108,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": -3
  },
  {
    "base_term": "(+ (* (* (+ (+ (- (+ a (pow a 1)) (pow a (/ b a))) 0) (* 1 (+ (* d d) d))) (+ 1 (- (+ 0 -1) b))) (+ (/ (- (+ b 1) c) (- 0 0)) (/ d -1))) (+ (pow (pow (* 1 -1) -1) (pow a d)) (pow 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001016248)",
      "output_term": "(+ (* (+ (- (+ a a) (pow a (/ b a))) (* d (+ 1 d))) (* (* b -1) (+ (/ (- (+ 1 b) c) 0) (/ d -1)))) (+ (pow (pow -1 -1) (pow a d)) (pow 1 e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.0010986849999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001243)",
      "output_term": "(+ (- 0 (* (+ (* d d) (- (+ a (+ d a)) (pow a (/ b a)))) (* b (+ (/ (- b (- c 1)) 0) (/ d -1))))) (+ (pow -1 (pow a d)) (pow 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001013895
    },
    "speedup": 1.0836279890915725,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": -1
  },
  {
    "base_term": "(- (- (* (* (* (/ (pow (+ (* a 0) 0) (* -1 0)) (+ 1 0)) (+ (+ 0 b) b)) (- (+ 0 0) c)) (* (* (- a d) c) (+ b -1))) (* 0 (/ (- e -1) d))) (pow (* (+ (+ 0 c) c) (+ d d)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001061418)",
      "output_term": "(- (* (/ (pow 0 0) 1) (* (* c (* (- a d) (+ -1 b))) (* (+ b b) (- 0 c)))) (* (+ c c) (+ d d)))",
      "output_weight_simple": 22,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.001127737
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00101653)",
      "output_term": "(- (* c (* (* (- a d) (+ -1 b)) (* (pow 0 0) (- 0 (* (+ b b) c))))) (* c (* d 4)))",
      "output_weight_simple": 20,
      "output_weight_complex": 34,
      "output_depth": 8,
      "simplification_time": 0.001040144
    },
    "speedup": 1.0842123782860835,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (pow (- (* (* (* (+ (/ a 0) a) (/ b a)) (+ -1 a)) (+ (- 1 1) c)) (- (pow 1 a) 1)) (- (* (* d -1) c) (pow c c))) (- (+ a (pow d -1)) (/ 0 1))) (+ 1 (- (pow (/ d 1) c) (/ 0 e))))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001011844)",
      "output_term": "(+ 1 (+ (pow (pow (- (* (+ a (/ a 0)) (* (/ b a) (* (+ a -1) c))) (+ -1 (pow 1 a))) (- (* -1 (* c d)) (pow c c))) (+ a (pow d -1))) (- (pow (/ d 1) c) (/ 0 e))))",
      "output_weight_simple": 32,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.001094501
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000787)",
      "output_term": "(+ 1 (+ (pow (pow (- (* (+ a (/ a 0)) (* (/ b a) (* (- a 1) c))) (- (pow 1 a) 1)) (- 0 (+ (pow c c) (* c d)))) (+ a (/ 1 d))) (- (pow d c) (/ 0 e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.001009464
    },
    "speedup": 1.0842397549590672,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (* a (/ (* (* (pow (pow 1 b) -1) 1) (/ 0 a)) (+ (- c b) -1))) (* (pow d (+ 1 a)) (- e b))) (* (+ (- (+ -1 d) -1) (* -1 b)) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001062051)",
      "output_term": "(pow (+ (/ (* a (/ (* (pow (pow 1 b) -1) (/ 0 a)) (+ -1 (- c b)))) (* (pow d (+ a 1)) (- e b))) (* (+ d (* b -1)) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* -1 c)))",
      "output_weight_simple": 33,
      "output_weight_complex": 83,
      "output_depth": 9,
      "simplification_time": 0.001120123
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001004191)",
      "output_term": "(pow (+ (/ (/ (/ 0 a) (- (+ -1 c) b)) (* (pow d (+ a 1)) (- e b))) (* (- d b) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* -1 c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 69,
      "output_depth": 7,
      "simplification_time": 0.001032992
    },
    "speedup": 1.084348184690685,
    "weight_simple_diff": 5,
    "weight_complex_diff": 14,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (pow (* (* (- (* (* (pow (pow -1 1) 1) (pow -1 a)) (- b b)) (/ (- 0 d) -1)) (- (+ 1 -1) 0)) (- (* 1 (pow e c)) (+ b 1))) (- (+ (* -1 -1) 1) (* b -1))) (* (- (pow (* d c) a) (* 0 b)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.000703911
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.000648847
    },
    "speedup": 1.0848643825123643,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (pow (- (* (* (* (+ (/ a 0) a) (/ b a)) (+ -1 a)) (+ (- 1 1) c)) (- (pow 1 a) 1)) (- (* (* d -1) c) (pow c c))) (- (+ a (pow d -1)) (/ 0 1))) (+ 1 (- (pow (/ d 1) c) (/ 0 e))))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001013747)",
      "output_term": "(+ 1 (+ (pow (pow (- (* (+ a (/ a 0)) (* (/ b a) (* (+ a -1) c))) (+ -1 (pow 1 a))) (- (* -1 (* c d)) (pow c c))) (+ a (pow d -1))) (- (pow (/ d 1) c) (/ 0 e))))",
      "output_weight_simple": 32,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.001095677
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001266)",
      "output_term": "(+ 1 (+ (pow (pow (- (* (+ a (/ a 0)) (* (/ b a) (* (- a 1) c))) (- (pow 1 a) 1)) (- 0 (+ (pow c c) (* c d)))) (+ a (/ 1 d))) (- (pow d c) (/ 0 e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.0010096369999999999
    },
    "speedup": 1.08521874693578,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (* (+ (/ (pow (/ 0 (* a a)) a) (+ b 0)) (* (+ -1 b) c)) (+ (/ 0 1) 1)) (* (+ 0 (- 1 a)) (- c d))) (+ (pow (+ c 1) e) (+ b 1))) (* (+ (- (* c 0) e) (/ 0 b)) (/ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001006577)",
      "output_term": "(+ (+ (/ (pow (/ 0 (* a a)) a) b) (+ (* (+ b -1) c) (* (- c d) (+ a -1)))) (+ (+ b (+ 1 (pow (+ c 1) e))) (* (/ -1 e) (+ e (* -1 (/ 0 b))))))",
      "output_weight_simple": 30,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001103044
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003191)",
      "output_term": "(- (+ b (+ (pow (+ c 1) e) (- (+ (/ (pow (/ 0 (* a a)) a) b) (* (+ b -1) c)) (- (* (- 1 a) (- c d)) 1)))) (/ (- e (/ 0 b)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 58,
      "output_depth": 10,
      "simplification_time": 0.001016391
    },
    "speedup": 1.0852555758561422,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": -3
  },
  {
    "base_term": "(* (pow (- (+ (/ (/ (pow (/ (- 1 1) -1) 0) -1) (* a a)) (pow (- b (- a 1)) (- b a))) (/ (+ (/ e 0) -1) (+ 0 d))) (+ (+ (- a 0) -1) (- 0 -1))) (- (pow (pow (pow e 0) 1) (* -1 1)) (pow b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001028655)",
      "output_term": "(* (pow (- (+ (/ (/ (pow 0 0) -1) (* a a)) (pow (+ 1 (- b a)) (- b a))) (/ (+ -1 (/ e 0)) d)) a) (- (pow 1 -1) (pow b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.0011017140000000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100065)",
      "output_term": "(* (pow (- (+ (/ (/ (pow 0 0) -1) (* a a)) (pow (- b (+ -1 a)) (- b a))) (/ (+ -1 (/ e 0)) d)) a) (- 1 (pow b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001014176
    },
    "speedup": 1.0863144069668382,
    "weight_simple_diff": 0,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (pow (- (pow 1 (pow -1 a)) (+ (- (+ (* a 1) 0) (* b c)) (* -1 c))) (pow (- (/ b d) 1) (/ c 1))) (/ (* (pow (/ -1 e) b) (* 1 1)) (- b 1))) (+ (pow (* (* -1 d) e) (* b e)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001027115)",
      "output_term": "(+ (/ (pow (+ (pow 1 (pow -1 a)) (+ (* -1 a) (+ c (* b c)))) (pow (+ -1 (/ b d)) (/ c 1))) (/ (pow (/ -1 e) b) (+ -1 b))) (+ -1 (pow (* -1 (* d e)) (* b e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 78,
      "output_depth": 8,
      "simplification_time": 0.001039461
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ -1 (+ (/ (pow (- (pow 1 (pow -1 a)) (- (- a c) (* b c))) (pow (- (/ b d) 1) c)) (/ (pow (/ -1 e) b) (- b 1))) (pow (- 0 (* d e)) (* b e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.000956581
    },
    "speedup": 1.0866419048674394,
    "weight_simple_diff": 1,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (- (pow (/ (* (- (- 0 1) -1) -1) (+ a b)) (+ 1 (- a -1))) (/ (pow c d) 1)) (pow (pow (/ d -1) -1) (pow -1 0))) (* (- (+ c e) 1) (- 0 d))) (* (pow (pow (- c a) c) (pow 0 1)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001026645)",
      "output_term": "(pow (+ (- (pow (/ 0 (+ a b)) (+ a 2)) (/ (pow c d) 1)) (+ (pow (/ d -1) -1) (+ (* (+ c e) (- 0 d)) d))) (* -1 c))",
      "output_weight_simple": 26,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.0010847729999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (+ (- (pow (/ 0 (+ a b)) (+ a 2)) (pow c d)) (/ 1 (/ d -1))) (* d (- (+ c e) 1))) (- 0 c))",
      "output_weight_simple": 24,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.000997711
    },
    "speedup": 1.0872617421277302,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (pow (* (* (pow 1 (pow (- (pow (pow a 1) 1) 0) (+ 1 0))) (pow (- (pow a a) a) (+ 1 b))) (pow (+ (/ 0 1) 1) (- 1 b))) (- (* (- a -1) b) (+ a -1))) (/ (pow (- b (- 1 1)) (/ c 1)) (- c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001006417)",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ a (- 1 b)))) (+ 1 (+ b (* a (+ b -1))))) (/ (pow b (/ c 1)) (- c b)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.001019161
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ a (- 1 b)))) (- (* b (+ 1 a)) (+ a -1))) (/ (pow b c) (- c b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.000936699
    },
    "speedup": 1.0880346835002492,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (* (+ (/ (pow (/ 0 (* a a)) a) (+ b 0)) (* (+ -1 b) c)) (+ (/ 0 1) 1)) (* (+ 0 (- 1 a)) (- c d))) (+ (pow (+ c 1) e) (+ b 1))) (* (+ (- (* c 0) e) (/ 0 b)) (/ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001011001)",
      "output_term": "(+ (+ (/ (pow (/ 0 (* a a)) a) b) (+ (* (+ b -1) c) (* (- c d) (+ a -1)))) (+ (+ b (+ 1 (pow (+ c 1) e))) (* (/ -1 e) (+ e (* -1 (/ 0 b))))))",
      "output_weight_simple": 30,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.0011072120000000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003388)",
      "output_term": "(- (+ b (+ (pow (+ c 1) e) (- (+ (/ (pow (/ 0 (* a a)) a) b) (* (+ b -1) c)) (- (* (- 1 a) (- c d)) 1)))) (/ (- e (/ 0 b)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 58,
      "output_depth": 10,
      "simplification_time": 0.001016269
    },
    "speedup": 1.0894871338198846,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": -3
  },
  {
    "base_term": "(pow (- (+ (- (+ (+ (pow a (+ (* a a) 0)) (+ a 1)) (/ (+ a -1) -1)) (* (+ a -1) -1)) (+ (pow (* 0 1) c) (/ b 0))) (- (- 1 (pow 1 b)) (pow 1 0))) (* (+ (/ c (pow -1 -1)) (pow a 0)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001128554)",
      "output_term": "(pow (+ (+ a -1) (+ (pow 1 b) (+ (pow a (* a a)) (+ (+ (pow 0 c) (/ b 0)) (+ (+ a 1) (/ (+ a -1) -1)))))) (* (+ 1 (/ c (pow -1 -1))) (pow 1 d)))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001165527
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001069327)",
      "output_term": "(pow (+ (+ 1 (+ (+ a (+ (pow a (* a a)) (+ (pow 0 c) (/ b 0)))) (/ (+ a -1) -1))) (+ (+ a -1) (pow 1 b))) (* (+ 1 (/ c -1)) (pow 1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001068824
    },
    "speedup": 1.0904760746390425,
    "weight_simple_diff": 1,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (+ (- (+ (+ (pow a (+ (* a a) 0)) (+ a 1)) (/ (+ a -1) -1)) (* (+ a -1) -1)) (+ (pow (* 0 1) c) (/ b 0))) (- (- 1 (pow 1 b)) (pow 1 0))) (* (+ (/ c (pow -1 -1)) (pow a 0)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00113262)",
      "output_term": "(pow (+ (+ a -1) (+ (pow 1 b) (+ (pow a (* a a)) (+ (+ (pow 0 c) (/ b 0)) (+ (+ a 1) (/ (+ a -1) -1)))))) (* (+ 1 (/ c (pow -1 -1))) (pow 1 d)))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.001169507
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001000275)",
      "output_term": "(pow (+ (+ 1 (+ (+ a (+ (pow a (* a a)) (+ (pow 0 c) (/ b 0)))) (/ (+ a -1) -1))) (+ (+ a -1) (pow 1 b))) (* (+ 1 (/ c -1)) (pow 1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001072398
    },
    "speedup": 1.0905531341908508,
    "weight_simple_diff": 1,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (pow (- (* (* (* (+ (/ a 0) a) (/ b a)) (+ -1 a)) (+ (- 1 1) c)) (- (pow 1 a) 1)) (- (* (* d -1) c) (pow c c))) (- (+ a (pow d -1)) (/ 0 1))) (+ 1 (- (pow (/ d 1) c) (/ 0 e))))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001020851)",
      "output_term": "(+ 1 (+ (pow (pow (- (* (+ a (/ a 0)) (* (/ b a) (* (+ a -1) c))) (+ -1 (pow 1 a))) (- (* -1 (* c d)) (pow c c))) (+ a (pow d -1))) (- (pow (/ d 1) c) (/ 0 e))))",
      "output_weight_simple": 32,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.0011025219999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.0010006)",
      "output_term": "(+ 1 (+ (pow (pow (- (* (+ a (/ a 0)) (* (/ b a) (* (- a 1) c))) (- (pow 1 a) 1)) (- 0 (+ (pow c c) (* c d)))) (+ a (/ 1 d))) (- (pow d c) (/ 0 e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.001009
    },
    "speedup": 1.0926878097125867,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (+ (* (- (- (- (* a (/ 1 b)) (- b d)) (/ d 1)) (- 1 0)) (- (+ c d) -1)) (/ (pow (- b 1) -1) (+ 0 1))) (/ (/ (pow c b) a) (- a 1))) (* (+ (- 0 (/ e e)) (+ -1 c)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001024046)",
      "output_term": "(+ (* (+ (- (- (* a (/ 1 b)) (- b d)) (/ d 1)) -1) (+ 1 (+ d c))) (+ (* (/ 1 e) (+ (/ e e) (+ 1 (* c -1)))) (+ (/ (pow (+ b -1) -1) 1) (/ (/ (pow c b) a) (+ a -1)))))",
      "output_weight_simple": 33,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.0011034250000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002334)",
      "output_term": "(- (+ (* (- (/ a b) (+ 1 b)) (+ c (+ 1 d))) (+ (/ 1 (- b 1)) (/ (/ (pow c b) a) (- a 1)))) (/ (+ c -2) e))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.001009135
    },
    "speedup": 1.093436457956567,
    "weight_simple_diff": 9,
    "weight_complex_diff": 23,
    "depth_diff": 1
  },
  {
    "base_term": "(* (pow (- (+ (/ (/ (pow (/ (- 1 1) -1) 0) -1) (* a a)) (pow (- b (- a 1)) (- b a))) (/ (+ (/ e 0) -1) (+ 0 d))) (+ (+ (- a 0) -1) (- 0 -1))) (- (pow (pow (pow e 0) 1) (* -1 1)) (pow b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001033958)",
      "output_term": "(* (pow (- (+ (/ (/ (pow 0 0) -1) (* a a)) (pow (+ 1 (- b a)) (- b a))) (/ (+ -1 (/ e 0)) d)) a) (- (pow 1 -1) (pow b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.0011076200000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000058)",
      "output_term": "(* (pow (- (+ (/ (/ (pow 0 0) -1) (* a a)) (pow (- b (+ -1 a)) (- b a))) (/ (+ -1 (/ e 0)) d)) a) (- 1 (pow b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.0010128889999999999
    },
    "speedup": 1.0935255491964078,
    "weight_simple_diff": 0,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (* (- (* (* (pow (pow -1 1) 1) (pow -1 a)) (- b b)) (/ (- 0 d) -1)) (- (+ 1 -1) 0)) (- (* 1 (pow e c)) (+ b 1))) (- (+ (* -1 -1) 1) (* b -1))) (* (- (pow (* d c) a) (* 0 b)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.000700331
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.000640349
    },
    "speedup": 1.0936707951445228,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (* (* (* (/ (pow (+ (* a 0) 0) (* -1 0)) (+ 1 0)) (+ (+ 0 b) b)) (- (+ 0 0) c)) (* (* (- a d) c) (+ b -1))) (* 0 (/ (- e -1) d))) (pow (* (+ (+ 0 c) c) (+ d d)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001066017)",
      "output_term": "(- (* (/ (pow 0 0) 1) (* (* c (* (- a d) (+ -1 b))) (* (+ b b) (- 0 c)))) (* (+ c c) (+ d d)))",
      "output_weight_simple": 22,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.001133079
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001017084)",
      "output_term": "(- (* c (* (* (- a d) (+ -1 b)) (* (pow 0 0) (- 0 (* (+ b b) c))))) (* c (* d 4)))",
      "output_weight_simple": 20,
      "output_weight_complex": 34,
      "output_depth": 8,
      "simplification_time": 0.001035787
    },
    "speedup": 1.0939305088787559,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (* (- (* (pow (/ (+ 0 (/ a a)) a) (pow 1 a)) (+ (* -1 a) 1)) (pow (* 1 1) -1)) (+ (pow (+ 1 -1) -1) (pow a 1))) (* (/ 0 (+ d d)) (/ e c))) (- (* (+ (/ d b) a) (* e -1)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001055519)",
      "output_term": "(/ (* (- (* (pow (/ (/ a a) a) (pow 1 a)) (+ 1 (* a -1))) (pow 1 -1)) (* (+ a (pow 0 -1)) (* (/ 0 (+ d d)) (/ e c)))) (+ c (* -1 (* e (+ a (/ d b))))))",
      "output_weight_simple": 31,
      "output_weight_complex": 79,
      "output_depth": 8,
      "simplification_time": 0.001160561
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00102125)",
      "output_term": "(/ (/ 0 (+ d d)) (- c (* e (+ a (/ d b)))))",
      "output_weight_simple": 13,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.001057431
    },
    "speedup": 1.0975288222115676,
    "weight_simple_diff": 18,
    "weight_complex_diff": 48,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (+ (+ (- (pow (/ (* (- (- 0 1) -1) -1) (+ a b)) (+ 1 (- a -1))) (/ (pow c d) 1)) (pow (pow (/ d -1) -1) (pow -1 0))) (* (- (+ c e) 1) (- 0 d))) (* (pow (pow (- c a) c) (pow 0 1)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001034184)",
      "output_term": "(pow (+ (- (pow (/ 0 (+ a b)) (+ a 2)) (/ (pow c d) 1)) (+ (pow (/ d -1) -1) (+ (* (+ c e) (- 0 d)) d))) (* -1 c))",
      "output_weight_simple": 26,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.001092086
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (+ (- (pow (/ 0 (+ a b)) (+ a 2)) (pow c d)) (/ 1 (/ d -1))) (* d (- (+ c e) 1))) (- 0 c))",
      "output_weight_simple": 24,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.0009932230000000001
    },
    "speedup": 1.0995375660853604,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": -1
  },
  {
    "base_term": "(* (+ (+ (pow (+ (* a (* (/ (/ 1 1) -1) a)) (/ (/ -1 a) b)) (+ (/ b b) -1)) (/ 1 (- (+ c a) c))) (* (* (+ (+ -1 d) -1) (- d c)) (/ c d))) (* (+ (/ (- 1 c) 1) (* 1 -1)) (/ b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001026895)",
      "output_term": "(* (+ (pow (+ (* -1 (* a a)) (/ (/ -1 a) b)) (+ -1 (/ b b))) (+ (/ 1 (- (+ a c) c)) (* (+ d -2) (* (- d c) (/ c d))))) (* (+ -1 (/ (- 1 c) 1)) (/ b c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.00111796
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003568)",
      "output_term": "(- 0 (* c (* (+ 1 (+ (/ 1 a) (* (- d c) (* (+ d -2) (/ c d))))) (/ b c))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 9,
      "simplification_time": 0.0010154679999999998
    },
    "speedup": 1.1009308023492619,
    "weight_simple_diff": 12,
    "weight_complex_diff": 33,
    "depth_diff": -2
  },
  {
    "base_term": "(+ (- (* (- (+ (- (/ (/ a (- 0 0)) (+ -1 0)) 1) (pow 0 (+ -1 -1))) (+ (* a a) a)) (/ (pow (/ -1 -1) 1) (+ 0 b))) (- (- (+ -1 b) a) (* 0 b))) (- (+ (/ (- 0 b) 1) (/ a 0)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001070843)",
      "output_term": "(+ (- (* (- (+ -1 (+ (/ (/ a 0) -1) (pow 0 -2))) (+ a (* a a))) (/ 1 b)) (- (+ -1 b) a)) (- (+ (/ a 0) (/ (* -1 b) 1)) (pow -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.001113723
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003296)",
      "output_term": "(+ (- (/ (- (+ (- (/ (/ a 0) -1) 1) (pow 0 -2)) (+ a (* a a))) b) (- (+ -1 b) a)) (- (/ a 0) (+ b (pow -1 b))))",
      "output_weight_simple": 22,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.001010736
    },
    "speedup": 1.1018930759367433,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (- (+ (- (- (- -1 (/ 1 (- 0 0))) (pow 1 -1)) (* (/ 0 -1) 1)) a) (pow (pow (pow 0 1) 0) (/ 0 0))) (pow (pow (pow (- -1 1) b) (pow 1 0)) (* b -1))) (* (+ (- (- a 0) 0) (- e e)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001061308)",
      "output_term": "(pow (* (- (+ (- (- -1 (/ 1 0)) (pow 1 -1)) a) (pow 1 (/ 0 0))) (pow (pow -2 b) (* -1 b))) (* -1 (* a c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.0011255079999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001839)",
      "output_term": "(pow (* (- (- (+ -1 a) (+ 1 (/ 1 0))) (pow (pow 0 0) (/ 0 0))) (pow (pow -2 b) (- 0 b))) (- 0 (* a c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.001021113
    },
    "speedup": 1.1022364811729946,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (* (- (+ (- (/ (/ a (- 0 0)) (+ -1 0)) 1) (pow 0 (+ -1 -1))) (+ (* a a) a)) (/ (pow (/ -1 -1) 1) (+ 0 b))) (- (- (+ -1 b) a) (* 0 b))) (- (+ (/ (- 0 b) 1) (/ a 0)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001070436)",
      "output_term": "(+ (- (* (- (+ -1 (+ (/ (/ a 0) -1) (pow 0 -2))) (+ a (* a a))) (/ 1 b)) (- (+ -1 b) a)) (- (+ (/ a 0) (/ (* -1 b) 1)) (pow -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.001113864
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000461)",
      "output_term": "(+ (- (/ (- (+ (- (/ (/ a 0) -1) 1) (pow 0 -2)) (+ a (* a a))) b) (- (+ -1 b) a)) (- (/ a 0) (+ b (pow -1 b))))",
      "output_weight_simple": 22,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.001007948
    },
    "speedup": 1.1050808176612286,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (- (* (* (pow (pow (+ (+ a a) 1) (+ 0 a)) (pow -1 b)) (- (* 1 c) a)) (+ (/ b b) b)) (* (/ (+ -1 d) 1) c)) (+ (pow 0 (/ a c)) (+ a e))) (- (/ (+ (+ c a) c) (pow -1 c)) (pow d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001052327)",
      "output_term": "(+ (- (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ b (/ b b)))) (* c (/ (+ -1 d) 1))) (+ (pow 0 (/ a c)) (+ a e))) (+ -1 (/ (+ a (+ c c)) (pow -1 c))))",
      "output_weight_simple": 33,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.001147634
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001024989)",
      "output_term": "(+ (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ 1 b))) (+ (* c (- d 1)) (+ a (+ (pow 0 (/ a c)) e)))) (- (/ (+ a (+ c c)) (pow -1 c)) 1))",
      "output_weight_simple": 31,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.001037011
    },
    "speedup": 1.1066748568722993,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (* (* (- (* (* (pow (pow -1 1) 1) (pow -1 a)) (- b b)) (/ (- 0 d) -1)) (- (+ 1 -1) 0)) (- (* 1 (pow e c)) (+ b 1))) (- (+ (* -1 -1) 1) (* b -1))) (* (- (pow (* d c) a) (* 0 b)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.0007055119999999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.000636599
    },
    "speedup": 1.1082518194342121,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (pow (+ (* a (* (/ (/ 1 1) -1) a)) (/ (/ -1 a) b)) (+ (/ b b) -1)) (/ 1 (- (+ c a) c))) (* (* (+ (+ -1 d) -1) (- d c)) (/ c d))) (* (+ (/ (- 1 c) 1) (* 1 -1)) (/ b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001032723)",
      "output_term": "(* (+ (pow (+ (* -1 (* a a)) (/ (/ -1 a) b)) (+ -1 (/ b b))) (+ (/ 1 (- (+ a c) c)) (* (+ d -2) (* (- d c) (/ c d))))) (* (+ -1 (/ (- 1 c) 1)) (/ b c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.0011245019999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001602)",
      "output_term": "(- 0 (* c (* (+ 1 (+ (/ 1 a) (* (- d c) (* (+ d -2) (/ c d))))) (/ b c))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 9,
      "simplification_time": 0.001013726
    },
    "speedup": 1.1092760765729595,
    "weight_simple_diff": 12,
    "weight_complex_diff": 33,
    "depth_diff": -2
  },
  {
    "base_term": "(- (/ (pow (* (/ (* (pow a 1) b) (+ 1 a)) (+ (pow b (+ 1 0)) (* 0 -1))) (* (- -1 (* c -1)) (pow b 0))) (* (pow (* (* a 0) b) (pow a 0)) (/ a 0))) (- (+ (- 1 (+ e e)) (- a 1)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 8,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001062407)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- (+ a (* e -2)) (pow -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.001127262
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001016225)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- a (+ e (+ e (pow -1 b)))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.00101492
    },
    "speedup": 1.1106904977732233,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (* (- (+ (- (/ (/ a (- 0 0)) (+ -1 0)) 1) (pow 0 (+ -1 -1))) (+ (* a a) a)) (/ (pow (/ -1 -1) 1) (+ 0 b))) (- (- (+ -1 b) a) (* 0 b))) (- (+ (/ (- 0 b) 1) (/ a 0)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00107928)",
      "output_term": "(+ (- (* (- (+ -1 (+ (/ (/ a 0) -1) (pow 0 -2))) (+ a (* a a))) (/ 1 b)) (- (+ -1 b) a)) (- (+ (/ a 0) (/ (* -1 b) 1)) (pow -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.001122962
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004436)",
      "output_term": "(+ (- (/ (- (+ (- (/ (/ a 0) -1) 1) (pow 0 -2)) (+ a (* a a))) b) (- (+ -1 b) a)) (- (/ a 0) (+ b (pow -1 b))))",
      "output_weight_simple": 22,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.0010106499999999999
    },
    "speedup": 1.1111284816702123,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (pow (+ (* a (* (/ (/ 1 1) -1) a)) (/ (/ -1 a) b)) (+ (/ b b) -1)) (/ 1 (- (+ c a) c))) (* (* (+ (+ -1 d) -1) (- d c)) (/ c d))) (* (+ (/ (- 1 c) 1) (* 1 -1)) (/ b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001036913)",
      "output_term": "(* (+ (pow (+ (* -1 (* a a)) (/ (/ -1 a) b)) (+ -1 (/ b b))) (+ (/ 1 (- (+ a c) c)) (* (+ d -2) (* (- d c) (/ c d))))) (* (+ -1 (/ (- 1 c) 1)) (/ b c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.0011287760000000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003786)",
      "output_term": "(- 0 (* c (* (+ 1 (+ (/ 1 a) (* (- d c) (* (+ d -2) (/ c d))))) (/ b c))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 9,
      "simplification_time": 0.001015781
    },
    "speedup": 1.1112395289929622,
    "weight_simple_diff": 12,
    "weight_complex_diff": 33,
    "depth_diff": -2
  },
  {
    "base_term": "(/ (* (* (- (* (pow (/ (+ 0 (/ a a)) a) (pow 1 a)) (+ (* -1 a) 1)) (pow (* 1 1) -1)) (+ (pow (+ 1 -1) -1) (pow a 1))) (* (/ 0 (+ d d)) (/ e c))) (- (* (+ (/ d b) a) (* e -1)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001065884)",
      "output_term": "(/ (* (- (* (pow (/ (/ a a) a) (pow 1 a)) (+ 1 (* a -1))) (pow 1 -1)) (* (+ a (pow 0 -1)) (* (/ 0 (+ d d)) (/ e c)))) (+ c (* -1 (* e (+ a (/ d b))))))",
      "output_weight_simple": 31,
      "output_weight_complex": 79,
      "output_depth": 8,
      "simplification_time": 0.001176436
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001020106)",
      "output_term": "(/ (/ 0 (+ d d)) (- c (* e (+ a (/ d b)))))",
      "output_weight_simple": 13,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.001055987
    },
    "speedup": 1.1140629572144356,
    "weight_simple_diff": 18,
    "weight_complex_diff": 48,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (- (* (* (pow (pow (+ (+ a a) 1) (+ 0 a)) (pow -1 b)) (- (* 1 c) a)) (+ (/ b b) b)) (* (/ (+ -1 d) 1) c)) (+ (pow 0 (/ a c)) (+ a e))) (- (/ (+ (+ c a) c) (pow -1 c)) (pow d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001044517)",
      "output_term": "(+ (- (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ b (/ b b)))) (* c (/ (+ -1 d) 1))) (+ (pow 0 (/ a c)) (+ a e))) (+ -1 (/ (+ a (+ c c)) (pow -1 c))))",
      "output_weight_simple": 33,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.0011393520000000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010638)",
      "output_term": "(+ (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ 1 b))) (+ (* c (- d 1)) (+ a (+ (pow 0 (/ a c)) e)))) (- (/ (+ a (+ c c)) (pow -1 c)) 1))",
      "output_weight_simple": 31,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.001022502
    },
    "speedup": 1.1142785050787187,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (/ (+ (pow (+ (/ (/ (/ a a) a) (* 1 -1)) (* c b)) (- 0 (/ 1 1))) (+ (* d 1) -1)) (pow (+ (pow 1 a) 1) (pow 1 -1))) (+ (- b (- 1 b)) (/ 0 0))) (+ (/ (- (* c -1) 1) (/ d d)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001073887)",
      "output_term": "(+ (- (/ (+ -1 (+ (pow (+ (/ (/ (/ a a) a) -1) (* c b)) -1) d)) (pow (+ 1 (pow 1 a)) (pow 1 -1))) (+ -1 (+ b (+ b (/ 0 0))))) (+ b (/ (+ -1 (* -1 c)) (/ d d))))",
      "output_weight_simple": 31,
      "output_weight_complex": 77,
      "output_depth": 11,
      "simplification_time": 0.001132106
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003111)",
      "output_term": "(+ b (+ (- (/ (+ -1 (+ (/ 1 (+ (/ -1 a) (* c b))) d)) (+ 1 (pow 1 a))) (- (+ b (/ 0 0)) (- 1 b))) (- -1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 48,
      "output_depth": 10,
      "simplification_time": 0.0010129730000000001
    },
    "speedup": 1.1176072807468707,
    "weight_simple_diff": 7,
    "weight_complex_diff": 29,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (- (* (* (pow (pow (+ (+ a a) 1) (+ 0 a)) (pow -1 b)) (- (* 1 c) a)) (+ (/ b b) b)) (* (/ (+ -1 d) 1) c)) (+ (pow 0 (/ a c)) (+ a e))) (- (/ (+ (+ c a) c) (pow -1 c)) (pow d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001047541)",
      "output_term": "(+ (- (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ b (/ b b)))) (* c (/ (+ -1 d) 1))) (+ (pow 0 (/ a c)) (+ a e))) (+ -1 (/ (+ a (+ c c)) (pow -1 c))))",
      "output_weight_simple": 33,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.001144237
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001011587)",
      "output_term": "(+ (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ 1 b))) (+ (* c (- d 1)) (+ a (+ (pow 0 (/ a c)) e)))) (- (/ (+ a (+ c c)) (pow -1 c)) 1))",
      "output_weight_simple": 31,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.00102335
    },
    "speedup": 1.1181286949723948,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (* (* (* (/ (pow (+ (* a 0) 0) (* -1 0)) (+ 1 0)) (+ (+ 0 b) b)) (- (+ 0 0) c)) (* (* (- a d) c) (+ b -1))) (* 0 (/ (- e -1) d))) (pow (* (+ (+ 0 c) c) (+ d d)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.00107606)",
      "output_term": "(- (* (/ (pow 0 0) 1) (* (* c (* (- a d) (+ -1 b))) (* (+ b b) (- 0 c)))) (* (+ c c) (+ d d)))",
      "output_weight_simple": 22,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.001142917
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001003435)",
      "output_term": "(- (* c (* (* (- a d) (+ -1 b)) (* (pow 0 0) (- 0 (* (+ b b) c))))) (* c (* d 4)))",
      "output_weight_simple": 20,
      "output_weight_complex": 34,
      "output_depth": 8,
      "simplification_time": 0.001021658
    },
    "speedup": 1.1186884456442372,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (/ (+ (pow (+ (/ (/ (/ a a) a) (* 1 -1)) (* c b)) (- 0 (/ 1 1))) (+ (* d 1) -1)) (pow (+ (pow 1 a) 1) (pow 1 -1))) (+ (- b (- 1 b)) (/ 0 0))) (+ (/ (- (* c -1) 1) (/ d d)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001081649)",
      "output_term": "(+ (- (/ (+ -1 (+ (pow (+ (/ (/ (/ a a) a) -1) (* c b)) -1) d)) (pow (+ 1 (pow 1 a)) (pow 1 -1))) (+ -1 (+ b (+ b (/ 0 0))))) (+ b (/ (+ -1 (* -1 c)) (/ d d))))",
      "output_weight_simple": 31,
      "output_weight_complex": 77,
      "output_depth": 11,
      "simplification_time": 0.001140414
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006552)",
      "output_term": "(+ b (+ (- (/ (+ -1 (+ (/ 1 (+ (/ -1 a) (* c b))) d)) (+ 1 (pow 1 a))) (- (+ b (/ 0 0)) (- 1 b))) (- -1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 48,
      "output_depth": 10,
      "simplification_time": 0.001016302
    },
    "speedup": 1.1221211805152405,
    "weight_simple_diff": 7,
    "weight_complex_diff": 29,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (* (+ (- (+ (- (/ (+ a b) -1) (+ -1 0)) (+ 1 a)) (pow (+ 0 -1) b)) d) (- (+ (* b d) a) 0)) (* (* (* (+ d 1) c) (/ -1 a)) (* 0 d))) (* (+ (- (- c 1) 0) (* b c)) (/ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001056265)",
      "output_term": "(- (* (+ (- (+ a (+ (/ (+ a b) -1) 2)) (pow -1 b)) d) (+ a (* b d))) (* (+ -1 (+ c (* b c))) (/ -1 c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 41,
      "output_depth": 9,
      "simplification_time": 0.001147202
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002342)",
      "output_term": "(- (* (+ (- (+ (/ (+ a b) -1) (+ a 2)) (pow -1 b)) d) (+ a (* b d))) (/ (- 1 (* c (+ b 1))) c))",
      "output_weight_simple": 22,
      "output_weight_complex": 40,
      "output_depth": 8,
      "simplification_time": 0.001021337
    },
    "speedup": 1.1232355236322584,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (* (+ (- (+ (- (/ (+ a b) -1) (+ -1 0)) (+ 1 a)) (pow (+ 0 -1) b)) d) (- (+ (* b d) a) 0)) (* (* (* (+ d 1) c) (/ -1 a)) (* 0 d))) (* (+ (- (- c 1) 0) (* b c)) (/ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001059091)",
      "output_term": "(- (* (+ (- (+ a (+ (/ (+ a b) -1) 2)) (pow -1 b)) d) (+ a (* b d))) (* (+ -1 (+ c (* b c))) (/ -1 c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 41,
      "output_depth": 9,
      "simplification_time": 0.001149539
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001003925)",
      "output_term": "(- (* (+ (- (+ (/ (+ a b) -1) (+ a 2)) (pow -1 b)) d) (+ a (* b d))) (/ (- 1 (* c (+ b 1))) c))",
      "output_weight_simple": 22,
      "output_weight_complex": 40,
      "output_depth": 8,
      "simplification_time": 0.001022913
    },
    "speedup": 1.1237896086959496,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (* (+ (- (+ (- (/ (+ a b) -1) (+ -1 0)) (+ 1 a)) (pow (+ 0 -1) b)) d) (- (+ (* b d) a) 0)) (* (* (* (+ d 1) c) (/ -1 a)) (* 0 d))) (* (+ (- (- c 1) 0) (* b c)) (/ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.0010595)",
      "output_term": "(- (* (+ (- (+ a (+ (/ (+ a b) -1) 2)) (pow -1 b)) d) (+ a (* b d))) (* (+ -1 (+ c (* b c))) (/ -1 c)))",
      "output_weight_simple": 22,
      "output_weight_complex": 41,
      "output_depth": 9,
      "simplification_time": 0.001149115
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002101)",
      "output_term": "(- (* (+ (- (+ (/ (+ a b) -1) (+ a 2)) (pow -1 b)) d) (+ a (* b d))) (/ (- 1 (* c (+ b 1))) c))",
      "output_weight_simple": 22,
      "output_weight_complex": 40,
      "output_depth": 8,
      "simplification_time": 0.001021009
    },
    "speedup": 1.125470000754156,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (* (- (* (pow (/ (+ 0 (/ a a)) a) (pow 1 a)) (+ (* -1 a) 1)) (pow (* 1 1) -1)) (+ (pow (+ 1 -1) -1) (pow a 1))) (* (/ 0 (+ d d)) (/ e c))) (- (* (+ (/ d b) a) (* e -1)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001071122)",
      "output_term": "(/ (* (- (* (pow (/ (/ a a) a) (pow 1 a)) (+ 1 (* a -1))) (pow 1 -1)) (* (+ a (pow 0 -1)) (* (/ 0 (+ d d)) (/ e c)))) (+ c (* -1 (* e (+ a (/ d b))))))",
      "output_weight_simple": 31,
      "output_weight_complex": 79,
      "output_depth": 8,
      "simplification_time": 0.001177137
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001007049)",
      "output_term": "(/ (/ 0 (+ d d)) (- c (* e (+ a (/ d b)))))",
      "output_weight_simple": 13,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.0010444080000000001
    },
    "speedup": 1.1270853919158028,
    "weight_simple_diff": 18,
    "weight_complex_diff": 48,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (* (+ (- (pow (+ (* (* -1 (* a a)) (/ b -1)) (pow b 0)) (+ (/ 0 -1) 1)) (pow (/ a a) d)) (+ (* (- 0 1) 0) (+ -1 1))) (+ (pow b (+ 0 1)) (/ d 1))) (+ (- (/ 1 (* -1 -1)) (* 0 1)) d))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001057367)",
      "output_term": "(/ (* (- (+ (* (* a a) (* -1 (/ b -1))) 1) (pow (/ a a) d)) (+ b (/ d 1))) (+ 1 d))",
      "output_weight_simple": 18,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.0011370669999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100065)",
      "output_term": "(/ (* (- (* a (* a b)) (- (pow 1 d) 1)) (+ b d)) (+ 1 d))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 6,
      "simplification_time": 0.001008154
    },
    "speedup": 1.1278703452051966,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (+ (pow (- (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) (- (- 0 c) 1)) (pow (- a 1) b)) (- (* (/ 0 -1) b) (/ 1 b))) (+ -1 (/ (/ a 0) c))) (/ (- (/ (+ a 0) 1) (pow b b)) (+ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003279)",
      "output_term": "(+ (pow (+ (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) (+ 1 c)) (pow (+ a -1) b)) (+ (/ (- (/ a 1) (pow b b)) (+ 1 a)) (* -1 (+ (/ 1 b) (+ -1 (/ (/ a 0) c))))))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.001021216
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (pow (+ (/ (/ (- (/ 1 a) a) (pow 0 b)) (pow a a)) (+ 1 c)) (pow (- a 1) b)) (+ -1 (+ (/ 1 b) (/ (/ a 0) c)))) (/ (- a (pow b b)) (+ 1 a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 9,
      "simplification_time": 0.000905281
    },
    "speedup": 1.128065208482228,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": -1
  },
  {
    "base_term": "(- (* (* (- (+ (/ (* (/ (- a -1) -1) (+ -1 a)) (/ a -1)) (pow (pow b 0) a)) (- (- b b) 1)) (- (/ 1 (+ 1 1)) (- 1 1))) (pow (+ (pow 0 b) 1) -1)) (/ (- (+ c (/ c 0)) (* 0 c)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001020682)",
      "output_term": "(- (* (+ (/ (* (/ (+ a 1) -1) (+ a -1)) (/ a -1)) (+ (pow 1 a) 1)) (* 0.5 (pow (+ 1 (pow 0 b)) -1))) (/ (+ c (/ c 0)) -1))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001037857
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (* (+ (/ (* (/ (+ a 1) -1) (+ a -1)) (/ a -1)) (+ (pow 1 a) 1)) (/ 0.5 (+ 1 (pow 0 b)))) (/ (+ c (/ c 0)) -1))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.00091901
    },
    "speedup": 1.1293206820382804,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (/ (+ (pow (+ (/ (/ (/ a a) a) (* 1 -1)) (* c b)) (- 0 (/ 1 1))) (+ (* d 1) -1)) (pow (+ (pow 1 a) 1) (pow 1 -1))) (+ (- b (- 1 b)) (/ 0 0))) (+ (/ (- (* c -1) 1) (/ d d)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00108702)",
      "output_term": "(+ (- (/ (+ -1 (+ (pow (+ (/ (/ (/ a a) a) -1) (* c b)) -1) d)) (pow (+ 1 (pow 1 a)) (pow 1 -1))) (+ -1 (+ b (+ b (/ 0 0))))) (+ b (/ (+ -1 (* -1 c)) (/ d d))))",
      "output_weight_simple": 31,
      "output_weight_complex": 77,
      "output_depth": 11,
      "simplification_time": 0.001145613
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004849)",
      "output_term": "(+ b (+ (- (/ (+ -1 (+ (/ 1 (+ (/ -1 a) (* c b))) d)) (+ 1 (pow 1 a))) (- (+ b (/ 0 0)) (- 1 b))) (- -1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 48,
      "output_depth": 10,
      "simplification_time": 0.001014368
    },
    "speedup": 1.1293859822076404,
    "weight_simple_diff": 7,
    "weight_complex_diff": 29,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (* (- (+ (/ (* (/ (- a -1) -1) (+ -1 a)) (/ a -1)) (pow (pow b 0) a)) (- (- b b) 1)) (- (/ 1 (+ 1 1)) (- 1 1))) (pow (+ (pow 0 b) 1) -1)) (/ (- (+ c (/ c 0)) (* 0 c)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013798)",
      "output_term": "(- (* (+ (/ (* (/ (+ a 1) -1) (+ a -1)) (/ a -1)) (+ (pow 1 a) 1)) (* 0.5 (pow (+ 1 (pow 0 b)) -1))) (/ (+ c (/ c 0)) -1))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001030806
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (* (+ (/ (* (/ (+ a 1) -1) (+ a -1)) (/ a -1)) (+ (pow 1 a) 1)) (/ 0.5 (+ 1 (pow 0 b)))) (/ (+ c (/ c 0)) -1))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.00090653
    },
    "speedup": 1.1370897819156565,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (* (- (+ (/ (* (/ (- a -1) -1) (+ -1 a)) (/ a -1)) (pow (pow b 0) a)) (- (- b b) 1)) (- (/ 1 (+ 1 1)) (- 1 1))) (pow (+ (pow 0 b) 1) -1)) (/ (- (+ c (/ c 0)) (* 0 c)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001009179)",
      "output_term": "(- (* (+ (/ (* (/ (+ a 1) -1) (+ a -1)) (/ a -1)) (+ (pow 1 a) 1)) (* 0.5 (pow (+ 1 (pow 0 b)) -1))) (/ (+ c (/ c 0)) -1))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001026184
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (* (+ (/ (* (/ (+ a 1) -1) (+ a -1)) (/ a -1)) (+ (pow 1 a) 1)) (/ 0.5 (+ 1 (pow 0 b)))) (/ (+ c (/ c 0)) -1))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.0009013949999999999
    },
    "speedup": 1.1384398626573258,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (+ (+ (+ (* (pow 0 (pow 1 a)) (+ b b)) (- 1 b)) (/ (* b 0) 0)) (- (- -1 a) c)) (* (+ (pow 0 1) a) (+ d 1))) (/ (- -1 (+ a -1)) (/ 1 0))) (* (* (* (pow 0 e) e) 0) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001092651)",
      "output_term": "(pow (* a (* (+ (* (pow 0 (pow 1 a)) (+ b b)) (+ (- (- -1 a) c) (+ (- 1 b) (/ 0 0)))) (+ 1 d))) (/ (* a -1) (/ 1 0)))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.0011810459999999998
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001002501)",
      "output_term": "(pow (* (+ (* (pow 0 (pow 1 a)) (+ b b)) (+ (- 1 b) (- (+ (/ 0 0) -1) (+ a c)))) (* a (+ 1 d))) (/ (- 0 a) (/ 1 0)))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.001028536
    },
    "speedup": 1.1482787184891923,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (+ (pow (/ (/ (* a (pow (pow a 0) a)) (* a a)) (- (+ -1 0) -1)) (+ (- 1 c) e)) (- (* (/ b a) c) (/ e e))) (+ (* (- c 1) 0) (pow e 1))) (* (- (* (+ b a) a) (- 0 1)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001044518)",
      "output_term": "(* (/ (+ (pow (/ (/ (* a (pow 1 a)) (* a a)) 0) (+ (- 1 c) e)) (- (* c (/ b a)) (/ e e))) e) (* (+ 1 (* a (+ a b))) (/ 1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.001089444
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (pow (/ (/ (* a (pow 1 a)) (* a a)) 0) (+ (- 1 c) e)) (- (* c (/ b a)) 1)) (/ (+ 1 (* a (+ a b))) b)) e)",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.000947604
    },
    "speedup": 1.1496827788823178,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (+ (pow (/ (/ (* a (pow (pow a 0) a)) (* a a)) (- (+ -1 0) -1)) (+ (- 1 c) e)) (- (* (/ b a) c) (/ e e))) (+ (* (- c 1) 0) (pow e 1))) (* (- (* (+ b a) a) (- 0 1)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001054548)",
      "output_term": "(* (/ (+ (pow (/ (/ (* a (pow 1 a)) (* a a)) 0) (+ (- 1 c) e)) (- (* c (/ b a)) (/ e e))) e) (* (+ 1 (* a (+ a b))) (/ 1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.00109968
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (pow (/ (/ (* a (pow 1 a)) (* a a)) 0) (+ (- 1 c) e)) (- (* c (/ b a)) 1)) (/ (+ 1 (* a (+ a b))) b)) e)",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.0009563290000000001
    },
    "speedup": 1.1498971588229572,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (+ (pow (/ (/ (* a (pow (pow a 0) a)) (* a a)) (- (+ -1 0) -1)) (+ (- 1 c) e)) (- (* (/ b a) c) (/ e e))) (+ (* (- c 1) 0) (pow e 1))) (* (- (* (+ b a) a) (- 0 1)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001051234)",
      "output_term": "(* (/ (+ (pow (/ (/ (* a (pow 1 a)) (* a a)) 0) (+ (- 1 c) e)) (- (* c (/ b a)) (/ e e))) e) (* (+ 1 (* a (+ a b))) (/ 1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.001096022
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (pow (/ (/ (* a (pow 1 a)) (* a a)) 0) (+ (- 1 c) e)) (- (* c (/ b a)) 1)) (/ (+ 1 (* a (+ a b))) b)) e)",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.000949021
    },
    "speedup": 1.1548975207081826,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (+ (+ (+ (* (pow 0 (pow 1 a)) (+ b b)) (- 1 b)) (/ (* b 0) 0)) (- (- -1 a) c)) (* (+ (pow 0 1) a) (+ d 1))) (/ (- -1 (+ a -1)) (/ 1 0))) (* (* (* (pow 0 e) e) 0) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001105214)",
      "output_term": "(pow (* a (* (+ (* (pow 0 (pow 1 a)) (+ b b)) (+ (- (- -1 a) c) (+ (- 1 b) (/ 0 0)))) (+ 1 d))) (/ (* a -1) (/ 1 0)))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.0011934839999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001005834)",
      "output_term": "(pow (* (+ (* (pow 0 (pow 1 a)) (+ b b)) (+ (- 1 b) (- (+ (/ 0 0) -1) (+ a c)))) (* a (+ 1 d))) (/ (- 0 a) (/ 1 0)))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.0010316420000000001
    },
    "speedup": 1.1568780642897436,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (+ (pow (- (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) (- (- 0 c) 1)) (pow (- a 1) b)) (- (* (/ 0 -1) b) (/ 1 b))) (+ -1 (/ (/ a 0) c))) (/ (- (/ (+ a 0) 1) (pow b b)) (+ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001009421)",
      "output_term": "(+ (pow (+ (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) (+ 1 c)) (pow (+ a -1) b)) (+ (/ (- (/ a 1) (pow b b)) (+ 1 a)) (* -1 (+ (/ 1 b) (+ -1 (/ (/ a 0) c))))))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.00102898
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (pow (+ (/ (/ (- (/ 1 a) a) (pow 0 b)) (pow a a)) (+ 1 c)) (pow (- a 1) b)) (+ -1 (+ (/ 1 b) (/ (/ a 0) c)))) (/ (- a (pow b b)) (+ 1 a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 9,
      "simplification_time": 0.0008887570000000001
    },
    "speedup": 1.1577742847595012,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (* (+ (+ (+ (* (pow 0 (pow 1 a)) (+ b b)) (- 1 b)) (/ (* b 0) 0)) (- (- -1 a) c)) (* (+ (pow 0 1) a) (+ d 1))) (/ (- -1 (+ a -1)) (/ 1 0))) (* (* (* (pow 0 e) e) 0) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001102272)",
      "output_term": "(pow (* a (* (+ (* (pow 0 (pow 1 a)) (+ b b)) (+ (- (- -1 a) c) (+ (- 1 b) (/ 0 0)))) (+ 1 d))) (/ (* a -1) (/ 1 0)))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.001190806
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001001163)",
      "output_term": "(pow (* (+ (* (pow 0 (pow 1 a)) (+ b b)) (+ (- 1 b) (- (+ (/ 0 0) -1) (+ a c)))) (* a (+ 1 d))) (/ (- 0 a) (/ 1 0)))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.0010273629999999999
    },
    "speedup": 1.1590898251153683,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (pow (+ (- (pow (* (pow (+ a 1) a) (* b 0)) (* b a)) (/ (- a a) b)) (pow (/ -1 -1) b)) (- (- (/ 0 -1) e) (- 1 a))) (- (pow -1 (pow 1 1)) (+ c a))) (pow (+ (+ d (* 1 0)) a) (* 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007433)",
      "output_term": "(/ (/ (pow (+ (- (pow 0 (* a b)) (/ 0 b)) (pow 1 b)) (+ -1 (+ a (- 0 e)))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.001006196
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (+ (- (pow 0 (* a b)) (/ 0 b)) (pow 1 b)) (- a (+ 1 e))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.000861258
    },
    "speedup": 1.1682863903731517,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (+ (pow (- (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) (- (- 0 c) 1)) (pow (- a 1) b)) (- (* (/ 0 -1) b) (/ 1 b))) (+ -1 (/ (/ a 0) c))) (/ (- (/ (+ a 0) 1) (pow b b)) (+ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007998)",
      "output_term": "(+ (pow (+ (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) (+ 1 c)) (pow (+ a -1) b)) (+ (/ (- (/ a 1) (pow b b)) (+ 1 a)) (* -1 (+ (/ 1 b) (+ -1 (/ (/ a 0) c))))))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.00103094
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (pow (+ (/ (/ (- (/ 1 a) a) (pow 0 b)) (pow a a)) (+ 1 c)) (pow (- a 1) b)) (+ -1 (+ (/ 1 b) (/ (/ a 0) c)))) (/ (- a (pow b b)) (+ 1 a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 9,
      "simplification_time": 0.000879415
    },
    "speedup": 1.1723020416981742,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (/ (pow (+ (- (pow (* (pow (+ a 1) a) (* b 0)) (* b a)) (/ (- a a) b)) (pow (/ -1 -1) b)) (- (- (/ 0 -1) e) (- 1 a))) (- (pow -1 (pow 1 1)) (+ c a))) (pow (+ (+ d (* 1 0)) a) (* 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004466)",
      "output_term": "(/ (/ (pow (+ (- (pow 0 (* a b)) (/ 0 b)) (pow 1 b)) (+ -1 (+ a (- 0 e)))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.001003209
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (+ (- (pow 0 (* a b)) (/ 0 b)) (pow 1 b)) (- a (+ 1 e))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.0008479040000000001
    },
    "speedup": 1.1831634241612254,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (/ (pow (* (- (* (pow -1 (/ a a)) (pow a b)) (- 0 a)) (+ (- 1 0) b)) (* (pow 0 a) a)) (pow c (/ (- -1 1) a))) (+ (+ (* 0 c) c) (pow a 1))) (pow (/ (- (- a 1) c) (/ d c)) (* 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001029603)",
      "output_term": "(+ (pow (/ (pow (* (+ a (* (pow -1 (/ a a)) (pow a b))) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (pow (/ (- (+ -1 a) c) (/ d c)) -1))",
      "output_weight_simple": 29,
      "output_weight_complex": 77,
      "output_depth": 10,
      "simplification_time": 0.001044248
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow (* (- a (pow a b)) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (/ 1 (/ (- a (+ 1 c)) (/ d c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.00088055
    },
    "speedup": 1.185904264380217,
    "weight_simple_diff": 4,
    "weight_complex_diff": 11,
    "depth_diff": 2
  },
  {
    "base_term": "(* (- (pow (+ (/ (+ (+ (- (/ 0 -1) -1) (+ -1 a)) (/ b b)) (- (+ b b) c)) (* b 1)) (* (/ (pow -1 d) c) (- 1 -1))) (/ (- (* -1 d) e) (* -1 0))) (- (* (* (- d 0) -1) (- e 0)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001130414)",
      "output_term": "(* (- (pow (+ b (/ (+ a (/ b b)) (- (+ b b) c))) (* (/ (pow -1 d) c) 2)) (/ (* -1 (+ d e)) 0)) (+ -1 (* -1 (* d e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.001202159
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005375)",
      "output_term": "(* (- (pow (+ b (/ (+ 1 a) (- (+ b b) c))) (* (/ (pow -1 d) c) 2)) (/ (- 0 (+ d e)) 0)) (- -1 (* d e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.0010128090000000001
    },
    "speedup": 1.1869552896943054,
    "weight_simple_diff": 1,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (- (+ (* (* (pow (* (/ 1 a) a) (- 1 -1)) (+ a 0)) (* 0 (- a 0))) (* (* -1 a) 0)) (pow (+ a (pow -1 -1)) (- a 1))) (pow (/ (/ c a) b) -1)) (- (+ (- (- 1 0) e) (/ 1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001025574)",
      "output_term": "(/ (- (- 0 (pow (+ a (pow -1 -1)) (+ a -1))) (pow (/ (/ c a) b) -1)) (+ -1 (* -1 e)))",
      "output_weight_simple": 18,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.001047947
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (- 0 (pow (+ a -1) (+ a -1))) (/ 1 (/ (/ c a) b))) (- -1 e))",
      "output_weight_simple": 16,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.0008824120000000001
    },
    "speedup": 1.1875937770565224,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (- (+ (* (* (pow (* (/ 1 a) a) (- 1 -1)) (+ a 0)) (* 0 (- a 0))) (* (* -1 a) 0)) (pow (+ a (pow -1 -1)) (- a 1))) (pow (/ (/ c a) b) -1)) (- (+ (- (- 1 0) e) (/ 1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001015716)",
      "output_term": "(/ (- (- 0 (pow (+ a (pow -1 -1)) (+ a -1))) (pow (/ (/ c a) b) -1)) (+ -1 (* -1 e)))",
      "output_weight_simple": 18,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.001037848
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (- 0 (pow (+ a -1) (+ a -1))) (/ 1 (/ (/ c a) b))) (- -1 e))",
      "output_weight_simple": 16,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.000873658
    },
    "speedup": 1.1879339512715503,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (/ (pow (+ (- (pow (* (pow (+ a 1) a) (* b 0)) (* b a)) (/ (- a a) b)) (pow (/ -1 -1) b)) (- (- (/ 0 -1) e) (- 1 a))) (- (pow -1 (pow 1 1)) (+ c a))) (pow (+ (+ d (* 1 0)) a) (* 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001006122)",
      "output_term": "(/ (/ (pow (+ (- (pow 0 (* a b)) (/ 0 b)) (pow 1 b)) (+ -1 (+ a (- 0 e)))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.001012262
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (+ (- (pow 0 (* a b)) (/ 0 b)) (pow 1 b)) (- a (+ 1 e))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.00085071
    },
    "speedup": 1.1899025519859883,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (pow (+ (/ (+ (+ (- (/ 0 -1) -1) (+ -1 a)) (/ b b)) (- (+ b b) c)) (* b 1)) (* (/ (pow -1 d) c) (- 1 -1))) (/ (- (* -1 d) e) (* -1 0))) (- (* (* (- d 0) -1) (- e 0)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001141759)",
      "output_term": "(* (- (pow (+ b (/ (+ a (/ b b)) (- (+ b b) c))) (* (/ (pow -1 d) c) 2)) (/ (* -1 (+ d e)) 0)) (+ -1 (* -1 (* d e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.001209869
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001008664)",
      "output_term": "(* (- (pow (+ b (/ (+ 1 a) (- (+ b b) c))) (* (/ (pow -1 d) c) 2)) (/ (- 0 (+ d e)) 0)) (- -1 (* d e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.001015856
    },
    "speedup": 1.190984745869493,
    "weight_simple_diff": 1,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (/ (pow (* (- (* (pow -1 (/ a a)) (pow a b)) (- 0 a)) (+ (- 1 0) b)) (* (pow 0 a) a)) (pow c (/ (- -1 1) a))) (+ (+ (* 0 c) c) (pow a 1))) (pow (/ (- (- a 1) c) (/ d c)) (* 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00102547)",
      "output_term": "(+ (pow (/ (pow (* (+ a (* (pow -1 (/ a a)) (pow a b))) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (pow (/ (- (+ -1 a) c) (/ d c)) -1))",
      "output_weight_simple": 29,
      "output_weight_complex": 77,
      "output_depth": 10,
      "simplification_time": 0.001039834
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow (* (- a (pow a b)) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (/ 1 (/ (- a (+ 1 c)) (/ d c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.0008709550000000001
    },
    "speedup": 1.193900947810162,
    "weight_simple_diff": 4,
    "weight_complex_diff": 11,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (- (- (+ (* (* (pow (* (/ 1 a) a) (- 1 -1)) (+ a 0)) (* 0 (- a 0))) (* (* -1 a) 0)) (pow (+ a (pow -1 -1)) (- a 1))) (pow (/ (/ c a) b) -1)) (- (+ (- (- 1 0) e) (/ 1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013056)",
      "output_term": "(/ (- (- 0 (pow (+ a (pow -1 -1)) (+ a -1))) (pow (/ (/ c a) b) -1)) (+ -1 (* -1 e)))",
      "output_weight_simple": 18,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.0010356979999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (- 0 (pow (+ a -1) (+ a -1))) (/ 1 (/ (/ c a) b))) (- -1 e))",
      "output_weight_simple": 16,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.0008618219999999999
    },
    "speedup": 1.2017539584740236,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (/ (pow (* (- (* (pow -1 (/ a a)) (pow a b)) (- 0 a)) (+ (- 1 0) b)) (* (pow 0 a) a)) (pow c (/ (- -1 1) a))) (+ (+ (* 0 c) c) (pow a 1))) (pow (/ (- (- a 1) c) (/ d c)) (* 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00102851)",
      "output_term": "(+ (pow (/ (pow (* (+ a (* (pow -1 (/ a a)) (pow a b))) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (pow (/ (- (+ -1 a) c) (/ d c)) -1))",
      "output_weight_simple": 29,
      "output_weight_complex": 77,
      "output_depth": 10,
      "simplification_time": 0.001044337
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow (* (- a (pow a b)) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (/ 1 (/ (- a (+ 1 c)) (/ d c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.0008645640000000001
    },
    "speedup": 1.2079348665917156,
    "weight_simple_diff": 4,
    "weight_complex_diff": 11,
    "depth_diff": 2
  },
  {
    "base_term": "(* (+ (+ (pow (pow (* (pow (+ (pow a 1) a) (+ a b)) (- -1 a)) (+ a (+ 1 0))) (/ (+ 0 b) 0)) (- (/ (- 0 a) d) (- a -1))) (* (/ (* 1 a) -1) 1)) (pow (* (- (* 1 0) c) (+ -1 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010514)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001068557
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.0008825840000000001
    },
    "speedup": 1.2107142209693353,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (pow (pow (* (pow (+ (pow a 1) a) (+ a b)) (- -1 a)) (+ a (+ 1 0))) (/ (+ 0 b) 0)) (- (/ (- 0 a) d) (- a -1))) (* (/ (* 1 a) -1) 1)) (pow (* (- (* 1 0) c) (+ -1 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008442)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001067553
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.000875497
    },
    "speedup": 1.219367970421372,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (- (/ (* (- (/ (- -1 a) a) (* a -1)) (- 1 -1)) (- (* a a) a)) (- 0 (+ 0 d))) (/ (* b (+ -1 d)) (* a 1))) (/ (- (+ c e) -1) (+ b 0))) (/ (/ 0 (- (/ -1 c) 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008533)",
      "output_term": "(/ (* (+ (/ (* (+ a (/ (- -1 a) a)) 2) (* a (+ -1 a))) (+ d (/ (* b (+ -1 d)) a))) (/ (+ c (+ 1 e)) b)) (/ (/ 0 (+ -1 (/ -1 c))) 1))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001042229
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (/ (* (+ a (/ (- -1 a) a)) 2) (- (* a a) a)) (+ d (/ (* b (+ -1 d)) a))) (/ (+ c (+ 1 e)) b)) (/ 0 (- (/ -1 c) 1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.000851702
    },
    "speedup": 1.2237014824433898,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (- (/ (pow (* (pow (+ a -1) a) (* b a)) (+ e a)) (+ (* 0 1) 1)) (+ (- 1 1) 0)) (/ c (* (* -1 a) d))) (- (- (- a -1) -1) (* d e))) (- (- (/ (+ a -1) 0) (- -1 e)) (* d a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001321)",
      "output_term": "(pow (/ (pow (/ (pow (* (pow (+ a -1) a) (* a b)) (+ a e)) 1) (/ c (* a (* -1 d)))) (- (+ a 2) (* e d))) (- (+ e (+ 1 (/ (+ a -1) 0))) (* a d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.001015432
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (* (pow (+ a -1) a) (* a b)) (+ a e)) (/ c (- 0 (* a d)))) (- (+ a 2) (* e d))) (- (/ (+ a -1) 0) (+ (- -1 e) (* a d))))",
      "output_weight_simple": 27,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.000823985
    },
    "speedup": 1.2323428217746681,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (+ (pow (pow (* (pow (+ (pow a 1) a) (+ a b)) (- -1 a)) (+ a (+ 1 0))) (/ (+ 0 b) 0)) (- (/ (- 0 a) d) (- a -1))) (* (/ (* 1 a) -1) 1)) (pow (* (- (* 1 0) c) (+ -1 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018479)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.001075474
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.000871207
    },
    "speedup": 1.2344643695470767,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (+ (* (- (/ (* (pow (+ a -1) a) (- b 1)) 1) (pow (/ 0 a) b)) -1) (* (- (+ 1 1) a) (+ 0 0))) (pow (pow (- (- -1 1) a) (/ c 0)) (* 0 1))) (/ (* (* (+ 0 c) b) (pow 0 a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006498)",
      "output_term": "(+ -1 (+ (pow (/ 0 a) b) (* -1 (+ (/ (* (pow (+ a -1) a) (+ -1 b)) 1) (/ (* b (* c (pow 0 a))) (pow b -1))))))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.0010316330000000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- -1 (+ (- (* (pow (+ a -1) a) (- b 1)) (pow (/ 0 a) b)) (/ (* b (* c (pow 0 a))) (/ 1 b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.0008347019999999999
    },
    "speedup": 1.2359297090458634,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 2
  },
  {
    "base_term": "(- (- (+ (* (- (/ (* (pow (+ a -1) a) (- b 1)) 1) (pow (/ 0 a) b)) -1) (* (- (+ 1 1) a) (+ 0 0))) (pow (pow (- (- -1 1) a) (/ c 0)) (* 0 1))) (/ (* (* (+ 0 c) b) (pow 0 a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013691)",
      "output_term": "(+ -1 (+ (pow (/ 0 a) b) (* -1 (+ (/ (* (pow (+ a -1) a) (+ -1 b)) 1) (/ (* b (* c (pow 0 a))) (pow b -1))))))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.001038052
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- -1 (+ (- (* (pow (+ a -1) a) (- b 1)) (pow (/ 0 a) b)) (/ (* b (* c (pow 0 a))) (/ 1 b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.0008364669999999999
    },
    "speedup": 1.240995759545804,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 2
  },
  {
    "base_term": "(* (+ (* (/ (+ (+ a (+ (* (+ 1 -1) a) (pow 1 0))) (+ (/ 1 a) a)) (+ (* 0 a) 0)) (pow (* (- 0 b) 0) (+ -1 -1))) (* (- -1 (- 0 0)) (- 1 b))) (/ (/ (- (/ 0 0) a) (/ a 0)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001016764)",
      "output_term": "(* (+ (* (/ (+ a (+ a (+ 1 (/ 1 a)))) 0) (pow 0 -2)) (+ -1 b)) (/ (/ (- (/ 0 0) a) (/ a 0)) 1))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.0010376270000000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (* (/ (+ (+ 1 (/ 1 a)) (+ a a)) 0) (pow 0 -2)) (- b 1)) (/ (- (/ 0 0) a) (/ a 0)))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.0008349439999999999
    },
    "speedup": 1.2427504120036796,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (/ (- (/ (* (+ (+ 1 1) (* a 1)) (+ 0 a)) 1) (* 0 (+ (+ a 1) 1))) (* (* (pow a a) a) b)) (+ (/ (pow (- b 0) 0) (/ b 0)) (pow -1 c))) (+ (pow (+ -1 (/ 1 -1)) (- b 0)) (/ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001474)",
      "output_term": "(pow (+ (/ (/ (* a (+ 2 a)) 1) (* a (* (pow a a) b))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ (pow -2 b) (/ a a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001012462
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (* a (+ 2 a)) (* a (* (pow a a) b))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ 1 (pow -2 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.00081455
    },
    "speedup": 1.2429709655638082,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (+ (* (- (/ (* (pow (+ a -1) a) (- b 1)) 1) (pow (/ 0 a) b)) -1) (* (- (+ 1 1) a) (+ 0 0))) (pow (pow (- (- -1 1) a) (/ c 0)) (* 0 1))) (/ (* (* (+ 0 c) b) (pow 0 a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001023592)",
      "output_term": "(+ -1 (+ (pow (/ 0 a) b) (* -1 (+ (/ (* b (* c (pow 0 a))) (pow b -1)) (/ (* (pow (+ a -1) a) (+ -1 b)) 1)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.001046449
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- -1 (+ (- (* (pow (+ a -1) a) (- b 1)) (pow (/ 0 a) b)) (/ (* b (* c (pow 0 a))) (/ 1 b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.000841381
    },
    "speedup": 1.243727871202226,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 2
  },
  {
    "base_term": "(* (+ (* (/ (+ (+ a (+ (* (+ 1 -1) a) (pow 1 0))) (+ (/ 1 a) a)) (+ (* 0 a) 0)) (pow (* (- 0 b) 0) (+ -1 -1))) (* (- -1 (- 0 0)) (- 1 b))) (/ (/ (- (/ 0 0) a) (/ a 0)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003941)",
      "output_term": "(* (+ (* (/ (+ a (+ a (+ 1 (/ 1 a)))) 0) (pow 0 -2)) (+ -1 b)) (/ (/ (- (/ 0 0) a) (/ a 0)) 1))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.001023506
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (* (/ (+ (+ 1 (/ 1 a)) (+ a a)) 0) (pow 0 -2)) (- b 1)) (/ (- (/ 0 0) a) (/ a 0)))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.0008227260000000001
    },
    "speedup": 1.244042366474379,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (+ (- (/ (* (- (/ (- -1 a) a) (* a -1)) (- 1 -1)) (- (* a a) a)) (- 0 (+ 0 d))) (/ (* b (+ -1 d)) (* a 1))) (/ (- (+ c e) -1) (+ b 0))) (/ (/ 0 (- (/ -1 c) 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001016241)",
      "output_term": "(/ (* (+ (/ (* (+ a (/ (- -1 a) a)) 2) (* a (+ -1 a))) (+ d (/ (* b (+ -1 d)) a))) (/ (+ c (+ 1 e)) b)) (/ (/ 0 (+ -1 (/ -1 c))) 1))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001051301
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (/ (* (+ a (/ (- -1 a) a)) 2) (- (* a a) a)) (+ d (/ (* b (+ -1 d)) a))) (/ (+ c (+ 1 e)) b)) (/ 0 (- (/ -1 c) 1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.0008424109999999999
    },
    "speedup": 1.2479668475364163,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (- (/ (pow (* (pow (+ a -1) a) (* b a)) (+ e a)) (+ (* 0 1) 1)) (+ (- 1 1) 0)) (/ c (* (* -1 a) d))) (- (- (- a -1) -1) (* d e))) (- (- (/ (+ a -1) 0) (- -1 e)) (* d a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001019086)",
      "output_term": "(pow (/ (pow (/ (pow (* (pow (+ a -1) a) (* a b)) (+ a e)) 1) (/ c (* a (* -1 d)))) (- (+ a 2) (* e d))) (- (+ e (+ 1 (/ (+ a -1) 0))) (* a d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.001035032
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (* (pow (+ a -1) a) (* a b)) (+ a e)) (/ c (- 0 (* a d)))) (- (+ a 2) (* e d))) (- (/ (+ a -1) 0) (+ (- -1 e) (* a d))))",
      "output_weight_simple": 27,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.000825173
    },
    "speedup": 1.2543212150664163,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (/ (- (/ (* (+ (+ 1 1) (* a 1)) (+ 0 a)) 1) (* 0 (+ (+ a 1) 1))) (* (* (pow a a) a) b)) (+ (/ (pow (- b 0) 0) (/ b 0)) (pow -1 c))) (+ (pow (+ -1 (/ 1 -1)) (- b 0)) (/ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000387)",
      "output_term": "(pow (+ (/ (/ (* a (+ 2 a)) 1) (* a (* (pow a a) b))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ (pow -2 b) (/ a a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001009573
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (* a (+ 2 a)) (* a (* (pow a a) b))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ 1 (pow -2 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.0008036709999999999
    },
    "speedup": 1.256201853743634,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (- (/ (* (- (/ (- -1 a) a) (* a -1)) (- 1 -1)) (- (* a a) a)) (- 0 (+ 0 d))) (/ (* b (+ -1 d)) (* a 1))) (/ (- (+ c e) -1) (+ b 0))) (/ (/ 0 (- (/ -1 c) 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001024861)",
      "output_term": "(/ (* (+ (/ (* (+ a (/ (- -1 a) a)) 2) (* a (+ -1 a))) (+ d (/ (* b (+ -1 d)) a))) (/ (+ c (+ 1 e)) b)) (/ (/ 0 (+ -1 (/ -1 c))) 1))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001059564
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (/ (* (+ a (/ (- -1 a) a)) 2) (- (* a a) a)) (+ d (/ (* b (+ -1 d)) a))) (/ (+ c (+ 1 e)) b)) (/ 0 (- (/ -1 c) 1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.0008430369999999999
    },
    "speedup": 1.256841633285372,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (- (/ (pow (* (pow (+ a -1) a) (* b a)) (+ e a)) (+ (* 0 1) 1)) (+ (- 1 1) 0)) (/ c (* (* -1 a) d))) (- (- (- a -1) -1) (* d e))) (- (- (/ (+ a -1) 0) (- -1 e)) (* d a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001012236)",
      "output_term": "(pow (/ (pow (/ (pow (* (pow (+ a -1) a) (* a b)) (+ a e)) 1) (/ c (* a (* -1 d)))) (- (+ a 2) (* e d))) (- (+ e (+ 1 (/ (+ a -1) 0))) (* a d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.001028019
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (* (pow (+ a -1) a) (* a b)) (+ a e)) (/ c (- 0 (* a d)))) (- (+ a 2) (* e d))) (- (/ (+ a -1) 0) (+ (- -1 e) (* a d))))",
      "output_weight_simple": 27,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.0008153160000000001
    },
    "speedup": 1.2608841234564265,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (* (/ (+ (+ a (+ (* (+ 1 -1) a) (pow 1 0))) (+ (/ 1 a) a)) (+ (* 0 a) 0)) (pow (* (- 0 b) 0) (+ -1 -1))) (* (- -1 (- 0 0)) (- 1 b))) (/ (/ (- (/ 0 0) a) (/ a 0)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001026763)",
      "output_term": "(* (+ (* (/ (+ a (+ a (+ 1 (/ 1 a)))) 0) (pow 0 -2)) (+ -1 b)) (/ (/ (- (/ 0 0) a) (/ a 0)) 1))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.001046336
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (* (/ (+ (+ 1 (/ 1 a)) (+ a a)) 0) (pow 0 -2)) (- b 1)) (/ (- (/ 0 0) a) (/ a 0)))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.0008268939999999999
    },
    "speedup": 1.2653810524686357,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (/ (- (/ (* (+ (+ 1 1) (* a 1)) (+ 0 a)) 1) (* 0 (+ (+ a 1) 1))) (* (* (pow a a) a) b)) (+ (/ (pow (- b 0) 0) (/ b 0)) (pow -1 c))) (+ (pow (+ -1 (/ 1 -1)) (- b 0)) (/ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001012881)",
      "output_term": "(pow (+ (/ (/ (* a (+ 2 a)) 1) (* a (* (pow a a) b))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ (pow -2 b) (/ a a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.0010217610000000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (* a (+ 2 a)) (* a (* (pow a a) b))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ 1 (pow -2 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.000806963
    },
    "speedup": 1.2661807294758252,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (- (- (* 1 (+ (/ 1 (pow (+ a 1) b)) -1)) (/ (- (+ a a) d) 0)) (pow (+ (+ -1 e) -1) (* 1 e))) (/ (- (+ (pow -1 c) -1) (- 0 d)) (- e c))) (/ (* (pow (* -1 1) e) (- c a)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001007094)",
      "output_term": "(pow (+ (- (- (+ (/ 1 (pow (+ 1 a) b)) -1) (/ (- (+ a a) d) 0)) (pow (+ e -2) e)) (/ (+ (pow -1 c) (+ -1 d)) (- e c))) (/ (* (pow -1 e) (- c a)) (- c d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.0010468300000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (- (/ 1 (pow (+ 1 a) b)) (+ 1 (+ (/ (- (+ a a) d) 0) (pow (- e 2) e)))) (/ (- (pow -1 c) (- 1 d)) (- e c))) (/ (* (pow -1 e) (- c a)) (- c d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.000814633
    },
    "speedup": 1.2850326466028261,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (* (* (- (- (/ (pow -1 a) a) (/ 0 c)) (/ 1 a)) (pow (/ a -1) 0)) (/ (+ c a) c)) (+ b (* (+ 1 0) d))) (* (* (- a a) a) (pow a 0))) (- (* (* (- b e) 1) (/ a 1)) (/ 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001047347)",
      "output_term": "(+ (pow (* (- (- (/ (pow -1 a) a) (/ 0 c)) (/ 1 a)) (/ (+ a c) c)) (+ b d)) (- (* (- b e) (/ a 1)) (/ 1 c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.001043858
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* (- (/ (pow -1 a) a) (+ (/ 0 c) (/ 1 a))) (/ (+ a c) c)) (+ b d)) (- (* a (- b e)) (/ 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.00080085
    },
    "speedup": 1.3034375975526002,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (pow (* (* (- (- (/ (pow -1 a) a) (/ 0 c)) (/ 1 a)) (pow (/ a -1) 0)) (/ (+ c a) c)) (+ b (* (+ 1 0) d))) (* (* (- a a) a) (pow a 0))) (- (* (* (- b e) 1) (/ a 1)) (/ 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000298)",
      "output_term": "(+ (pow (* (- (- (/ (pow -1 a) a) (/ 0 c)) (/ 1 a)) (/ (+ a c) c)) (+ b d)) (- (* (- b e) (/ a 1)) (/ 1 c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.001057431
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* (- (/ (pow -1 a) a) (+ (/ 0 c) (/ 1 a))) (/ (+ a c) c)) (+ b d)) (- (* a (- b e)) (/ 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.000804661
    },
    "speedup": 1.3141322867642398,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (pow (pow (- (/ (/ (- a a) (+ 0 a)) (- 0 -1)) -1) (/ (/ (* a a) 1) (* 1 b))) (- (pow (pow a a) b) (/ d -1))) (/ (- (- -1 0) b) (/ 0 -1))) (/ (pow (- (- 0 1) d) (- c c)) (* c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (+ 1 (/ (/ 0 a) 1)) (/ (/ (* a a) 1) b)) (- (pow (pow a a) b) (/ d -1))) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 78,
      "output_depth": 8,
      "simplification_time": 0.000392413
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (+ 1 (/ 0 a)) (/ (* a a) b)) (- (pow (pow a a) b) (/ d -1))) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.000296759
    },
    "speedup": 1.3223288931422466,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (pow (pow (- (/ (/ (- a a) (+ 0 a)) (- 0 -1)) -1) (/ (/ (* a a) 1) (* 1 b))) (- (pow (pow a a) b) (/ d -1))) (/ (- (- -1 0) b) (/ 0 -1))) (/ (pow (- (- 0 1) d) (- c c)) (* c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (+ 1 (/ (/ 0 a) 1)) (/ (/ (* a a) 1) b)) (- (pow (pow a a) b) (/ d -1))) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 78,
      "output_depth": 8,
      "simplification_time": 0.00040026000000000005
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (+ 1 (/ 0 a)) (/ (* a a) b)) (- (pow (pow a a) b) (/ d -1))) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.000301963
    },
    "speedup": 1.3255266373694792,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (- (- (* 1 (+ (/ 1 (pow (+ a 1) b)) -1)) (/ (- (+ a a) d) 0)) (pow (+ (+ -1 e) -1) (* 1 e))) (/ (- (+ (pow -1 c) -1) (- 0 d)) (- e c))) (/ (* (pow (* -1 1) e) (- c a)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006762)",
      "output_term": "(pow (+ (- (- (+ (/ 1 (pow (+ 1 a) b)) -1) (/ (- (+ a a) d) 0)) (pow (+ e -2) e)) (/ (+ (pow -1 c) (+ -1 d)) (- e c))) (/ (* (pow -1 e) (- c a)) (- c d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.00104608
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (- (/ 1 (pow (+ 1 a) b)) (+ 1 (+ (/ (- (+ a a) d) 0) (pow (- e 2) e)))) (/ (- (pow -1 c) (- 1 d)) (- e c))) (/ (* (pow -1 e) (- c a)) (- c d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.0007891420000000001
    },
    "speedup": 1.3255915918808021,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (* (* (- (- (/ (pow -1 a) a) (/ 0 c)) (/ 1 a)) (pow (/ a -1) 0)) (/ (+ c a) c)) (+ b (* (+ 1 0) d))) (* (* (- a a) a) (pow a 0))) (- (* (* (- b e) 1) (/ a 1)) (/ 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001050386)",
      "output_term": "(+ (pow (* (- (- (/ (pow -1 a) a) (/ 0 c)) (/ 1 a)) (/ (+ a c) c)) (+ b d)) (- (* (- b e) (/ a 1)) (/ 1 c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.001046991
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* (- (/ (pow -1 a) a) (+ (/ 0 c) (/ 1 a))) (/ (+ a c) c)) (+ b d)) (- (* a (- b e)) (/ 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.000785715
    },
    "speedup": 1.3325327886065557,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (pow (pow (- (/ (/ (- a a) (+ 0 a)) (- 0 -1)) -1) (/ (/ (* a a) 1) (* 1 b))) (- (pow (pow a a) b) (/ d -1))) (/ (- (- -1 0) b) (/ 0 -1))) (/ (pow (- (- 0 1) d) (- c c)) (* c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (+ 1 (/ (/ 0 a) 1)) (/ (/ (* a a) 1) b)) (- (pow (pow a a) b) (/ d -1))) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 78,
      "output_depth": 8,
      "simplification_time": 0.00039680199999999997
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (+ 1 (/ 0 a)) (/ (* a a) b)) (- (pow (pow a a) b) (/ d -1))) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.000297636
    },
    "speedup": 1.3331787821365695,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (- (- (* 1 (+ (/ 1 (pow (+ a 1) b)) -1)) (/ (- (+ a a) d) 0)) (pow (+ (+ -1 e) -1) (* 1 e))) (/ (- (+ (pow -1 c) -1) (- 0 d)) (- e c))) (/ (* (pow (* -1 1) e) (- c a)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000018)",
      "output_term": "(pow (+ (- (- (+ (/ 1 (pow (+ 1 a) b)) -1) (/ (- (+ a a) d) 0)) (pow (+ e -2) e)) (/ (+ (pow -1 c) (+ -1 d)) (- e c))) (/ (* (pow -1 e) (- c a)) (- c d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.001047793
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (- (/ 1 (pow (+ 1 a) b)) (+ 1 (+ (/ (- (+ a a) d) 0) (pow (- e 2) e)))) (/ (- (pow -1 c) (- 1 d)) (- e c))) (/ (* (pow -1 e) (- c a)) (- c d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.000783863
    },
    "speedup": 1.3367042455122897,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (pow (pow (* (pow (+ 0 (pow a (+ 1 a))) (/ 1 1)) (/ (pow 1 1) b)) (pow (* c 1) 0)) (- (+ -1 (- d 0)) (* a e))) (* (* (- -1 d) 1) (pow 0 0))) (* (* (pow (+ 0 c) 0) (/ c 0)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001019983)",
      "output_term": "(pow (+ (pow (* (pow a (+ a 1)) (/ 1 b)) (- (+ -1 d) (* a e))) (* (pow 0 0) (+ 1 d))) (* -1 (/ c 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.001034587
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (/ (pow a (+ a 1)) b) (- (+ -1 d) (* a e))) (* (- -1 d) (pow 0 0))) (- 0 (/ c 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.0007551919999999999
    },
    "speedup": 1.3699655187025288,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (pow (pow (* (pow (+ 0 (pow a (+ 1 a))) (/ 1 1)) (/ (pow 1 1) b)) (pow (* c 1) 0)) (- (+ -1 (- d 0)) (* a e))) (* (* (- -1 d) 1) (pow 0 0))) (* (* (pow (+ 0 c) 0) (/ c 0)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007169)",
      "output_term": "(pow (+ (pow (* (pow a (+ a 1)) (/ 1 b)) (- (+ -1 d) (* a e))) (* (pow 0 0) (+ 1 d))) (* -1 (/ c 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.0010216399999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (/ (pow a (+ a 1)) b) (- (+ -1 d) (* a e))) (* (- -1 d) (pow 0 0))) (- 0 (/ c 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.0007432739999999999
    },
    "speedup": 1.3745133019586315,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (+ (- (/ (/ (pow (/ (- a -1) a) (+ 1 -1)) (pow b c)) (pow (+ a d) a)) (* (* e -1) b)) (pow (/ a (pow 1 c)) (pow 1 -1))) (* (/ (* 1 d) 0) (pow c b))) (/ (/ (pow (+ 0 0) c) d) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 137,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (pow (/ a (pow 1 c)) (pow 1 -1)) (* b e))) (* (/ d 0) (pow c b))) (/ (/ (pow 0 c) d) 1))",
      "output_weight_simple": 28,
      "output_weight_complex": 87,
      "output_depth": 8,
      "simplification_time": 0.0008160299999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (/ a (pow 1 c)) (* b e))) (* (/ d 0) (pow c b))) (/ (pow 0 c) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.00059215
    },
    "speedup": 1.3780798784091868,
    "weight_simple_diff": 4,
    "weight_complex_diff": 14,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (pow (pow (* (pow (+ 0 (pow a (+ 1 a))) (/ 1 1)) (/ (pow 1 1) b)) (pow (* c 1) 0)) (- (+ -1 (- d 0)) (* a e))) (* (* (- -1 d) 1) (pow 0 0))) (* (* (pow (+ 0 c) 0) (/ c 0)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003703)",
      "output_term": "(pow (+ (pow (* (pow a (+ a 1)) (/ 1 b)) (- (+ -1 d) (* a e))) (* (pow 0 0) (+ 1 d))) (* -1 (/ c 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.001018451
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (/ (pow a (+ a 1)) b) (- (+ -1 d) (* a e))) (* (- -1 d) (pow 0 0))) (- 0 (/ c 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.000736331
    },
    "speedup": 1.3831429071979857,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (+ (- (/ (/ (pow (/ (- a -1) a) (+ 1 -1)) (pow b c)) (pow (+ a d) a)) (* (* e -1) b)) (pow (/ a (pow 1 c)) (pow 1 -1))) (* (/ (* 1 d) 0) (pow c b))) (/ (/ (pow (+ 0 0) c) d) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 137,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (pow (/ a (pow 1 c)) (pow 1 -1)) (* b e))) (* (/ d 0) (pow c b))) (/ (/ (pow 0 c) d) 1))",
      "output_weight_simple": 28,
      "output_weight_complex": 87,
      "output_depth": 8,
      "simplification_time": 0.000818938
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (/ a (pow 1 c)) (* b e))) (* (/ d 0) (pow c b))) (/ (pow 0 c) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.00059083
    },
    "speedup": 1.3860805984801043,
    "weight_simple_diff": 4,
    "weight_complex_diff": 14,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (+ (+ (pow 1 (/ (/ a (/ (- 0 1) 0)) (/ 0 1))) (pow (/ (+ -1 b) 1) (- -1 b))) (/ (/ (/ -1 b) 1) (/ b a))) (+ (/ (- 1 -1) b) (* 1 1))) (* (pow (- a (+ 0 -1)) (pow b a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002869)",
      "output_term": "(+ (- (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (+ (pow (/ (+ -1 b) 1) (- -1 b)) (/ (/ (/ -1 b) 1) (/ b a)))) (+ 1 (/ 2 b))) (* (pow (+ 1 a) (pow b a)) (pow b -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 83,
      "output_depth": 8,
      "simplification_time": 0.00101785
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (+ (pow (+ -1 b) (- -1 b)) (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (/ (/ -1 b) (/ b a)))) (+ 1 (/ 2 b))) (/ (pow (+ 1 a) (pow b a)) b))",
      "output_weight_simple": 26,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.0007324839999999999
    },
    "speedup": 1.3895866667394785,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (+ (+ a (- (- (/ -1 (pow (/ 0 a) 1)) (+ 0 0)) (pow (* a b) 1))) (/ (- (pow a c) 0) (* -1 0))) (/ (pow (* a (- c 0)) (+ d b)) (/ 1 b))) (- (* (- a (* c c)) (* a 0)) (pow e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004263)",
      "output_term": "(+ (pow (+ (- (/ -1 (/ 0 a)) (* a b)) (+ a (/ (pow a c) 0))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (- 0 (pow e d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.001016266
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (- (/ -1 (/ 0 a)) (* a b)) (+ a (/ (pow a c) 0))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (pow e d))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.0007306219999999999
    },
    "speedup": 1.3909600313157833,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (+ (- (/ (/ (pow (/ (- a -1) a) (+ 1 -1)) (pow b c)) (pow (+ a d) a)) (* (* e -1) b)) (pow (/ a (pow 1 c)) (pow 1 -1))) (* (/ (* 1 d) 0) (pow c b))) (/ (/ (pow (+ 0 0) c) d) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 137,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (pow (/ a (pow 1 c)) (pow 1 -1)) (* b e))) (* (/ d 0) (pow c b))) (/ (/ (pow 0 c) d) 1))",
      "output_weight_simple": 28,
      "output_weight_complex": 87,
      "output_depth": 8,
      "simplification_time": 0.000828056
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (/ a (pow 1 c)) (* b e))) (* (/ d 0) (pow c b))) (/ (pow 0 c) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.000595233
    },
    "speedup": 1.391145988209659,
    "weight_simple_diff": 4,
    "weight_complex_diff": 14,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (+ (+ (pow 1 (/ (/ a (/ (- 0 1) 0)) (/ 0 1))) (pow (/ (+ -1 b) 1) (- -1 b))) (/ (/ (/ -1 b) 1) (/ b a))) (+ (/ (- 1 -1) b) (* 1 1))) (* (pow (- a (+ 0 -1)) (pow b a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005044)",
      "output_term": "(+ (- (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (+ (pow (/ (+ -1 b) 1) (- -1 b)) (/ (/ (/ -1 b) 1) (/ b a)))) (+ 1 (/ 2 b))) (* (pow (+ 1 a) (pow b a)) (pow b -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 83,
      "output_depth": 8,
      "simplification_time": 0.001021474
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (+ (pow (+ -1 b) (- -1 b)) (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (/ (/ -1 b) (/ b a)))) (+ 1 (/ 2 b))) (/ (pow (+ 1 a) (pow b a)) b))",
      "output_weight_simple": 26,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.000726445
    },
    "speedup": 1.406127098403871,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (+ (+ (pow 1 (/ (/ a (/ (- 0 1) 0)) (/ 0 1))) (pow (/ (+ -1 b) 1) (- -1 b))) (/ (/ (/ -1 b) 1) (/ b a))) (+ (/ (- 1 -1) b) (* 1 1))) (* (pow (- a (+ 0 -1)) (pow b a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000375)",
      "output_term": "(+ (- (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (+ (pow (/ (+ -1 b) 1) (- -1 b)) (/ (/ (/ -1 b) 1) (/ b a)))) (+ 1 (/ 2 b))) (* (pow (+ 1 a) (pow b a)) (pow b -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 83,
      "output_depth": 8,
      "simplification_time": 0.001015293
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (+ (pow (+ -1 b) (- -1 b)) (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (/ (/ -1 b) (/ b a)))) (+ 1 (/ 2 b))) (/ (pow (+ 1 a) (pow b a)) b))",
      "output_weight_simple": 26,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.0007142499999999999
    },
    "speedup": 1.4214812740637033,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": -1
  },
  {
    "base_term": "(- (/ (- (pow (- (/ (/ (/ (- 1 1) 0) (- -1 a)) (+ -1 a)) (* (- 0 c) a)) (+ (/ d c) 1)) (pow (pow -1 (- d d)) (+ e e))) (- (/ 1 (* 1 c)) d)) (- (* (- (- 1 e) 0) (pow 1 e)) (+ e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004231)",
      "output_term": "(+ e (+ (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (+ -1 a)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (* (pow 1 e) (+ -1 e))))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.001054862
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (- a 1)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (- (* (- 1 e) (pow 1 e)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.000731135
    },
    "speedup": 1.442773222455497,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(- (/ (- (pow (- (/ (/ (/ (- 1 1) 0) (- -1 a)) (+ -1 a)) (* (- 0 c) a)) (+ (/ d c) 1)) (pow (pow -1 (- d d)) (+ e e))) (- (/ 1 (* 1 c)) d)) (- (* (- (- 1 e) 0) (pow 1 e)) (+ e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003064)",
      "output_term": "(+ e (+ (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (+ -1 a)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (* (pow 1 e) (+ -1 e))))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.001053162
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (- a 1)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (- (* (- 1 e) (pow 1 e)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.0007197099999999999
    },
    "speedup": 1.4633143905184034,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (pow (- (* (* (pow (pow (+ -1 (/ 0 a)) (/ -1 1)) 0) (+ (/ -1 -1) 0)) (+ a (pow 0 -1))) (/ (- a (- a a)) (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ (pow (/ a a) e) (pow -1 1)) (/ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ -1 (pow (/ a a) e)) (/ 1 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 61,
      "output_depth": 6,
      "simplification_time": 0.000707205
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (/ (pow d e) (* b b))) (* (+ -1 (pow 1 e)) (/ 1 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 54,
      "output_depth": 6,
      "simplification_time": 0.00048108099999999996
    },
    "speedup": 1.4700331129269293,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (- (pow (- (/ (/ (/ (- 1 1) 0) (- -1 a)) (+ -1 a)) (* (- 0 c) a)) (+ (/ d c) 1)) (pow (pow -1 (- d d)) (+ e e))) (- (/ 1 (* 1 c)) d)) (- (* (- (- 1 e) 0) (pow 1 e)) (+ e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000626)",
      "output_term": "(+ e (+ (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (+ -1 a)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (* (pow 1 e) (+ -1 e))))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.001050885
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (- a 1)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (- (* (- 1 e) (pow 1 e)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.000712208
    },
    "speedup": 1.4755310246444862,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (pow (- (* (* (pow (pow (+ -1 (/ 0 a)) (/ -1 1)) 0) (+ (/ -1 -1) 0)) (+ a (pow 0 -1))) (/ (- a (- a a)) (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ (pow (/ a a) e) (pow -1 1)) (/ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ -1 (pow (/ a a) e)) (/ 1 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 61,
      "output_depth": 6,
      "simplification_time": 0.000715809
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (/ (pow d e) (* b b))) (* (+ -1 (pow 1 e)) (/ 1 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 54,
      "output_depth": 6,
      "simplification_time": 0.000482984
    },
    "speedup": 1.4820553061799149,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (- (* (* (pow (pow (+ -1 (/ 0 a)) (/ -1 1)) 0) (+ (/ -1 -1) 0)) (+ a (pow 0 -1))) (/ (- a (- a a)) (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ (pow (/ a a) e) (pow -1 1)) (/ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ -1 (pow (/ a a) e)) (/ 1 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 61,
      "output_depth": 6,
      "simplification_time": 0.000721022
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (/ (pow d e) (* b b))) (* (+ -1 (pow 1 e)) (/ 1 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 54,
      "output_depth": 6,
      "simplification_time": 0.000483937
    },
    "speedup": 1.4899088104443348,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (* (- (* (* (/ (* 1 0) -1) (+ -1 -1)) (pow 1 a)) (pow (- 0 a) 0)) 1) (- (pow a a) (/ 0 1))) (+ (- (pow 1 (* c -1)) (- 0 b)) (/ d a))) (+ (pow (+ (+ 1 0) -1) (- c d)) (+ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* -1 (pow a a)) (+ (pow 1 (* -1 c)) (+ (/ d a) b))) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 20,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.0006780110000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (- 0 (pow a a)) (+ (pow 1 (- 0 c)) (+ b (/ d a)))) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 19,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.000454993
    },
    "speedup": 1.4901569914262418,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (+ a (- (- (/ -1 (pow (/ 0 a) 1)) (+ 0 0)) (pow (* a b) 1))) (/ (- (pow a c) 0) (* -1 0))) (/ (pow (* a (- c 0)) (+ d b)) (/ 1 b))) (- (* (- a (* c c)) (* a 0)) (pow e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006969)",
      "output_term": "(+ (pow (+ (- (/ -1 (/ 0 a)) (* a b)) (+ a (/ (pow a c) 0))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (- 0 (pow e d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.001022153
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (- (/ -1 (/ 0 a)) (* a b)) (+ a (/ (pow a c) 0))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (pow e d))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.00068371
    },
    "speedup": 1.4950095800851237,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (+ a (- (- (/ -1 (pow (/ 0 a) 1)) (+ 0 0)) (pow (* a b) 1))) (/ (- (pow a c) 0) (* -1 0))) (/ (pow (* a (- c 0)) (+ d b)) (/ 1 b))) (- (* (- a (* c c)) (* a 0)) (pow e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007975)",
      "output_term": "(+ (pow (+ (- (/ -1 (/ 0 a)) (* a b)) (+ a (/ (pow a c) 0))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (- 0 (pow e d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.00102237
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (- (/ -1 (/ 0 a)) (* a b)) (+ a (/ (pow a c) 0))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (pow e d))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.000683678
    },
    "speedup": 1.4953969558768896,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (* (- (* (* (/ (* 1 0) -1) (+ -1 -1)) (pow 1 a)) (pow (- 0 a) 0)) 1) (- (pow a a) (/ 0 1))) (+ (- (pow 1 (* c -1)) (- 0 b)) (/ d a))) (+ (pow (+ (+ 1 0) -1) (- c d)) (+ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* -1 (pow a a)) (+ (pow 1 (* -1 c)) (+ (/ d a) b))) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 20,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.000673295
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (- 0 (pow a a)) (+ (pow 1 (- 0 c)) (+ b (/ d a)))) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 19,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.000445441
    },
    "speedup": 1.5115245341133843,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (* (- (* (* (/ (* 1 0) -1) (+ -1 -1)) (pow 1 a)) (pow (- 0 a) 0)) 1) (- (pow a a) (/ 0 1))) (+ (- (pow 1 (* c -1)) (- 0 b)) (/ d a))) (+ (pow (+ (+ 1 0) -1) (- c d)) (+ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* -1 (pow a a)) (+ (pow 1 (* -1 c)) (+ (/ d a) b))) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 20,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.0006728280000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (- 0 (pow a a)) (+ (pow 1 (- 0 c)) (+ b (/ d a)))) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 19,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.000444397
    },
    "speedup": 1.5140246221284124,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (- (pow (* (* (/ (pow 0 -1) 1) (- a 0)) (- -1 b)) (pow (+ c 1) -1)) (pow (- -1 -1) c)) (+ (* (+ 1 b) c) (* a -1))) (/ (- (+ a 1) 0) (/ a e))) (+ (* (- (+ -1 d) a) d) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001025651)",
      "output_term": "(pow (+ (/ (- (pow (* (/ (pow 0 -1) 1) (* a (- -1 b))) (pow (+ 1 c) -1)) (pow 0 c)) (+ c (+ (* -1 a) (* b c)))) (/ (+ 1 a) (/ a e))) (* d (- (+ -1 d) a)))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.0010730029999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (- (pow (* a (* (pow 0 -1) (- -1 b))) (/ 1 (+ 1 c))) (pow 0 c)) (- (* c (+ 1 b)) a)) (/ (+ 1 a) (/ a e))) (* d (- d (+ 1 a))))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.000706466
    },
    "speedup": 1.5188317626042867,
    "weight_simple_diff": 3,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (- (pow (* (* (/ (pow 0 -1) 1) (- a 0)) (- -1 b)) (pow (+ c 1) -1)) (pow (- -1 -1) c)) (+ (* (+ 1 b) c) (* a -1))) (/ (- (+ a 1) 0) (/ a e))) (+ (* (- (+ -1 d) a) d) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001023734)",
      "output_term": "(pow (+ (/ (- (pow (* (/ (pow 0 -1) 1) (* a (- -1 b))) (pow (+ 1 c) -1)) (pow 0 c)) (+ c (+ (* -1 a) (* b c)))) (/ (+ 1 a) (/ a e))) (* d (- (+ -1 d) a)))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.001070758
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (- (pow (* a (* (pow 0 -1) (- -1 b))) (/ 1 (+ 1 c))) (pow 0 c)) (- (* c (+ 1 b)) a)) (/ (+ 1 a) (/ a e))) (* d (- d (+ 1 a))))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.0006989629999999999
    },
    "speedup": 1.5319237212842456,
    "weight_simple_diff": 3,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (/ (- (pow (+ (- (- (- 0 1) a) (/ a -1)) (pow 1 -1)) (/ (- 0 -1) 1)) (* 0 0)) (pow (* (- a a) 1) (pow c d))) (+ (pow (- a 1) c) (* 0 b))) (/ (- (- (/ -1 c) d) (- 1 -1)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000297)",
      "output_term": "(/ (+ (/ (+ (- (- -1 a) (/ a -1)) (pow 1 -1)) (pow 0 (pow c d))) (pow (+ -1 a) c)) (/ (+ (- (/ -1 c) d) -2) 0))",
      "output_weight_simple": 23,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.001010236
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- 0 (+ a (/ a -1))) (pow 0 (pow c d))) (pow (+ -1 a) c)) (/ (- (/ -1 c) (+ d 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.000659279
    },
    "speedup": 1.5323345654874492,
    "weight_simple_diff": 3,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (- (/ (* (+ (pow (/ a (- -1 1)) (pow -1 0)) (+ -1 a)) (pow -1 (pow b 1))) (- (* b 0) a)) (- (* a (pow -1 b)) (* b 1))) (pow (pow (/ c c) c) (pow -1 -1))) (+ (/ (- (- -1 -1) -1) (* 0 d)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001019993)",
      "output_term": "(/ (* (- (/ (* (+ a (+ -1 (/ a -2))) (pow -1 b)) (- 0 a)) (- (* a (pow -1 b)) b)) (pow (pow (/ c c) c) (pow -1 -1))) (/ 1 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.0010167000000000002
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (- (/ (* (+ a (- (/ a -2) 1)) (pow -1 b)) (- 0 a)) (- (* a (pow -1 b)) b)) (pow 1 c)) (/ 1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.00066193
    },
    "speedup": 1.5359630172374723,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (- (pow (* (* (/ (pow 0 -1) 1) (- a 0)) (- -1 b)) (pow (+ c 1) -1)) (pow (- -1 -1) c)) (+ (* (+ 1 b) c) (* a -1))) (/ (- (+ a 1) 0) (/ a e))) (+ (* (- (+ -1 d) a) d) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001026246)",
      "output_term": "(pow (+ (/ (- (pow (* (/ (pow 0 -1) 1) (* a (- -1 b))) (pow (+ 1 c) -1)) (pow 0 c)) (+ c (+ (* -1 a) (* b c)))) (/ (+ 1 a) (/ a e))) (* d (- (+ -1 d) a)))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.001076915
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (- (pow (* a (* (pow 0 -1) (- -1 b))) (/ 1 (+ 1 c))) (pow 0 c)) (- (* c (+ 1 b)) a)) (/ (+ 1 a) (/ a e))) (* d (- d (+ 1 a))))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.000700856
    },
    "speedup": 1.5365709931854759,
    "weight_simple_diff": 3,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (* (/ -1 (/ (/ (* (/ a (/ b -1)) (- a c)) d) (+ 0 (pow b a)))) (- (pow (pow 0 d) 0) (- a 0))) (/ (- (+ b (- a e)) (pow 1 -1)) (pow 1 0))) (pow (/ (/ (+ -1 0) 1) (pow -1 0)) (/ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 134,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001494)",
      "output_term": "(/ (+ (* (/ -1 (/ (/ (* (/ a (/ b -1)) (- a c)) d) (pow b a))) (- 1 a)) (/ (- (+ b (- a e)) (pow 1 -1)) 1)) (pow -1 (/ e a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.001016448
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- a 1) (/ (/ (* (/ a (/ b -1)) (- a c)) d) (pow b a))) (- (- (+ a b) e) 1)) (pow -1 (/ e a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.00066105
    },
    "speedup": 1.53762650329022,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (pow (+ (- (- (- 0 1) a) (/ a -1)) (pow 1 -1)) (/ (- 0 -1) 1)) (* 0 0)) (pow (* (- a a) 1) (pow c d))) (+ (pow (- a 1) c) (* 0 b))) (/ (- (- (/ -1 c) d) (- 1 -1)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001007924)",
      "output_term": "(/ (+ (/ (+ (- (- -1 a) (/ a -1)) (pow 1 -1)) (pow 0 (pow c d))) (pow (+ -1 a) c)) (/ (+ (- (/ -1 c) d) -2) 0))",
      "output_weight_simple": 23,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.001019313
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- 0 (+ a (/ a -1))) (pow 0 (pow c d))) (pow (+ -1 a) c)) (/ (- (/ -1 c) (+ d 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.000658554
    },
    "speedup": 1.547804735830319,
    "weight_simple_diff": 3,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (/ (/ (/ (- (pow (- a (pow b 1)) (pow b -1)) (/ 1 -1)) (/ (- b b) 0)) (- (/ 1 1) d)) (+ (pow 0 (* 0 -1)) (/ -1 -1))) (- (- (* b b) 0) 0)) (- (* (* (* 1 0) a) (pow e e)) (/ a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (/ (/ (/ (+ 1 (pow (- a b) (pow b -1))) (/ 0 0)) (- 1 d)) (+ 1 (pow 0 0))) (* b b)) (- 0 (/ a -1)))",
      "output_weight_simple": 22,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.0007815119999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (/ (/ (/ (+ 1 (pow (- a b) (/ 1 b))) (/ 0 0)) (* b b)) (- 1 d)) (+ 1 (pow 0 0))) (/ a -1))",
      "output_weight_simple": 21,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.000504666
    },
    "speedup": 1.5485727193827203,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (- (/ (* (+ (pow (/ a (- -1 1)) (pow -1 0)) (+ -1 a)) (pow -1 (pow b 1))) (- (* b 0) a)) (- (* a (pow -1 b)) (* b 1))) (pow (pow (/ c c) c) (pow -1 -1))) (+ (/ (- (- -1 -1) -1) (* 0 d)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001015073)",
      "output_term": "(/ (* (- (/ (* (+ a (+ -1 (/ a -2))) (pow -1 b)) (- 0 a)) (- (* a (pow -1 b)) b)) (pow (pow (/ c c) c) (pow -1 -1))) (/ 1 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.00101192
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (- (/ (* (+ a (- (/ a -2) 1)) (pow -1 b)) (- 0 a)) (- (* a (pow -1 b)) b)) (pow 1 c)) (/ 1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.00065266
    },
    "speedup": 1.5504550608279961,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (/ (/ (/ (- (pow (- a (pow b 1)) (pow b -1)) (/ 1 -1)) (/ (- b b) 0)) (- (/ 1 1) d)) (+ (pow 0 (* 0 -1)) (/ -1 -1))) (- (- (* b b) 0) 0)) (- (* (* (* 1 0) a) (pow e e)) (/ a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (/ (/ (/ (+ 1 (pow (- a b) (pow b -1))) (/ 0 0)) (- 1 d)) (+ 1 (pow 0 0))) (* b b)) (- 0 (/ a -1)))",
      "output_weight_simple": 22,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.000786436
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (/ (/ (/ (+ 1 (pow (- a b) (/ 1 b))) (/ 0 0)) (* b b)) (- 1 d)) (+ 1 (pow 0 0))) (/ a -1))",
      "output_weight_simple": 21,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.0005069299999999999
    },
    "speedup": 1.551370011638688,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (/ (- (pow (+ (- (- (- 0 1) a) (/ a -1)) (pow 1 -1)) (/ (- 0 -1) 1)) (* 0 0)) (pow (* (- a a) 1) (pow c d))) (+ (pow (- a 1) c) (* 0 b))) (/ (- (- (/ -1 c) d) (- 1 -1)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002026)",
      "output_term": "(/ (+ (/ (+ (- (- -1 a) (/ a -1)) (pow 1 -1)) (pow 0 (pow c d))) (pow (+ -1 a) c)) (/ (+ (- (/ -1 c) d) -2) 0))",
      "output_weight_simple": 23,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.0010118009999999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- 0 (+ a (/ a -1))) (pow 0 (pow c d))) (pow (+ -1 a) c)) (/ (- (/ -1 c) (+ d 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.000649967
    },
    "speedup": 1.5566959553331168,
    "weight_simple_diff": 3,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (- (/ (* (+ (pow (/ a (- -1 1)) (pow -1 0)) (+ -1 a)) (pow -1 (pow b 1))) (- (* b 0) a)) (- (* a (pow -1 b)) (* b 1))) (pow (pow (/ c c) c) (pow -1 -1))) (+ (/ (- (- -1 -1) -1) (* 0 d)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009784)",
      "output_term": "(/ (* (- (/ (* (+ a (+ -1 (/ a -2))) (pow -1 b)) (- 0 a)) (- (* a (pow -1 b)) b)) (pow (pow (/ c c) c) (pow -1 -1))) (/ 1 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.001006573
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (- (/ (* (+ a (- (/ a -2) 1)) (pow -1 b)) (- 0 a)) (- (* a (pow -1 b)) b)) (pow 1 c)) (/ 1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.000645409
    },
    "speedup": 1.5595893456707297,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (+ (/ (- (/ (pow (* 0 a) 0) (+ 0 0)) (+ b b)) (+ (/ 1 -1) c)) (+ (* -1 1) a)) (* (* (pow d 0) -1) (* a 0))) (pow (/ (- 1 -1) c) (* a e))) (pow (+ (+ d (pow e c)) b) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ (pow e c) (+ b d)) (pow a -1)))",
      "output_weight_simple": 16,
      "output_weight_complex": 42,
      "output_depth": 5,
      "simplification_time": 0.0007839889999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ d (+ b (pow e c))) (/ 1 a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.000499868
    },
    "speedup": 1.5683920555026525,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (+ (* (/ -1 (/ (/ (* (/ a (/ b -1)) (- a c)) d) (+ 0 (pow b a)))) (- (pow (pow 0 d) 0) (- a 0))) (/ (- (+ b (- a e)) (pow 1 -1)) (pow 1 0))) (pow (/ (/ (+ -1 0) 1) (pow -1 0)) (/ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 134,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007348)",
      "output_term": "(/ (+ (* (/ -1 (/ (/ (* (/ a (/ b -1)) (- a c)) d) (pow b a))) (- 1 a)) (/ (- (+ b (- a e)) (pow 1 -1)) 1)) (pow -1 (/ e a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.001019035
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- a 1) (/ (/ (* (/ a (/ b -1)) (- a c)) d) (pow b a))) (- (- (+ a b) e) 1)) (pow -1 (/ e a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.000648324
    },
    "speedup": 1.5717989770546823,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (* (/ -1 (/ (/ (* (/ a (/ b -1)) (- a c)) d) (+ 0 (pow b a)))) (- (pow (pow 0 d) 0) (- a 0))) (/ (- (+ b (- a e)) (pow 1 -1)) (pow 1 0))) (pow (/ (/ (+ -1 0) 1) (pow -1 0)) (/ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 134,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002229)",
      "output_term": "(/ (+ (* (/ -1 (/ (/ (* (/ a (/ b -1)) (- a c)) d) (pow b a))) (- 1 a)) (/ (- (+ b (- a e)) (pow 1 -1)) 1)) (pow -1 (/ e a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.001019212
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- a 1) (/ (/ (* (/ a (/ b -1)) (- a c)) d) (pow b a))) (- (- (+ a b) e) 1)) (pow -1 (/ e a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.000647716
    },
    "speedup": 1.573547665952362,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (+ (/ (- (/ (pow (* 0 a) 0) (+ 0 0)) (+ b b)) (+ (/ 1 -1) c)) (+ (* -1 1) a)) (* (* (pow d 0) -1) (* a 0))) (pow (/ (- 1 -1) c) (* a e))) (pow (+ (+ d (pow e c)) b) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ (pow e c) (+ b d)) (pow a -1)))",
      "output_weight_simple": 16,
      "output_weight_complex": 42,
      "output_depth": 5,
      "simplification_time": 0.000785417
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ d (+ b (pow e c))) (/ 1 a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.000498581
    },
    "speedup": 1.575304714780547,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (/ (/ (/ (/ (- (pow (- a (pow b 1)) (pow b -1)) (/ 1 -1)) (/ (- b b) 0)) (- (/ 1 1) d)) (+ (pow 0 (* 0 -1)) (/ -1 -1))) (- (- (* b b) 0) 0)) (- (* (* (* 1 0) a) (pow e e)) (/ a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (/ (/ (/ (+ 1 (pow (- a b) (pow b -1))) (/ 0 0)) (- 1 d)) (+ 1 (pow 0 0))) (* b b)) (- 0 (/ a -1)))",
      "output_weight_simple": 22,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.0007887060000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (/ (/ (/ (+ 1 (pow (- a b) (/ 1 b))) (/ 0 0)) (* b b)) (- 1 d)) (+ 1 (pow 0 0))) (/ a -1))",
      "output_weight_simple": 21,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.000500129
    },
    "speedup": 1.57700513267577,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (* (/ (+ (pow (- (pow -1 0) a) (pow -1 -1)) a) (+ (+ 1 1) a)) (- (+ a b) 0)) (/ (* 0 (pow 0 d)) (+ -1 -1))) (+ (- a (* -1 0)) (/ 1 c))) (/ (+ (/ (/ c 1) -1) (- e b)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001015549)",
      "output_term": "(+ (* (/ (+ a (pow (- 1 a) (pow -1 -1))) (+ a 2)) (* (+ a b) (+ a (/ 1 c)))) (/ (+ (/ (/ c 1) -1) (- e b)) (* -1 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.001061389
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (+ a (/ 1 (- 1 a))) (+ a 2)) (* (+ a b) (+ a (/ 1 c)))) (/ (+ (/ c -1) (- e b)) (- 0 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.0006632540000000001
    },
    "speedup": 1.6002753093083493,
    "weight_simple_diff": 1,
    "weight_complex_diff": 8,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (+ (/ (- (/ (pow (* 0 a) 0) (+ 0 0)) (+ b b)) (+ (/ 1 -1) c)) (+ (* -1 1) a)) (* (* (pow d 0) -1) (* a 0))) (pow (/ (- 1 -1) c) (* a e))) (pow (+ (+ d (pow e c)) b) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ (pow e c) (+ b d)) (pow a -1)))",
      "output_weight_simple": 16,
      "output_weight_complex": 42,
      "output_depth": 5,
      "simplification_time": 0.0007837790000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ d (+ b (pow e c))) (/ 1 a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.000489354
    },
    "speedup": 1.601660556570499,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (- (/ a 0) (pow 0 a)) (- a 0)) (* (* -1 a) c)) c) (+ (+ (* c 0) -1) (- c c))) (+ (/ (+ (pow 1 d) 0) (- -1 -1)) (+ 1 -1))) (- (- (+ (pow 0 0) -1) (pow 1 c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000615)",
      "output_term": "(+ (/ (+ (- (pow (+ a (- (/ a 0) (pow 0 a))) (* a (* -1 c))) c) 1) (/ (pow 1 d) 0)) (- (+ -1 (pow 0 0)) (pow 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.0010115319999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (- (pow (+ a (- (/ a 0) (pow 0 a))) (- 0 (* a c))) (+ -1 c)) (/ (pow 1 d) 0)) (- (pow 0 0) (+ 1 (pow 1 c))))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.000628014
    },
    "speedup": 1.6106838382583826,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (+ (* (/ (+ (pow (- (pow -1 0) a) (pow -1 -1)) a) (+ (+ 1 1) a)) (- (+ a b) 0)) (/ (* 0 (pow 0 d)) (+ -1 -1))) (+ (- a (* -1 0)) (/ 1 c))) (/ (+ (/ (/ c 1) -1) (- e b)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003154)",
      "output_term": "(+ (* (/ (+ a (pow (- 1 a) (pow -1 -1))) (+ a 2)) (* (+ a b) (+ a (/ 1 c)))) (/ (+ (/ (/ c 1) -1) (- e b)) (* -1 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.001048989
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (+ a (/ 1 (- 1 a))) (+ a 2)) (* (+ a b) (+ a (/ 1 c)))) (/ (+ (/ c -1) (- e b)) (- 0 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.000649795
    },
    "speedup": 1.6143383682546033,
    "weight_simple_diff": 1,
    "weight_complex_diff": 8,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (* (/ (+ (pow (- (pow -1 0) a) (pow -1 -1)) a) (+ (+ 1 1) a)) (- (+ a b) 0)) (/ (* 0 (pow 0 d)) (+ -1 -1))) (+ (- a (* -1 0)) (/ 1 c))) (/ (+ (/ (/ c 1) -1) (- e b)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001015488)",
      "output_term": "(+ (* (/ (+ a (pow (- 1 a) (pow -1 -1))) (+ a 2)) (* (+ a b) (+ a (/ 1 c)))) (/ (+ (/ (/ c 1) -1) (- e b)) (* -1 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.001061591
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (+ a (/ 1 (- 1 a))) (+ a 2)) (* (+ a b) (+ a (/ 1 c)))) (/ (+ (/ c -1) (- e b)) (- 0 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.0006563949999999999
    },
    "speedup": 1.6173051287715476,
    "weight_simple_diff": 1,
    "weight_complex_diff": 8,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (- (/ (pow a (+ 0 (- (+ -1 a) 1))) 0) (- (+ (* 0 0) b) b)) (+ (pow 0 (* a 1)) (/ a b))) (- (pow (pow (pow 1 1) b) (pow 0 d)) (- a e))) (+ (* (pow (- e 1) -1) (- e 1)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000581)",
      "output_term": "(/ (- (+ (pow 0 a) (+ (/ (pow a (+ a -2)) 0) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) (+ -1 (* (- e 1) (pow (- e 1) -1))))",
      "output_weight_simple": 26,
      "output_weight_complex": 61,
      "output_depth": 8,
      "simplification_time": 0.001012619
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (+ (/ (pow a (- a 2)) 0) (+ (pow 0 a) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) 0)",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.000623909
    },
    "speedup": 1.6230235499087207,
    "weight_simple_diff": 5,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (+ (- (/ (pow a (+ 0 (- (+ -1 a) 1))) 0) (- (+ (* 0 0) b) b)) (+ (pow 0 (* a 1)) (/ a b))) (- (pow (pow (pow 1 1) b) (pow 0 d)) (- a e))) (+ (* (pow (- e 1) -1) (- e 1)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001776)",
      "output_term": "(/ (- (+ (pow 0 a) (+ (/ (pow a (+ a -2)) 0) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) (+ -1 (* (- e 1) (pow (- e 1) -1))))",
      "output_weight_simple": 26,
      "output_weight_complex": 61,
      "output_depth": 8,
      "simplification_time": 0.001013849
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (+ (/ (pow a (- a 2)) 0) (+ (pow 0 a) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) 0)",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.00062294
    },
    "speedup": 1.6275227148682057,
    "weight_simple_diff": 5,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (- (/ a 0) (pow 0 a)) (- a 0)) (* (* -1 a) c)) c) (+ (+ (* c 0) -1) (- c c))) (+ (/ (+ (pow 1 d) 0) (- -1 -1)) (+ 1 -1))) (- (- (+ (pow 0 0) -1) (pow 1 c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00101294)",
      "output_term": "(+ (/ (+ (- (pow (+ a (- (/ a 0) (pow 0 a))) (* a (* -1 c))) c) 1) (/ (pow 1 d) 0)) (- (+ -1 (pow 0 0)) (pow 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.001020747
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (- (pow (+ a (- (/ a 0) (pow 0 a))) (- 0 (* a c))) (+ -1 c)) (/ (pow 1 d) 0)) (- (pow 0 0) (+ 1 (pow 1 c))))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.000626732
    },
    "speedup": 1.6286817970041423,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (* (* (- (pow (- (pow (pow a 1) 0) a) (+ a -1)) (+ b (- c a))) (/ 1 (pow 0 -1))) (- (* (/ a -1) d) (* -1 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (pow (- (/ (pow 0 e) 0) (+ 0 1)) (/ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001005623)",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ b (- c a))) (* (/ 1 (pow 0 -1)) (+ -1 (* (/ a -1) d)))) (pow (pow -1 (- 1 b)) (pow 1 e))) (+ -1 (/ (pow 0 e) 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001045177
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ b (- c a))) (/ (- (* (/ a -1) d) 1) (pow 0 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (- (/ (pow 0 e) 0) 1))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.000641169
    },
    "speedup": 1.6301115618503077,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (* (* (- (pow (- (pow (pow a 1) 0) a) (+ a -1)) (+ b (- c a))) (/ 1 (pow 0 -1))) (- (* (/ a -1) d) (* -1 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (pow (- (/ (pow 0 e) 0) (+ 0 1)) (/ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001016985)",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ b (- c a))) (* (/ 1 (pow 0 -1)) (+ -1 (* (/ a -1) d)))) (pow (pow -1 (- 1 b)) (pow 1 e))) (+ -1 (/ (pow 0 e) 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001056476
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ b (- c a))) (/ (- (* (/ a -1) d) 1) (pow 0 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (- (/ (pow 0 e) 0) 1))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.0006460249999999999
    },
    "speedup": 1.6353484772261138,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (- (/ a 0) (pow 0 a)) (- a 0)) (* (* -1 a) c)) c) (+ (+ (* c 0) -1) (- c c))) (+ (/ (+ (pow 1 d) 0) (- -1 -1)) (+ 1 -1))) (- (- (+ (pow 0 0) -1) (pow 1 c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001014919)",
      "output_term": "(+ (/ (+ (- (pow (+ a (- (/ a 0) (pow 0 a))) (* a (* -1 c))) c) 1) (/ (pow 1 d) 0)) (- (+ -1 (pow 0 0)) (pow 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.001022618
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (- (pow (+ a (- (/ a 0) (pow 0 a))) (- 0 (* a c))) (+ -1 c)) (/ (pow 1 d) 0)) (- (pow 0 0) (+ 1 (pow 1 c))))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.000624199
    },
    "speedup": 1.638288430452468,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (/ (- (pow (- (- 1 (+ (/ a 1) b)) (/ 0 b)) (- (pow 0 a) a)) (+ (- 0 0) 0)) (/ -1 (- a 0))) (+ (- (+ (* -1 1) 1) (/ 1 1)) (- 0 0))) (pow (- (pow (+ a a) b) (+ -1 0)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002343)",
      "output_term": "(* -1 (* (/ (pow (- (- 1 (+ (/ a 1) b)) (/ 0 b)) (- (pow 0 a) a)) (/ -1 a)) (pow (+ 1 (pow (+ a a) b)) (/ 1 e))))",
      "output_weight_simple": 23,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.0010179380000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- 0 (/ (* (pow (- 1 (+ a (+ b (/ 0 b)))) (- (pow 0 a) a)) (pow (+ 1 (pow (+ a a) b)) (/ 1 e))) (/ -1 a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.000618982
    },
    "speedup": 1.6445357054001573,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (- (/ (pow a (+ 0 (- (+ -1 a) 1))) 0) (- (+ (* 0 0) b) b)) (+ (pow 0 (* a 1)) (/ a b))) (- (pow (pow (pow 1 1) b) (pow 0 d)) (- a e))) (+ (* (pow (- e 1) -1) (- e 1)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001018038)",
      "output_term": "(/ (- (+ (pow 0 a) (+ (/ (pow a (+ a -2)) 0) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) (+ -1 (* (- e 1) (pow (- e 1) -1))))",
      "output_weight_simple": 26,
      "output_weight_complex": 61,
      "output_depth": 8,
      "simplification_time": 0.001029528
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (+ (/ (pow a (- a 2)) 0) (+ (pow 0 a) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) 0)",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.0006255739999999999
    },
    "speedup": 1.645733358483569,
    "weight_simple_diff": 5,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (* (* (- (pow (- (pow (pow a 1) 0) a) (+ a -1)) (+ b (- c a))) (/ 1 (pow 0 -1))) (- (* (/ a -1) d) (* -1 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (pow (- (/ (pow 0 e) 0) (+ 0 1)) (/ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001010355)",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ b (- c a))) (* (/ 1 (pow 0 -1)) (+ -1 (* (/ a -1) d)))) (pow (pow -1 (- 1 b)) (pow 1 e))) (+ -1 (/ (pow 0 e) 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.00104965
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ b (- c a))) (/ (- (* (/ a -1) d) 1) (pow 0 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (- (/ (pow 0 e) 0) 1))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.000635177
    },
    "speedup": 1.6525314990939535,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (/ (- (pow (- (- 1 (+ (/ a 1) b)) (/ 0 b)) (- (pow 0 a) a)) (+ (- 0 0) 0)) (/ -1 (- a 0))) (+ (- (+ (* -1 1) 1) (/ 1 1)) (- 0 0))) (pow (- (pow (+ a a) b) (+ -1 0)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00100022)",
      "output_term": "(* -1 (* (/ (pow (- (- 1 (+ (/ a 1) b)) (/ 0 b)) (- (pow 0 a) a)) (/ -1 a)) (pow (+ 1 (pow (+ a a) b)) (/ 1 e))))",
      "output_weight_simple": 23,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001014222
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- 0 (/ (* (pow (- 1 (+ a (+ b (/ 0 b)))) (- (pow 0 a) a)) (pow (+ 1 (pow (+ a a) b)) (/ 1 e))) (/ -1 a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.000611351
    },
    "speedup": 1.658984773068172,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (/ (- (pow (- (- 1 (+ (/ a 1) b)) (/ 0 b)) (- (pow 0 a) a)) (+ (- 0 0) 0)) (/ -1 (- a 0))) (+ (- (+ (* -1 1) 1) (/ 1 1)) (- 0 0))) (pow (- (pow (+ a a) b) (+ -1 0)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001005727)",
      "output_term": "(* -1 (* (/ (pow (- (- 1 (+ (/ a 1) b)) (/ 0 b)) (- (pow 0 a) a)) (/ -1 a)) (pow (+ 1 (pow (+ a a) b)) (/ 1 e))))",
      "output_weight_simple": 23,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001021298
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- 0 (/ (* (pow (- 1 (+ a (+ b (/ 0 b)))) (- (pow 0 a) a)) (pow (+ 1 (pow (+ a a) b)) (/ 1 e))) (/ -1 a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.00061477
    },
    "speedup": 1.6612684418563037,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (- (+ (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (pow (* d 1) 0)) (/ b (+ 0 0))) (+ (* 0 (/ -1 -1)) (pow e c))) (/ (pow (pow 0 c) -1) (/ e a))) (pow 1 (/ (pow (/ 1 1) c) (pow 0 -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001012949)",
      "output_term": "(- (pow (- (+ 1 (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (/ b 0))) (pow e c)) (/ (pow (pow 0 c) -1) (/ e a))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 78,
      "output_depth": 10,
      "simplification_time": 0.001009854
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ (/ (+ (pow (+ a b) c) (* c c)) a) (/ b 0)) (- (pow e c) 1)) (/ (/ 1 (pow 0 c)) (/ e a))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 27,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.000605069
    },
    "speedup": 1.6689898176902138,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (- (+ (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (pow (* d 1) 0)) (/ b (+ 0 0))) (+ (* 0 (/ -1 -1)) (pow e c))) (/ (pow (pow 0 c) -1) (/ e a))) (pow 1 (/ (pow (/ 1 1) c) (pow 0 -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00102337)",
      "output_term": "(- (pow (- (+ 1 (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (/ b 0))) (pow e c)) (/ (pow (pow 0 c) -1) (/ e a))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 78,
      "output_depth": 10,
      "simplification_time": 0.001020347
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ (/ (+ (pow (+ a b) c) (* c c)) a) (/ b 0)) (- (pow e c) 1)) (/ (/ 1 (pow 0 c)) (/ e a))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 27,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.000609165
    },
    "speedup": 1.6749928180378058,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (- (+ (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (pow (* d 1) 0)) (/ b (+ 0 0))) (+ (* 0 (/ -1 -1)) (pow e c))) (/ (pow (pow 0 c) -1) (/ e a))) (pow 1 (/ (pow (/ 1 1) c) (pow 0 -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00101832)",
      "output_term": "(- (pow (- (+ 1 (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (/ b 0))) (pow e c)) (/ (pow (pow 0 c) -1) (/ e a))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 78,
      "output_depth": 10,
      "simplification_time": 0.001015222
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ (/ (+ (pow (+ a b) c) (* c c)) a) (/ b 0)) (- (pow e c) 1)) (/ (/ 1 (pow 0 c)) (/ e a))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 27,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.000601338
    },
    "speedup": 1.6882718205069365,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (pow (/ (/ (+ (pow a 0) b) (- 1 0)) b) (/ (- 0 0) a)) (/ (- b 1) 0)) (- (pow (pow 1 a) 1) (pow 1 -1))) (- (* (- 1 0) -1) (* a 1))) (/ (pow (+ (+ c 1) 0) (* 0 -1)) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (pow (/ (/ (+ b 1) 1) b) (/ 0 a)) (/ (+ b -1) 0)) (- (pow 1 a) (pow 1 -1))) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.000572171
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (pow (/ (+ b 1) b) (/ 0 a)) (/ (- b 1) 0)) (- (pow 1 a) 1)) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 19,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.000336598
    },
    "speedup": 1.699864526824283,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (pow (/ (/ (+ (pow a 0) b) (- 1 0)) b) (/ (- 0 0) a)) (/ (- b 1) 0)) (- (pow (pow 1 a) 1) (pow 1 -1))) (- (* (- 1 0) -1) (* a 1))) (/ (pow (+ (+ c 1) 0) (* 0 -1)) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (pow (/ (/ (+ b 1) 1) b) (/ 0 a)) (/ (+ b -1) 0)) (- (pow 1 a) (pow 1 -1))) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.000587109
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (pow (/ (+ b 1) b) (/ 0 a)) (/ (- b 1) 0)) (- (pow 1 a) 1)) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 19,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.000337156
    },
    "speedup": 1.7413571165869806,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (pow (/ (/ (+ (pow a 0) b) (- 1 0)) b) (/ (- 0 0) a)) (/ (- b 1) 0)) (- (pow (pow 1 a) 1) (pow 1 -1))) (- (* (- 1 0) -1) (* a 1))) (/ (pow (+ (+ c 1) 0) (* 0 -1)) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (pow (/ (/ (+ b 1) 1) b) (/ 0 a)) (/ (+ b -1) 0)) (- (pow 1 a) (pow 1 -1))) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.0005811470000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (pow (/ (+ b 1) b) (/ 0 a)) (/ (- b 1) 0)) (- (pow 1 a) 1)) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 19,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.000330383
    },
    "speedup": 1.7590099974877644,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (/ (- (+ (* a (- -1 (* (+ 1 b) 1))) (pow (+ a b) b)) (/ (* -1 a) 0)) (pow (* b a) (* c 0))) (- (/ (/ (pow a c) 1) (* -1 -1)) (+ a c))) (- (+ (* -1 (/ c 1)) (/ -1 b)) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001263)",
      "output_term": "(+ (pow (/ (- (+ (* (* a -1) (+ 2 b)) (pow (+ a b) b)) (/ (* a -1) 0)) 1) (- (/ (/ (pow a c) 1) 1) (+ a c))) (+ (pow a -1) (+ (/ c 1) (* -1 (/ -1 b)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.00104128
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ (* a (- -1 (+ 1 b))) (pow (+ a b) b)) (/ (- 0 a) 0)) (- (pow a c) (+ a c))) (- (- (/ -1 b) c) (/ 1 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.000575713
    },
    "speedup": 1.808678977198708,
    "weight_simple_diff": 5,
    "weight_complex_diff": 22,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (- (pow (pow (* (+ (pow 1 1) a) (* a a)) (+ a 1)) (- a (pow b c))) (+ (- b d) 1)) (pow (/ (pow 1 d) d) (* 1 -1))) (- (/ e (/ b b)) (pow -1 b))) (pow d (- (pow (- 0 b) c) (- c c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001009272)",
      "output_term": "(+ (pow (* (- (pow (pow (* (+ 1 a) (* a a)) (+ 1 a)) (- a (pow b c))) (+ 1 (- b d))) (pow (/ (pow 1 d) d) -1)) (- (/ e (/ b b)) (pow -1 b))) (pow d (pow (* b -1) c)))",
      "output_weight_simple": 30,
      "output_weight_complex": 78,
      "output_depth": 9,
      "simplification_time": 0.001059416
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (- (pow (pow (* a (+ a (* a a))) (+ 1 a)) (- a (pow b c))) (- (+ 1 b) d)) (/ (pow 1 d) d)) (- e (pow -1 b))) (pow d (pow (- 0 b) c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.000582696
    },
    "speedup": 1.8181281491549628,
    "weight_simple_diff": 1,
    "weight_complex_diff": 10,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (/ (- (+ (* a (- -1 (* (+ 1 b) 1))) (pow (+ a b) b)) (/ (* -1 a) 0)) (pow (* b a) (* c 0))) (- (/ (/ (pow a c) 1) (* -1 -1)) (+ a c))) (- (+ (* -1 (/ c 1)) (/ -1 b)) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000446)",
      "output_term": "(+ (pow (/ (- (+ (* (* a -1) (+ 2 b)) (pow (+ a b) b)) (/ (* a -1) 0)) 1) (- (/ (/ (pow a c) 1) 1) (+ a c))) (+ (pow a -1) (+ (/ c 1) (* -1 (/ -1 b)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001039352
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ (* a (- -1 (+ 1 b))) (pow (+ a b) b)) (/ (- 0 a) 0)) (- (pow a c) (+ a c))) (- (- (/ -1 b) c) (/ 1 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.0005707069999999999
    },
    "speedup": 1.8211656769585796,
    "weight_simple_diff": 5,
    "weight_complex_diff": 22,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (- (pow (pow (* (+ (pow 1 1) a) (* a a)) (+ a 1)) (- a (pow b c))) (+ (- b d) 1)) (pow (/ (pow 1 d) d) (* 1 -1))) (- (/ e (/ b b)) (pow -1 b))) (pow d (- (pow (- 0 b) c) (- c c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006446)",
      "output_term": "(+ (pow (* (- (pow (pow (* (+ 1 a) (* a a)) (+ 1 a)) (- a (pow b c))) (+ 1 (- b d))) (pow (/ (pow 1 d) d) -1)) (- (/ e (/ b b)) (pow -1 b))) (pow d (pow (* b -1) c)))",
      "output_weight_simple": 30,
      "output_weight_complex": 78,
      "output_depth": 9,
      "simplification_time": 0.001056709
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (- (pow (pow (* a (+ a (* a a))) (+ 1 a)) (- a (pow b c))) (- (+ 1 b) d)) (/ (pow 1 d) d)) (- e (pow -1 b))) (pow d (pow (- 0 b) c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.000575952
    },
    "speedup": 1.8347171292052116,
    "weight_simple_diff": 1,
    "weight_complex_diff": 10,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (* (- (pow (pow (* (+ (pow 1 1) a) (* a a)) (+ a 1)) (- a (pow b c))) (+ (- b d) 1)) (pow (/ (pow 1 d) d) (* 1 -1))) (- (/ e (/ b b)) (pow -1 b))) (pow d (- (pow (- 0 b) c) (- c c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001051685)",
      "output_term": "(+ (pow (* (- (pow (pow (* (+ 1 a) (* a a)) (+ 1 a)) (- a (pow b c))) (+ 1 (- b d))) (pow (/ (pow 1 d) d) -1)) (- (/ e (/ b b)) (pow -1 b))) (pow d (pow (* b -1) c)))",
      "output_weight_simple": 30,
      "output_weight_complex": 78,
      "output_depth": 9,
      "simplification_time": 0.001094423
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (- (pow (pow (* a (+ a (* a a))) (+ 1 a)) (- a (pow b c))) (- (+ 1 b) d)) (/ (pow 1 d) d)) (- e (pow -1 b))) (pow d (pow (- 0 b) c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.000596497
    },
    "speedup": 1.8347502166817269,
    "weight_simple_diff": 1,
    "weight_complex_diff": 10,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (/ (- (+ (* a (- -1 (* (+ 1 b) 1))) (pow (+ a b) b)) (/ (* -1 a) 0)) (pow (* b a) (* c 0))) (- (/ (/ (pow a c) 1) (* -1 -1)) (+ a c))) (- (+ (* -1 (/ c 1)) (/ -1 b)) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001004145)",
      "output_term": "(+ (pow (/ (- (+ (* (* a -1) (+ 2 b)) (pow (+ a b) b)) (/ (* a -1) 0)) 1) (- (/ (/ (pow a c) 1) 1) (+ a c))) (+ (pow a -1) (+ (/ c 1) (* -1 (/ -1 b)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001044198
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ (* a (- -1 (+ 1 b))) (pow (+ a b) b)) (/ (- 0 a) 0)) (- (pow a c) (+ a c))) (- (- (/ -1 b) c) (/ 1 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.0005689969999999999
    },
    "speedup": 1.8351555456355662,
    "weight_simple_diff": 5,
    "weight_complex_diff": 22,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (- (/ (+ (pow 1 (* a (pow a 0))) (* -1 -1)) (- (* a 0) a)) (- (/ 1 a) 0)) (* (pow (- b d) d) (* 0 1))) (- (/ b (pow 0 0)) (* 1 1))) (- (* (+ (+ e 1) a) (+ 0 a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003911)",
      "output_term": "(- (pow 0 (+ -1 (/ b (pow 0 0)))) (- (+ a (* a (+ a e))) (pow -1 e)))",
      "output_weight_simple": 15,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.001068988
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- (pow 0 (- (/ b (pow 0 0)) 1)) (- (* a (+ 1 (+ a e))) (pow -1 e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.0005621140000000001
    },
    "speedup": 1.9017281192071358,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (- (/ (+ (pow 1 (* a (pow a 0))) (* -1 -1)) (- (* a 0) a)) (- (/ 1 a) 0)) (* (pow (- b d) d) (* 0 1))) (- (/ b (pow 0 0)) (* 1 1))) (- (* (+ (+ e 1) a) (+ 0 a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001006517)",
      "output_term": "(- (pow 0 (+ -1 (/ b (pow 0 0)))) (- (+ a (* a (+ a e))) (pow -1 e)))",
      "output_weight_simple": 15,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.0010721720000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- (pow 0 (- (/ b (pow 0 0)) 1)) (- (* a (+ 1 (+ a e))) (pow -1 e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.000560819
    },
    "speedup": 1.911796854243526,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (- (/ (+ (pow 1 (* a (pow a 0))) (* -1 -1)) (- (* a 0) a)) (- (/ 1 a) 0)) (* (pow (- b d) d) (* 0 1))) (- (/ b (pow 0 0)) (* 1 1))) (- (* (+ (+ e 1) a) (+ 0 a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001008143)",
      "output_term": "(- (pow 0 (+ -1 (/ b (pow 0 0)))) (- (+ a (* a (+ a e))) (pow -1 e)))",
      "output_weight_simple": 15,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.001072237
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- (pow 0 (- (/ b (pow 0 0)) 1)) (- (* a (+ 1 (+ a e))) (pow -1 e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.0005602199999999999
    },
    "speedup": 1.9139570168862234,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) (/ b 1)) (/ (- b 0) 0)) (* (+ b c) 1)) (- (/ (* -1 1) -1) (+ e -1))) (pow (/ (/ d a) -1) (* d d))) (- (* (- (pow 1 a) -1) (+ 1 b)) (- a d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001003696)",
      "output_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) (/ b 1)) (/ b 0)) (+ b c)) (+ (* -1 e) 2)) (pow (/ (/ d a) -1) (* d d))) (- (* (+ 1 (pow 1 a)) (+ 1 b)) (- a d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.001035203
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- (* (pow (pow (pow (- a (- (pow 1 a) b)) b) (/ b 0)) (+ b c)) (- 1 (+ -1 e))) (+ (pow (/ (/ d a) -1) (* d d)) (- (* (+ 1 (pow 1 a)) (+ 1 b)) (- a d))))",
      "output_weight_simple": 30,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.000531741
    },
    "speedup": 1.9468180937712156,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (- (pow (pow (/ (+ (pow (* a -1) 0) (- 0 a)) (/ 0 b)) (+ (+ b 1) b)) -1) (* 1 (/ (* -1 -1) 1))) (/ (/ (/ (pow 0 a) 0) (* 0 -1)) (pow c a))) (pow (pow (- (/ a c) b) (/ d d)) (- 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001017314)",
      "output_term": "(* (+ (pow (pow (/ (+ (- 0 a) 1) (/ 0 b)) (+ 1 (+ b b))) -1) (+ -1 (/ (/ (/ (pow 0 a) 0) 0) (pow c a)))) (pow (pow (- (/ a c) b) (/ d d)) -1))",
      "output_weight_simple": 28,
      "output_weight_complex": 79,
      "output_depth": 8,
      "simplification_time": 0.001031372
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (- (/ 1 (pow (/ (- 1 a) (/ 0 b)) (+ b (+ b 1)))) 1) (/ (/ (/ (pow 0 a) 0) 0) (pow c a))) (- (/ a c) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.0005270159999999999
    },
    "speedup": 1.9570032029388105,
    "weight_simple_diff": 6,
    "weight_complex_diff": 13,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (pow (pow (/ (+ (pow (* a -1) 0) (- 0 a)) (/ 0 b)) (+ (+ b 1) b)) -1) (* 1 (/ (* -1 -1) 1))) (/ (/ (/ (pow 0 a) 0) (* 0 -1)) (pow c a))) (pow (pow (- (/ a c) b) (/ d d)) (- 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.0010054)",
      "output_term": "(* (+ (pow (pow (/ (+ (- 0 a) 1) (/ 0 b)) (+ 1 (+ b b))) -1) (+ -1 (/ (/ (/ (pow 0 a) 0) 0) (pow c a)))) (pow (pow (- (/ a c) b) (/ d d)) -1))",
      "output_weight_simple": 28,
      "output_weight_complex": 79,
      "output_depth": 8,
      "simplification_time": 0.001019583
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (- (/ 1 (pow (/ (- 1 a) (/ 0 b)) (+ b (+ b 1)))) 1) (/ (/ (/ (pow 0 a) 0) 0) (pow c a))) (- (/ a c) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.0005169139999999999
    },
    "speedup": 1.972442224431917,
    "weight_simple_diff": 6,
    "weight_complex_diff": 13,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (+ (/ (- (/ (pow (- (+ 0 a) -1) (/ a -1)) (pow b 1)) (- (* a a) c)) (* a (* b 1))) (pow (+ (+ 0 b) d) (pow -1 -1))) (* (+ (pow -1 1) -1) (* c d))) (pow (* (* 0 1) a) (pow (/ d c) a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006778)",
      "output_term": "(pow (+ (/ (- (/ (pow (+ a 1) (/ a -1)) b) (- (* a a) c)) (* a b)) (+ (pow (+ b d) (pow -1 -1)) (* d (* c 2)))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.001016417
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (+ (/ (- (/ (pow (+ a 1) (/ a -1)) b) (- (* a a) c)) (* a b)) (/ 1 (+ b d))) (* d (* c -2))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.000512018
    },
    "speedup": 1.9851196637618205,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": -1
  },
  {
    "base_term": "(* (pow (+ (/ a (- (- (/ (- (- 1 a) 0) (* 0 a)) 1) (+ (/ b 0) a))) (/ (* (- 1 c) a) (/ 0 e))) (- (pow (* (- a -1) d) (+ d b)) (pow d e))) (* (pow (+ (* 0 a) c) (* -1 -1)) (pow b e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.0010076)",
      "output_term": "(* (pow (+ (/ a (- (+ (/ (- 1 a) 0) -1) (+ a (/ b 0)))) (/ (* a (- 1 c)) (/ 0 e))) (- (pow (+ d (* a d)) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001024928
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ (/ a (- (/ (- 1 a) 0) (+ a (+ 1 (/ b 0))))) (/ (* a (- 1 c)) (/ 0 e))) (- (pow (* (+ a 1) d) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 70,
      "output_depth": 9,
      "simplification_time": 0.000510413
    },
    "speedup": 2.008036629161091,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (pow (pow (/ (+ (pow (* a -1) 0) (- 0 a)) (/ 0 b)) (+ (+ b 1) b)) -1) (* 1 (/ (* -1 -1) 1))) (/ (/ (/ (pow 0 a) 0) (* 0 -1)) (pow c a))) (pow (pow (- (/ a c) b) (/ d d)) (- 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001012642)",
      "output_term": "(* (+ (pow (pow (/ (+ (- 0 a) 1) (/ 0 b)) (+ 1 (+ b b))) -1) (+ -1 (/ (/ (/ (pow 0 a) 0) 0) (pow c a)))) (pow (pow (- (/ a c) b) (/ d d)) -1))",
      "output_weight_simple": 28,
      "output_weight_complex": 79,
      "output_depth": 8,
      "simplification_time": 0.001027903
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (- (/ 1 (pow (/ (- 1 a) (/ 0 b)) (+ b (+ b 1)))) 1) (/ (/ (/ (pow 0 a) 0) 0) (pow c a))) (- (/ a c) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.000511465
    },
    "speedup": 2.00972305045311,
    "weight_simple_diff": 6,
    "weight_complex_diff": 13,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (+ (/ (- (/ (pow (- (+ 0 a) -1) (/ a -1)) (pow b 1)) (- (* a a) c)) (* a (* b 1))) (pow (+ (+ 0 b) d) (pow -1 -1))) (* (+ (pow -1 1) -1) (* c d))) (pow (* (* 0 1) a) (pow (/ d c) a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002622)",
      "output_term": "(pow (+ (/ (- (/ (pow (+ a 1) (/ a -1)) b) (- (* a a) c)) (* a b)) (+ (pow (+ b d) (pow -1 -1)) (* d (* c 2)))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.0010125520000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (+ (/ (- (/ (pow (+ a 1) (/ a -1)) b) (- (* a a) c)) (* a b)) (/ 1 (+ b d))) (* d (* c -2))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.000502939
    },
    "speedup": 2.0132699989461944,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": -1
  },
  {
    "base_term": "(* (pow (+ (/ a (- (- (/ (- (- 1 a) 0) (* 0 a)) 1) (+ (/ b 0) a))) (/ (* (- 1 c) a) (/ 0 e))) (- (pow (* (- a -1) d) (+ d b)) (pow d e))) (* (pow (+ (* 0 a) c) (* -1 -1)) (pow b e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005239)",
      "output_term": "(* (pow (+ (/ a (- (+ (/ (- 1 a) 0) -1) (+ a (/ b 0)))) (/ (* a (- 1 c)) (/ 0 e))) (- (pow (+ d (* a d)) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001021292
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ (/ a (- (/ (- 1 a) 0) (+ a (+ 1 (/ b 0))))) (/ (* a (- 1 c)) (/ 0 e))) (- (pow (* (+ a 1) d) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 70,
      "output_depth": 9,
      "simplification_time": 0.000504031
    },
    "speedup": 2.02624838551597,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (+ (/ a (- (- (/ (- (- 1 a) 0) (* 0 a)) 1) (+ (/ b 0) a))) (/ (* (- 1 c) a) (/ 0 e))) (- (pow (* (- a -1) d) (+ d b)) (pow d e))) (* (pow (+ (* 0 a) c) (* -1 -1)) (pow b e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001015895)",
      "output_term": "(* (pow (+ (/ a (- (+ (/ (- 1 a) 0) -1) (+ a (/ b 0)))) (/ (* a (- 1 c)) (/ 0 e))) (- (pow (+ d (* a d)) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001033298
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ (/ a (- (/ (- 1 a) 0) (+ a (+ 1 (/ b 0))))) (/ (* a (- 1 c)) (/ 0 e))) (- (pow (* (+ a 1) d) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 70,
      "output_depth": 9,
      "simplification_time": 0.0005017530000000001
    },
    "speedup": 2.0593758283458192,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (+ (/ (- (/ (pow (- (+ 0 a) -1) (/ a -1)) (pow b 1)) (- (* a a) c)) (* a (* b 1))) (pow (+ (+ 0 b) d) (pow -1 -1))) (* (+ (pow -1 1) -1) (* c d))) (pow (* (* 0 1) a) (pow (/ d c) a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001027677)",
      "output_term": "(pow (+ (/ (- (/ (pow (+ a 1) (/ a -1)) b) (- (* a a) c)) (* a b)) (+ (pow (+ b d) (pow -1 -1)) (* d (* c 2)))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.001039833
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (+ (/ (- (/ (pow (+ a 1) (/ a -1)) b) (- (* a a) c)) (* a b)) (/ 1 (+ b d))) (* d (* c -2))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.000498606
    },
    "speedup": 2.0854803191297338,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (/ (- (- (+ 1 -1) 1) (pow a 0)) -1) a) (- (pow (/ a -1) a) (+ b -1))) (/ (- b (- b -1)) (* c e))) (- (+ (+ e 1) e) (+ -1 d))) (pow (pow (+ d (* b 1)) (* -1 a)) (pow 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002134)",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (- (pow (/ a -1) a) (+ -1 b))) (/ -1 (* c e))) (+ e (+ e (+ 2 (* -1 d))))) (pow (+ b d) (* -1 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.0010144870000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (- (pow (/ a -1) a) (+ -1 b))) (/ -1 (* c e))) (- (+ e e) (- d 2))) (pow (+ b d) (- 0 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.000470518
    },
    "speedup": 2.156106673921083,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (/ (- (- (+ 1 -1) 1) (pow a 0)) -1) a) (- (pow (/ a -1) a) (+ b -1))) (/ (- b (- b -1)) (* c e))) (- (+ (+ e 1) e) (+ -1 d))) (pow (pow (+ d (* b 1)) (* -1 a)) (pow 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001555)",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (- (pow (/ a -1) a) (+ -1 b))) (/ -1 (* c e))) (+ e (+ e (+ 2 (* -1 d))))) (pow (+ b d) (* -1 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001014083
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (- (pow (/ a -1) a) (+ -1 b))) (/ -1 (* c e))) (- (+ e e) (- d 2))) (pow (+ b d) (- 0 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.000469594
    },
    "speedup": 2.159488835036223,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (/ (- (/ (- (+ (/ (pow 1 1) a) (/ -1 1)) (+ b c)) (+ (/ 1 a) 0)) (pow 1 (+ c d))) (- (- (pow e 0) e) (* e 0))) (pow (+ (* 1 c) d) (* b d))) (* (/ (- (- 0 c) 1) (- a c)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001009317)",
      "output_term": "(/ (+ (/ (- (/ (- (+ -1 (/ 1 a)) (+ b c)) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.0010154510000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (/ (- (+ -1 (/ 1 a)) (+ b c)) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.00046961400000000003
    },
    "speedup": 2.1623098970643975,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (/ (- (- (+ 1 -1) 1) (pow a 0)) -1) a) (- (pow (/ a -1) a) (+ b -1))) (/ (- b (- b -1)) (* c e))) (- (+ (+ e 1) e) (+ -1 d))) (pow (pow (+ d (* b 1)) (* -1 a)) (pow 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000048)",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (- (pow (/ a -1) a) (+ -1 b))) (/ -1 (* c e))) (+ e (+ e (+ 2 (* -1 d))))) (pow (+ b d) (* -1 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.0010113919999999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (- (pow (/ a -1) a) (+ -1 b))) (/ -1 (* c e))) (- (+ e e) (- d 2))) (pow (+ b d) (- 0 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.00046750099999999994
    },
    "speedup": 2.1634007199984597,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (/ (pow (/ (/ (- (- 0 (- -1 a)) (* a b)) (* a b)) (+ (/ b d) d)) (/ (- b -1) -1)) (/ (* (+ d -1) 1) (pow d b))) (/ (- (+ 0 b) d) (/ d b))) (pow (+ (/ (+ 1 e) 1) 1) (/ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001015118)",
      "output_term": "(* (- (/ (pow (/ (/ (- (+ a 1) (* a b)) (* a b)) (+ d (/ b d))) (/ (+ b 1) -1)) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ 1 (/ (+ 1 e) 1)) (/ d -1)))",
      "output_weight_simple": 30,
      "output_weight_complex": 85,
      "output_depth": 9,
      "simplification_time": 0.001034869
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (- (/ (pow (/ (/ (- a (+ -1 (* a b))) (+ d (/ b d))) (* a b)) (/ (+ b 1) -1)) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ e 2) (/ d -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 10,
      "simplification_time": 0.00047629599999999997
    },
    "speedup": 2.172743420058115,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (+ (/ (- (/ (- (+ (/ (pow 1 1) a) (/ -1 1)) (+ b c)) (+ (/ 1 a) 0)) (pow 1 (+ c d))) (- (- (pow e 0) e) (* e 0))) (pow (+ (* 1 c) d) (* b d))) (* (/ (- (- 0 c) 1) (- a c)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001004931)",
      "output_term": "(/ (+ (/ (- (/ (- (+ -1 (/ 1 a)) (+ b c)) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.001003631
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (/ (- (+ -1 (/ 1 a)) (+ b c)) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.000460507
    },
    "speedup": 2.179404439020471,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (/ (pow (/ (/ (- (- 0 (- -1 a)) (* a b)) (* a b)) (+ (/ b d) d)) (/ (- b -1) -1)) (/ (* (+ d -1) 1) (pow d b))) (/ (- (+ 0 b) d) (/ d b))) (pow (+ (/ (+ 1 e) 1) 1) (/ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013736)",
      "output_term": "(* (- (/ (pow (/ (/ (- (+ a 1) (* a b)) (* a b)) (+ d (/ b d))) (/ (+ b 1) -1)) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ 1 (/ (+ 1 e) 1)) (/ d -1)))",
      "output_weight_simple": 30,
      "output_weight_complex": 85,
      "output_depth": 9,
      "simplification_time": 0.001033749
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (- (/ (pow (/ (/ (- a (+ -1 (* a b))) (+ d (/ b d))) (* a b)) (/ (+ b 1) -1)) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ e 2) (/ d -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 10,
      "simplification_time": 0.0004729080000000001
    },
    "speedup": 2.1859410286990277,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": -1
  },
  {
    "base_term": "(* (- (/ (pow (/ (/ (- (- 0 (- -1 a)) (* a b)) (* a b)) (+ (/ b d) d)) (/ (- b -1) -1)) (/ (* (+ d -1) 1) (pow d b))) (/ (- (+ 0 b) d) (/ d b))) (pow (+ (/ (+ 1 e) 1) 1) (/ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006226)",
      "output_term": "(* (- (/ (pow (/ (/ (- (+ a 1) (* a b)) (* a b)) (+ d (/ b d))) (/ (+ b 1) -1)) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ 1 (/ (+ 1 e) 1)) (/ d -1)))",
      "output_weight_simple": 30,
      "output_weight_complex": 85,
      "output_depth": 9,
      "simplification_time": 0.001025747
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (- (/ (pow (/ (/ (- a (+ -1 (* a b))) (+ d (/ b d))) (* a b)) (/ (+ b 1) -1)) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ e 2) (/ d -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 10,
      "simplification_time": 0.00046915799999999996
    },
    "speedup": 2.186357261306426,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": -1
  },
  {
    "base_term": "(* (pow (pow (+ (* (pow (* (pow (pow 0 -1) a) (- -1 a)) (/ a a)) (- 0 (- 0 1))) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) (pow b 1))) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ e a)) (/ 0 b)) (+ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006523)",
      "output_term": "(* (pow (pow (+ (pow (* (pow (pow 0 -1) a) (- -1 a)) (/ a a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ a e)) (/ 0 b)) (+ -1 d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 94,
      "output_depth": 9,
      "simplification_time": 0.00101743
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (pow (+ (* (pow (pow 0 -1) a) (- -1 a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ a e)) (/ 0 b)) (+ -1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 85,
      "output_depth": 8,
      "simplification_time": 0.000465227
    },
    "speedup": 2.1869538956251464,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (/ (/ (- (pow (- 0 (+ (- a a) -1)) (* a b)) (/ (+ 0 1) 0)) (- (* b a) c)) (+ (+ (+ 1 1) 1) (* 1 -1))) (- (* (* 0 1) -1) (pow a 0))) (pow (+ (/ d (- a 1)) (pow 0 0)) (+ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (+ -1 (/ (/ (- (pow 1 (* a b)) (/ 1 0)) (- (* a b) c)) 2)) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.000625147
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (+ -1 (/ (/ (- (pow 1 (* a b)) (/ 1 0)) (- (* a b) c)) 2)) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.000284014
    },
    "speedup": 2.201113325399452,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (+ (* (pow (* (pow (pow 0 -1) a) (- -1 a)) (/ a a)) (- 0 (- 0 1))) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) (pow b 1))) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ e a)) (/ 0 b)) (+ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000979)",
      "output_term": "(* (pow (pow (+ (pow (* (pow (pow 0 -1) a) (- -1 a)) (/ a a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ a e)) (/ 0 b)) (+ -1 d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 94,
      "output_depth": 9,
      "simplification_time": 0.001013173
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (pow (+ (* (pow (pow 0 -1) a) (- -1 a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ a e)) (/ 0 b)) (+ -1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 85,
      "output_depth": 8,
      "simplification_time": 0.000458371
    },
    "speedup": 2.210377619875603,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) (/ b 1)) (/ (- b 0) 0)) (* (+ b c) 1)) (- (/ (* -1 1) -1) (+ e -1))) (pow (/ (/ d a) -1) (* d d))) (- (* (- (pow 1 a) -1) (+ 1 b)) (- a d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001011107)",
      "output_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) (/ b 1)) (/ b 0)) (+ b c)) (+ (* -1 e) 2)) (pow (/ (/ d a) -1) (* d d))) (- (* (+ 1 (pow 1 a)) (+ 1 b)) (- a d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.00104229
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- (* (pow (pow (pow (- a (- (pow 1 a) b)) b) (/ b 0)) (+ b c)) (- 1 (+ -1 e))) (+ (pow (/ (/ d a) -1) (* d d)) (- (* (+ 1 (pow 1 a)) (+ 1 b)) (- a d))))",
      "output_weight_simple": 30,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.000469985
    },
    "speedup": 2.2177090758215687,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (/ (- (+ (/ (pow 1 1) a) (/ -1 1)) (+ b c)) (+ (/ 1 a) 0)) (pow 1 (+ c d))) (- (- (pow e 0) e) (* e 0))) (pow (+ (* 1 c) d) (* b d))) (* (/ (- (- 0 c) 1) (- a c)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001005986)",
      "output_term": "(/ (+ (/ (- (/ (- (+ -1 (/ 1 a)) (+ b c)) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.001011591
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (/ (- (+ -1 (/ 1 a)) (+ b c)) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.00045521
    },
    "speedup": 2.2222512686452407,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (+ (* (pow (* (pow (pow 0 -1) a) (- -1 a)) (/ a a)) (- 0 (- 0 1))) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) (pow b 1))) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ e a)) (/ 0 b)) (+ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001269)",
      "output_term": "(* (pow (pow (+ (pow (* (pow (pow 0 -1) a) (- -1 a)) (/ a a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ a e)) (/ 0 b)) (+ -1 d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 94,
      "output_depth": 9,
      "simplification_time": 0.00101357
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (pow (+ (* (pow (pow 0 -1) a) (- -1 a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ a e)) (/ 0 b)) (+ -1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 85,
      "output_depth": 8,
      "simplification_time": 0.000453586
    },
    "speedup": 2.2345707319008965,
    "weight_simple_diff": 2,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (- (pow (+ (- (pow (pow (pow -1 -1) a) (* 0 a)) a) a) (pow (- (+ b b) a) 0)) (/ 1 (/ (pow -1 b) 0))) (pow (/ (pow (pow a a) a) (/ 1 a)) (* -1 -1))) (/ (+ (+ 1 (pow -1 a)) (+ 1 a)) (* 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003078)",
      "output_term": "(/ (* (- 1 (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ 1 a))) (/ (+ (pow -1 a) (+ a 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.0010139119999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (- 1 (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ 1 a))) (/ (+ a (+ (pow -1 a) 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.000453044
    },
    "speedup": 2.237998958158589,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (/ (/ (- (pow (- 0 (+ (- a a) -1)) (* a b)) (/ (+ 0 1) 0)) (- (* b a) c)) (+ (+ (+ 1 1) 1) (* 1 -1))) (- (* (* 0 1) -1) (pow a 0))) (pow (+ (/ d (- a 1)) (pow 0 0)) (+ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (+ -1 (/ (/ (- (pow 1 (* a b)) (/ 1 0)) (- (* a b) c)) 2)) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.000615297
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (+ -1 (/ (/ (- (pow 1 (* a b)) (/ 1 0)) (- (* a b) c)) 2)) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.000274652
    },
    "speedup": 2.2402786071100884,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) (/ b 1)) (/ (- b 0) 0)) (* (+ b c) 1)) (- (/ (* -1 1) -1) (+ e -1))) (pow (/ (/ d a) -1) (* d d))) (- (* (- (pow 1 a) -1) (+ 1 b)) (- a d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018298)",
      "output_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) (/ b 1)) (/ b 0)) (+ b c)) (+ (* -1 e) 2)) (pow (/ (/ d a) -1) (* d d))) (- (* (+ 1 (pow 1 a)) (+ 1 b)) (- a d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.001049465
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- (* (pow (pow (pow (- a (- (pow 1 a) b)) b) (/ b 0)) (+ b c)) (- 1 (+ -1 e))) (+ (pow (/ (/ d a) -1) (* d d)) (- (* (+ 1 (pow 1 a)) (+ 1 b)) (- a d))))",
      "output_weight_simple": 30,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.00046717
    },
    "speedup": 2.2464306355288226,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (- (pow (+ (- (pow (pow (pow -1 -1) a) (* 0 a)) a) a) (pow (- (+ b b) a) 0)) (/ 1 (/ (pow -1 b) 0))) (pow (/ (pow (pow a a) a) (/ 1 a)) (* -1 -1))) (/ (+ (+ 1 (pow -1 a)) (+ 1 a)) (* 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001012659)",
      "output_term": "(/ (* (- 1 (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ 1 a))) (/ (+ (pow -1 a) (+ a 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.0010234320000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (- 1 (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ 1 a))) (/ (+ a (+ (pow -1 a) 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.000453707
    },
    "speedup": 2.2557112850363783,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (/ (/ (- (pow (- 0 (+ (- a a) -1)) (* a b)) (/ (+ 0 1) 0)) (- (* b a) c)) (+ (+ (+ 1 1) 1) (* 1 -1))) (- (* (* 0 1) -1) (pow a 0))) (pow (+ (/ d (- a 1)) (pow 0 0)) (+ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (+ -1 (/ (/ (- (pow 1 (* a b)) (/ 1 0)) (- (* a b) c)) 2)) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.000622941
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (+ -1 (/ (/ (- (pow 1 (* a b)) (/ 1 0)) (- (* a b) c)) 2)) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.000275478
    },
    "speedup": 2.2613094330581753,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (- (pow (+ (- (pow (pow (pow -1 -1) a) (* 0 a)) a) a) (pow (- (+ b b) a) 0)) (/ 1 (/ (pow -1 b) 0))) (pow (/ (pow (pow a a) a) (/ 1 a)) (* -1 -1))) (/ (+ (+ 1 (pow -1 a)) (+ 1 a)) (* 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004418)",
      "output_term": "(/ (* (- 1 (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ 1 a))) (/ (+ (pow -1 a) (+ a 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.001015432
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (- 1 (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ 1 a))) (/ (+ a (+ (pow -1 a) 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.000446572
    },
    "speedup": 2.2738371416031455,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (pow (pow (pow (pow (+ (pow a 1) 0) (- a -1)) (- 1 a)) (- (- 1 0) -1)) (- (* -1 1) -1)) (/ (- a (* a 0)) (- 0 b))) (pow 1 (pow 1 (pow c -1)))) (/ (/ (+ (pow 0 -1) -1) (pow a 1)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.001000421)",
      "output_term": "(/ (* (+ 1 (/ a (- 0 b))) (pow 1 (pow 1 (pow c -1)))) (/ (/ (+ -1 (pow 0 -1)) a) -1))",
      "output_weight_simple": 18,
      "output_weight_complex": 50,
      "output_depth": 6,
      "simplification_time": 0.0010071799999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ 1 (/ a (- 0 b))) (pow 1 (pow 1 (/ 1 c)))) (/ (/ (+ -1 (pow 0 -1)) a) -1))",
      "output_weight_simple": 18,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.000441153
    },
    "speedup": 2.283062792273882,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (pow (/ (pow (+ (+ (* a a) a) (/ b -1)) (/ a 0)) (* (pow -1 1) a)) (/ (- -1 -1) a)) (+ (+ (* 1 1) a) b)) (pow (- (* a a) 0) (+ e e))) (* (+ (+ (/ -1 e) 0) (pow -1 0)) (* e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004113)",
      "output_term": "(/ (- (/ (pow (/ (pow (+ a (+ (* a a) (/ b -1))) (/ a 0)) (* a -1)) (/ 0 a)) (+ a (+ b 1))) (pow (* a a) (+ e e))) (* (+ 1 (/ -1 e)) (* e d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 10,
      "simplification_time": 0.0010184299999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (pow (/ (pow (+ a (+ (* a a) (/ b -1))) (/ a 0)) (- 0 a)) (/ 0 a)) (+ 1 (+ a b))) (pow (* a a) (+ e e))) (* (+ 1 (/ -1 e)) (* e d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.00044167299999999996
    },
    "speedup": 2.3058461803189236,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (pow (pow (pow (pow (+ (pow a 1) 0) (- a -1)) (- 1 a)) (- (- 1 0) -1)) (- (* -1 1) -1)) (/ (- a (* a 0)) (- 0 b))) (pow 1 (pow 1 (pow c -1)))) (/ (/ (+ (pow 0 -1) -1) (pow a 1)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.001001635)",
      "output_term": "(/ (* (+ 1 (/ a (- 0 b))) (pow 1 (pow 1 (pow c -1)))) (/ (/ (+ -1 (pow 0 -1)) a) -1))",
      "output_weight_simple": 18,
      "output_weight_complex": 50,
      "output_depth": 6,
      "simplification_time": 0.001008959
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ 1 (/ a (- 0 b))) (pow 1 (pow 1 (/ 1 c)))) (/ (/ (+ -1 (pow 0 -1)) a) -1))",
      "output_weight_simple": 18,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.000436477
    },
    "speedup": 2.311597174650669,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (/ (- (+ (/ (- (/ (pow 1 a) a) (pow -1 0)) -1) 1) (+ (+ (/ a 1) b) (pow a b))) (* (* (/ 0 -1) -1) (/ 1 a))) (* (* (/ a d) 0) (- a 1))) (+ (pow (* 0 (* e -1)) (+ -1 0)) (- e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001012314)",
      "output_term": "(- 0 (+ e (+ -1 (pow 0 -1))))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 5,
      "simplification_time": 0.00102953
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (+ e (pow 0 -1)))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.00044465899999999997
    },
    "speedup": 2.315324776963921,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (/ (pow (/ (pow (+ (+ (* a a) a) (/ b -1)) (/ a 0)) (* (pow -1 1) a)) (/ (- -1 -1) a)) (+ (+ (* 1 1) a) b)) (pow (- (* a a) 0) (+ e e))) (* (+ (+ (/ -1 e) 0) (pow -1 0)) (* e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001009462)",
      "output_term": "(/ (- (/ (pow (/ (pow (+ a (+ (* a a) (/ b -1))) (/ a 0)) (* a -1)) (/ 0 a)) (+ a (+ b 1))) (pow (* a a) (+ e e))) (* (+ 1 (/ -1 e)) (* e d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 10,
      "simplification_time": 0.0010243799999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (pow (/ (pow (+ a (+ (* a a) (/ b -1))) (/ a 0)) (- 0 a)) (/ 0 a)) (+ 1 (+ a b))) (pow (* a a) (+ e e))) (* (+ 1 (/ -1 e)) (* e d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.000439529
    },
    "speedup": 2.330631198396465,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (pow (/ (pow (pow (- (/ (* 1 0) a) (* 1 -1)) (- -1 -1)) (/ a (+ 1 -1))) (* (+ a 1) a)) (pow (* (pow -1 1) 0) (+ a a))) (pow (pow (/ a 0) a) (* 1 a))) (- (pow (* (* a 1) a) (- 1 b)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.00100135)",
      "output_term": "(- (- (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (pow (pow (/ a 0) a) a)) (+ -1 (pow (* a a) (- 1 b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.0010085
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (+ (pow (pow (/ a 0) a) a) (- (pow (* a a) (- 1 b)) 1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.000430935
    },
    "speedup": 2.3402601320384746,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (+ (pow (pow (pow (pow (+ (pow a 1) 0) (- a -1)) (- 1 a)) (- (- 1 0) -1)) (- (* -1 1) -1)) (/ (- a (* a 0)) (- 0 b))) (pow 1 (pow 1 (pow c -1)))) (/ (/ (+ (pow 0 -1) -1) (pow a 1)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.001002533)",
      "output_term": "(/ (* (+ 1 (/ a (- 0 b))) (pow 1 (pow 1 (pow c -1)))) (/ (/ (+ -1 (pow 0 -1)) a) -1))",
      "output_weight_simple": 18,
      "output_weight_complex": 50,
      "output_depth": 6,
      "simplification_time": 0.001011102
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ 1 (/ a (- 0 b))) (pow 1 (pow 1 (/ 1 c)))) (/ (/ (+ -1 (pow 0 -1)) a) -1))",
      "output_weight_simple": 18,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.00043155799999999996
    },
    "speedup": 2.342911033974576,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (pow (+ (* (pow (+ (pow 1 (pow a 1)) (+ b a)) (* b c)) (* c (- 1 c))) (+ (pow e b) a)) (* (pow 0 (- c 0)) (- -1 0))) (* (/ d (pow c e)) -1)) (/ (- (- c (- 0 0)) (/ -1 1)) (* e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 3,
      "stop_reason": "TimeLimit(0.002408266)",
      "output_term": "(* (pow (+ (* c (* (pow (+ (pow 1 a) (+ a b)) (* b c)) (- 1 c))) (+ a (pow e b))) (* (pow 0 c) -1)) (* (* -1 (/ d (pow c e))) (/ (+ 1 c) (* c e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.002429736
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.001012609)",
      "output_term": "(* (pow (+ (* (pow (+ a (+ (pow 1 a) b)) (* b c)) (- c (pow c 2))) (+ a (pow e b))) (- 0 (pow 0 c))) (/ (* (/ d (pow c e)) (* -1 (+ 1 c))) (* c e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.001033089
    },
    "speedup": 2.3519135331031498,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (- (pow (/ (pow (pow (- (/ (* 1 0) a) (* 1 -1)) (- -1 -1)) (/ a (+ 1 -1))) (* (+ a 1) a)) (pow (* (pow -1 1) 0) (+ a a))) (pow (pow (/ a 0) a) (* 1 a))) (- (pow (* (* a 1) a) (- 1 b)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001007606)",
      "output_term": "(- (- (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (pow (pow (/ a 0) a) a)) (+ -1 (pow (* a a) (- 1 b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001015853
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (+ (pow (pow (/ a 0) a) a) (- (pow (* a a) (- 1 b)) 1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.00043090800000000003
    },
    "speedup": 2.357470736212834,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (/ (- (+ (/ (- (/ (pow 1 a) a) (pow -1 0)) -1) 1) (+ (+ (/ a 1) b) (pow a b))) (* (* (/ 0 -1) -1) (/ 1 a))) (* (* (/ a d) 0) (- a 1))) (+ (pow (* 0 (* e -1)) (+ -1 0)) (- e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001014246)",
      "output_term": "(- 0 (+ e (+ -1 (pow 0 -1))))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 5,
      "simplification_time": 0.001032171
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (+ e (pow 0 -1)))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.000436807
    },
    "speedup": 2.3629909777086904,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (/ (- (/ (+ (- (* (* 0 0) 1) (/ 1 a)) (/ b b)) (- (- b a) 0)) (- -1 (+ -1 -1))) (pow (- 0 (- d 0)) (/ d -1))) (pow (/ (* 0 c) 1) (pow b 0))) (* d (* (- (+ -1 b) 0) (* e d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001000836)",
      "output_term": "(- (/ (+ (/ (+ (- 0 (/ 1 a)) (/ b b)) (- b a)) -1) (pow (- 0 d) (/ d -1))) (* (+ b -1) (* d (* d e))))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.001025951
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (/ (- 1 (/ 1 a)) (- b a)) 1) (pow (- 0 d) (/ d -1))) (* (+ b -1) (* e (* d d))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.000432429
    },
    "speedup": 2.372530519460998,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (/ (pow (/ (pow (+ (+ (* a a) a) (/ b -1)) (/ a 0)) (* (pow -1 1) a)) (/ (- -1 -1) a)) (+ (+ (* 1 1) a) b)) (pow (- (* a a) 0) (+ e e))) (* (+ (+ (/ -1 e) 0) (pow -1 0)) (* e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005784)",
      "output_term": "(/ (- (/ (pow (/ (pow (+ a (+ (* a a) (/ b -1))) (/ a 0)) (* a -1)) (/ 0 a)) (+ a (+ b 1))) (pow (* a a) (+ e e))) (* (+ 1 (/ -1 e)) (* e d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 10,
      "simplification_time": 0.00102039
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (pow (/ (pow (+ a (+ (* a a) (/ b -1))) (/ a 0)) (- 0 a)) (/ 0 a)) (+ 1 (+ a b))) (pow (* a a) (+ e e))) (* (+ 1 (/ -1 e)) (* e d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.000429466
    },
    "speedup": 2.3759505991161114,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (/ (- (+ (/ (- (/ (pow 1 a) a) (pow -1 0)) -1) 1) (+ (+ (/ a 1) b) (pow a b))) (* (* (/ 0 -1) -1) (/ 1 a))) (* (* (/ a d) 0) (- a 1))) (+ (pow (* 0 (* e -1)) (+ -1 0)) (- e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004138)",
      "output_term": "(- 0 (+ e (+ -1 (pow 0 -1))))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 5,
      "simplification_time": 0.001020599
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (+ e (pow 0 -1)))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.000429254
    },
    "speedup": 2.3776109250001167,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (/ (- (/ (+ (- (* (* 0 0) 1) (/ 1 a)) (/ b b)) (- (- b a) 0)) (- -1 (+ -1 -1))) (pow (- 0 (- d 0)) (/ d -1))) (pow (/ (* 0 c) 1) (pow b 0))) (* d (* (- (+ -1 b) 0) (* e d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00100045)",
      "output_term": "(- (/ (+ (/ (+ (- 0 (/ 1 a)) (/ b b)) (- b a)) -1) (pow (- 0 d) (/ d -1))) (* (+ b -1) (* d (* d e))))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.001027695
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (/ (- 1 (/ 1 a)) (- b a)) 1) (pow (- 0 d) (/ d -1))) (* (+ b -1) (* e (* d d))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.00043190899999999996
    },
    "speedup": 2.3794248325457446,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (pow (/ (pow (pow (- (/ (* 1 0) a) (* 1 -1)) (- -1 -1)) (/ a (+ 1 -1))) (* (+ a 1) a)) (pow (* (pow -1 1) 0) (+ a a))) (pow (pow (/ a 0) a) (* 1 a))) (- (pow (* (* a 1) a) (- 1 b)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001010971)",
      "output_term": "(- (- (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (pow (pow (/ a 0) a) a)) (+ -1 (pow (* a a) (- 1 b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.0010195679999999998
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (+ (pow (pow (/ a 0) a) a) (- (pow (* a a) (- 1 b)) 1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.000424997
    },
    "speedup": 2.3990004635326834,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (/ (- (- (pow (+ (* (/ 1 a) a) (/ -1 -1)) (pow 0 1)) (pow 1 (- a 1))) (pow (* b -1) 0)) (- -1 (pow (- a a) 1))) (pow (+ (- 1 a) c) (- b d))) (/ (/ (- (pow 0 d) -1) (- 1 e)) (- 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000778)",
      "output_term": "(pow (- (/ (* -1 (pow 1 (+ a -1))) -1) (pow (+ (- 1 a) c) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.001011132
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ (- 0 (pow 1 (- a 1))) -1) (pow (- (+ 1 c) a) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.00042087799999999996
    },
    "speedup": 2.4024349098788726,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (/ (- (- (pow (+ (* (/ 1 a) a) (/ -1 -1)) (pow 0 1)) (pow 1 (- a 1))) (pow (* b -1) 0)) (- -1 (pow (- a a) 1))) (pow (+ (- 1 a) c) (- b d))) (/ (/ (- (pow 0 d) -1) (- 1 e)) (- 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001003223)",
      "output_term": "(pow (- (/ (* -1 (pow 1 (+ a -1))) -1) (pow (+ (- 1 a) c) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.0010155729999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ (- 0 (pow 1 (- a 1))) -1) (pow (- (+ 1 c) a) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.000418791
    },
    "speedup": 2.4250115212600076,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (/ (- (/ (+ (- (* (* 0 0) 1) (/ 1 a)) (/ b b)) (- (- b a) 0)) (- -1 (+ -1 -1))) (pow (- 0 (- d 0)) (/ d -1))) (pow (/ (* 0 c) 1) (pow b 0))) (* d (* (- (+ -1 b) 0) (* e d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001001091)",
      "output_term": "(- (/ (+ (/ (+ (- 0 (/ 1 a)) (/ b b)) (- b a)) -1) (pow (- 0 d) (/ d -1))) (* (+ b -1) (* d (* d e))))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.001028584
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (/ (- 1 (/ 1 a)) (- b a)) 1) (pow (- 0 d) (/ d -1))) (* (+ b -1) (* e (* d d))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.00042365199999999995
    },
    "speedup": 2.427898369416408,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (/ (pow (/ (+ (/ (pow a b) 1) 0) (/ 0 1)) (pow (pow -1 1) 0)) a) (- (pow (* a -1) 1) (- c 1))) (/ (+ (+ (+ 1 -1) -1) (* d 0)) (+ a b))) (pow (* (pow (+ 0 -1) e) (+ 0 e)) (- e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (/ (/ (/ (pow a b) 1) 0) a) (+ 1 (* -1 (+ a c)))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.0008548259999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (/ (/ (pow a b) 0) a) (- 1 (+ a c))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.000351164
    },
    "speedup": 2.4342643323347493,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (/ (- (- (pow (+ (* (/ 1 a) a) (/ -1 -1)) (pow 0 1)) (pow 1 (- a 1))) (pow (* b -1) 0)) (- -1 (pow (- a a) 1))) (pow (+ (- 1 a) c) (- b d))) (/ (/ (- (pow 0 d) -1) (- 1 e)) (- 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001002117)",
      "output_term": "(pow (- (/ (* -1 (pow 1 (+ a -1))) -1) (pow (+ (- 1 a) c) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.001014483
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ (- 0 (pow 1 (- a 1))) -1) (pow (- (+ 1 c) a) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.000411969
    },
    "speedup": 2.4625226655403685,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (/ (pow (- (* (- (- (* a 1) b) (- 0 -1)) (* 1 c)) (pow c (+ a b))) (pow (/ -1 -1) c)) (- (pow (+ e b) e) (pow b 1))) (pow (- (pow -1 c) e) 0)) (/ (+ (* (- b c) 0) (* -1 a)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001053225)",
      "output_term": "(pow (+ -1 (/ (pow (- (* (+ (- a b) -1) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b))) (/ (* a -1) (- -1 d)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.001084173
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ (pow (- (* (- a (+ 1 b)) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b)) 1) (/ (- 0 a) (- -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.00043986199999999996
    },
    "speedup": 2.4648025971782057,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (/ (pow (- (* (- (- (* a 1) b) (- 0 -1)) (* 1 c)) (pow c (+ a b))) (pow (/ -1 -1) c)) (- (pow (+ e b) e) (pow b 1))) (pow (- (pow -1 c) e) 0)) (/ (+ (* (- b c) 0) (* -1 a)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001039311)",
      "output_term": "(pow (+ -1 (/ (pow (- (* (+ (- a b) -1) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b))) (/ (* a -1) (- -1 d)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.001070452
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ (pow (- (* (- a (+ 1 b)) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b)) 1) (/ (- 0 a) (- -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.00043363900000000004
    },
    "speedup": 2.4685325812484575,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (/ (pow (/ (+ (/ (pow a b) 1) 0) (/ 0 1)) (pow (pow -1 1) 0)) a) (- (pow (* a -1) 1) (- c 1))) (/ (+ (+ (+ 1 -1) -1) (* d 0)) (+ a b))) (pow (* (pow (+ 0 -1) e) (+ 0 e)) (- e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (/ (/ (/ (pow a b) 1) 0) a) (+ 1 (* -1 (+ a c)))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.0008590760000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (/ (/ (pow a b) 0) a) (- 1 (+ a c))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.000347558
    },
    "speedup": 2.47174860023363,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (/ (- (* (* a (pow (/ (- 0 a) 1) (pow a a))) (- (/ 1 -1) b)) (+ -1 (+ 0 b))) (* (pow (* c c) b) (* -1 -1))) (pow (/ (* 1 c) a) (+ 0 d))) (- (/ (/ (* 1 -1) -1) (- 1 e)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007256)",
      "output_term": "(/ (- (/ (- (* (pow (/ (- 0 a) 1) (pow a a)) (* a (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.0010246860000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (- (* (pow (- 0 a) (pow a a)) (* a (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.000414418
    },
    "speedup": 2.4725904762824014,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (/ (- (* (* a (pow (/ (- 0 a) 1) (pow a a))) (- (/ 1 -1) b)) (+ -1 (+ 0 b))) (* (pow (* c c) b) (* -1 -1))) (pow (/ (* 1 c) a) (+ 0 d))) (- (/ (/ (* 1 -1) -1) (- 1 e)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004553)",
      "output_term": "(/ (- (/ (- (* (pow (/ (- 0 a) 1) (pow a a)) (* a (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.001024087
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (- (* (pow (- 0 a) (pow a a)) (* a (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.000414138
    },
    "speedup": 2.4728158246767986,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (/ (pow (/ (+ (/ (pow a b) 1) 0) (/ 0 1)) (pow (pow -1 1) 0)) a) (- (pow (* a -1) 1) (- c 1))) (/ (+ (+ (+ 1 -1) -1) (* d 0)) (+ a b))) (pow (* (pow (+ 0 -1) e) (+ 0 e)) (- e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (/ (/ (/ (pow a b) 1) 0) a) (+ 1 (* -1 (+ a c)))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.000846138
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (/ (/ (pow a b) 0) a) (- 1 (+ a c))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.00034213
    },
    "speedup": 2.473147633940315,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (/ (pow (- (* (- (- (* a 1) b) (- 0 -1)) (* 1 c)) (pow c (+ a b))) (pow (/ -1 -1) c)) (- (pow (+ e b) e) (pow b 1))) (pow (- (pow -1 c) e) 0)) (/ (+ (* (- b c) 0) (* -1 a)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001045642)",
      "output_term": "(pow (+ -1 (/ (pow (- (* (+ (- a b) -1) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b))) (/ (* a -1) (- -1 d)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.001076606
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ (pow (- (* (- a (+ 1 b)) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b)) 1) (/ (- 0 a) (- -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.000430431
    },
    "speedup": 2.501227839072929,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (- (* (* a (pow (/ (- 0 a) 1) (pow a a))) (- (/ 1 -1) b)) (+ -1 (+ 0 b))) (* (pow (* c c) b) (* -1 -1))) (pow (/ (* 1 c) a) (+ 0 d))) (- (/ (/ (* 1 -1) -1) (- 1 e)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003183)",
      "output_term": "(/ (- (/ (- (* (pow (/ (- 0 a) 1) (pow a a)) (* a (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.001023983
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (- (* (pow (- 0 a) (pow a a)) (* a (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.0004082
    },
    "speedup": 2.508532582067614,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) (+ (/ c (* 1 1)) 0)) (* (* (- -1 (+ b b)) (+ c -1)) (- a -1))) (/ (pow (* (- a 1) -1) (* d -1)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001024816)",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) (/ c 1)) (* (+ -1 (* b -2)) (* (+ -1 c) (+ a 1)))) (/ (pow (* -1 (- a 1)) (* -1 d)) (/ 0 0)))",
      "output_weight_simple": 34,
      "output_weight_complex": 92,
      "output_depth": 10,
      "simplification_time": 0.001052428
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (- 0 a)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) c) (* (- -1 (+ b b)) (* (+ -1 c) (+ a 1)))) (/ (pow (- 1 a) (- 0 d)) (/ 0 0)))",
      "output_weight_simple": 31,
      "output_weight_complex": 81,
      "output_depth": 10,
      "simplification_time": 0.000414174
    },
    "speedup": 2.541028649794531,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) (+ (/ c (* 1 1)) 0)) (* (* (- -1 (+ b b)) (+ c -1)) (- a -1))) (/ (pow (* (- a 1) -1) (* d -1)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001030335)",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) (/ c 1)) (* (+ -1 (* b -2)) (* (+ -1 c) (+ a 1)))) (/ (pow (* -1 (- a 1)) (* -1 d)) (/ 0 0)))",
      "output_weight_simple": 34,
      "output_weight_complex": 92,
      "output_depth": 10,
      "simplification_time": 0.001058449
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (- 0 a)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) c) (* (- -1 (+ b b)) (* (+ -1 c) (+ a 1)))) (/ (pow (- 1 a) (- 0 d)) (/ 0 0)))",
      "output_weight_simple": 31,
      "output_weight_complex": 81,
      "output_depth": 10,
      "simplification_time": 0.000410571
    },
    "speedup": 2.5779926005489915,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (- 1 (- (* a (+ (pow 1 (/ a a)) (- 1 a))) (- (- 1 0) b))) (/ (+ (* 0 b) 0) (/ b -1))) (+ (+ (* (* d 1) 0) (/ e a)) (/ c e))) (pow (/ (pow (+ 1 -1) 1) (+ 1 c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001108323)",
      "output_term": "(+ (pow (+ (- 1 (+ (* a (+ (pow 1 (/ a a)) (- 1 a))) (+ b -1))) (/ 0 (/ b -1))) (+ (/ e a) (/ c e))) (pow (/ 0 (+ 1 c)) (+ -1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.0011766149999999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (- (/ 0 (/ b -1)) (- (* a (- 2 a)) (- 2 b))) (+ (/ e a) (/ c e))) (pow (/ 0 (+ 1 c)) (- d 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.00045394199999999993
    },
    "speedup": 2.591994131408858,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 3
  },
  {
    "base_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) (+ (/ c (* 1 1)) 0)) (* (* (- -1 (+ b b)) (+ c -1)) (- a -1))) (/ (pow (* (- a 1) -1) (* d -1)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001030528)",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) (/ c 1)) (* (+ -1 (* b -2)) (* (+ -1 c) (+ a 1)))) (/ (pow (* -1 (- a 1)) (* -1 d)) (/ 0 0)))",
      "output_weight_simple": 34,
      "output_weight_complex": 92,
      "output_depth": 10,
      "simplification_time": 0.0010586089999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (- 0 a)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) c) (* (- -1 (+ b b)) (* (+ -1 c) (+ a 1)))) (/ (pow (- 1 a) (- 0 d)) (/ 0 0)))",
      "output_weight_simple": 31,
      "output_weight_complex": 81,
      "output_depth": 10,
      "simplification_time": 0.00040741299999999997
    },
    "speedup": 2.598368240581425,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (- 1 (- (* a (+ (pow 1 (/ a a)) (- 1 a))) (- (- 1 0) b))) (/ (+ (* 0 b) 0) (/ b -1))) (+ (+ (* (* d 1) 0) (/ e a)) (/ c e))) (pow (/ (pow (+ 1 -1) 1) (+ 1 c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001122311)",
      "output_term": "(+ (pow (+ (- 1 (+ (* a (+ (pow 1 (/ a a)) (- 1 a))) (+ b -1))) (/ 0 (/ b -1))) (+ (/ e a) (/ c e))) (pow (/ 0 (+ 1 c)) (+ -1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.001192159
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (- (/ 0 (/ b -1)) (- (* a (- 2 a)) (- 2 b))) (+ (/ e a) (/ c e))) (pow (/ 0 (+ 1 c)) (- d 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.000458739
    },
    "speedup": 2.5987740305489613,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 3
  },
  {
    "base_term": "(- (pow (* (pow (/ (- (+ (* (* a 1) b) (/ b -1)) (/ -1 b)) (/ (* c -1) 0)) (/ -1 (- 1 b))) (- 0 (pow (+ 1 0) d))) (pow (* (/ 0 1) c) (pow 1 1))) (/ (* (- (+ 1 0) 1) (pow 0 e)) (/ d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (/ 0 (/ d b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 17,
      "output_depth": 4,
      "simplification_time": 0.0009151459999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (/ 0 (/ d b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 17,
      "output_depth": 4,
      "simplification_time": 0.000351347
    },
    "speedup": 2.6046785656345435,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (/ (pow a (pow (* (/ 1 -1) (pow a 1)) (+ 1 -1))) (* (pow (- a -1) a) (* a d))) (- (- (* b a) -1) (+ 0 a))) (/ (+ (pow b -1) e) (pow -1 0))) (/ (pow (- (pow d 0) 1) (pow b 0)) (/ b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002443)",
      "output_term": "(/ (pow (* (/ a (* a (* (pow (+ a 1) a) d))) (+ 1 (* a (+ -1 b)))) (/ (+ (pow b -1) e) 1)) (/ 0 (/ b -1)))",
      "output_weight_simple": 23,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001028372
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (/ a (* (pow (+ a 1) a) (* a d))) (- (* a b) (+ a -1))) (+ (/ 1 b) e)) (/ 0 (/ b -1)))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.00039294600000000003
    },
    "speedup": 2.617082245397586,
    "weight_simple_diff": 1,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (* (/ (pow a (pow (* (/ 1 -1) (pow a 1)) (+ 1 -1))) (* (pow (- a -1) a) (* a d))) (- (- (* b a) -1) (+ 0 a))) (/ (+ (pow b -1) e) (pow -1 0))) (/ (pow (- (pow d 0) 1) (pow b 0)) (/ b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001025347)",
      "output_term": "(/ (pow (* (/ a (* a (* (pow (+ a 1) a) d))) (+ 1 (* a (+ -1 b)))) (/ (+ (pow b -1) e) 1)) (/ 0 (/ b -1)))",
      "output_weight_simple": 23,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.0010245340000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (/ a (* (pow (+ a 1) a) (* a d))) (- (* a b) (+ a -1))) (+ (/ 1 b) e)) (/ 0 (/ b -1)))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.000389185
    },
    "speedup": 2.632511530506058,
    "weight_simple_diff": 1,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (* (- (* (+ (pow (* (+ a 1) -1) (+ 1 a)) (- 1 1)) (+ 0 0)) (+ (pow a 1) 0)) (/ (pow (* -1 c) a) (/ 1 b))) (* (- (/ a -1) e) (+ d 0))) (pow (/ (pow (- d -1) c) (- 0 a)) (- b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001013126)",
      "output_term": "(/ (pow (* a (* -1 (/ (pow (* -1 c) a) (/ 1 b)))) (* (- (/ a -1) e) d)) (pow (/ (pow (+ 1 d) c) (* a -1)) (+ -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.001015939
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (- 0 (* a (/ (pow (- 0 c) a) (/ 1 b)))) (* (- (/ a -1) e) d)) (pow (/ (pow (+ 1 d) c) (- 0 a)) (- b 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.00038465
    },
    "speedup": 2.6412036916677497,
    "weight_simple_diff": -1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (/ (pow a (pow (* (/ 1 -1) (pow a 1)) (+ 1 -1))) (* (pow (- a -1) a) (* a d))) (- (- (* b a) -1) (+ 0 a))) (/ (+ (pow b -1) e) (pow -1 0))) (/ (pow (- (pow d 0) 1) (pow b 0)) (/ b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100455)",
      "output_term": "(/ (pow (* (/ a (* a (* (pow (+ a 1) a) d))) (+ 1 (* a (+ -1 b)))) (/ (+ (pow b -1) e) 1)) (/ 0 (/ b -1)))",
      "output_weight_simple": 23,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.001030299
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (/ a (* (pow (+ a 1) a) (* a d))) (- (* a b) (+ a -1))) (+ (/ 1 b) e)) (/ 0 (/ b -1)))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.000387941
    },
    "speedup": 2.6558136417651137,
    "weight_simple_diff": 1,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (+ (- 1 (- (* a (+ (pow 1 (/ a a)) (- 1 a))) (- (- 1 0) b))) (/ (+ (* 0 b) 0) (/ b -1))) (+ (+ (* (* d 1) 0) (/ e a)) (/ c e))) (pow (/ (pow (+ 1 -1) 1) (+ 1 c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001124331)",
      "output_term": "(+ (pow (+ (- 1 (+ (* a (+ (pow 1 (/ a a)) (- 1 a))) (+ b -1))) (/ 0 (/ b -1))) (+ (/ e a) (/ c e))) (pow (/ 0 (+ 1 c)) (+ -1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.001192953
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (- (/ 0 (/ b -1)) (- (* a (- 2 a)) (- 2 b))) (+ (/ e a) (/ c e))) (pow (/ 0 (+ 1 c)) (- d 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.00044689800000000004
    },
    "speedup": 2.6694077843266246,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 3
  },
  {
    "base_term": "(/ (pow (* (- (* (+ (pow (* (+ a 1) -1) (+ 1 a)) (- 1 1)) (+ 0 0)) (+ (pow a 1) 0)) (/ (pow (* -1 c) a) (/ 1 b))) (* (- (/ a -1) e) (+ d 0))) (pow (/ (pow (- d -1) c) (- 0 a)) (- b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* a (* -1 (/ (pow (* -1 c) a) (/ 1 b)))) (* (- (/ a -1) e) d)) (pow (/ (pow (+ 1 d) c) (* a -1)) (+ -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.000991824
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (- 0 (* a (/ (pow (- 0 c) a) (/ 1 b)))) (* (- (/ a -1) e) d)) (pow (/ (pow (+ 1 d) c) (- 0 a)) (- b 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.000370682
    },
    "speedup": 2.6756734883269218,
    "weight_simple_diff": -1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (+ (/ (/ (+ (- (+ 1 1) 1) (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow (- 0 1) a)) (- (/ (+ c 1) b) (/ e c))) (- (/ (- d b) -1) (- 0 -1))) (* (+ (pow -1 c) (* b -1)) (- 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004711)",
      "output_term": "(/ (- (/ (+ (/ (/ (+ 1 (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (+ -1 (/ (- d b) -1))) (* (+ (pow -1 c) (* -1 b)) (- 1 a)))",
      "output_weight_simple": 32,
      "output_weight_complex": 84,
      "output_depth": 9,
      "simplification_time": 0.0010220490000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (+ (/ (/ (+ 1 (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (- (/ (- d b) -1) 1)) (* (- (pow -1 c) b) (- 1 a)))",
      "output_weight_simple": 31,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.000381122
    },
    "speedup": 2.6816846049296554,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (+ (/ (/ (+ (- (+ 1 1) 1) (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow (- 0 1) a)) (- (/ (+ c 1) b) (/ e c))) (- (/ (- d b) -1) (- 0 -1))) (* (+ (pow -1 c) (* b -1)) (- 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001003137)",
      "output_term": "(/ (- (/ (+ (/ (/ (+ 1 (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (+ -1 (/ (- d b) -1))) (* (+ (pow -1 c) (* -1 b)) (- 1 a)))",
      "output_weight_simple": 32,
      "output_weight_complex": 84,
      "output_depth": 9,
      "simplification_time": 0.001020839
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (+ (/ (/ (+ 1 (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (- (/ (- d b) -1) 1)) (* (- (pow -1 c) b) (- 1 a)))",
      "output_weight_simple": 31,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.00037935399999999993
    },
    "speedup": 2.6909931093385073,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (pow (/ (- (+ (* (* a 1) b) (/ b -1)) (/ -1 b)) (/ (* c -1) 0)) (/ -1 (- 1 b))) (- 0 (pow (+ 1 0) d))) (pow (* (/ 0 1) c) (pow 1 1))) (/ (* (- (+ 1 0) 1) (pow 0 e)) (/ d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (/ 0 (/ d b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 17,
      "output_depth": 4,
      "simplification_time": 0.0008951590000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (/ 0 (/ d b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 17,
      "output_depth": 4,
      "simplification_time": 0.000328379
    },
    "speedup": 2.7259934405062447,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (- (* (+ (pow (* (+ a 1) -1) (+ 1 a)) (- 1 1)) (+ 0 0)) (+ (pow a 1) 0)) (/ (pow (* -1 c) a) (/ 1 b))) (* (- (/ a -1) e) (+ d 0))) (pow (/ (pow (- d -1) c) (- 0 a)) (- b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00100166)",
      "output_term": "(/ (pow (* a (* -1 (/ (pow (* -1 c) a) (/ 1 b)))) (* (- (/ a -1) e) d)) (pow (/ (pow (+ 1 d) c) (* a -1)) (+ -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.0010094260000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (- 0 (* a (/ (pow (- 0 c) a) (/ 1 b)))) (* (- (/ a -1) e) d)) (pow (/ (pow (+ 1 d) c) (- 0 a)) (- b 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.000369996
    },
    "speedup": 2.728207872517541,
    "weight_simple_diff": -1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (+ (pow (* (/ (/ (+ 1 (/ a -1)) (+ -1 1)) (* a b)) (+ (pow b b) b)) (/ 0 (- c d))) (/ (* (* 0 e) -1) (- 0 -1))) (+ c (/ (/ 0 -1) 0))) (+ (- (/ (* 1 a) a) (* e d)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005524)",
      "output_term": "(- (* (pow (* (/ (/ (+ 1 (/ a -1)) 0) (* a b)) (+ b (pow b b))) (/ 0 (- c d))) (+ c (/ 0 0))) (- (/ a a) (* d e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.001021715
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (* (pow (* (/ (/ (+ 1 (/ a -1)) 0) (* a b)) (+ b (pow b b))) (/ 0 (- c d))) (+ c (/ 0 0))) (- 1 (* d e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.00037376299999999994
    },
    "speedup": 2.733590537319104,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (pow (pow a (/ (pow (* a (pow (- a b) b)) (- d c)) (- (* 0 0) -1))) (/ (+ a (- -1 1)) (* 1 d))) (* (+ (+ (pow 0 c) -1) (* d d)) (pow d a))) (pow (pow (/ -1 (+ 1 -1)) (/ c c)) (+ c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002262)",
      "output_term": "(/ (/ (pow (pow a (/ (pow (* a (pow (- a b) b)) (- d c)) 1)) (/ (+ a -2) d)) (* (+ -1 (+ (pow 0 c) (* d d))) (pow d a))) (pow (pow (/ -1 0) (/ c c)) (+ c e)))",
      "output_weight_simple": 32,
      "output_weight_complex": 88,
      "output_depth": 10,
      "simplification_time": 0.0010201470000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow a (pow (* a (pow (- a b) b)) (- d c))) (/ (+ a -2) d)) (pow (/ -1 0) (+ c e))) (* (+ (+ -1 (pow 0 c)) (* d d)) (pow d a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.00037042799999999996
    },
    "speedup": 2.7539683825196803,
    "weight_simple_diff": 4,
    "weight_complex_diff": 15,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (/ (+ (/ (/ (+ (- (+ 1 1) 1) (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow (- 0 1) a)) (- (/ (+ c 1) b) (/ e c))) (- (/ (- d b) -1) (- 0 -1))) (* (+ (pow -1 c) (* b -1)) (- 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013851)",
      "output_term": "(/ (- (/ (+ (/ (/ (+ 1 (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (+ -1 (/ (- d b) -1))) (* (+ (pow -1 c) (* -1 b)) (- 1 a)))",
      "output_weight_simple": 32,
      "output_weight_complex": 84,
      "output_depth": 9,
      "simplification_time": 0.001037503
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (+ (/ (/ (+ 1 (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (- (/ (- d b) -1) 1)) (* (- (pow -1 c) b) (- 1 a)))",
      "output_weight_simple": 31,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.000376698
    },
    "speedup": 2.754203632618171,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (pow (pow a (/ (pow (* a (pow (- a b) b)) (- d c)) (- (* 0 0) -1))) (/ (+ a (- -1 1)) (* 1 d))) (* (+ (+ (pow 0 c) -1) (* d d)) (pow d a))) (pow (pow (/ -1 (+ 1 -1)) (/ c c)) (+ c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001791)",
      "output_term": "(/ (/ (pow (pow a (/ (pow (* a (pow (- a b) b)) (- d c)) 1)) (/ (+ a -2) d)) (* (+ -1 (+ (pow 0 c) (* d d))) (pow d a))) (pow (pow (/ -1 0) (/ c c)) (+ c e)))",
      "output_weight_simple": 32,
      "output_weight_complex": 88,
      "output_depth": 10,
      "simplification_time": 0.001021682
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow a (pow (* a (pow (- a b) b)) (- d c))) (/ (+ a -2) d)) (pow (/ -1 0) (+ c e))) (* (+ (+ -1 (pow 0 c)) (* d d)) (pow d a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.000370568
    },
    "speedup": 2.757070227326699,
    "weight_simple_diff": 4,
    "weight_complex_diff": 15,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (/ (pow (pow a (/ (pow (* a (pow (- a b) b)) (- d c)) (- (* 0 0) -1))) (/ (+ a (- -1 1)) (* 1 d))) (* (+ (+ (pow 0 c) -1) (* d d)) (pow d a))) (pow (pow (/ -1 (+ 1 -1)) (/ c c)) (+ c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001007293)",
      "output_term": "(/ (/ (pow (pow a (/ (pow (* a (pow (- a b) b)) (- d c)) 1)) (/ (+ a -2) d)) (* (+ -1 (+ (pow 0 c) (* d d))) (pow d a))) (pow (pow (/ -1 0) (/ c c)) (+ c e)))",
      "output_weight_simple": 32,
      "output_weight_complex": 88,
      "output_depth": 10,
      "simplification_time": 0.0010245120000000002
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow a (pow (* a (pow (- a b) b)) (- d c))) (/ (+ a -2) d)) (pow (/ -1 0) (+ c e))) (* (+ (+ -1 (pow 0 c)) (* d d)) (pow d a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.00037152400000000003
    },
    "speedup": 2.757593049170444,
    "weight_simple_diff": 4,
    "weight_complex_diff": 15,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (/ (* (- (pow (pow (pow (/ (pow 1 a) 0) (- 0 1)) 0) 1) (- (pow 0 (* 1 b)) (* b -1))) (/ (- (pow 0 1) a) (/ b c))) (pow (/ (/ a a) d) (pow 0 0))) (pow (+ (/ (+ d 1) 1) (pow 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001173)",
      "output_term": "(+ (/ (* (- 1 (+ b (pow 0 b))) (/ (- 0 a) (/ b c))) (pow (/ (/ a a) d) (pow 0 0))) (pow (+ (/ (+ 1 d) 1) (pow 0 d)) (pow -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001028481
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* (- 1 (+ b (pow 0 b))) (/ (- 0 a) (/ b c))) (pow (/ 1 d) (pow 0 0))) (pow (+ 1 (+ d (pow 0 d))) (pow -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.000371507
    },
    "speedup": 2.7684027488041947,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (+ (pow (* (/ (/ (+ 1 (/ a -1)) (+ -1 1)) (* a b)) (+ (pow b b) b)) (/ 0 (- c d))) (/ (* (* 0 e) -1) (- 0 -1))) (+ c (/ (/ 0 -1) 0))) (+ (- (/ (* 1 a) a) (* e d)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001014435)",
      "output_term": "(- (* (pow (* (/ (/ (+ 1 (/ a -1)) 0) (* a b)) (+ b (pow b b))) (/ 0 (- c d))) (+ c (/ 0 0))) (- (/ a a) (* d e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.001030782
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (* (pow (* (/ (/ (+ 1 (/ a -1)) 0) (* a b)) (+ b (pow b b))) (/ 0 (- c d))) (+ c (/ 0 0))) (- 1 (* d e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.000371218
    },
    "speedup": 2.7767565150396805,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (+ (pow (* (/ (/ (+ 1 (/ a -1)) (+ -1 1)) (* a b)) (+ (pow b b) b)) (/ 0 (- c d))) (/ (* (* 0 e) -1) (- 0 -1))) (+ c (/ (/ 0 -1) 0))) (+ (- (/ (* 1 a) a) (* e d)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001004374)",
      "output_term": "(- (* (pow (* (/ (/ (+ 1 (/ a -1)) 0) (* a b)) (+ b (pow b b))) (/ 0 (- c d))) (+ c (/ 0 0))) (- (/ a a) (* d e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.001020788
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (* (pow (* (/ (/ (+ 1 (/ a -1)) 0) (* a b)) (+ b (pow b b))) (/ 0 (- c d))) (+ c (/ 0 0))) (- 1 (* d e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.00036698499999999996
    },
    "speedup": 2.7815523795250487,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (pow (/ (- (+ (* (* a 1) b) (/ b -1)) (/ -1 b)) (/ (* c -1) 0)) (/ -1 (- 1 b))) (- 0 (pow (+ 1 0) d))) (pow (* (/ 0 1) c) (pow 1 1))) (/ (* (- (+ 1 0) 1) (pow 0 e)) (/ d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (/ 0 (/ d b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 17,
      "output_depth": 4,
      "simplification_time": 0.000905455
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (/ 0 (/ d b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 17,
      "output_depth": 4,
      "simplification_time": 0.00032434499999999997
    },
    "speedup": 2.791641616180302,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (/ (/ (pow (pow (* (+ (* a a) b) (* c d)) c) (* 0 (pow e c))) a) (+ (/ 0 (- a d)) (* c b))) (/ (* (/ (pow b 1) b) (+ 1 1)) (+ e 0))) (pow (- (* (/ -1 1) a) (- 0 -1)) (pow e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001011137)",
      "output_term": "(* (pow (/ (/ 1 a) (+ (/ 0 (- a d)) (* b c))) (/ (* (/ b b) 2) e)) (pow (+ -1 (* a -1)) (pow e b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001029669
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (/ 1 (+ (/ 0 (- a d)) (* b c))) a) (/ 2 e)) (pow (- -1 a) (pow e b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.000368638
    },
    "speedup": 2.7931710784021178,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": -1
  },
  {
    "base_term": "(* (pow (/ (/ (pow (pow (* (+ (* a a) b) (* c d)) c) (* 0 (pow e c))) a) (+ (/ 0 (- a d)) (* c b))) (/ (* (/ (pow b 1) b) (+ 1 1)) (+ e 0))) (pow (- (* (/ -1 1) a) (- 0 -1)) (pow e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001011174)",
      "output_term": "(* (pow (/ (/ 1 a) (+ (/ 0 (- a d)) (* b c))) (/ (* (/ b b) 2) e)) (pow (+ -1 (* a -1)) (pow e b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.001029022
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (/ 1 (+ (/ 0 (- a d)) (* b c))) a) (/ 2 e)) (pow (- -1 a) (pow e b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.00036616800000000005
    },
    "speedup": 2.8102455703392977,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (/ (* (- (pow (pow (pow (/ (pow 1 a) 0) (- 0 1)) 0) 1) (- (pow 0 (* 1 b)) (* b -1))) (/ (- (pow 0 1) a) (/ b c))) (pow (/ (/ a a) d) (pow 0 0))) (pow (+ (/ (+ d 1) 1) (pow 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001017339)",
      "output_term": "(+ (/ (* (- 1 (+ b (pow 0 b))) (/ (- 0 a) (/ b c))) (pow (/ (/ a a) d) (pow 0 0))) (pow (+ (/ (+ 1 d) 1) (pow 0 d)) (pow -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001015792
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* (- 1 (+ b (pow 0 b))) (/ (- 0 a) (/ b c))) (pow (/ 1 d) (pow 0 0))) (pow (+ 1 (+ d (pow 0 d))) (pow -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.000360745
    },
    "speedup": 2.8158172670445882,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (- (pow (pow (pow (/ (pow 1 a) 0) (- 0 1)) 0) 1) (- (pow 0 (* 1 b)) (* b -1))) (/ (- (pow 0 1) a) (/ b c))) (pow (/ (/ a a) d) (pow 0 0))) (pow (+ (/ (+ d 1) 1) (pow 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001023398)",
      "output_term": "(+ (/ (* (- 1 (+ b (pow 0 b))) (/ (- 0 a) (/ b c))) (pow (/ (/ a a) d) (pow 0 0))) (pow (+ (/ (+ 1 d) 1) (pow 0 d)) (pow -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001021623
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* (- 1 (+ b (pow 0 b))) (/ (- 0 a) (/ b c))) (pow (/ 1 d) (pow 0 0))) (pow (+ 1 (+ d (pow 0 d))) (pow -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.000362142
    },
    "speedup": 2.8210563811985354,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (/ (/ (pow (pow (* (+ (* a a) b) (* c d)) c) (* 0 (pow e c))) a) (+ (/ 0 (- a d)) (* c b))) (/ (* (/ (pow b 1) b) (+ 1 1)) (+ e 0))) (pow (- (* (/ -1 1) a) (- 0 -1)) (pow e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001107)",
      "output_term": "(* (pow (/ (/ 1 a) (+ (/ 0 (- a d)) (* b c))) (/ (* (/ b b) 2) e)) (pow (+ -1 (* a -1)) (pow e b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.00101885
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (/ 1 (+ (/ 0 (- a d)) (* b c))) a) (/ 2 e)) (pow (- -1 a) (pow e b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.000359402
    },
    "speedup": 2.8348478862109836,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (* (/ (pow (/ (- (pow (* (- 0 1) a) (* b c)) (* c -1)) (+ (* d d) d)) (/ (- d 1) 0)) (- (- (pow -1 0) c) (+ -1 -1))) (- a (pow (* c c) 0))) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100339)",
      "output_term": "(+ (* (/ (pow (/ (+ c (pow (* -1 a) (* b c))) (+ d (* d d))) (/ (+ -1 d) 0)) (+ (* -1 c) 3)) (+ -1 a)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.001021181
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (pow (/ (+ c (pow (- 0 a) (* b c))) (+ d (* d d))) (/ (- d 1) 0)) (- 1 (+ c -2))) (- a 1)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.000358262
    },
    "speedup": 2.850374865322027,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (/ (pow (/ (* (* (- a -1) -1) (- a a)) (pow -1 -1)) (* (/ 0 a) a)) (* (/ 0 a) b)) (+ (- (/ 0 1) 0) (/ -1 a))) (+ (- (/ b -1) c) (/ 1 -1))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00103385)",
      "output_term": "(/ (* (+ (/ (pow (/ 0 (pow -1 -1)) (* a (/ 0 a))) (* (/ 0 a) b)) (/ -1 a)) (+ -1 (- (/ b -1) c))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.001094595
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (/ (pow 0 0) 0) (/ -1 a)) (+ -1 (- (/ b -1) c))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.000379734
    },
    "speedup": 2.882530929545419,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (* (/ (pow (/ (- (pow (* (- 0 1) a) (* b c)) (* c -1)) (+ (* d d) d)) (/ (- d 1) 0)) (- (- (pow -1 0) c) (+ -1 -1))) (- a (pow (* c c) 0))) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000165)",
      "output_term": "(+ (* (/ (pow (/ (+ c (pow (* -1 a) (* b c))) (+ d (* d d))) (/ (+ -1 d) 0)) (+ (* -1 c) 3)) (+ -1 a)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.001017534
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (pow (/ (+ c (pow (- 0 a) (* b c))) (+ d (* d d))) (/ (- d 1) 0)) (- 1 (+ c -2))) (- a 1)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.000350169
    },
    "speedup": 2.9058368958988376,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (/ (pow (/ (* (* (- a -1) -1) (- a a)) (pow -1 -1)) (* (/ 0 a) a)) (* (/ 0 a) b)) (+ (- (/ 0 1) 0) (/ -1 a))) (+ (- (/ b -1) c) (/ 1 -1))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001018233)",
      "output_term": "(/ (* (+ (/ (pow (/ 0 (pow -1 -1)) (* a (/ 0 a))) (* (/ 0 a) b)) (/ -1 a)) (+ -1 (- (/ b -1) c))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.001078248
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (/ (pow 0 0) 0) (/ -1 a)) (+ -1 (- (/ b -1) c))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.000370576
    },
    "speedup": 2.909654160010362,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (* (/ (pow (/ (- (pow (* (- 0 1) a) (* b c)) (* c -1)) (+ (* d d) d)) (/ (- d 1) 0)) (- (- (pow -1 0) c) (+ -1 -1))) (- a (pow (* c c) 0))) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001006637)",
      "output_term": "(+ (* (/ (pow (/ (+ c (pow (* -1 a) (* b c))) (+ d (* d d))) (/ (+ -1 d) 0)) (+ (* -1 c) 3)) (+ -1 a)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.0010221610000000002
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (pow (/ (+ c (pow (- 0 a) (* b c))) (+ d (* d d))) (/ (- d 1) 0)) (- 1 (+ c -2))) (- a 1)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.000350339
    },
    "speedup": 2.9176340630075446,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (/ (pow (/ (* (* (- a -1) -1) (- a a)) (pow -1 -1)) (* (/ 0 a) a)) (* (/ 0 a) b)) (+ (- (/ 0 1) 0) (/ -1 a))) (+ (- (/ b -1) c) (/ 1 -1))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.001025704)",
      "output_term": "(/ (* (+ (/ (pow (/ 0 (pow -1 -1)) (* a (/ 0 a))) (* (/ 0 a) b)) (/ -1 a)) (+ -1 (- (/ b -1) c))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.001085409
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (/ (pow 0 0) 0) (/ -1 a)) (+ -1 (- (/ b -1) c))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.00037164299999999995
    },
    "speedup": 2.9205689330890134,
    "weight_simple_diff": 5,
    "weight_complex_diff": 18,
    "depth_diff": 2
  },
  {
    "base_term": "(- (* (+ (* (* (pow (pow (+ -1 (/ a a)) (+ 1 a)) (pow 1 a)) (pow (+ -1 b) a)) (/ (* 1 0) -1)) (- (- (pow 0 0) 1) (- 1 b))) (pow 1 (/ (pow 0 d) d))) (* (* (pow (- -1 0) c) (/ b d)) (- d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001002326)",
      "output_term": "(* (+ b (+ -2 (pow 0 0))) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.001018164
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (- (pow 0 0) (- 2 b)) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.000347764
    },
    "speedup": 2.927744102322264,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (+ (* (* (pow (pow (+ -1 (/ a a)) (+ 1 a)) (pow 1 a)) (pow (+ -1 b) a)) (/ (* 1 0) -1)) (- (- (pow 0 0) 1) (- 1 b))) (pow 1 (/ (pow 0 d) d))) (* (* (pow (- -1 0) c) (/ b d)) (- d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001001281)",
      "output_term": "(* (+ b (+ -2 (pow 0 0))) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.0010177340000000002
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (- (pow 0 0) (- 2 b)) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.00034489199999999996
    },
    "speedup": 2.950877376106144,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (+ (* (* (pow (pow (+ -1 (/ a a)) (+ 1 a)) (pow 1 a)) (pow (+ -1 b) a)) (/ (* 1 0) -1)) (- (- (pow 0 0) 1) (- 1 b))) (pow 1 (/ (pow 0 d) d))) (* (* (pow (- -1 0) c) (/ b d)) (- d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00100306)",
      "output_term": "(* (+ b (+ -2 (pow 0 0))) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.001019984
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (- (pow 0 0) (- 2 b)) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.00034291800000000005
    },
    "speedup": 2.9744253728296557,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (/ (* (pow (* (* (/ (/ 1 1) 0) (- 1 -1)) (- a a)) (* a (/ -1 -1))) (- (pow b 1) a)) (pow (* (/ -1 1) 0) (pow 1 -1))) (+ (pow (pow a a) b) (/ 0 a))) (pow (pow (- c -1) (pow b 0)) (- a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (* (pow 0 a) (- b a)) (pow 0 (pow 1 -1))) (+ (pow (pow a a) b) (/ 0 a))) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 6,
      "simplification_time": 0.000838359
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (* (pow 0 a) (- b a)) 0) (+ (pow (pow a a) b) (/ 0 a))) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.000264594
    },
    "speedup": 3.168473208009252,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (/ (* (pow (* (* (/ (/ 1 1) 0) (- 1 -1)) (- a a)) (* a (/ -1 -1))) (- (pow b 1) a)) (pow (* (/ -1 1) 0) (pow 1 -1))) (+ (pow (pow a a) b) (/ 0 a))) (pow (pow (- c -1) (pow b 0)) (- a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (* (pow 0 a) (- b a)) (pow 0 (pow 1 -1))) (+ (pow (pow a a) b) (/ 0 a))) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 6,
      "simplification_time": 0.000850621
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (* (pow 0 a) (- b a)) 0) (+ (pow (pow a a) b) (/ 0 a))) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.000266119
    },
    "speedup": 3.196393342827833,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (/ (* (pow (* (* (/ (/ 1 1) 0) (- 1 -1)) (- a a)) (* a (/ -1 -1))) (- (pow b 1) a)) (pow (* (/ -1 1) 0) (pow 1 -1))) (+ (pow (pow a a) b) (/ 0 a))) (pow (pow (- c -1) (pow b 0)) (- a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (* (pow 0 a) (- b a)) (pow 0 (pow 1 -1))) (+ (pow (pow a a) b) (/ 0 a))) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 6,
      "simplification_time": 0.0008450500000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (* (pow 0 a) (- b a)) 0) (+ (pow (pow a a) b) (/ 0 a))) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.000259368
    },
    "speedup": 3.258112026155887,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (* (- (/ (pow (+ (- (/ 1 a) 0) (* 1 0)) (- a 0)) (+ (* 0 a) a)) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow (* b 0) -1) (+ e d))) (* (pow e (+ (+ 0 a) 0)) (- 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000708)",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001010643
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.00027361999999999997
    },
    "speedup": 3.6936006139902062,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (* (- (/ (pow (+ (- (/ 1 a) 0) (* 1 0)) (- a 0)) (+ (* 0 a) a)) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow (* b 0) -1) (+ e d))) (* (pow e (+ (+ 0 a) 0)) (- 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001007816)",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001018577
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.000271342
    },
    "speedup": 3.7538493856461583,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (* (- (/ (pow (+ (- (/ 1 a) 0) (* 1 0)) (- a 0)) (+ (* 0 a) a)) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow (* b 0) -1) (+ e d))) (* (pow e (+ (+ 0 a) 0)) (- 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.001000449)",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001011689
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.000266608
    },
    "speedup": 3.7946685770869597,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (/ (- (/ (pow (/ (- (/ a 0) a) (- -1 1)) (/ -1 a)) (pow (pow b c) 0)) (* (/ -1 1) 0)) (pow (pow (- b d) 1) (- -1 b))) (+ (/ (/ a 1) b) (* b b))) (/ d (pow (+ (- 1 e) 0) (pow 1 1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001008383)",
      "output_term": "(- (+ (/ (/ (pow (/ (- (/ a 0) a) -2) (/ -1 a)) 1) (pow (- b d) (- -1 b))) (+ (/ (/ a 1) b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.001022618
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (+ (/ (pow (/ (- (/ a 0) a) -2) (/ -1 a)) (pow (- b d) (- -1 b))) (+ (/ a b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.00025806500000000003
    },
    "speedup": 3.9626373200550247,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (/ (- (/ (pow (/ (- (/ a 0) a) (- -1 1)) (/ -1 a)) (pow (pow b c) 0)) (* (/ -1 1) 0)) (pow (pow (- b d) 1) (- -1 b))) (+ (/ (/ a 1) b) (* b b))) (/ d (pow (+ (- 1 e) 0) (pow 1 1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001535)",
      "output_term": "(- (+ (/ (/ (pow (/ (- (/ a 0) a) -2) (/ -1 a)) 1) (pow (- b d) (- -1 b))) (+ (/ (/ a 1) b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.0010144
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (+ (/ (pow (/ (- (/ a 0) a) -2) (/ -1 a)) (pow (- b d) (- -1 b))) (+ (/ a b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.000255576
    },
    "speedup": 3.9690737784455505,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) (+ 0 1)) (/ 0 0)) (/ (+ 1 b) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ b (+ a c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (pow e -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001000773)",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ c (+ a b)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (pow e -1))))",
      "output_weight_simple": 35,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.001016913
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ a (+ b c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (/ 1 e))))",
      "output_weight_simple": 34,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.000255229
    },
    "speedup": 3.9843160455904303,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (/ (- (/ (pow (/ (- (/ a 0) a) (- -1 1)) (/ -1 a)) (pow (pow b c) 0)) (* (/ -1 1) 0)) (pow (pow (- b d) 1) (- -1 b))) (+ (/ (/ a 1) b) (* b b))) (/ d (pow (+ (- 1 e) 0) (pow 1 1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000508)",
      "output_term": "(- (+ (/ (/ (pow (/ (- (/ a 0) a) -2) (/ -1 a)) 1) (pow (- b d) (- -1 b))) (+ (/ (/ a 1) b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.0010154
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (+ (/ (pow (/ (- (/ a 0) a) -2) (/ -1 a)) (pow (- b d) (- -1 b))) (+ (/ a b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.000251204
    },
    "speedup": 4.042133087052754,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) (+ 0 1)) (/ 0 0)) (/ (+ 1 b) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ b (+ a c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (pow e -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001013224)",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ c (+ a b)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (pow e -1))))",
      "output_weight_simple": 35,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.0010297429999999998
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ a (+ b c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (/ 1 e))))",
      "output_weight_simple": 34,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.000254649
    },
    "speedup": 4.043773979084936,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) (+ 0 1)) (/ 0 0)) (/ (+ 1 b) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ b (+ a c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (pow e -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.001005393)",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ c (+ a b)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (pow e -1))))",
      "output_weight_simple": 35,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.0010217569999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ a (+ b c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (/ 1 e))))",
      "output_weight_simple": 34,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.000252065
    },
    "speedup": 4.053545712415448,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (- (pow (/ (+ (pow (pow (- a a) -1) -1) (* 0 b)) (- b (* d a))) (pow (+ 0 0) -1)) (- (* (pow d 1) 0) (* a c))) (/ (- (- a b) 0) (pow -1 c))) (/ (- (+ (+ 0 -1) d) (/ a e)) (- e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001016896)",
      "output_term": "(- (pow (+ (pow (/ (pow (pow 0 -1) -1) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- (+ -1 d) (/ a e)) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.001026231
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (pow (/ (/ 1 (pow 0 -1)) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- d (+ 1 (/ a e))) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.000252529
    },
    "speedup": 4.063814452993518,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (- (pow (/ (+ (pow (pow (- a a) -1) -1) (* 0 b)) (- b (* d a))) (pow (+ 0 0) -1)) (- (* (pow d 1) 0) (* a c))) (/ (- (- a b) 0) (pow -1 c))) (/ (- (+ (+ 0 -1) d) (/ a e)) (- e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001001257)",
      "output_term": "(- (pow (+ (pow (/ (pow (pow 0 -1) -1) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- (+ -1 d) (/ a e)) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.0010103479999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (pow (/ (/ 1 (pow 0 -1)) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- d (+ 1 (/ a e))) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.000248416
    },
    "speedup": 4.067161535488857,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (- (pow (/ (+ (pow (pow (- a a) -1) -1) (* 0 b)) (- b (* d a))) (pow (+ 0 0) -1)) (- (* (pow d 1) 0) (* a c))) (/ (- (- a b) 0) (pow -1 c))) (/ (- (+ (+ 0 -1) d) (/ a e)) (- e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00100404)",
      "output_term": "(- (pow (+ (pow (/ (pow (pow 0 -1) -1) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- (+ -1 d) (/ a e)) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.001014877
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (pow (/ (/ 1 (pow 0 -1)) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- d (+ 1 (/ a e))) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.000248404
    },
    "speedup": 4.0855904091721555,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (pow (/ (pow (pow (- (- (+ -1 0) a) (pow 1 a)) (* a a)) (pow (- 0 1) a)) (- (- 1 0) 0)) (+ 1 (/ a (/ b 0)))) (+ (pow (- a d) a) (* 0 1))) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (pow (/ (pow (pow (- (- -1 a) (pow 1 a)) (* a a)) (pow -1 a)) 1) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 9,
      "simplification_time": 0.000960499
    },
    "Extended": {
      "iterations": 3,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (pow (pow (pow (- -1 (+ a (pow 1 a))) (* a a)) (pow -1 a)) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
      "output_weight_simple": 28,
      "output_weight_complex": 75,
      "output_depth": 9,
      "simplification_time": 0.00017856100000000001
    },
    "speedup": 5.3791085399387315,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (pow (/ (pow (pow (- (- (+ -1 0) a) (pow 1 a)) (* a a)) (pow (- 0 1) a)) (- (- 1 0) 0)) (+ 1 (/ a (/ b 0)))) (+ (pow (- a d) a) (* 0 1))) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (pow (/ (pow (pow (- (- -1 a) (pow 1 a)) (* a a)) (pow -1 a)) 1) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 9,
      "simplification_time": 0.000946875
    },
    "Extended": {
      "iterations": 3,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (pow (pow (pow (- -1 (+ a (pow 1 a))) (* a a)) (pow -1 a)) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
      "output_weight_simple": 28,
      "output_weight_complex": 75,
      "output_depth": 9,
      "simplification_time": 0.00017566
    },
    "speedup": 5.390384834339064,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (pow (/ (pow (pow (- (- (+ -1 0) a) (pow 1 a)) (* a a)) (pow (- 0 1) a)) (- (- 1 0) 0)) (+ 1 (/ a (/ b 0)))) (+ (pow (- a d) a) (* 0 1))) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (pow (/ (pow (pow (- (- -1 a) (pow 1 a)) (* a a)) (pow -1 a)) 1) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 9,
      "simplification_time": 0.0009579780000000001
    },
    "Extended": {
      "iterations": 3,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (pow (pow (pow (- -1 (+ a (pow 1 a))) (* a a)) (pow -1 a)) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
      "output_weight_simple": 28,
      "output_weight_complex": 75,
      "output_depth": 9,
      "simplification_time": 0.00017526599999999999
    },
    "speedup": 5.465851905104242,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (/ (pow (- 1 1) (pow 0 (/ (+ 0 1) a))) (pow (/ (- b -1) 1) (* b a))) (* (- a 1) (pow b 1))) (pow (- (pow (+ a b) 1) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001007539)",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (/ (+ 1 b) 1) (* a b))) (* b (+ a -1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 86,
      "output_depth": 8,
      "simplification_time": 0.001017174
    },
    "Extended": {
      "iterations": 3,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (+ 1 b) (* a b))) (* b (- a 1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- b (+ a d)) (pow b d)) (* a e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 8,
      "simplification_time": 0.00017681
    },
    "speedup": 5.752921214863412,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (/ (pow (- 1 1) (pow 0 (/ (+ 0 1) a))) (pow (/ (- b -1) 1) (* b a))) (* (- a 1) (pow b 1))) (pow (- (pow (+ a b) 1) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001000133)",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (/ (+ 1 b) 1) (* a b))) (* b (+ a -1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 86,
      "output_depth": 8,
      "simplification_time": 0.001007683
    },
    "Extended": {
      "iterations": 3,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (+ 1 b) (* a b))) (* b (- a 1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- b (+ a d)) (pow b d)) (* a e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 8,
      "simplification_time": 0.00017035599999999998
    },
    "speedup": 5.915160017844984,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (/ (pow (- 1 1) (pow 0 (/ (+ 0 1) a))) (pow (/ (- b -1) 1) (* b a))) (* (- a 1) (pow b 1))) (pow (- (pow (+ a b) 1) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.001009491)",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (/ (+ 1 b) 1) (* a b))) (* b (+ a -1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
      "output_weight_simple": 31,
      "output_weight_complex": 86,
      "output_depth": 8,
      "simplification_time": 0.001020175
    },
    "Extended": {
      "iterations": 3,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (+ 1 b) (* a b))) (* b (- a 1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- b (+ a d)) (pow b d)) (* a e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 8,
      "simplification_time": 0.000172039
    },
    "speedup": 5.9299054284203,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 0
  }
]