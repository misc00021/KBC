[
  {
    "base_term": "(+ (pow (+ (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (* (/ 0 (/ a -1)) (+ -1 c))) (pow (* (/ a 0) 0) (- 0 c))) (* (pow (- 1 -1) 0) (pow c a))) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (* (/ (* (pow 0 a) (* -1 (pow 1 a))) 0) c) (pow 0 (- 0 c))) (pow c a)) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.000996411
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.007853133)",
      "output_term": "(+ (pow (+ (* (/ (/ (pow 0 a) (/ -1 (pow 1 a))) 0) c) (+ (/ 0 (/ a (- 1 c))) (pow 0 (- 0 c)))) (pow c a)) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 84,
      "output_depth": 9,
      "simplification_time": 0.007988230999999998
    },
    "speedup": 0.12473487559385804,
    "weight_simple_diff": -4,
    "weight_complex_diff": -18,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (pow (- (/ (/ (- a a) (+ 0 a)) (- 0 -1)) -1) (/ (/ (* a a) 1) (* 1 b))) (- (pow (pow a a) b) (/ d -1))) (/ (- (- -1 0) b) (/ 0 -1))) (/ (pow (- (- 0 1) d) (- c c)) (* c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow 1 (/ (* a a) b)) (+ (pow (pow a a) b) d)) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.0008080030000000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005038981)",
      "output_term": "(pow (/ (pow (pow 1 (* a (/ a b))) (- (pow (pow a a) b) (/ d -1))) (/ (- -1 b) 0)) (/ (/ 1 b) c))",
      "output_weight_simple": 21,
      "output_weight_complex": 65,
      "output_depth": 7,
      "simplification_time": 0.005073803
    },
    "speedup": 0.1592499748216476,
    "weight_simple_diff": -1,
    "weight_complex_diff": -8,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (* (- (* (* (/ (* 1 0) -1) (+ -1 -1)) (pow 1 a)) (pow (- 0 a) 0)) 1) (- (pow a a) (/ 0 1))) (+ (- (pow 1 (* c -1)) (- 0 b)) (/ d a))) (+ (pow (+ (+ 1 0) -1) (- c d)) (+ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* -1 (pow a a)) (+ (pow 1 (* -1 c)) (+ (/ d a) b))) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 20,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.000883537
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (pow a a) (/ (+ (pow 1 (- 0 c)) (+ b (/ d a))) -1)) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 20,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.00478223
    },
    "speedup": 0.184754183717638,
    "weight_simple_diff": 0,
    "weight_complex_diff": -2,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (pow (/ (pow (/ (+ (/ (pow a b) 1) 0) (/ 0 1)) (pow (pow -1 1) 0)) a) (- (pow (* a -1) 1) (- c 1))) (/ (+ (+ (+ 1 -1) -1) (* d 0)) (+ a b))) (pow (* (pow (+ 0 -1) e) (+ 0 e)) (- e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (/ (/ (pow a b) 0) a) (* -1 (+ c (+ a -1)))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.0016904300000000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007758388)",
      "output_term": "(/ (* (pow (/ (/ (pow a b) 0) a) (- 1 (+ a c))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.007916455
    },
    "speedup": 0.21353370921706752,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (/ (* (pow (* (* (/ (/ 1 1) 0) (- 1 -1)) (- a a)) (* a (/ -1 -1))) (- (pow b 1) a)) (pow (* (/ -1 1) 0) (pow 1 -1))) (+ (pow (pow a a) b) (/ 0 a))) (pow (pow (- c -1) (pow b 0)) (- a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (* (- b a) (pow 0 (+ -1 a))) (pow (pow a a) b)) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 17,
      "output_weight_complex": 37,
      "output_depth": 6,
      "simplification_time": 0.0016395910000000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007526896)",
      "output_term": "(* (pow (/ (pow 0 a) (/ 0 (- b a))) (+ (pow (pow a a) b) (/ 0 a))) (pow (+ c 1) (- a c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.007671458
    },
    "speedup": 0.21372612611579184,
    "weight_simple_diff": -1,
    "weight_complex_diff": -12,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (/ (- (pow (- (- 1 (+ (/ a 1) b)) (/ 0 b)) (- (pow 0 a) a)) (+ (- 0 0) 0)) (/ -1 (- a 0))) (+ (- (+ (* -1 1) 1) (/ 1 1)) (- 0 0))) (pow (- (pow (+ a a) b) (+ -1 0)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (* -1 (/ (pow (- 1 (+ a b)) (- (pow 0 a) a)) (/ -1 a))) (pow (+ 1 (pow (+ a a) b)) (/ 1 e)))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.0011207839999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005005983)",
      "output_term": "(* a (* (pow (- (- 1 (+ a b)) (/ 0 b)) (- (pow 0 a) a)) (pow (+ (pow (+ a a) b) 1) (/ 1 e))))",
      "output_weight_simple": 19,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.005061161
    },
    "speedup": 0.2214480037287887,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (* (- (* (* (pow (pow -1 1) 1) (pow -1 a)) (- b b)) (/ (- 0 d) -1)) (- (+ 1 -1) 0)) (- (* 1 (pow e c)) (+ b 1))) (- (+ (* -1 -1) 1) (* b -1))) (* (- (pow (* d c) a) (* 0 b)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.0011553350000000002
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005000436)",
      "output_term": "(+ (pow 0 (+ 2 b)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.005031671
    },
    "speedup": 0.22961258794543607,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (/ (/ (/ 0 (- (* a (* a (pow a a))) (pow a c))) (* 1 (/ (/ 0 -1) 0))) (/ (- 1 1) (- 0 1))) (* (pow (* 1 (* b 1)) (* 1 d)) (/ c -1))) (* (/ (- b (/ a 1)) (* -1 0)) (pow -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 0 0) (* c (* -1 (pow b d)))) (* -1 (/ (- b a) 0)))",
      "output_weight_simple": 15,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.001194879
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005012693)",
      "output_term": "(/ (pow (/ (/ 0 (* (- (pow a (+ 2 a)) (pow a c)) (/ 0 0))) 0) (* (pow b d) (/ c -1))) (- 0 (/ (- b a) 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.00503994
    },
    "speedup": 0.2370819890712985,
    "weight_simple_diff": -8,
    "weight_complex_diff": -25,
    "depth_diff": -3
  },
  {
    "base_term": "(/ (- (/ (- (pow (+ 1 (pow (pow (+ -1 1) a) (pow 0 1))) (/ (/ a a) a)) -1) (/ (- b (- b b)) (+ b 0))) (* (pow (+ (* a d) c) (+ -1 1)) (/ b 1))) (+ (* (* (+ -1 a) -1) (/ 0 1)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (+ 1 (pow 2 (/ 1 a))) b) d)",
      "output_weight_simple": 10,
      "output_weight_complex": 24,
      "output_depth": 6,
      "simplification_time": 0.001255466
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005026971)",
      "output_term": "(/ (- (pow 2 (/ 1 a)) (- b 1)) d)",
      "output_weight_simple": 10,
      "output_weight_complex": 24,
      "output_depth": 5,
      "simplification_time": 0.005072281
    },
    "speedup": 0.24751507260737332,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (+ (- (* (* (pow (pow 1 0) (pow -1 a)) (/ 0 0)) -1) (+ (* (pow 1 b) b) (- 0 0))) (/ (* (- a -1) a) (- c 0))) (* (pow -1 (+ -1 c)) (+ 1 0))) (/ (+ (/ d (+ 0 a)) (- c c)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (- (* (pow 1 (pow -1 a)) (* -1 (/ 0 0))) (* b (pow 1 b))) (/ (+ a (* a a)) c)) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.002060133
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.008096268)",
      "output_term": "(+ (pow (+ (- (* (pow 1 (pow -1 a)) (- 0 (/ 0 0))) (* b (pow 1 b))) (/ (+ a 1) (/ c a))) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.008226905999999999
    },
    "speedup": 0.2504140681806745,
    "weight_simple_diff": 0,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (* (pow 1 (pow (- (pow (pow a 1) 1) 0) (+ 1 0))) (pow (- (pow a a) a) (+ 1 b))) (pow (+ (/ 0 1) 1) (- 1 b))) (- (* (- a -1) b) (+ a -1))) (/ (pow (- b (- 1 1)) (/ c 1)) (- c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ a (- 1 b)))) (+ 1 (+ b (* a (+ b -1))))) (/ (pow b c) (- c b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.002099656
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007761789)",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (- a b))) (- (* b (+ a 1)) (+ a -1))) (/ (pow b c) (- c b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.007889585
    },
    "speedup": 0.2661300942952006,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (- (* (* (pow (pow (+ -1 (/ 0 a)) (/ -1 1)) 0) (+ (/ -1 -1) 0)) (+ a (pow 0 -1))) (/ (- a (- a a)) (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ (pow (/ a a) e) (pow -1 1)) (/ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ -1 (pow 1 e)) (/ 1 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 6,
      "simplification_time": 0.0013571339999999999
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005011079)",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (/ (pow d e) (* b b))) (* (+ -1 (pow 1 e)) (/ 1 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 54,
      "output_depth": 6,
      "simplification_time": 0.005028826
    },
    "speedup": 0.2698709400563869,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (/ (- (- (pow (+ a (* 0 (* b 0))) (+ -1 b)) (pow (- -1 0) b)) 0) (+ (pow (/ a c) a) (/ e 1))) (- (/ (/ (+ b -1) c) (pow -1 0)) (/ 1 -1))) (- (* (- 0 (pow -1 a)) (/ 0 b)) (/ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ (pow (/ a c) a) e)) (+ 1 (/ (+ b -1) c))) (- 0 (/ 1 a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.0023150560000000002
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007726086)",
      "output_term": "(pow (/ (- (pow a (+ b -1)) (pow -1 b)) (* (+ (pow (/ a c) a) e) (+ (/ (+ b -1) c) 1))) (- 0 (+ (* (pow -1 a) (/ 0 b)) (/ 1 a))))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.007860689
    },
    "speedup": 0.29451057025662764,
    "weight_simple_diff": -4,
    "weight_complex_diff": -9,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (pow (pow (* (/ a (- (* (pow a b) 1) (pow b 1))) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow (pow (pow 1 -1) 0) (- d c))) (/ (* (pow c -1) 1) (- a 0))) (pow (+ (+ (* e b) b) (+ a c)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (* (/ a (- (pow a b) b)) (pow 0 b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (/ 1 c) a))",
      "output_weight_simple": 20,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001479718
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005003717)",
      "output_term": "(* a (* c (pow (pow (* a (/ (pow (/ 0 b) b) (- (pow a b) b))) (/ b (- 0 b))) (pow 1 (- d c)))))",
      "output_weight_simple": 20,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.0050110680000000005
    },
    "speedup": 0.2952899461751467,
    "weight_simple_diff": 0,
    "weight_complex_diff": 6,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (/ (pow (pow a (/ (pow (* a (pow (- a b) b)) (- d c)) (- (* 0 0) -1))) (/ (+ a (- -1 1)) (* 1 d))) (* (+ (+ (pow 0 c) -1) (* d d)) (pow d a))) (pow (pow (/ -1 (+ 1 -1)) (/ c c)) (+ c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow a (pow (* a (pow (- a b) b)) (- d c))) (/ (+ a -2) d)) (* (+ -1 (+ (pow 0 c) (* d d))) (pow d a))) (pow (/ -1 0) (+ c e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.0015873649999999999
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005217203)",
      "output_term": "(/ (pow (pow a (pow (* a (pow (- a b) b)) (- d c))) (/ (+ a -2) d)) (* (+ (pow 0 c) (+ -1 (* d d))) (* (pow d a) (pow (/ -1 0) (+ c e)))))",
      "output_weight_simple": 28,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.005239466999999999
    },
    "speedup": 0.3029630685716696,
    "weight_simple_diff": 0,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (pow (/ (pow (pow (- (/ (* 1 0) a) (* 1 -1)) (- -1 -1)) (/ a (+ 1 -1))) (* (+ a 1) a)) (pow (* (pow -1 1) 0) (+ a a))) (pow (pow (/ a 0) a) (* 1 a))) (- (pow (* (* a 1) a) (- 1 b)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (- (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (pow (pow (/ a 0) a) a)) (+ -1 (pow (* a a) (- 1 b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001554639
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005069391)",
      "output_term": "(- (pow (/ (pow 1 (/ a 0)) (+ (* a a) a)) (pow 0 (+ a a))) (+ (pow (pow (/ a 0) a) a) (- (pow (* a a) (- 1 b)) 1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.00512048
    },
    "speedup": 0.30361196606568136,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (pow (+ (/ (+ (* (+ (pow a a) 0) (* -1 b)) (+ -1 a)) (- (pow -1 1) 0)) (* (/ 1 -1) b)) (/ (pow (- -1 c) b) (+ 1 0))) (/ (pow a (/ -1 1)) (pow 1 1))) (/ (pow a (pow (/ -1 d) 1)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (+ (* (pow a a) b) (+ 1 (* -1 (+ a b)))) (pow (- -1 c) b)) (/ 1 a)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.002488263
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.008049562)",
      "output_term": "(pow (- (pow (- (/ (+ (- 0 (* (pow a a) b)) (- a 1)) -1) b) (pow (- -1 c) b)) (/ 1 a)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 10,
      "simplification_time": 0.00818221
    },
    "speedup": 0.3041064700123805,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": -2
  },
  {
    "base_term": "(pow (- (pow (pow (* (pow (+ 0 (pow a (+ 1 a))) (/ 1 1)) (/ (pow 1 1) b)) (pow (* c 1) 0)) (- (+ -1 (- d 0)) (* a e))) (* (* (- -1 d) 1) (pow 0 0))) (* (* (pow (+ 0 c) 0) (/ c 0)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (pow (* (pow a (+ a 1)) (/ 1 b)) (- (+ -1 d) (* a e))) (* (pow 0 0) (+ 1 d))) (* -1 (/ c 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.0016676680000000002
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.00536515)",
      "output_term": "(pow (- (pow (/ (pow a (+ a 1)) b) (- d (+ (* a e) 1))) (* (- -1 d) (pow 0 0))) (- 0 (/ c 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.005469385
    },
    "speedup": 0.30490960135371714,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (/ (- (/ (pow (/ (- (/ a 0) a) (- -1 1)) (/ -1 a)) (pow (pow b c) 0)) (* (/ -1 1) 0)) (pow (pow (- b d) 1) (- -1 b))) (+ (/ (/ a 1) b) (* b b))) (/ d (pow (+ (- 1 e) 0) (pow 1 1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (+ (/ (pow (* (- (/ a 0) a) -0.5) (/ -1 a)) (pow (- b d) (- -1 b))) (+ (/ a b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.00157665
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005003436)",
      "output_term": "(- (+ (/ (pow (/ (- (/ a 0) a) -2) (/ -1 a)) (pow (- b d) (- -1 b))) (+ (/ a b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.005000804
    },
    "speedup": 0.3152793030880634,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (+ (+ (+ (+ (* (pow (/ -1 1) 0) (/ 0 -1)) (+ a 0)) (pow (pow a a) b)) (/ (+ c b) -1)) (/ (pow 1 a) (/ -1 1))) (pow (- (pow 0 a) 0) (* 1 b))) (pow (/ (* (pow -1 e) c) (pow 1 c)) (pow e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (+ a (pow (pow a a) b)) (* -1 (+ b (+ c (pow 1 a))))) (pow (pow 0 a) b)) (/ (* c (pow -1 e)) (pow 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.00259232
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007669965)",
      "output_term": "(- (pow (+ (+ a (pow (pow a a) b)) (+ (/ (+ c b) -1) (/ (pow 1 a) -1))) (pow (pow 0 a) b)) (/ c (/ (pow 1 c) (pow -1 e))))",
      "output_weight_simple": 24,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.007804958000000001
    },
    "speedup": 0.3321375976654839,
    "weight_simple_diff": -1,
    "weight_complex_diff": -11,
    "depth_diff": 1
  },
  {
    "base_term": "(* (pow (/ (/ (pow (pow (* (+ (* a a) b) (* c d)) c) (* 0 (pow e c))) a) (+ (/ 0 (- a d)) (* c b))) (/ (* (/ (pow b 1) b) (+ 1 1)) (+ e 0))) (pow (- (* (/ -1 1) a) (- 0 -1)) (pow e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (pow a -1) (* b c)) (/ 2 e)) (pow (+ -1 (* a -1)) (pow e b)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 5,
      "simplification_time": 0.0017362620000000001
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005028337)",
      "output_term": "(* (pow (/ (/ 1 a) (+ (/ 0 (- a d)) (* b c))) (/ 2 e)) (pow (- -1 a) (pow e b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.0050963860000000005
    },
    "speedup": 0.34068494811813704,
    "weight_simple_diff": -5,
    "weight_complex_diff": -10,
    "depth_diff": -2
  },
  {
    "base_term": "(- (pow (* (/ (+ (pow (- a (+ (pow -1 0) b)) (pow a c)) (* (* 1 a) -1)) (- -1 (* 0 1))) (+ 1 (* -1 1))) (pow (pow (* (+ 1 c) -1) (- 0 a)) (* e e))) (+ (* (* (* e -1) 1) (+ b 0)) (/ -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (pow (pow (+ -1 (* -1 c)) (- 0 a)) (* e e))) (+ (* b e) (* -1 (/ -1 0))))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.001738986
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005001569)",
      "output_term": "(- (pow 0 (pow (pow (- -1 c) (* a -1)) (* e e))) (+ (* b (* e -1)) (/ -1 0)))",
      "output_weight_simple": 17,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.005091454
    },
    "speedup": 0.34154997766846174,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (- (pow (pow (/ (+ (pow (* a -1) 0) (- 0 a)) (/ 0 b)) (+ (+ b 1) b)) -1) (* 1 (/ (* -1 -1) 1))) (/ (/ (/ (pow 0 a) 0) (* 0 -1)) (pow c a))) (pow (pow (- (/ a c) b) (/ d d)) (- 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (/ 1 (pow (/ (+ (- 0 a) 1) 0) (+ b (+ b 1)))) (+ -1 (/ (/ (/ (pow 0 a) 0) 0) (pow c a)))) (/ 1 (- (/ a c) b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.0019235130000000002
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005493513)",
      "output_term": "(/ (+ (- (/ 1 (pow (/ (- 1 a) (/ 0 b)) (+ b (+ b 1)))) 1) (/ (/ (/ (pow 0 a) 0) 0) (pow c a))) (- (/ a c) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.005564421999999999
    },
    "speedup": 0.34568064751379396,
    "weight_simple_diff": 2,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (+ (/ (- (/ (pow (* 0 a) 0) (+ 0 0)) (+ b b)) (+ (/ 1 -1) c)) (+ (* -1 1) a)) (* (* (pow d 0) -1) (* a 0))) (pow (/ (- 1 -1) c) (* a e))) (pow (+ (+ d (pow e c)) b) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ d (+ b (pow e c))) (/ 1 a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.002955149
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.008357223)",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ d (+ (pow e c) b)) (/ 1 a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.008528029
    },
    "speedup": 0.34652192200565923,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (* (pow (- 1 (pow (pow (* 0 a) (pow a b)) (- c -1))) (/ 1 (* (pow a d) 0))) (pow (* (* a d) -1) a)) (+ (pow (* (* 1 0) e) (- -1 e)) (* 1 b))) (- (- (pow 0 (* c 1)) (* d c)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (* a (* -1 d)) a)) (+ b (pow 0 (- -1 e)))) (- (- (pow 0 c) (* c d)) d))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.0018751500000000001
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005351289)",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (* a (- 0 d)) a)) (+ (pow 0 (- -1 e)) b)) (- (pow 0 c) (+ (* c d) d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.005410413999999999
    },
    "speedup": 0.34658161094511447,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (+ (/ (+ (/ (- (+ (pow a 1) 0) 0) (* a 1)) (- (pow a 1) -1)) (pow (- 0 a) 0)) (pow (pow (- a a) a) (+ a a))) (* (pow -1 (* b 1)) (pow 1 0))) (/ (- (/ (- b 1) a) (pow c c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (+ (pow (pow 0 a) (+ a a)) 2)) (pow -1 b)) (/ (- (/ (+ -1 b) a) (pow c c)) 0))",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.00121527
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (+ 2 (pow (pow 0 a) (+ a a)))) (pow -1 b)) (/ (- (/ (- b 1) a) (pow c c)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 46,
      "output_depth": 7,
      "simplification_time": 0.0034446940000000003
    },
    "speedup": 0.3527947620311122,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (* (/ (- 1 (pow (/ (/ 1 a) 0) (/ 0 1))) (/ (/ a 1) 0)) (* (- a b) b)) (/ (pow c (/ 0 a)) (pow c d))) (+ (- (+ c b) 0) (pow a e))) (/ (/ (+ d (/ 1 -1)) (pow e c)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 143,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (pow 0 (/ 1 (pow c d))) (+ b (+ c (pow a e)))) (/ (/ (+ d -1) (pow e c)) (- e b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 54,
      "output_depth": 6,
      "simplification_time": 0.002825751
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007536533)",
      "output_term": "(pow (* (pow (* (- a b) (/ 0 (/ (/ a 0) b))) (/ (pow c (/ 0 a)) (pow c d))) (+ c (+ b (pow a e)))) (/ (- d 1) (* (pow e c) (- e b))))",
      "output_weight_simple": 27,
      "output_weight_complex": 77,
      "output_depth": 8,
      "simplification_time": 0.007666500999999999
    },
    "speedup": 0.36858418201471577,
    "weight_simple_diff": -6,
    "weight_complex_diff": -23,
    "depth_diff": -2
  },
  {
    "base_term": "(- (/ (- (pow (pow (- (/ (pow (/ a 1) a) (- -1 b)) a) (/ c (/ 0 1))) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ (/ (+ 0 a) 1) (/ 0 0))) (pow (/ (* (/ e e) d) (+ 0 e)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow a a) (- -1 b)) a) (/ c 0)) (+ a 1)) (pow (/ (* b b) c) (pow e d))) (+ a (/ 0 0))) (pow (/ d e) (* a a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.0019069199999999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005043118)",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow a a) (- -1 b)) a) (/ c 0)) (- 1 (/ a -1))) (pow (/ b (/ c b)) (pow e d))) (+ a (/ 0 0))) (pow (/ d e) (* a a)))",
      "output_weight_simple": 29,
      "output_weight_complex": 85,
      "output_depth": 9,
      "simplification_time": 0.005152238999999999
    },
    "speedup": 0.37011481804318475,
    "weight_simple_diff": -1,
    "weight_complex_diff": -8,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (- (* (+ (pow (* (+ a 1) -1) (+ 1 a)) (- 1 1)) (+ 0 0)) (+ (pow a 1) 0)) (/ (pow (* -1 c) a) (/ 1 b))) (* (- (/ a -1) e) (+ d 0))) (pow (/ (pow (- d -1) c) (- 0 a)) (- b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* -1 (* a (/ (pow (* -1 c) a) (/ 1 b)))) (* -1 (* d (+ a e)))) (pow (/ (pow (+ 1 d) c) (- 0 a)) (+ -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.0018870420000000002
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005007849)",
      "output_term": "(/ (pow (* (pow (- 0 c) a) (- 0 (* a b))) (* (- (/ a -1) e) d)) (pow (/ (pow (+ d 1) c) (- 0 a)) (- b 1)))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 6,
      "simplification_time": 0.005025269999999999
    },
    "speedup": 0.37551056958133605,
    "weight_simple_diff": 1,
    "weight_complex_diff": 7,
    "depth_diff": 2
  },
  {
    "base_term": "(* (pow (pow (+ (* (pow (* (pow (pow 0 -1) a) (- -1 a)) (/ a a)) (- 0 (- 0 1))) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) (pow b 1))) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ e a)) (/ 0 b)) (+ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (pow (+ (* (pow (pow 0 -1) a) (- -1 a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (+ -1 d))",
      "output_weight_simple": 24,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.00199639
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005030761)",
      "output_term": "(* (pow (pow (+ (* (pow (pow 0 -1) a) (- -1 a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ c (/ (pow 1 c) -1))) (* (pow (pow c (+ a e)) (/ 0 b)) (+ d -1)))",
      "output_weight_simple": 30,
      "output_weight_complex": 85,
      "output_depth": 8,
      "simplification_time": 0.005052646
    },
    "speedup": 0.3951177264348224,
    "weight_simple_diff": -6,
    "weight_complex_diff": -18,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (+ (pow (* (/ (/ (+ 1 (/ a -1)) (+ -1 1)) (* a b)) (+ (pow b b) b)) (/ 0 (- c d))) (/ (* (* 0 e) -1) (- 0 -1))) (+ c (/ (/ 0 -1) 0))) (+ (- (/ (* 1 a) a) (* e d)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (* d e) (+ c (+ -1 (/ 0 0))))",
      "output_weight_simple": 10,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.0020105130000000002
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.00500071)",
      "output_term": "(- (* (pow (* (/ (- 1 a) 0) (/ (+ (pow b b) b) (* a b))) (/ 0 (- c d))) (+ c (/ 0 0))) (- 1 (* d e)))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.0050141790000000006
    },
    "speedup": 0.40096554191623396,
    "weight_simple_diff": -13,
    "weight_complex_diff": -36,
    "depth_diff": -3
  },
  {
    "base_term": "(+ (+ (pow (* (pow (* (* (/ (* a a) -1) b) (* b 1)) (* d (* 0 b))) (+ (+ e 1) c)) (pow (+ (pow a d) c) (/ b 0))) (- (pow (- e -1) -1) (* a e))) (pow (- (+ (/ a a) 0) (* 1 1)) (* d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ e (+ 1 c)) (pow (+ c (pow a d)) (/ b 0))) (+ (- (/ 1 (+ 1 e)) (* a e)) (pow 0 (* b d))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.002028023
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00500012)",
      "output_term": "(+ (pow (+ e (+ 1 c)) (pow (+ (pow a d) c) (/ b 0))) (+ (- (/ 1 (+ e 1)) (* a e)) (pow 0 (* b d))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.005021978000000001
    },
    "speedup": 0.40382952693142016,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (- (/ (+ a (* (- (* 0 a) -1) (* b a))) (+ (/ a c) c)) (pow (* 1 c) 0)) (+ (* (* -1 a) 1) (/ 0 0))) (/ (+ (pow c 1) 0) (- -1 d))) (/ (pow (+ (/ e 1) -1) (- a c)) (- -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (+ -1 (/ (+ a (* a b)) (+ c (/ a c)))) (+ (* a -1) (/ 0 0))) (/ c (- -1 d))) (/ (pow (+ -1 e) (- a c)) (- -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.002092479
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005034602)",
      "output_term": "(/ c (/ (/ (pow (+ e -1) (- a c)) (- -1 b)) (/ (pow (- (/ a (/ (+ (/ a c) c) (+ b 1))) 1) (- (/ 0 0) a)) (- -1 d))))",
      "output_weight_simple": 26,
      "output_weight_complex": 69,
      "output_depth": 10,
      "simplification_time": 0.005081372
    },
    "speedup": 0.4117940981294029,
    "weight_simple_diff": 0,
    "weight_complex_diff": -5,
    "depth_diff": -2
  },
  {
    "base_term": "(pow (/ (pow (/ (pow (- 1 1) (pow 0 (/ (+ 0 1) a))) (pow (/ (- b -1) 1) (* b a))) (* (- a 1) (pow b 1))) (pow (- (pow (+ a b) 1) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 9,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (+ 1 b) (* a b))) (* b (+ a -1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.003013201
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007114548)",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (+ b 1) (* a b))) (* b (- a 1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- b (+ d a)) (pow b d)) (* a e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 8,
      "simplification_time": 0.00724108
    },
    "speedup": 0.41612590939473115,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (pow (* (- (* (* (+ (/ a -1) a) (/ 0 1)) (* b b)) (+ (+ b b) 0)) (pow 0 (/ b d))) (- (pow (* -1 -1) -1) 0)) (pow (* (+ -1 b) 1) (/ 0 e))) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (* b (* (pow 0 (/ b d)) -2)) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 6,
      "simplification_time": 0.002167273
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005011624)",
      "output_term": "(- (* (pow 0 (/ b d)) (* (- 0 (+ b b)) (pow (+ -1 b) (/ 0 e)))) (/ b (/ c (pow (+ d (- e a)) (- 0 e)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.005031175
    },
    "speedup": 0.43076875680134363,
    "weight_simple_diff": -4,
    "weight_complex_diff": -10,
    "depth_diff": -1
  },
  {
    "base_term": "(* (pow (* (pow (+ (/ (/ (* -1 (/ a 1)) (pow 0 a)) -1) (/ a (* a a))) a) (/ (+ b (- c c)) (- 0 c))) (- (* (+ (- b -1) 0) (/ 0 1)) (/ 1 1))) (- (pow (- (+ a -1) b) (* 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(* (/ 1 (* (pow (+ (* a (/ 1 (pow 0 a))) (/ a (* a a))) a) (/ b (- 0 c)))) (- 1 (pow -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.002441586
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005060615)",
      "output_term": "(* (/ (- 0 c) (* (pow (+ (/ a (pow 0 a)) (/ 1 a)) a) b)) (- 1 (pow -1 b)))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 8,
      "simplification_time": 0.005397634
    },
    "speedup": 0.45234374913156394,
    "weight_simple_diff": 3,
    "weight_complex_diff": 9,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (/ (pow (+ (+ (+ (- (/ -1 a) a) (* 1 1)) (pow 1 a)) (* -1 (* a 1))) (/ (pow 1 a) b)) (pow (+ (pow a c) c) b)) (/ (- (pow a 0) -1) (/ b c))) (+ (pow (- (pow -1 1) 1) (+ 1 1)) (pow b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow (+ (/ -1 a) (+ 1 (+ (pow 1 a) (* a -2)))) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) -5)",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.002345981
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005002991)",
      "output_term": "(- (pow (/ (pow (+ (- (/ -1 a) a) (+ (pow 1 a) (- 1 a))) (/ (pow 1 a) b)) (pow (+ (pow a c) c) b)) (/ c (/ b 2))) (+ (pow -2 2) 1))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.005005918000000001
    },
    "speedup": 0.4686415159017786,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (- (+ (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (pow (* d 1) 0)) (/ b (+ 0 0))) (+ (* 0 (/ -1 -1)) (pow e c))) (/ (pow (pow 0 c) -1) (/ e a))) (pow 1 (/ (pow (/ 1 1) c) (pow 0 -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ 1 (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (/ b 0))) (pow e c)) (/ (/ 1 (pow 0 c)) (/ e a))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 79,
      "output_depth": 10,
      "simplification_time": 0.002530091
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005025951)",
      "output_term": "(- (pow (- (+ (/ (+ (pow (+ a b) c) (* c c)) a) (+ (/ b 0) 1)) (pow e c)) (/ (/ a e) (pow 0 c))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 26,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.005065907
    },
    "speedup": 0.4994349481741374,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (+ (pow (pow (pow (pow (+ (pow a 1) 0) (- a -1)) (- 1 a)) (- (- 1 0) -1)) (- (* -1 1) -1)) (/ (- a (* a 0)) (- 0 b))) (pow 1 (pow 1 (pow c -1)))) (/ (/ (+ (pow 0 -1) -1) (pow a 1)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ 1 (/ a (- 0 b))) (pow 1 (pow 1 (/ 1 c)))) (* -1 (/ (+ -1 (pow 0 -1)) a)))",
      "output_weight_simple": 18,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.0025927319999999995
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005028836)",
      "output_term": "(/ (pow 1 (pow 1 (/ 1 c))) (/ (/ (+ (pow 0 -1) -1) a) (- -1 (/ a (- 0 b)))))",
      "output_weight_simple": 17,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.005071969
    },
    "speedup": 0.5111884556076741,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (pow (+ (- (pow (* (pow (+ a 1) a) (* b 0)) (* b a)) (/ (- a a) b)) (pow (/ -1 -1) b)) (- (- (/ 0 -1) e) (- 1 a))) (- (pow -1 (pow 1 1)) (+ c a))) (pow (+ (+ d (* 1 0)) a) (* 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (+ (pow 0 (* a b)) (pow 1 b)) (+ a (+ -1 (- 0 e)))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.0028563650000000005
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005114416)",
      "output_term": "(/ (pow (+ (- (pow 0 (* a b)) (/ 0 b)) (pow 1 b)) (- 0 (+ e (- 1 a)))) (* (- -1 (+ c a)) (pow (+ d a) a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 51,
      "output_depth": 7,
      "simplification_time": 0.005166894
    },
    "speedup": 0.5528205146070349,
    "weight_simple_diff": -2,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (- (/ (* (+ (+ 1 1) (* a 1)) (+ 0 a)) 1) (* 0 (+ (+ a 1) 1))) (* (* (pow a a) a) b)) (+ (/ (pow (- b 0) 0) (/ b 0)) (pow -1 c))) (+ (pow (+ -1 (/ 1 -1)) (- b 0)) (/ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (* a (+ 2 a)) (* a (* (pow a a) b))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ 1 (pow -2 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.002879835
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005065792)",
      "output_term": "(pow (+ (/ (+ 2 a) (* (pow a a) b)) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ (pow -2 b) 1))",
      "output_weight_simple": 20,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.005128605
    },
    "speedup": 0.5615240401629683,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (/ (pow (- (* (- (- (* a 1) b) (- 0 -1)) (* 1 c)) (pow c (+ a b))) (pow (/ -1 -1) c)) (- (pow (+ e b) e) (pow b 1))) (pow (- (pow -1 c) e) 0)) (/ (+ (* (- b c) 0) (* -1 a)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ -1 (/ (pow (- (* (+ (- a b) -1) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b))) (/ (* a -1) (- -1 d)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.0029465109999999997
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005003743)",
      "output_term": "(pow (- (/ (pow (- (* (- a (+ b 1)) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ e b) e) b)) 1) (/ a (/ (- -1 d) -1)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 9,
      "simplification_time": 0.00511585
    },
    "speedup": 0.5759572700528749,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (/ (pow a (pow (* (/ 1 -1) (pow a 1)) (+ 1 -1))) (* (pow (- a -1) a) (* a d))) (- (- (* b a) -1) (+ 0 a))) (/ (+ (pow b -1) e) (pow -1 0))) (/ (pow (- (pow d 0) 1) (pow b 0)) (/ b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (/ a (* (pow (+ a 1) a) (* a d))) (+ 1 (* a (+ -1 b)))) (+ (/ 1 b) e)) 0)",
      "output_weight_simple": 20,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.0029961809999999997
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005197526)",
      "output_term": "(/ (pow (/ (- (* a b) (- a 1)) (* (pow (+ a 1) a) d)) (+ (/ 1 b) e)) (/ -1 (/ b 0)))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.005195707
    },
    "speedup": 0.5766647349436755,
    "weight_simple_diff": 0,
    "weight_complex_diff": -6,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (+ (- (/ (/ (pow (/ (- a -1) a) (+ 1 -1)) (pow b c)) (pow (+ a d) a)) (* (* e -1) b)) (pow (/ a (pow 1 c)) (pow 1 -1))) (* (/ (* 1 d) 0) (pow c b))) (/ (/ (pow (+ 0 0) c) d) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 137,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.005032443)",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (/ a (pow 1 c)) (* b e))) (* (/ d 0) (pow c b))) (/ (pow 0 c) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.005051534000000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.008214692)",
      "output_term": "(pow (/ (+ (/ 1 (* (pow b c) (pow (+ a d) a))) (+ (* b e) (/ a (pow 1 c)))) (* (/ d 0) (pow c b))) (/ (pow 0 c) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.008360168000000001
    },
    "speedup": 0.6042383358803316,
    "weight_simple_diff": 0,
    "weight_complex_diff": 3,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (+ (- 1 (- (* a (+ (pow 1 (/ a a)) (- 1 a))) (- (- 1 0) b))) (/ (+ (* 0 b) 0) (/ b -1))) (+ (+ (* (* d 1) 0) (/ e a)) (/ c e))) (pow (/ (pow (+ 1 -1) 1) (+ 1 c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005007855)",
      "output_term": "(+ (pow (+ 1 (+ (- 1 b) (* a (+ a -2)))) (+ (/ e a) (/ c e))) (pow 0 (+ -1 d)))",
      "output_weight_simple": 21,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.005024186
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007862277)",
      "output_term": "(+ (pow (+ (- 1 (- (* a (- 2 a)) (- 1 b))) (/ 0 (/ b -1))) (+ (/ e a) (/ c e))) (pow (/ 0 (+ 1 c)) (- d 1)))",
      "output_weight_simple": 26,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.007995115
    },
    "speedup": 0.6284069710066709,
    "weight_simple_diff": -5,
    "weight_complex_diff": -17,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (/ (- (- (+ 1 -1) 1) (pow a 0)) -1) a) (- (pow (/ a -1) a) (+ b -1))) (/ (- b (- b -1)) (* c e))) (- (+ (+ e 1) e) (+ -1 d))) (pow (pow (+ d (* b 1)) (* -1 a)) (pow 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005052658)",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (- (pow (* -1 a) a) (+ -1 b))) (/ -1 (* c e))) (- (+ 1 (+ e e)) (+ -1 d))) (pow (+ b d) (* -1 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.005255879999999999
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.008197305)",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (+ (- 1 b) (pow (/ a -1) a))) (/ -1 (* c e))) (- (+ e e) (- d 2))) (pow (+ d b) (- 0 a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.008332911
    },
    "speedup": 0.6307375657798336,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (- (/ (pow (* (pow (+ a -1) a) (* b a)) (+ e a)) (+ (* 0 1) 1)) (+ (- 1 1) 0)) (/ c (* (* -1 a) d))) (- (- (- a -1) -1) (* d e))) (- (- (/ (+ a -1) 0) (- -1 e)) (* d a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 15,
      "stop_reason": "TimeLimit(0.005005529)",
      "output_term": "(pow (/ (pow (pow (* a (* (pow (+ a -1) a) b)) (+ a e)) (/ c (* a (* -1 d)))) (- (+ a 2) (* e d))) (- (+ e (+ 1 (/ (+ a -1) 0))) (* a d)))",
      "output_weight_simple": 29,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.005022346
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007583199)",
      "output_term": "(pow (/ (pow (pow (* (pow (- a 1) a) (* a b)) (+ e a)) (/ c (- 0 (* a d)))) (- a (- (* e d) 2))) (- (/ (- a 1) 0) (+ (- -1 e) (* a d))))",
      "output_weight_simple": 28,
      "output_weight_complex": 61,
      "output_depth": 8,
      "simplification_time": 0.007709723
    },
    "speedup": 0.6514301486577403,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (/ (- (+ (/ (pow 1 1) a) (/ -1 1)) (+ b c)) (+ (/ 1 a) 0)) (pow 1 (+ c d))) (- (- (pow e 0) e) (* e 0))) (pow (+ (* 1 c) d) (* b d))) (* (/ (- (- 0 c) 1) (- a c)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005084984)",
      "output_term": "(/ (+ (/ (- (/ (- (+ -1 (/ 1 a)) (+ b c)) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.005381876
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.008028476)",
      "output_term": "(/ (+ (/ (- (* a (- (+ (/ 1 a) -1) (+ b c))) (pow 1 (+ d c))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 23,
      "output_weight_complex": 48,
      "output_depth": 9,
      "simplification_time": 0.008206619
    },
    "speedup": 0.6557969853358612,
    "weight_simple_diff": -1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (pow (- (pow a (+ b (pow a (- (pow c d) b)))) (- (* (pow -1 -1) d) 1)) (* (pow (* b a) -1) (* 0 1))) (- (pow (* (* c 1) b) (* d 1)) (/ 1 -1))) (+ (- (/ (- 1 e) b) (* 0 a)) (* 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.0029074320000000006
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (/ 1 (+ (pow (* b c) d) 1)) (+ (/ (- 1 e) b) e))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.004386445
    },
    "speedup": 0.6628219435100635,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) (+ (/ c (* 1 1)) 0)) (* (* (- -1 (+ b b)) (+ c -1)) (- a -1))) (/ (pow (* (- a 1) -1) (* d -1)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005136905)",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) c) (* (+ -1 (* b -2)) (* (+ -1 c) (+ a 1)))) (/ (pow (+ (* a -1) 1) (* -1 d)) (/ 0 0)))",
      "output_weight_simple": 32,
      "output_weight_complex": 85,
      "output_depth": 10,
      "simplification_time": 0.00513593
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007585569)",
      "output_term": "(/ (pow (pow (+ a (pow (* (- -1 (pow a a)) (/ b 0)) (/ b (/ c 0)))) c) (* (- -1 (+ b b)) (* (+ -1 c) (+ a 1)))) (/ (pow (- 1 a) (- 0 d)) (/ 0 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 75,
      "output_depth": 9,
      "simplification_time": 0.007715763
    },
    "speedup": 0.6656412334075062,
    "weight_simple_diff": 3,
    "weight_complex_diff": 10,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) (/ b 1)) (/ (- b 0) 0)) (* (+ b c) 1)) (- (/ (* -1 1) -1) (+ e -1))) (pow (/ (/ d a) -1) (* d d))) (- (* (- (pow 1 a) -1) (+ 1 b)) (- a d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005410354)",
      "output_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) b) (/ b 0)) (+ b c)) (+ (* -1 e) 2)) (pow (* -1 (/ d a)) (* d d))) (- (* (+ 1 (pow 1 a)) (+ 1 b)) (- a d)))",
      "output_weight_simple": 31,
      "output_weight_complex": 64,
      "output_depth": 10,
      "simplification_time": 0.005518611
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.008135596)",
      "output_term": "(- (* (pow (pow (pow (- a (- (pow 1 a) b)) b) (/ b 0)) (+ b c)) (- 1 (+ e -1))) (+ (pow (/ d (- 0 a)) (* d d)) (- (* (+ (pow 1 a) 1) (+ 1 b)) (- a d))))",
      "output_weight_simple": 30,
      "output_weight_complex": 61,
      "output_depth": 9,
      "simplification_time": 0.008265960999999999
    },
    "speedup": 0.6676309022024179,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (- (* (+ (/ (pow (/ 0 (* a a)) a) (+ b 0)) (* (+ -1 b) c)) (+ (/ 0 1) 1)) (* (+ 0 (- 1 a)) (- c d))) (+ (pow (+ c 1) e) (+ b 1))) (* (+ (- (* c 0) e) (/ 0 b)) (/ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005132926)",
      "output_term": "(+ (+ (* c (+ b -1)) (+ (/ (pow 0 a) b) (* (- c d) (+ a -1)))) (+ b (pow (+ c 1) e)))",
      "output_weight_simple": 21,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.005351573
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007714865)",
      "output_term": "(- (+ (- (+ (/ (pow (/ 0 (* a a)) a) b) (* (+ -1 b) c)) (* (- 1 a) (- c d))) (+ (pow (+ c 1) e) (+ b 1))) (* (+ (- 0 e) (/ 0 b)) (/ -1 e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 61,
      "output_depth": 9,
      "simplification_time": 0.00784773
    },
    "speedup": 0.6819262385428652,
    "weight_simple_diff": -9,
    "weight_complex_diff": -23,
    "depth_diff": -3
  },
  {
    "base_term": "(+ (/ (+ (+ (- (- (/ (* a (pow a 1)) (* -1 0)) a) 0) (pow (* a (* b a)) (* 1 -1))) (* (+ (pow a 1) a) (+ -1 b))) (* (- (* 0 c) 0) (* a a))) (pow (+ (* 0 (/ 1 d)) (/ c 1)) (+ c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005345742)",
      "output_term": "(+ (/ (+ (/ (* a a) 0) (+ (/ 1 (* a (* a b))) (* a (+ (+ b b) -3)))) 0) (pow c (+ 1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 42,
      "output_depth": 8,
      "simplification_time": 0.005461388
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.00782991)",
      "output_term": "(+ (/ (+ (- (/ (* a a) 0) a) (+ (/ 1 (* b (* a a))) (* a (- (+ b b) 2)))) 0) (pow c (+ 1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.007957499
    },
    "speedup": 0.6863196589782795,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (+ (- (pow (- (/ 0 -1) (- (pow 1 -1) -1)) (- a (- 1 b))) (- a c)) (- (+ (* 1 d) a) (* e a))) (* (pow (pow (* b 0) 0) (/ -1 0)) (* e 0))) (- (pow (pow -1 (* 0 0)) (* 0 -1)) (+ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005071138)",
      "output_term": "(/ (+ (- (pow -2 (+ -1 (+ a b))) (- a c)) (- (+ a d) (* a e))) (- 1 (+ -1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.005305442
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007576044)",
      "output_term": "(/ (+ (- (pow -2 (- a (- 1 b))) (- a c)) (- (+ d a) (* a e))) (- 1 (+ -1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.007726232999999999
    },
    "speedup": 0.6866790064446672,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (/ (- (- (pow (+ (* (/ 1 a) a) (/ -1 -1)) (pow 0 1)) (pow 1 (- a 1))) (pow (* b -1) 0)) (- -1 (pow (- a a) 1))) (pow (+ (- 1 a) c) (- b d))) (/ (/ (- (pow 0 d) -1) (- 1 e)) (- 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005311249)",
      "output_term": "(pow (- (pow 1 (+ a -1)) (pow (+ (- 1 a) c) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 6,
      "simplification_time": 0.005309128
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.007519071)",
      "output_term": "(pow (- (/ (- 0 (pow 1 a)) -1) (pow (+ (- 1 a) c) (- b d))) (/ (+ (pow 0 d) 1) (* (- 1 e) (- 1 b))))",
      "output_weight_simple": 23,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.007698933999999999
    },
    "speedup": 0.6895926111329179,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (+ (pow (- (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) (- (- 0 c) 1)) (pow (- a 1) b)) (- (* (/ 0 -1) b) (/ 1 b))) (+ -1 (/ (/ a 0) c))) (/ (- (/ (+ a 0) 1) (pow b b)) (+ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005137212)",
      "output_term": "(+ (pow (+ 1 (+ (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) c)) (pow (+ a -1) b)) (+ 1 (+ (/ (- a (pow b b)) (+ 1 a)) (* -1 (+ (/ 1 b) (/ (/ a 0) c))))))",
      "output_weight_simple": 29,
      "output_weight_complex": 76,
      "output_depth": 9,
      "simplification_time": 0.005228864000000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007342021)",
      "output_term": "(+ (- (pow (+ (/ (- (/ 1 a) a) (* (pow a a) (pow 0 b))) (+ c 1)) (pow (- a 1) b)) (+ (/ 1 b) (+ -1 (/ (/ a 0) c)))) (/ (- a (pow b b)) (+ 1 a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.007469564
    },
    "speedup": 0.7000226519245301,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(- (/ (pow (/ (pow (pow (- (- (+ -1 0) a) (pow 1 a)) (* a a)) (pow (- 0 1) a)) (- (- 1 0) 0)) (+ 1 (/ a (/ b 0)))) (+ (pow (- a d) a) (* 0 1))) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005026788)",
      "output_term": "(+ (/ (pow (pow (pow (- (- -1 a) (pow 1 a)) (* a a)) (pow -1 a)) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (* (/ 1 (/ 0 0)) (+ d (+ c -2))))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 8,
      "simplification_time": 0.005064053
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007051019)",
      "output_term": "(- (/ (pow (pow (pow (- -1 (+ a (pow 1 a))) (* a a)) (pow -1 a)) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
      "output_weight_simple": 28,
      "output_weight_complex": 75,
      "output_depth": 9,
      "simplification_time": 0.007177187
    },
    "speedup": 0.7055762933305207,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (+ (* -1 (pow (pow (/ a (* (/ 0 b) a)) (pow 1 c)) (/ (* -1 a) 0))) (/ (pow (+ b d) 1) (pow b 0))) (pow (- (* d (+ b -1)) (+ 1 -1)) (/ c 1))) (- (pow (pow (+ e 0) d) (/ 0 b)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005200329)",
      "output_term": "(+ (+ b (+ d (* -1 (+ (pow (pow (/ a 0) (pow 1 c)) (/ (* -1 a) 0)) (pow (* d (+ -1 b)) c))))) (- 1 (/ b a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.005234157
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007182836)",
      "output_term": "(+ (- (+ (- 0 (pow (pow (/ 1 (/ 0 b)) (pow 1 c)) (/ (- 0 a) 0))) (+ b d)) (pow (* d (+ b -1)) c)) (- (pow (pow e d) (/ 0 b)) (/ b a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.007309807
    },
    "speedup": 0.716045854562234,
    "weight_simple_diff": -4,
    "weight_complex_diff": -13,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (/ (pow (pow (/ (/ (/ (pow a 1) b) (/ 0 b)) (+ c c)) (/ -1 (+ -1 b))) (/ 0 (pow e c))) (+ 0 (/ d (pow e 1)))) (+ (- (+ b e) d) (* 1 e))) (/ (* (pow 1 (pow c -1)) (pow c 0)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ 1 (/ d e)) (+ e (- (+ b e) d))) (/ (pow 1 (pow c -1)) (* a -1)))",
      "output_weight_simple": 18,
      "output_weight_complex": 45,
      "output_depth": 6,
      "simplification_time": 0.0036464270000000003
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005027724)",
      "output_term": "(pow (- (/ (pow (pow (/ a 0) (/ -1 (+ -1 b))) (/ 0 (pow e c))) (/ d e)) (+ (- (+ b e) d) e)) (/ -1 (/ a (pow 1 (/ 1 c)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 78,
      "output_depth": 8,
      "simplification_time": 0.005059428
    },
    "speedup": 0.720719219643011,
    "weight_simple_diff": -8,
    "weight_complex_diff": -33,
    "depth_diff": -2
  },
  {
    "base_term": "(- (pow (- (- (* (pow (pow (* (/ -1 a) a) -1) (pow 1 -1)) (* (pow 1 a) a)) (- (pow 1 0) 0)) (- (/ (+ b -1) 0) (/ a -1))) (/ (+ b (* 1 a)) (- 0 d))) (pow (/ (pow (/ 1 1) -1) (+ a 0)) (/ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ -1 (* -1 (+ (/ (+ -1 b) 0) (* a (+ 1 (pow 1 a)))))) (/ (+ a b) (- 0 d))) (pow (/ 1 a) (/ b 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.0036375599999999998
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005002253)",
      "output_term": "(- (pow (- -1 (+ (* a (pow 1 a)) (+ (/ (+ b -1) 0) a))) (/ (+ b a) (- 0 d))) (pow (/ 1 a) (/ b 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.005015539
    },
    "speedup": 0.7252580430537973,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (/ (- (pow (* (* (/ (pow 0 -1) 1) (- a 0)) (- -1 b)) (pow (+ c 1) -1)) (pow (- -1 -1) c)) (+ (* (+ 1 b) c) (* a -1))) (/ (- (+ a 1) 0) (/ a e))) (+ (* (- (+ -1 d) a) d) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (- (pow (* (pow 0 -1) (* a (- -1 b))) (/ 1 (+ 1 c))) (pow 0 c)) (+ c (+ (* -1 a) (* b c)))) (/ (+ 1 a) (/ a e))) (* d (- (+ -1 d) a)))",
      "output_weight_simple": 30,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.004268238
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005690143)",
      "output_term": "(pow (+ (/ (- (pow (* (pow 0 -1) (* a (- -1 b))) (/ 1 (+ c 1))) (pow 0 c)) (- (* c (+ 1 b)) a)) (/ (+ 1 a) (/ a e))) (* d (- d (+ 1 a))))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.005757600999999999
    },
    "speedup": 0.7413222972554021,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (+ (- a (+ (+ (/ a a) 1) (/ a 1))) (- (pow a -1) b)) (/ (* b b) 0)) (- (+ (/ -1 1) 1) (+ 0 1))) (- (- (pow 0 a) 1) (- d d))) (- (+ (/ -1 (- 0 d)) (/ 1 a)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005109833)",
      "output_term": "(pow (+ (+ (- (/ 1 a) b) (/ (* b b) 0)) (* -1 (pow 0 a))) (+ (/ 1 a) (/ -1 (- 0 d))))",
      "output_weight_simple": 18,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.005593304
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.007326099)",
      "output_term": "(pow (- (+ -2 (+ (- (/ 1 a) b) (/ (* b b) 0))) (- (pow 0 a) 2)) (+ (/ -1 (- 0 d)) (/ 1 a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 43,
      "output_depth": 7,
      "simplification_time": 0.007453817
    },
    "speedup": 0.7503945964866056,
    "weight_simple_diff": -3,
    "weight_complex_diff": -2,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (/ (- (+ (* a (- -1 (* (+ 1 b) 1))) (pow (+ a b) b)) (/ (* -1 a) 0)) (pow (* b a) (* c 0))) (- (/ (/ (pow a c) 1) (* -1 -1)) (+ a c))) (- (+ (* -1 (/ c 1)) (/ -1 b)) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ c (+ (pow (+ (pow (+ a b) b) (* -1 (+ (/ (* a -1) 0) (* a (+ b 2))))) (- (pow a c) (+ a c))) (+ (/ 1 a) (/ 1 b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.003791722
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005000685)",
      "output_term": "(- (pow (- (+ (* a (- -2 b)) (pow (+ a b) b)) (/ (- 0 a) 0)) (- (pow a c) (+ a c))) (- (+ (- 0 c) (/ -1 b)) (/ 1 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.005015791
    },
    "speedup": 0.7559569368021912,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (/ (pow (* (+ (pow (+ (* -1 (- 0 a)) (* a b)) (- 1 b)) (+ 1 (* -1 1))) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ (* 0 (* a 0)) (+ 0 b))) (pow (+ (+ (pow a d) e) (+ e d)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (* (pow (+ a (* a b)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) 0) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.003807159
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005003766)",
      "output_term": "(pow (/ (pow (* (pow (* a (+ b 1)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ 0 b)) (pow (+ (pow a d) (+ e (+ e d))) (+ e 1)))",
      "output_weight_simple": 27,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.005034983
    },
    "speedup": 0.7561413812122106,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (pow (* (- (pow (+ (pow 0 1) a) (pow 1 a)) (- 0 a)) (* (pow 1 0) 1)) (* (- -1 -1) 0)) (/ (+ (+ a -1) -1) (+ a 1))) (+ (/ (pow a a) b) 0)) (+ (+ (* (pow b 0) 1) (/ c 0)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005975736)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.006396888
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.008264475)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ a 1))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.008401797999999999
    },
    "speedup": 0.7613713159968856,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (pow (* (- (+ 1 (+ (pow (pow a b) 1) (* 0 0))) (* (- 0 0) a)) (/ 0 (/ a 1))) (+ (* 1 (+ c 1)) (pow -1 b))) (- (+ (* 0 1) -1) (pow c 1))) (* (- (pow (* 1 e) e) (/ a b)) (+ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (pow 0 (+ 1 (+ c (pow -1 b)))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 19,
      "output_weight_complex": 43,
      "output_depth": 7,
      "simplification_time": 0.0043357
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005002154)",
      "output_term": "(pow (pow (pow (* (+ 1 (pow a b)) (/ 0 a)) (+ (pow -1 b) (+ 1 c))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ e a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.005022787
    },
    "speedup": 0.8632060248622925,
    "weight_simple_diff": -4,
    "weight_complex_diff": -12,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (* (/ (/ (* (- (* a a) c) (* -1 1)) (- -1 c)) (+ (/ b 1) e)) (pow (- b c) b)) (* (- (+ -1 e) 0) (- b -1))) (* (- (- c a) -1) (pow -1 1))) (+ (/ 1 (+ (* -1 b) b)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005019525)",
      "output_term": "(+ (* (+ (* (/ (/ (+ c (* a (* a -1))) (- -1 c)) (+ b e)) (pow (- b c) b)) (* (+ -1 e) (+ 1 b))) (+ a (- -1 c))) (/ 1 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 49,
      "output_depth": 10,
      "simplification_time": 0.005216723
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005778363)",
      "output_term": "(+ (* (+ (* (/ (- (* a a) c) (* (- -1 c) (/ (+ b e) -1))) (pow (- b c) b)) (* (- e 1) (+ b 1))) (- -1 (- c a))) (/ 1 0))",
      "output_weight_simple": 26,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.005942538000000001
    },
    "speedup": 0.877861109175911,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (pow (pow (pow a (+ (* 1 (/ b b)) (+ (+ a -1) a))) (/ (- (- c 0) c) (- 0 0))) (/ (* (+ -1 0) 0) (+ b 0))) (pow (pow (- 1 d) a) (+ a e))) (* (+ (+ (+ b 0) c) (- 0 0)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005053499)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.005172625
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005402831)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.005833110000000001
    },
    "speedup": 0.8867696648957416,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (pow (- (pow 1 (pow -1 a)) (+ (- (+ (* a 1) 0) (* b c)) (* -1 c))) (pow (- (/ b d) 1) (/ c 1))) (/ (* (pow (/ -1 e) b) (* 1 1)) (- b 1))) (+ (pow (* (* -1 d) e) (* b e)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 9,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (pow (+ (pow 1 (pow -1 a)) (+ (* -1 a) (+ c (* b c)))) (pow (+ -1 (/ b d)) c)) (/ (pow (/ -1 e) b) (+ -1 b))) (+ -1 (pow (* -1 (* d e)) (* b e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 8,
      "simplification_time": 0.004488008999999999
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005015842)",
      "output_term": "(+ (* (pow (- (pow 1 (pow -1 a)) (- a (+ (* b c) c))) (pow (- (/ b d) 1) c)) (/ (- b 1) (pow (/ -1 e) b))) (+ (pow (- 0 (* d e)) (* b e)) -1))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.005054668
    },
    "speedup": 0.8878939230034494,
    "weight_simple_diff": 0,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (/ (+ (pow a (* (- a (* (- -1 a) 0)) (+ 1 0))) (+ (pow (* a -1) a) (pow 1 1))) (pow (* 0 (* b b)) (* a c))) (- (pow (/ -1 -1) 0) (pow 0 e))) (+ (pow (- (- b 0) -1) (+ -1 a)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00500264)",
      "output_term": "(* (/ (/ (+ (pow (* a -1) a) (+ 1 (pow a a))) (pow 0 (* a c))) (- 1 (pow 0 e))) (+ (pow (+ 1 b) (+ a -1)) (* a b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.005064034
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005501272)",
      "output_term": "(* (/ (+ (pow a a) (+ (pow (- 0 a) a) 1)) (* (pow 0 (* a c)) (- 1 (pow 0 e)))) (+ (pow (+ b 1) (+ a -1)) (* a b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 51,
      "output_depth": 7,
      "simplification_time": 0.005616988999999999
    },
    "speedup": 0.901556688111727,
    "weight_simple_diff": 0,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (+ (+ (- (* (* (+ a b) c) (/ 0 b)) b) a) (/ (pow (* 1 -1) b) (- 1 e))) (- (* (+ b e) a) (+ d a))) (/ (+ (pow 0 -1) 0) (* b 1))) (/ (+ (+ c (+ e c)) (* d 1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00502579)",
      "output_term": "(/ (pow (* (+ a (+ (/ (pow -1 b) (- 1 e)) (- 0 b))) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (+ d (+ c (+ c e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.005105496
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005518431)",
      "output_term": "(/ (pow (* (+ (+ (- 0 b) a) (/ (pow -1 b) (- 1 e))) (- (* a (+ b e)) (+ d a))) (/ (pow 0 -1) b)) (+ c (+ e (+ c d))))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.0055813519999999995
    },
    "speedup": 0.9147418044946817,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (* (- (/ (pow (+ (- (/ 1 a) 0) (* 1 0)) (- a 0)) (+ (* 0 a) a)) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow (* b 0) -1) (+ e d))) (* (pow e (+ (+ 0 a) 0)) (- 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (* (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.004828652
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005223459)",
      "output_term": "(/ (- (* (- (pow (/ 1 a) (+ 1 a)) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ e d))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 67,
      "output_depth": 7,
      "simplification_time": 0.005259924000000001
    },
    "speedup": 0.9180079407991445,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (* (- (/ (+ (pow 1 (* a (pow a 0))) (* -1 -1)) (- (* a 0) a)) (- (/ 1 a) 0)) (* (pow (- b d) d) (* 0 1))) (- (/ b (pow 0 0)) (* 1 1))) (- (* (+ (+ e 1) a) (+ 0 a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (pow 0 (+ -1 (/ b (pow 0 0)))) (- (+ a (* a (+ a e))) (pow -1 e)))",
      "output_weight_simple": 15,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.004860353
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005164386)",
      "output_term": "(- (pow 0 (- (/ b (pow 0 0)) 1)) (- (* a (+ e (+ 1 a))) (pow -1 e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.005188114
    },
    "speedup": 0.9368246341541455,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (- (* (* a (pow (/ (- 0 a) 1) (pow a a))) (- (/ 1 -1) b)) (+ -1 (+ 0 b))) (* (pow (* c c) b) (* -1 -1))) (pow (/ (* 1 c) a) (+ 0 d))) (- (/ (/ (* 1 -1) -1) (- 1 e)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005038302)",
      "output_term": "(/ (- (/ (- (* (pow (- 0 a) (pow a a)) (* a (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.00528325
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005528167)",
      "output_term": "(/ (- (/ (- (* a (* (pow (- 0 a) (pow a a)) (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.005593334
    },
    "speedup": 0.9445618659640207,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (* (/ (/ (+ (* (pow (+ 0 0) a) (- -1 b)) a) a) (/ (/ (* 1 c) -1) (/ 1 1))) (pow (* a (- a c)) (* 1 0))) (* (/ (* a e) e) (- c c))) (/ (+ (+ (/ b 1) c) (/ -1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005012983)",
      "output_term": "(* -1 (+ b c))",
      "output_weight_simple": 5,
      "output_weight_complex": 8,
      "output_depth": 3,
      "simplification_time": 0.005010571
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005099561)",
      "output_term": "(- 0 (+ b c))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.005166607
    },
    "speedup": 0.9697991350996892,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (- (- (* 1 (+ (/ 1 (pow (+ a 1) b)) -1)) (/ (- (+ a a) d) 0)) (pow (+ (+ -1 e) -1) (* 1 e))) (/ (- (+ (pow -1 c) -1) (- 0 d)) (- e c))) (/ (* (pow (* -1 1) e) (- c a)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005049856)",
      "output_term": "(pow (+ (- (- (+ (/ 1 (pow (+ 1 a) b)) -1) (/ (- (+ a a) d) 0)) (pow (+ e -2) e)) (/ (+ (pow -1 c) (+ -1 d)) (- e c))) (/ (* (pow -1 e) (- c a)) (- c d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.005048529
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005163391)",
      "output_term": "(pow (+ (- (/ 1 (pow (+ a 1) b)) (+ 1 (+ (/ (- (+ a a) d) 0) (pow (+ e -2) e)))) (/ (+ (pow -1 c) (+ -1 d)) (- e c))) (/ (pow -1 e) (/ (- c d) (- c a))))",
      "output_weight_simple": 32,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.005197813999999999
    },
    "speedup": 0.9712792724018214,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (- (+ (/ (/ (pow (/ (- 1 1) -1) 0) -1) (* a a)) (pow (- b (- a 1)) (- b a))) (/ (+ (/ e 0) -1) (+ 0 d))) (+ (+ (- a 0) -1) (- 0 -1))) (- (pow (pow (pow e 0) 1) (* -1 1)) (pow b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005200128)",
      "output_term": "(* (pow (- (+ (/ (* -1 (pow 0 0)) (* a a)) (pow (+ 1 (- b a)) (- b a))) (/ (+ -1 (/ e 0)) d)) a) (- 1 (pow b c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.005403646
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.00525716)",
      "output_term": "(* (pow (- (+ (/ (pow 0 0) (* a (- 0 a))) (pow (- b (+ -1 a)) (- b a))) (/ (+ (/ e 0) -1) d)) a) (- 1 (pow b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.005517638
    },
    "speedup": 0.9793404351644671,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (/ (* (- (/ a (+ (pow (- a b) -1) (pow 0 1))) (pow (pow a b) 1)) (+ (/ 1 0) b)) (/ (- (* 0 1) b) (pow b d))) (+ (- 0 (* b -1)) (/ 0 d))) (pow (- (/ (+ 0 e) 1) (* d 0)) (- e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005246138)",
      "output_term": "(+ (pow e e) (* b (/ (* (- (/ a (/ 1 (- a b))) (pow a b)) (+ b (/ 1 0))) (/ (- 0 b) (pow b d)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.005245087000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005153889)",
      "output_term": "(+ (* (+ (/ 1 0) b) (/ (- (* a (- a b)) (pow a b)) (* (/ b (pow b d)) (/ -1 (+ b (/ 0 d)))))) (pow e e))",
      "output_weight_simple": 23,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.005341336
    },
    "speedup": 0.9819803509833496,
    "weight_simple_diff": -2,
    "weight_complex_diff": -3,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (* (/ -1 (/ (/ (* (/ a (/ b -1)) (- a c)) d) (+ 0 (pow b a)))) (- (pow (pow 0 d) 0) (- a 0))) (/ (- (+ b (- a e)) (pow 1 -1)) (pow 1 0))) (pow (/ (/ (+ -1 0) 1) (pow -1 0)) (/ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 134,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005401748)",
      "output_term": "(/ (+ -1 (+ (* (/ 1 (/ (/ (* (/ a (* -1 b)) (- a c)) d) (pow b a))) (+ -1 a)) (+ b (- a e)))) (pow -1 (/ e a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 11,
      "simplification_time": 0.005400703
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005102276)",
      "output_term": "(/ (+ (* d (* (pow b a) (* (- 1 a) (/ b (* a (- a c)))))) (- (- (+ b a) e) 1)) (pow -1 (/ e a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 9,
      "simplification_time": 0.0054996409999999996
    },
    "speedup": 0.982010098477337,
    "weight_simple_diff": 2,
    "weight_complex_diff": 13,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (pow (- (- (+ (pow a a) (+ (pow b (- 1 c)) (/ 0 -1))) (- (- (* 1 0) -1) (/ b a))) (- (pow (* 0 1) 0) (pow 0 e))) (/ (/ a (* a 1)) (/ 1 1))) (* (/ (* (/ e c) -1) (+ e e)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005099757)",
      "output_term": "(pow (- (+ (pow a a) (+ -1 (+ (pow b (- 1 c)) (/ b a)))) (- (pow 0 0) (pow 0 e))) (* -1 (* e (/ 1 (+ e e)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.005249217
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00513176)",
      "output_term": "(pow (- (+ (pow a a) (pow b (- 1 c))) (+ (- 1 (/ b a)) (- (pow 0 0) (pow 0 e)))) (/ c (/ c -0.5)))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 6,
      "simplification_time": 0.005335018
    },
    "speedup": 0.9839173925936143,
    "weight_simple_diff": 2,
    "weight_complex_diff": 0,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (/ (- (+ (pow (pow (+ (- 1 (* 1 1)) (/ 0 1)) (pow -1 a)) (+ (- a a) 0)) (* (+ a 0) 1)) (* (- (/ 0 0) a) (/ c 1))) (/ 1 (* (/ d 0) d))) (+ (+ (/ (- c 0) 1) (/ -1 e)) (+ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005112375)",
      "output_term": "(+ a (+ (/ (- (+ 1 a) (* (- (/ 0 0) a) c)) (/ 1 (* d (/ d 0)))) (+ c (+ a (/ -1 e)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.0052119129999999994
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005207223)",
      "output_term": "(+ (* (- a (- (* (- (/ 0 0) a) c) 1)) (* d (/ d 0))) (+ c (+ (/ -1 e) (+ a a))))",
      "output_weight_simple": 20,
      "output_weight_complex": 39,
      "output_depth": 8,
      "simplification_time": 0.005296713999999999
    },
    "speedup": 0.9839898850494855,
    "weight_simple_diff": 1,
    "weight_complex_diff": 8,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (pow (- (pow (pow (pow (/ (/ 1 a) a) (* -1 -1)) (/ -1 a)) (pow (pow a -1) 1)) (- (* b 0) a)) (+ c (+ (- a d) d))) (* (+ (pow 1 1) e) (/ 1 b))) (- (* (* (* 1 -1) b) (pow 0 a)) (+ e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005000774)",
      "output_term": "(+ (pow (+ a (pow (pow (pow a -2) (/ -1 a)) (/ 1 a))) (+ a c)) (* -1 (+ b (+ (+ e (* (+ 1 e) (/ 1 b))) (* b (pow 0 a))))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.005094741
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005099233)",
      "output_term": "(- (pow (+ (pow (pow (pow a -2) (/ -1 a)) (/ 1 a)) a) (+ c a)) (+ (/ (+ 1 e) b) (+ (* b (pow 0 a)) (+ e b))))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.005174908000000001
    },
    "speedup": 0.9845085168663866,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (+ (- (/ 0 (+ (- (pow (- -1 0) -1) (* a a)) -1)) (pow (- (/ a -1) 0) (/ a 0))) (* (+ (+ 0 b) a) (* 0 e))) (/ (+ (* 1 a) 1) (pow 1 e))) (* (* (pow (- 0 1) 1) (pow d -1)) (- d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.00500546)",
      "output_term": "(* -1 (+ (/ (+ a 1) (pow 1 e)) (+ -1 (+ (pow (* -1 a) (/ a 0)) (* e (/ 1 d))))))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.005038997
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005084415)",
      "output_term": "(- (/ 0 (- -1 (+ (* a a) 1))) (- (+ (pow (/ a -1) (/ a 0)) (/ (+ a 1) (pow 1 e))) (/ (- d e) d)))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.005114654
    },
    "speedup": 0.9852077970474641,
    "weight_simple_diff": -3,
    "weight_complex_diff": -9,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (pow (- (/ (- (* (pow (/ a a) 0) (/ 0 b)) (- a b)) (* (pow 1 c) a)) (* (+ 0 a) 1)) (pow d (* (* a d) a))) (/ (/ (- e c) 0) (+ -1 c))) (- (+ (/ (- 0 d) 0) (pow e a)) (* a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.005003526)",
      "output_term": "(+ (pow (- (/ (+ b (* a -1)) (* a (pow 1 c))) a) (pow d (* d (* a a)))) (+ (/ (/ (- e c) 0) (+ c -1)) (- (+ (/ (* d -1) 0) (pow e a)) (* a c))))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 7,
      "simplification_time": 0.0050002350000000004
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005008844)",
      "output_term": "(- (+ (+ (pow (- (/ (- (/ 0 b) (- a b)) (* a (pow 1 c))) a) (pow d (* a (* a d)))) (/ (/ (- e c) 0) (+ -1 c))) (+ (/ (- 0 d) 0) (pow e a))) (* a c))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.005066407
    },
    "speedup": 0.9869390674693131,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": -2
  },
  {
    "base_term": "(+ (pow (- (* (pow (* (- (/ (* a 0) b) (pow 1 c)) (+ b b)) (/ (+ d e) d)) (- (- a 1) 1)) (/ (+ (pow d -1) b) (/ a a))) (* b (pow e (* e e)))) (* (+ (pow (+ 0 0) e) (/ a e)) (- d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005028806)",
      "output_term": "(+ (pow (- (* (pow (* b (* (pow 1 c) -2)) (/ (+ d e) d)) (+ a -2)) (+ b (/ 1 d))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.005058339
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005015446)",
      "output_term": "(+ (pow (- (* (pow (* b (* (- (/ 0 b) (pow 1 c)) 2)) (/ (+ d e) d)) (- a 2)) (+ (/ 1 d) b)) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 73,
      "output_depth": 10,
      "simplification_time": 0.005112598
    },
    "speedup": 0.9893871960987349,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (+ (/ (- (/ (pow (- (+ 0 a) -1) (/ a -1)) (pow b 1)) (- (* a a) c)) (* a (* b 1))) (pow (+ (+ 0 b) d) (pow -1 -1))) (* (+ (pow -1 1) -1) (* c d))) (pow (* (* 0 1) a) (pow (/ d c) a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005039719)",
      "output_term": "(pow (+ (/ (- (/ (pow (+ a 1) (* a -1)) b) (- (* a a) c)) (* a b)) (+ (/ 1 (+ b d)) (* c (* d 2)))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.005067228000000001
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005062558)",
      "output_term": "(pow (- (+ (/ (- (/ (pow (+ a 1) (/ a -1)) b) (- (* a a) c)) (* a b)) (/ 1 (+ b d))) (* d (* c -2))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.005117248
    },
    "speedup": 0.9902252148029569,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (- (- (- (- (* (* (/ a a) b) (pow a 0)) (/ 1 b)) (pow (/ d b) c)) (+ (/ a a) 1)) (- (pow c (pow 0 1)) (/ -1 a))) (/ (pow (- -1 -1) 0) e)) (- (- (pow -1 (+ b 0)) (/ e 1)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005266344)",
      "output_term": "(+ (pow (+ (- (- b (/ 1 b)) (pow (/ d b) c)) (+ (/ -1 a) -3)) (/ (pow 0 0) e)) (+ a (- (pow -1 b) e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.0053152849999999995
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005218428)",
      "output_term": "(+ (pow (- b (+ (+ (/ 1 b) (pow (/ d b) c)) (- 3 (/ -1 a)))) (/ (pow 0 0) e)) (- (pow -1 b) (- e a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.005362539
    },
    "speedup": 0.991188129354397,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(- (+ (- (- (* a (+ (/ (+ (pow -1 -1) 1) (+ a 0)) 1)) (/ (+ 0 (/ -1 1)) (/ b b))) (+ (* 1 (pow b c)) (pow b 0))) (pow (* (* -1 -1) -1) (- b c))) (+ (+ (* (+ -1 a) a) (* a c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005015483)",
      "output_term": "(+ (pow -1 (- b c)) (+ a (* -1 (+ (+ -1 (+ (* a (+ c (+ a -1))) d)) (pow b c)))))",
      "output_weight_simple": 17,
      "output_weight_complex": 29,
      "output_depth": 10,
      "simplification_time": 0.005110153
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005117148)",
      "output_term": "(- (+ (- (* a (+ (/ 0 a) 1)) (pow b c)) (pow -1 (- b c))) (+ (* a (+ (- a 1) c)) (- d 1)))",
      "output_weight_simple": 21,
      "output_weight_complex": 37,
      "output_depth": 7,
      "simplification_time": 0.005145729
    },
    "speedup": 0.9930863051668676,
    "weight_simple_diff": -4,
    "weight_complex_diff": -8,
    "depth_diff": 3
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (* (+ (+ -1 a) 1) (+ (- a b) a)) (/ (* d d) b)) (* (+ 0 c) 1)) (+ (+ 1 (pow -1 b)) (+ -1 1))) (pow (+ (- c 1) b) (* 0 e))) (- (* (+ 1 (pow e a)) (pow c 0)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005029664)",
      "output_term": "(/ (+ (pow (pow (* a (+ a (- a b))) (/ (* d d) b)) c) (+ 1 (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.005317571
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005219861)",
      "output_term": "(/ (+ (pow (pow (* a (+ (- a b) a)) (/ d (/ b d))) c) (+ 1 (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.005350985
    },
    "speedup": 0.993755542203912,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (- (pow (* (* a (- b (pow (/ 1 a) -1))) (- (* -1 -1) -1)) (pow (* c b) 0)) (pow (- (/ a 0) -1) b)) (+ (* (* (* a d) b) (* e e)) (pow 0 e))) (- (- (* (+ -1 0) -1) (* 1 0)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005068216)",
      "output_term": "(/ (+ (- (* a (* (- b (/ 1 (/ 1 a))) 2)) (pow (+ 1 (/ a 0)) b)) (+ (* a (* b (* d (* e e)))) (pow 0 e))) (* -1 e))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.005125174
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005057617)",
      "output_term": "(/ (+ (- (* a (* (- b a) 2)) (pow (+ (/ a 0) 1) b)) (+ (* a (* b (* e (* d e)))) (pow 0 e))) (- 0 e))",
      "output_weight_simple": 23,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.005149577
    },
    "speedup": 0.9952611641694065,
    "weight_simple_diff": 3,
    "weight_complex_diff": 12,
    "depth_diff": 1
  },
  {
    "base_term": "(- (/ (- (pow (- (/ (/ (/ (- 1 1) 0) (- -1 a)) (+ -1 a)) (* (- 0 c) a)) (+ (/ d c) 1)) (pow (pow -1 (- d d)) (+ e e))) (- (/ 1 (* 1 c)) d)) (- (* (- (- 1 e) 0) (pow 1 e)) (+ e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005013187)",
      "output_term": "(+ e (+ (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (+ -1 a)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (* (pow 1 e) (+ -1 e))))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.005026846000000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005009446)",
      "output_term": "(- (/ (- (pow (+ (/ (/ 0 0) (* (- -1 a) (+ -1 a))) (* a c)) (+ 1 (/ d c))) (pow (pow 1 e) 2)) (- (/ 1 c) d)) (- (* (- 1 e) (pow 1 e)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.005029464
    },
    "speedup": 0.9994794673945376,
    "weight_simple_diff": 0,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (* (pow (/ (- (+ (* (* a 1) b) (/ b -1)) (/ -1 b)) (/ (* c -1) 0)) (/ -1 (- 1 b))) (- 0 (pow (+ 1 0) d))) (pow (* (/ 0 1) c) (pow 1 1))) (/ (* (- (+ 1 0) 1) (pow 0 e)) (/ d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.005000333)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.005023431
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005002623)",
      "output_term": "(- 1 (/ 0 (/ d b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 17,
      "output_depth": 4,
      "simplification_time": 0.005021473
    },
    "speedup": 1.0003899254262643,
    "weight_simple_diff": -6,
    "weight_complex_diff": -16,
    "depth_diff": -3
  },
  {
    "base_term": "(+ (pow (* (+ (* (* (* a (+ (/ a a) 0)) (pow b b)) (/ a (+ a a))) (pow 0 1)) (- b (* 1 (/ c b)))) (* (/ (/ (+ -1 a) c) (+ -1 -1)) (* 1 a))) (pow (- (/ (/ 0 -1) -1) (/ d e)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005126625)",
      "output_term": "(+ (pow (* a (* (- b (/ c b)) (* (pow b b) (/ a (+ a a))))) (* (/ (+ a -1) c) (* a -0.5))) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 61,
      "output_depth": 8,
      "simplification_time": 0.005219420999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005088885)",
      "output_term": "(+ (pow (* a (* (- b (/ c b)) (* (pow b b) 0.5))) (/ (+ -1 a) (/ c (/ a -2)))) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.005199942000000001
    },
    "speedup": 1.0037460033208059,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (+ (* (/ (pow (* a (* (- 1 b) -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (- (* (- 0 e) 1) (/ d e))) (+ (pow (pow 1 b) 1) (/ 1 c))) (pow (* (+ (- 1 c) a) (/ a -1)) (pow c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005007864)",
      "output_term": "(pow (+ (* (/ (pow (* a (+ b -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (* -1 (+ e (+ (/ d e) (+ (pow 1 b) (/ 1 c)))))) (pow (* a (+ c (* -1 (+ a 1)))) (pow c e)))",
      "output_weight_simple": 33,
      "output_weight_complex": 84,
      "output_depth": 8,
      "simplification_time": 0.005045355
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005001691)",
      "output_term": "(pow (- (/ (pow (* a (- b 1)) (/ 1 0)) (/ (pow (pow c a) b) (pow b (* d e)))) (+ e (+ (/ d e) (+ (pow 1 b) (/ 1 c))))) (pow (* (+ (- 1 c) a) (/ a -1)) (pow c e)))",
      "output_weight_simple": 32,
      "output_weight_complex": 88,
      "output_depth": 7,
      "simplification_time": 0.005017394
    },
    "speedup": 1.005572813297102,
    "weight_simple_diff": 1,
    "weight_complex_diff": -4,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (- (/ (* (+ (pow (/ a (- -1 1)) (pow -1 0)) (+ -1 a)) (pow -1 (pow b 1))) (- (* b 0) a)) (- (* a (pow -1 b)) (* b 1))) (pow (pow (/ c c) c) (pow -1 -1))) (+ (/ (- (- -1 -1) -1) (* 0 d)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005052022)",
      "output_term": "(/ (* (- (/ (* (+ -1 (* a 0.5)) (pow -1 b)) (- 0 a)) (- (* a (pow -1 b)) b)) (/ 1 (pow 1 c))) (/ 1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.005050901
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005000975)",
      "output_term": "(/ (- (/ (+ (/ a -2) (+ -1 a)) (/ (- 0 a) (pow -1 b))) (- (* a (pow -1 b)) b)) (* (pow 1 c) (/ 1 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 6,
      "simplification_time": 0.005022224
    },
    "speedup": 1.0057100201026479,
    "weight_simple_diff": 0,
    "weight_complex_diff": -2,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (/ (* (- (pow (pow (pow (/ (pow 1 a) 0) (- 0 1)) 0) 1) (- (pow 0 (* 1 b)) (* b -1))) (/ (- (pow 0 1) a) (/ b c))) (pow (/ (/ a a) d) (pow 0 0))) (pow (+ (/ (+ d 1) 1) (pow 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005028526)",
      "output_term": "(+ (/ (* a (* (/ 1 (/ b c)) (+ b (+ -1 (pow 0 b))))) (pow (/ 1 d) (pow 0 0))) (pow (+ 1 (+ d (pow 0 d))) (pow -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.005136464
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005003426)",
      "output_term": "(+ (* (- 1 (+ (pow 0 b) b)) (/ (- 0 a) (/ (pow (/ 1 d) (pow 0 0)) (/ c b)))) (pow (+ d (+ 1 (pow 0 d))) (pow -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.0050971309999999995
    },
    "speedup": 1.0077166939597983,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (/ (* (/ (- (- (- (* 0 a) a) (pow a -1)) (+ 0 -1)) (* (pow 1 a) 0)) (/ a (- -1 c))) (* (/ (pow d b) c) 1)) (/ (pow -1 (/ e 1)) (pow -1 e))) (- (+ (pow 1 (+ 1 a)) (+ d -1)) (* -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00517065)",
      "output_term": "(+ (/ (* (/ (+ (- (- 0 a) (/ 1 a)) 1) 0) (/ a (- -1 c))) (/ (pow d b) c)) (+ d (pow 1 (+ a 1))))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.005277329
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005096094)",
      "output_term": "(+ (* a (/ (/ c (pow d b)) (/ (- -1 c) (/ (- 1 (+ a (/ 1 a))) 0)))) (+ (pow 1 a) d))",
      "output_weight_simple": 20,
      "output_weight_complex": 51,
      "output_depth": 9,
      "simplification_time": 0.005236111
    },
    "speedup": 1.0078718728460876,
    "weight_simple_diff": 2,
    "weight_complex_diff": 2,
    "depth_diff": -1
  },
  {
    "base_term": "(- (- (+ (* (- (/ (* (pow (+ a -1) a) (- b 1)) 1) (pow (/ 0 a) b)) -1) (* (- (+ 1 1) a) (+ 0 0))) (pow (pow (- (- -1 1) a) (/ c 0)) (* 0 1))) (/ (* (* (+ 0 c) b) (pow 0 a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.0050215)",
      "output_term": "(- (+ -1 (+ (pow 0 b) (* (pow (+ a -1) a) (+ 1 (* -1 b))))) (/ (* b (* c (pow 0 a))) (/ 1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.005064062
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005002666)",
      "output_term": "(- -1 (+ (- (* (pow (- a 1) a) (- b 1)) (pow (/ 0 a) b)) (* c (* (pow 0 a) (* b b)))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.00501683
    },
    "speedup": 1.009414710085851,
    "weight_simple_diff": 1,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (- (/ (pow a (+ 0 (- (+ -1 a) 1))) 0) (- (+ (* 0 0) b) b)) (+ (pow 0 (* a 1)) (/ a b))) (- (pow (pow (pow 1 1) b) (pow 0 d)) (- a e))) (+ (* (pow (- e 1) -1) (- e 1)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005104502)",
      "output_term": "(/ (- (+ (/ (pow a (+ a -2)) 0) (+ (pow 0 a) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) 0)",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.005103468
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005021448)",
      "output_term": "(/ (- (+ (/ (pow a (- a 2)) 0) (+ (pow 0 a) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) 0)",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.005048604
    },
    "speedup": 1.0108671624868975,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (- (/ (+ (/ (/ -1 a) a) (* a -1)) (/ a a)) (* (+ 1 1) b)) (- b (pow -1 a))) (/ (+ (pow 0 c) -1) (+ b d))) (* (pow (- 1 e) 0) (/ -1 -1))) (- 0 (pow (/ d (pow d 0)) (* 0 c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005099461)",
      "output_term": "(/ 1 (+ (* -1 (+ (+ a (pow a -2)) b)) (+ -1 (* -1 (+ (pow -1 a) (/ (+ -1 (pow 0 c)) (+ b d)))))))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 9,
      "simplification_time": 0.0052358000000000005
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005068145)",
      "output_term": "(/ 1 (- (- (+ (- (/ -1 (* a a)) (+ a (* 2 b))) b) (pow -1 a)) (+ (/ (+ (pow 0 c) -1) (+ b d)) 1)))",
      "output_weight_simple": 23,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.005175639
    },
    "speedup": 1.0116238787133338,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (+ (- (pow (+ (* (* -1 (* a a)) (/ b -1)) (pow b 0)) (+ (/ 0 -1) 1)) (pow (/ a a) d)) (+ (* (- 0 1) 0) (+ -1 1))) (+ (pow b (+ 0 1)) (/ d 1))) (+ (- (/ 1 (* -1 -1)) (* 0 1)) d))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005035633)",
      "output_term": "(/ (* (- (+ (* a (* a b)) 1) (pow 1 d)) (+ b d)) (+ 1 d))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 7,
      "simplification_time": 0.005143801999999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005020395)",
      "output_term": "(/ (- (* a (* a b)) (- (pow 1 d) 1)) (/ (+ 1 d) (+ b d)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 5,
      "simplification_time": 0.005075855
    },
    "speedup": 1.0133863161969756,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (* (* (- (* (/ (/ (pow (* -1 1) 1) (* -1 1)) (- 1 -1)) (/ (* a a) 0)) (pow (- b -1) 1)) (pow (- (+ c a) a) (* b c))) (/ (pow (/ b 1) b) (/ 0 d))) (+ (* (* e d) -1) (pow (/ b -1) d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005011366)",
      "output_term": "(/ (* (- (* 0.5 (/ (* a a) 0)) (+ 1 b)) (* (pow c (* b c)) (/ (pow b b) 0))) (+ (* -1 (* d e)) (pow (* -1 b) d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.0051022160000000006
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005000692)",
      "output_term": "(/ (- (* 0.5 (/ (* a a) 0)) (+ b 1)) (* (+ (* d (- 0 e)) (pow (/ b -1) d)) (/ 0 (* (pow c (* b c)) (* (pow b b) d)))))",
      "output_weight_simple": 27,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.005022089
    },
    "speedup": 1.0159549143792554,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (* (+ (/ (pow a (pow (/ (* b b) 0) (+ d a))) 1) (+ (* (- b e) 1) 0)) (* (+ e a) (* 0 1))) (+ (pow (pow (* d e) 0) (+ 1 d)) (+ a b))) (* (+ (- (+ 0 c) c) (pow c c)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.00506648)",
      "output_term": "(pow (pow 0 (+ a (+ b (pow 1 (+ d 1))))) (pow c c))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 7,
      "simplification_time": 0.005140697
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005025672)",
      "output_term": "(pow (pow 0 (+ (+ a b) (pow 1 d))) (pow c c))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.005054792000000001
    },
    "speedup": 1.0169947645719148,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (/ (* (pow (* (+ (+ (+ (pow 0 a) 1) (- a a)) (pow c b)) (pow (pow 1 b) a)) (+ -1 -1)) (* (/ (+ 0 e) c) (- c -1))) (* (- (pow b -1) 1) (/ d d))) (/ (* (- (+ b -1) b) (- 0 -1)) (pow -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005070716)",
      "output_term": "(/ (* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (+ e (/ e c))) (+ -1 (/ 1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.005351131
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005187943)",
      "output_term": "(* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (/ (/ e (/ c (+ c 1))) (- (/ 1 b) 1)))",
      "output_weight_simple": 22,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.005257962
    },
    "speedup": 1.0177196031466185,
    "weight_simple_diff": 0,
    "weight_complex_diff": -4,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (* (+ (/ (+ (* (- (- a b) 0) (/ -1 1)) (* c c)) (- (pow -1 -1) -1)) (- (* a a) a)) (- (- 0 (- -1 0)) (+ c 1))) (/ (/ (- a b) d) (* 1 -1))) (pow (pow a (+ d 1)) (* (* c 1) b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005074163)",
      "output_term": "(* (* -1 c) (* (* -1 (/ (- a b) d)) (* (+ (/ (+ (* (- a b) -1) (* c c)) 0) (- (* a a) a)) (pow (pow a (+ 1 d)) (* b c)))))",
      "output_weight_simple": 25,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.005178088
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005030888)",
      "output_term": "(- 0 (* c (* (+ (/ (+ (- 0 (- a b)) (* c c)) 0) (- (* a a) a)) (* (/ (- a b) (- 0 d)) (pow (pow a (+ 1 d)) (* b c))))))",
      "output_weight_simple": 24,
      "output_weight_complex": 48,
      "output_depth": 9,
      "simplification_time": 0.0050836069999999995
    },
    "speedup": 1.0185854256633136,
    "weight_simple_diff": 1,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (/ (- (+ (+ (/ (* (pow 1 0) a) (- 1 -1)) (- a a)) (* (/ a c) d)) (/ (/ e 1) 0)) (/ (* (pow 0 b) e) (pow b c))) (* (pow (pow c 0) 1) (+ 0 b))) (+ (/ -1 (pow (pow a 0) -1)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005072458)",
      "output_term": "(+ (* (/ (- (+ (* a 0.5) (* (/ a c) d)) (/ e 0)) (/ (* e (pow 0 b)) (pow b c))) b) (+ -1 d))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.005127672
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005000601)",
      "output_term": "(+ (/ (- (+ (/ a 2) (/ a (/ c d))) (/ e 0)) (* e (/ (pow 0 b) (* b (pow b c))))) (- d 1))",
      "output_weight_simple": 22,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.005033538999999999
    },
    "speedup": 1.018701156383213,
    "weight_simple_diff": 0,
    "weight_complex_diff": -6,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (pow (/ (+ (pow (* (pow (pow 0 a) a) (+ 1 1)) (pow a -1)) (* a (* -1 b))) (+ 1 (/ 0 c))) (+ (pow (- 0 -1) 0) (pow a 1))) (+ (- (pow a d) -1) (- -1 b))) (* (pow (- (* 0 d) c) (- a 0)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005059755)",
      "output_term": "(/ (+ (* -1 b) (+ (pow (+ (pow (* (pow (pow 0 a) a) 2) (/ 1 a)) (* -1 (* a b))) (+ a 1)) (pow a d))) (pow (- 0 c) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 10,
      "simplification_time": 0.005130252
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.0050001)",
      "output_term": "(/ (+ (pow (/ (- (pow (* (pow (pow 0 a) a) 2) (/ 1 a)) (* a b)) (+ 1 (/ 0 c))) (+ a 1)) (- (pow a d) b)) (pow (- 0 c) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 10,
      "simplification_time": 0.005023959
    },
    "speedup": 1.0211572188387685,
    "weight_simple_diff": 0,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (+ (+ (pow (* (/ (+ -1 (+ a a)) (pow b 1)) (* b c)) (- (* c b) a)) (* (+ d -1) 1)) (- (+ 0 c) (+ c b))) (* (* (+ a c) -1) (pow -1 -1))) (/ (pow (- (/ c 0) a) (- a a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005072198)",
      "output_term": "(pow (/ (+ -1 (+ (pow (* (+ a (+ -1 a)) c) (- (* b c) a)) (+ d (* -1 b)))) (+ a c)) (/ 1 (pow -1 e)))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.005156979999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005010745)",
      "output_term": "(pow (/ (+ (pow (* (+ -1 (+ a a)) c) (- (* b c) a)) (+ d (- -1 b))) (+ a c)) (/ 1 (pow -1 e)))",
      "output_weight_simple": 21,
      "output_weight_complex": 45,
      "output_depth": 8,
      "simplification_time": 0.005038733
    },
    "speedup": 1.0234676058445644,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ -1 a))) (+ (pow -1 c) -1)) (- (* -1 c) 1)) (/ (- (+ (* b 1) 0) (/ 0 0)) (/ e 1))) (/ (/ (+ (* d 1) a) (* 0 c)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00513968)",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 0) (/ b 0)) (* c (+ a -1))) (+ -1 (pow -1 c))) (* -1 (+ 1 c))) (/ (- b (/ 0 0)) e)) (/ (+ a d) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.0051385599999999995
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005012508)",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ -1 a))) (+ (pow -1 c) -1)) (- -1 c)) (/ (- b (/ 0 0)) e)) (/ (+ d a) 0))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.005020148
    },
    "speedup": 1.0235873524047496,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": -2
  },
  {
    "base_term": "(* (* (pow (+ (* (pow (+ (pow 1 (pow a 1)) (+ b a)) (* b c)) (* c (- 1 c))) (+ (pow e b) a)) (* (pow 0 (- c 0)) (- -1 0))) (* (/ d (pow c e)) -1)) (/ (- (- c (- 0 0)) (/ -1 1)) (* e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005113484)",
      "output_term": "(* (pow (+ a (+ (* c (* (pow (+ a (+ (pow 1 a) b)) (* b c)) (- 1 c))) (pow e b))) (* (pow 0 c) -1)) (* -1 (* (/ d (pow c e)) (/ (+ 1 c) (* c e)))))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 11,
      "simplification_time": 0.005204519
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005032668)",
      "output_term": "(* (pow (+ (* (pow (+ (pow 1 a) (+ b a)) (* b c)) (- c (pow c 2))) (+ (pow e b) a)) (- 0 (pow 0 c))) (/ -1 (* (/ (pow c e) (+ c 1)) (/ c (/ d e)))))",
      "output_weight_simple": 31,
      "output_weight_complex": 77,
      "output_depth": 8,
      "simplification_time": 0.0050809670000000005
    },
    "speedup": 1.024316631066488,
    "weight_simple_diff": -1,
    "weight_complex_diff": -8,
    "depth_diff": 3
  },
  {
    "base_term": "(+ (* (+ (/ (/ (* (+ (* a (/ a 1)) (/ 1 0)) (+ a 0)) (- (* a -1) b)) (- (- b -1) 1)) (/ (- (* 1 -1) b) (/ -1 0))) (+ (* (+ -1 a) a) (/ -1 b))) (+ (/ (+ d (/ d d)) (- a -1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005033796)",
      "output_term": "(+ (* (+ (/ (/ (* a (+ (* a a) (/ 1 0))) (* -1 (+ a b))) b) (/ (- -1 b) (/ -1 0))) (+ (* a (+ a -1)) (/ -1 b))) (+ (/ (+ 1 d) (+ a 1)) e))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.0051688160000000006
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005013464)",
      "output_term": "(+ (* (+ (* (+ (* a a) (/ 1 0)) (/ a (- 0 (* b (+ a b))))) (/ (- -1 b) (/ -1 0))) (+ (- (* a a) a) (/ -1 b))) (+ (/ (+ d 1) (- a -1)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.005044877
    },
    "speedup": 1.0245672986675396,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (pow (* -1 (pow (- (/ (pow (* 1 a) 1) (/ 0 a)) a) (pow (* -1 1) 0))) (pow (+ (- 0 a) b) (/ 0 0))) (+ (+ (* -1 (- 1 b)) (pow c b)) (* 1 1))) (* (/ (* 1 (pow -1 a)) (* -1 1)) (+ c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005018582)",
      "output_term": "(+ (pow (+ a (* -1 (/ a 0))) (pow (+ (- 0 a) b) (/ 0 0))) (+ b (+ (pow c b) (* (pow -1 a) (+ -1 c)))))",
      "output_weight_simple": 20,
      "output_weight_complex": 45,
      "output_depth": 6,
      "simplification_time": 0.005155651
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005000758)",
      "output_term": "(- (+ (pow (- 0 (- (/ a (/ 0 a)) a)) (pow (+ (- 0 a) b) (/ 0 0))) (+ b (pow c b))) (/ (+ c -1) (/ -1 (pow -1 a))))",
      "output_weight_simple": 22,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.005029105
    },
    "speedup": 1.025162727761699,
    "weight_simple_diff": -2,
    "weight_complex_diff": -12,
    "depth_diff": -2
  },
  {
    "base_term": "(pow (* (* (- (* (+ (* (- (+ -1 a) a) (pow a 1)) (- -1 b)) (/ (pow a 0) d)) (pow (* b e) a)) (- (* (+ c 1) d) (* -1 a))) (- (* (/ 1 0) 1) (* a d))) (* (+ (+ 0 -1) (pow 1 a)) (pow 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005331825)",
      "output_term": "(pow (* (- (* (+ -1 (* -1 (+ a b))) (/ 1 d)) (pow (* b e) a)) (* (+ a (+ d (* d c))) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.005487476
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005280774)",
      "output_term": "(pow (* (- (/ (- -1 (+ a b)) d) (pow (* b e) a)) (* (+ (* d (+ c 1)) a) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.005339228
    },
    "speedup": 1.0277658118364679,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (+ (- (pow (/ (* (- (- 0 1) -1) -1) (+ a b)) (+ 1 (- a -1))) (/ (pow c d) 1)) (pow (pow (/ d -1) -1) (pow -1 0))) (* (- (+ c e) 1) (- 0 d))) (* (pow (pow (- c a) c) (pow 0 1)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005047857)",
      "output_term": "(pow (+ (pow 0 (+ a 2)) (+ (/ 1 (- 0 d)) (+ d (* -1 (+ (pow c d) (* (+ c e) d)))))) (* -1 c))",
      "output_weight_simple": 22,
      "output_weight_complex": 42,
      "output_depth": 9,
      "simplification_time": 0.0051524529999999995
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005001341)",
      "output_term": "(pow (+ (- (pow (/ 0 (+ a b)) (+ a 2)) (pow c d)) (- (/ -1 d) (* d (- (+ c e) 1)))) (- 0 c))",
      "output_weight_simple": 23,
      "output_weight_complex": 46,
      "output_depth": 7,
      "simplification_time": 0.0050097679999999995
    },
    "speedup": 1.0284813588174142,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": 2
  },
  {
    "base_term": "(- (+ (pow (- (/ (* a (* 0 (+ (- 1 1) a))) (- (- a b) d)) (pow (+ c c) 0)) (pow (/ -1 0) (* e 1))) (+ (/ (- (- e d) 0) (+ 1 0)) (* 0 d))) (* (- (* (pow -1 1) e) (* -1 c)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005068381)",
      "output_term": "(+ c (+ (pow -1 (pow (/ -1 0) e)) (* d (+ (+ e (* c -1)) -1))))",
      "output_weight_simple": 14,
      "output_weight_complex": 29,
      "output_depth": 7,
      "simplification_time": 0.005151833
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.005001734)",
      "output_term": "(+ (pow (- (/ 0 (- a (+ b d))) 1) (pow (/ -1 0) e)) (+ (- e d) (* (+ -1 d) (- e c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.00500837
    },
    "speedup": 1.028644648857812,
    "weight_simple_diff": -7,
    "weight_complex_diff": -12,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (+ (/ (/ (* (/ (pow (pow a a) a) (* 1 -1)) (pow 1 b)) (- (- b 0) -1)) (+ (/ 1 a) 0)) (+ (/ (- b -1) a) (+ -1 d))) (/ (- (+ c b) -1) (/ e c))) (- (* (- (+ a 0) 1) (+ d 1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005023886)",
      "output_term": "(- (+ -1 (+ (/ (/ (* (pow (pow a a) a) (* -1 (pow 1 b))) (+ 1 b)) (/ 1 a)) (+ d (+ (/ (+ 1 b) a) (/ (+ b (+ 1 c)) (/ e c)))))) (- (* (- a 1) (+ 1 d)) e))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.005185675
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005001065)",
      "output_term": "(- (+ (/ (pow (pow a a) a) (/ (- -1 b) (* a (pow 1 b)))) (+ (+ (/ (+ b 1) a) (+ -1 d)) (/ c (/ e (+ c (+ b 1)))))) (- (* (- a 1) (+ d 1)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.005040999
    },
    "speedup": 1.0286998668319514,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (+ (+ (pow 1 (/ (/ a (/ (- 0 1) 0)) (/ 0 1))) (pow (/ (+ -1 b) 1) (- -1 b))) (/ (/ (/ -1 b) 1) (/ b a))) (+ (/ (- 1 -1) b) (* 1 1))) (* (pow (- a (+ 0 -1)) (pow b a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005114893)",
      "output_term": "(+ -1 (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (+ (pow (+ -1 b) (- -1 b)) (* (/ 1 b) (+ (pow (+ 1 a) (pow b a)) (+ -2 (* -1 (/ 1 (/ b a)))))))))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.005164831999999999
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005002107)",
      "output_term": "(+ (- (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (+ (pow (+ -1 b) (- -1 b)) (- 0 (* a (pow b -2))))) (+ (/ 2 b) 1)) (/ (pow (+ a 1) (pow b a)) b))",
      "output_weight_simple": 27,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.0050196
    },
    "speedup": 1.0289329827077853,
    "weight_simple_diff": -1,
    "weight_complex_diff": 1,
    "depth_diff": 2
  },
  {
    "base_term": "(- (/ (pow (* (/ (* (pow a 1) b) (+ 1 a)) (+ (pow b (+ 1 0)) (* 0 -1))) (* (- -1 (* c -1)) (pow b 0))) (* (pow (* (* a 0) b) (pow a 0)) (/ a 0))) (- (+ (- 1 (+ e e)) (- a 1)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 8,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005014195)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- (+ a (* -2 e)) (pow -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.005200425
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005057378)",
      "output_term": "(- (/ (pow (/ b (/ (/ (+ a 1) b) a)) (+ c -1)) 0) (- (+ (- 1 (+ e e)) a) (+ (pow -1 b) 1)))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.0050518379999999995
    },
    "speedup": 1.0294124633450241,
    "weight_simple_diff": -1,
    "weight_complex_diff": -6,
    "depth_diff": -1
  },
  {
    "base_term": "(* (/ (/ (pow (pow (+ (pow (/ (* 0 a) 0) (pow b 1)) (- c -1)) (+ c (pow -1 1))) (+ a (* d d))) (/ (+ (- 0 -1) c) (pow a 0))) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* b a)) (/ e b))))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005247325)",
      "output_term": "(* (/ (/ (pow (pow (+ 1 (+ (pow (/ 0 0) b) c)) (+ c -1)) (+ a (* d d))) (+ 1 c)) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* a b)) (/ e b))))",
      "output_weight_simple": 29,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.005246117
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005010415)",
      "output_term": "(/ (pow (pow (+ (pow (/ 0 0) b) (+ 1 c)) (+ c -1)) (+ a (* d d))) (* (+ 1 c) (/ a (* (/ (- 1 (* a b)) (/ e b)) (/ d (- c b))))))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.005091803
    },
    "speedup": 1.0303063570998328,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (pow (/ (pow (* (- (* (pow -1 (/ a a)) (pow a b)) (- 0 a)) (+ (- 1 0) b)) (* (pow 0 a) a)) (pow c (/ (- -1 1) a))) (+ (+ (* 0 c) c) (pow a 1))) (pow (/ (- (- a 1) c) (/ d c)) (* 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005055506)",
      "output_term": "(+ (pow (/ (pow (* (+ a (* -1 (pow a b))) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (/ 1 (/ (- (+ -1 a) c) (/ d c))))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.005099266
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow (- 0 (* (+ b 1) (- (pow a b) a))) (* a (pow 0 a))) (pow c (/ -2 a))) (+ c a)) (/ (/ d c) (- a (+ c 1))))",
      "output_weight_simple": 25,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.004948663
    },
    "speedup": 1.0304330684873875,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (* (- (* (+ (pow a 1) 1) (* -1 a)) (pow a b)) (+ (- 0 a) a)) (+ (+ 0 0) 0)) (/ (+ (pow 0 0) 0) (pow b 1))) (* a (* (- c b) 1))) (- (- (- (- c 0) -1) (pow a -1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005234063)",
      "output_term": "(pow (- (- 0 (/ (pow 0 0) b)) (* a (- c b))) (- (+ 1 c) (/ 1 a)))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.005432167
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005176431)",
      "output_term": "(pow (- 0 (+ (/ (pow 0 0) b) (* a (- c b)))) (- c (+ -1 (/ 1 a))))",
      "output_weight_simple": 16,
      "output_weight_complex": 34,
      "output_depth": 6,
      "simplification_time": 0.005266567999999999
    },
    "speedup": 1.0314434371681902,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (/ (/ (/ (* (- (pow -1 a) b) b) (* b b)) 1) (* (/ (+ 0 b) b) (/ 0 0))) (/ (+ a (* 1 0)) (- b -1))) (pow (pow (* d a) -1) (- 1 -1))) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005396599)",
      "output_term": "(pow (/ (pow (/ (+ -1 (* (pow -1 a) (pow b -1))) (/ 0 0)) (/ a (- b -1))) (pow (* a d) -2)) (- (pow (pow (/ -1 0) d) (pow d -1)) (+ 1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 75,
      "output_depth": 8,
      "simplification_time": 0.0054700339999999995
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005014379)",
      "output_term": "(pow (* (pow (/ (- (pow -1 a) b) (* b (/ 0 0))) (/ a (+ b 1))) (pow (* a d) 2)) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 69,
      "output_depth": 7,
      "simplification_time": 0.005302092
    },
    "speedup": 1.0316746672822728,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (* (* (pow (/ (* (* a (- 0 a)) a) a) (/ (/ b -1) 0)) (/ (pow a 1) b)) (pow b (pow c (- -1 d)))) (/ (pow (pow (pow -1 e) e) (* c 1)) (/ e d))) (/ (- (pow (/ 1 -1) 1) (+ 1 -1)) (+ d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005059007)",
      "output_term": "(+ (* a (* (/ (pow (pow (pow -1 e) e) c) (/ e d)) (* (pow (* a (- 0 a)) (/ (* b -1) 0)) (pow b (+ -1 (pow c (- -1 d))))))) (/ 1 (+ d e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.0052167540000000005
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005000097)",
      "output_term": "(- (* (pow (- 0 (* a a)) (/ (/ b -1) 0)) (* (pow b (pow c (- -1 d))) (/ (/ a b) (/ e (* d (pow (pow (pow -1 e) e) c)))))) (/ -1 (+ d e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 78,
      "output_depth": 10,
      "simplification_time": 0.0050524030000000004
    },
    "speedup": 1.0325292736941214,
    "weight_simple_diff": 1,
    "weight_complex_diff": -6,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (/ (/ (+ (/ (* (- (/ 1 (+ -1 -1)) (pow a a)) (- a -1)) (pow (pow 1 b) -1)) (+ (* b 0) 1)) (* (* (* c -1) c) (* d a))) (- (* (* c 0) c) 1)) (/ (* (* (- 1 1) a) (+ -1 1)) (* -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005091822)",
      "output_term": "(* -1 (/ (+ 1 (/ (* (- -0.5 (pow a a)) (+ 1 a)) (/ 1 (pow 1 b)))) (* a (* -1 (* d (* c c))))))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.005207361000000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005013637)",
      "output_term": "(+ (/ (+ (* (- -0.5 (pow a a)) (* (+ a 1) (pow 1 b))) 1) (* a (* c (* c d)))) (/ 0 (- 0 d)))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.0050416540000000004
    },
    "speedup": 1.0328675867086476,
    "weight_simple_diff": 0,
    "weight_complex_diff": 5,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (/ (- (+ (/ (- (/ (pow 1 a) a) (pow -1 0)) -1) 1) (+ (+ (/ a 1) b) (pow a b))) (* (* (/ 0 -1) -1) (/ 1 a))) (* (* (/ a d) 0) (- a 1))) (+ (pow (* 0 (* e -1)) (+ -1 0)) (- e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005070681)",
      "output_term": "(+ 1 (* -1 (+ e (/ 1 0))))",
      "output_weight_simple": 8,
      "output_weight_complex": 14,
      "output_depth": 5,
      "simplification_time": 0.005272911999999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005009036)",
      "output_term": "(- 1 (+ (pow 0 -1) e))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.005103404000000001
    },
    "speedup": 1.0332146935653141,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (pow (- (- (pow (+ (+ (+ a 1) -1) (- 0 1)) (* a -1)) (/ (* 0 c) d)) (pow (pow c d) a)) (- d (- (pow e b) e))) (- (- (+ c 1) -1) (+ -1 c))) (* (pow (* (/ 1 a) -1) (* e c)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005129355)",
      "output_term": "(/ (* (pow (- (pow (+ a -1) (* a -1)) (pow (pow c d) a)) (- d (- (pow e b) e))) 3) (* (pow (* -1 (/ 1 a)) (* c e)) (/ a b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.005218252
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005016418)",
      "output_term": "(/ (pow (- (pow (+ a -1) (- 0 a)) (+ (/ 0 d) (pow (pow c d) a))) (- d (- (pow e b) e))) (* a (/ (pow (/ -1 a) (* c e)) (* b 3))))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 7,
      "simplification_time": 0.005045864
    },
    "speedup": 1.0341642184569382,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (+ (- (+ (- (* (pow (/ -1 a) 1) (* 1 -1)) (* -1 -1)) (pow (* b -1) 1)) (* (/ a b) b)) (- (+ (+ b 0) c) (+ 0 1))) (- (* (pow 0 b) 0) (/ d d))) (+ (* (- (- 0 a) c) d) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005034942)",
      "output_term": "(+ a (* -1 (+ (* d (+ a c)) (+ (/ 1 a) (+ -2 c)))))",
      "output_weight_simple": 14,
      "output_weight_complex": 23,
      "output_depth": 6,
      "simplification_time": 0.005501379
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005052473)",
      "output_term": "(- (/ (+ (- -1 (+ (/ -1 a) (+ b a))) (- (+ b c) 1)) -1) (* d (+ a c)))",
      "output_weight_simple": 17,
      "output_weight_complex": 30,
      "output_depth": 7,
      "simplification_time": 0.005319274
    },
    "speedup": 1.0342349350682067,
    "weight_simple_diff": -3,
    "weight_complex_diff": -7,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (* (- (pow (pow (* (+ (pow 1 1) a) (* a a)) (+ a 1)) (- a (pow b c))) (+ (- b d) 1)) (pow (/ (pow 1 d) d) (* 1 -1))) (- (/ e (/ b b)) (pow -1 b))) (pow d (- (pow (- 0 b) c) (- c c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005086901)",
      "output_term": "(+ (pow (* (- (pow (pow (* a (+ a (* a a))) (+ 1 a)) (- a (pow b c))) (+ 1 (- b d))) (/ 1 (/ (pow 1 d) d))) (- e (pow -1 b))) (pow d (pow (* b -1) c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.005223898
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005006562)",
      "output_term": "(+ (pow (* (- (pow (pow (* a (+ a (* a a))) (+ 1 a)) (- a (pow b c))) (+ (- b d) 1)) (/ d (pow 1 d))) (- e (pow -1 b))) (pow d (pow (- 0 b) c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 65,
      "output_depth": 10,
      "simplification_time": 0.005048627
    },
    "speedup": 1.0347165674944891,
    "weight_simple_diff": 0,
    "weight_complex_diff": 5,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (* (- (+ (/ (* (/ (- a -1) -1) (+ -1 a)) (/ a -1)) (pow (pow b 0) a)) (- (- b b) 1)) (- (/ 1 (+ 1 1)) (- 1 1))) (pow (+ (pow 0 b) 1) -1)) (/ (- (+ c (/ c 0)) (* 0 c)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00525219)",
      "output_term": "(+ (* (+ (+ a 1) (+ (pow 1 a) (/ 1 (* a -1)))) (* 0.5 (/ 1 (+ 1 (pow 0 b))))) (+ c (/ c 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.0052511139999999994
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005026848)",
      "output_term": "(- (* (+ (* (+ a 1) (/ (- a 1) a)) (+ (pow 1 a) 1)) (/ 0.5 (+ (pow 0 b) 1))) (/ (+ c (/ c 0)) -1))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.005074741999999999
    },
    "speedup": 1.0347548702968545,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (+ (/ (/ (/ (* (pow -1 a) b) b) (/ a -1)) a) (- b (+ (/ -1 c) c))) (* (* (* 1 -1) 0) 1)) (pow (/ (pow (* c b) b) (* -1 b)) (pow 1 a))) (+ (* (/ (* b 1) d) (* 1 b)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005016953)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (* -1 b)) (pow 1 a)) (+ -1 (* b (/ b d))))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.005276082999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005020802)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (- 0 b)) (pow 1 a)) (+ -1 (/ b (/ d b))))",
      "output_weight_simple": 17,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.0050971260000000004
    },
    "speedup": 1.0351093930187323,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (- (* (/ (+ (* (- (+ 0 0) a) (+ 1 a)) (- -1 c)) (* (- 1 c) -1)) (* (/ 1 e) 0)) (* (/ b (+ -1 1)) (* -1 -1))) (+ (/ (* 1 b) -1) (* 1 0))) (- (- -1 (* d (+ 0 c))) (+ a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005352605)",
      "output_term": "(* (+ b (- 0 (/ b 0))) (- (- -1 (* c d)) (+ a e)))",
      "output_weight_simple": 15,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.0053511900000000005
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005016052)",
      "output_term": "(* (- 0 (+ (/ b 0) (/ b -1))) (- -1 (+ (* c d) (+ a e))))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 5,
      "simplification_time": 0.005162241
    },
    "speedup": 1.0366021268669945,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (* (* (* (+ (pow (* (- a 1) 1) (* b -1)) 1) (+ (/ 1 -1) a)) (+ a (pow a 0))) (pow (/ (+ 0 1) -1) (/ b a))) (pow (* (pow a b) 0) (- 0 c))) (/ (- (+ (/ c a) 1) (/ 0 -1)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00507358)",
      "output_term": "(pow (/ (* (+ 1 (pow (+ a -1) (* b -1))) (* (pow -1 (/ b a)) (* (+ a -1) (+ a 1)))) (pow 0 (- 0 c))) (/ (+ 1 (/ c a)) (+ -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 61,
      "output_depth": 7,
      "simplification_time": 0.00520758
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005008855)",
      "output_term": "(pow (/ (+ -1 a) (/ (/ (pow 0 (- 0 c)) (* (+ a 1) (pow -1 (/ b a)))) (+ (pow (+ -1 a) (- 0 b)) 1))) (/ (+ (/ c a) 1) (- d 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.005023698
    },
    "speedup": 1.0366029168154614,
    "weight_simple_diff": 0,
    "weight_complex_diff": -5,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (+ (pow (+ -1 (+ 1 a)) (pow (+ (* -1 (- a a)) (* a 0)) (- a a))) (- (/ -1 (* 0 1)) (* 0 1))) (* (* (+ (+ 1 1) 0) (pow b -1)) (* 0 1))) (/ (- (- 1 (pow -1 b)) (/ 1 1)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.00516008)",
      "output_term": "(+ (pow a (pow 0 0)) (+ (/ -1 0) (* -1 (pow -1 b))))",
      "output_weight_simple": 11,
      "output_weight_complex": 27,
      "output_depth": 5,
      "simplification_time": 0.0053506610000000005
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.00512058)",
      "output_term": "(+ (pow a (pow 0 0)) (- (/ -1 0) (pow -1 b)))",
      "output_weight_simple": 10,
      "output_weight_complex": 25,
      "output_depth": 4,
      "simplification_time": 0.005150966000000001
    },
    "speedup": 1.0387684562468475,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (/ (/ (/ (+ (/ (pow (- a 0) a) (/ a a)) (pow a 1)) (pow (/ 0 0) b)) (pow -1 (+ -1 a))) (/ (* (pow -1 -1) d) (* b 1))) (+ (+ (- -1 c) 1) (pow c -1))) (/ a (/ (pow (/ 0 b) 1) (- 0 d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005495388)",
      "output_term": "(* (/ (/ (/ (+ a (pow a a)) (pow (/ 0 0) b)) (pow -1 (+ a -1))) (/ (- 0 d) b)) (* (+ (* -1 c) (/ 1 c)) (/ a 0)))",
      "output_weight_simple": 24,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.005688676
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "TimeLimit(0.005468194)",
      "output_term": "(* (* (/ (/ (+ (pow a a) a) (- 0 d)) (/ (pow (/ 0 0) b) (/ b (pow -1 (+ a -1))))) (+ (- -1 c) (+ 1 (/ 1 c)))) (/ (- 0 d) (/ 0 (* a b))))",
      "output_weight_simple": 27,
      "output_weight_complex": 75,
      "output_depth": 8,
      "simplification_time": 0.005467463
    },
    "speedup": 1.0404598988598552,
    "weight_simple_diff": -3,
    "weight_complex_diff": -7,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (+ (+ (* (+ (+ (* a (/ (/ a 0) a)) (* a a)) (+ (pow -1 a) -1)) (* (- 0 a) c)) (- (pow (* -1 a) b) (+ a a))) (* (* (/ 0 b) 0) (+ a 0))) (+ (/ (* (+ -1 b) 0) (/ -1 -1)) (* d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005213441)",
      "output_term": "(pow (+ (pow (- 0 a) b) (* (- 0 a) (+ (* (+ (/ a 0) (+ -1 (+ (* a a) (pow -1 a)))) c) 2))) (* c d))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 10,
      "simplification_time": 0.0056058489999999996
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005216408)",
      "output_term": "(pow (+ (* c (* a (- 1 (+ (/ a 0) (+ (* a a) (pow -1 a)))))) (- (pow (- 0 a) b) (+ a a))) (* c d))",
      "output_weight_simple": 22,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.005376838
    },
    "speedup": 1.042592133145912,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (- (- (/ (/ (/ (pow (+ -1 a) 1) (* -1 a)) (- 0 1)) (pow (- b a) b)) (* (pow 0 -1) 0)) (pow (/ b (+ c a)) (/ 1 a))) (pow (+ (+ 1 a) -1) c)) (pow (- (+ -1 (- 0 -1)) (/ -1 0)) (* 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005188875)",
      "output_term": "(+ (* (- (/ (+ 1 (/ 1 (* -1 a))) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.005280955
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005005377)",
      "output_term": "(+ (* (- (/ (/ (+ -1 a) a) (pow (- b a) b)) (pow (/ b (+ c a)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.005062175
    },
    "speedup": 1.0432185769950664,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (pow (pow (/ (* (/ 1 (* (- (- 0 1) a) (- b b))) (pow (pow 0 -1) 1)) (/ (* a b) b)) (/ (- (pow 1 0) a) (pow b e))) (/ (/ (* 0 1) -1) (pow d 0))) (- (- (+ (- b b) -1) (+ 0 c)) (- c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005404823)",
      "output_term": "(+ -1 (* c -2))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.005401135
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005087187)",
      "output_term": "(- -1 (+ c c))",
      "output_weight_simple": 4,
      "output_weight_complex": 5,
      "output_depth": 3,
      "simplification_time": 0.005172344000000001
    },
    "speedup": 1.0442335235243438,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (pow (+ 0 (/ (* (/ (pow (/ a a) -1) (- 1 a)) (pow a a)) (* a (- a b)))) (/ (* (+ 0 1) -1) b)) (* (* (pow 0 (* 1 1)) (- -1 c)) (* b e))) (+ (- (+ (/ a 0) 0) (- 1 a)) (- a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005229101)",
      "output_term": "(+ (/ a 0) (+ a a))",
      "output_weight_simple": 5,
      "output_weight_complex": 10,
      "output_depth": 3,
      "simplification_time": 0.005348233
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005079135)",
      "output_term": "(+ (- (/ a 0) (- 1 a)) (+ a 1))",
      "output_weight_simple": 8,
      "output_weight_complex": 13,
      "output_depth": 4,
      "simplification_time": 0.005111682
    },
    "speedup": 1.046276548502039,
    "weight_simple_diff": -3,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (+ (- (+ (+ (pow a (+ (* a a) 0)) (+ a 1)) (/ (+ a -1) -1)) (* (+ a -1) -1)) (+ (pow (* 0 1) c) (/ b 0))) (- (- 1 (pow 1 b)) (pow 1 0))) (* (+ (/ c (pow -1 -1)) (pow a 0)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005097764)",
      "output_term": "(pow (+ a (+ (pow 1 b) (+ (+ (pow 0 c) (+ (pow a (* a a)) 1)) (/ b 0)))) (* (+ 1 (* -1 c)) (pow 1 d)))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 9,
      "simplification_time": 0.005330932
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.005053735)",
      "output_term": "(pow (+ (pow a (* a a)) (+ a (+ (/ (+ a -1) -1) (+ (+ a (+ (pow 0 c) (/ b 0))) (pow 1 b))))) (* (+ 1 (/ c -1)) (pow 1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 58,
      "output_depth": 9,
      "simplification_time": 0.005094677
    },
    "speedup": 1.046372910392553,
    "weight_simple_diff": -3,
    "weight_complex_diff": -10,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (- (- (* -1 -1) (pow (pow (pow 0 a) 0) (/ 1 -1))) (- (+ (- b -1) 0) (/ a -1))) (- (+ 0 (/ -1 1)) (* b 1))) (pow (* (/ 0 d) c) (/ e 1))) (* (* (* (- 0 e) 1) (- 1 c)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005280359)",
      "output_term": "(/ (+ (+ -2 (* b -2)) (* -1 (+ (pow 0 e) a))) (* (- 1 c) (* e e)))",
      "output_weight_simple": 18,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.005279151
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005003647)",
      "output_term": "(* -1 (/ (- 0 (+ (- (+ b 2) (/ a -1)) (+ b (pow (/ 0 (/ d c)) e)))) (- 0 (* e (* e (- 1 c))))))",
      "output_weight_simple": 24,
      "output_weight_complex": 51,
      "output_depth": 9,
      "simplification_time": 0.0050276470000000005
    },
    "speedup": 1.0500241962094792,
    "weight_simple_diff": -6,
    "weight_complex_diff": -18,
    "depth_diff": -3
  },
  {
    "base_term": "(* (* (/ (/ (* (+ 0 (* -1 a)) (- (+ a a) -1)) (pow (+ -1 (/ a a)) -1)) (- (/ (+ a -1) a) (- c 0))) (pow (+ (pow (pow -1 1) -1) (pow -1 e)) (* a c))) (- (- (* c (pow e -1)) (+ -1 b)) (/ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 8,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005124128)",
      "output_term": "(* (/ (/ (* a (+ -1 (* -2 a))) (/ 1 0)) (- (/ (+ -1 a) a) c)) (* (pow (+ -1 (pow -1 e)) (* a c)) (- (* c (/ 1 e)) (+ -1 b))))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.005365098
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005051274)",
      "output_term": "(/ a (* (/ (- (/ (+ a -1) a) c) (pow (+ -1 (pow -1 e)) (* a c))) (/ (/ 1 0) (* (- (/ c e) (+ -1 b)) (- -1 (+ a a))))))",
      "output_weight_simple": 25,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.005108401
    },
    "speedup": 1.0502499705876651,
    "weight_simple_diff": 2,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (* (* (- (+ (+ (* 1 a) a) (* a 1)) (/ 0 a)) (- c (/ d b))) (* (* d -1) d)) (/ (- (- -1 1) c) (* a d))) (/ (- (- a b) d) 1)) (- (- (* (pow 0 b) 1) (+ 1 e)) (+ c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005109233)",
      "output_term": "(pow (+ (/ (* (- c (/ d b)) (* (* d d) (* -3 a))) (/ (- -2 c) (* a d))) (- (- a b) d)) (+ (- (pow 0 b) (+ 1 e)) (* c -2)))",
      "output_weight_simple": 28,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.005377498
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005033611)",
      "output_term": "(pow (+ (/ (- c (/ d b)) (/ (- -2 c) (* (- (* a 3) (/ 0 a)) (* a (* -1 (pow d 3)))))) (- a (+ b d))) (- (pow 0 b) (+ e (+ 1 (+ c c)))))",
      "output_weight_simple": 31,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.005111019
    },
    "speedup": 1.0521381352720465,
    "weight_simple_diff": -3,
    "weight_complex_diff": -8,
    "depth_diff": -2
  },
  {
    "base_term": "(pow (+ (+ (/ (- (/ (* a b) a) (- a (+ b (* 0 1)))) (- 1 (pow (/ 1 c) 0))) (+ (- (* b 0) 1) -1)) (/ (* (* (* -1 0) c) (/ a 1)) (/ 0 -1))) (* (* (- (+ -1 1) d) (/ d c)) (pow c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005285118)",
      "output_term": "(pow (+ (/ (- b (- a b)) 0) (+ -2 (/ 0 0))) (* (- 0 d) (* d (pow c (+ c -1)))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.005284085
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005010428)",
      "output_term": "(pow (+ (/ (- b (- a b)) 0) (+ -2 (/ 0 0))) (- 0 (* d (* (/ d c) (pow c c)))))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 6,
      "simplification_time": 0.005020805
    },
    "speedup": 1.0524378062880355,
    "weight_simple_diff": 1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (+ (- (pow (+ (- (+ (/ a a) -1) (+ 1 -1)) (* 0 b)) (/ (pow 1 0) a)) (- (pow 1 e) a)) (* (/ (/ c e) 1) (pow e -1))) (+ (+ b (pow -1 e)) (+ 1 e))) (- (pow 0 (+ (- 1 c) -1)) (/ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005141646)",
      "output_term": "(pow (* (+ (- (pow 0 (pow a -1)) (- (pow 1 e) a)) (* c (pow e -2))) (+ 1 (+ b (+ e (pow -1 e))))) (+ 1 (pow 0 (* -1 c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.00532382
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005004804)",
      "output_term": "(pow (* (+ (- (pow 0 (/ 1 a)) (- (pow 1 e) a)) (/ c (* e e))) (+ b (+ (pow -1 e) (+ 1 e)))) (+ 1 (pow 0 (- 0 c))))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.005043420999999999
    },
    "speedup": 1.0555969846657658,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (pow (+ (* a (* (/ (/ 1 1) -1) a)) (/ (/ -1 a) b)) (+ (/ b b) -1)) (/ 1 (- (+ c a) c))) (* (* (+ (+ -1 d) -1) (- d c)) (/ c d))) (* (+ (/ (- 1 c) 1) (* 1 -1)) (/ b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005319277)",
      "output_term": "(* (+ 1 (+ (pow a -1) (* (+ d -2) (* (- d c) (/ c d))))) (* c (* -1 (/ b c))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.005318263
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005004275)",
      "output_term": "(- 0 (* b (+ 1 (+ (/ 1 a) (/ (+ d -2) (/ (/ d c) (- d c)))))))",
      "output_weight_simple": 17,
      "output_weight_complex": 38,
      "output_depth": 8,
      "simplification_time": 0.00502844
    },
    "speedup": 1.0576367620971912,
    "weight_simple_diff": 2,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (pow (- (* (* (* (+ (/ a 0) a) (/ b a)) (+ -1 a)) (+ (- 1 1) c)) (- (pow 1 a) 1)) (- (* (* d -1) c) (pow c c))) (- (+ a (pow d -1)) (/ 0 1))) (+ 1 (- (pow (/ d 1) c) (/ 0 e))))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00516347)",
      "output_term": "(+ (pow (pow (- (* (+ a (/ a 0)) (* (/ b a) (* (+ a -1) c))) (+ -1 (pow 1 a))) (- (* -1 (* c d)) (pow c c))) (+ a (/ 1 d))) (+ 1 (pow d c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.005381413
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005027874)",
      "output_term": "(+ (pow (pow (- (* (+ (/ a 0) a) (* (- a 1) (* b (/ c a)))) (- (pow 1 a) 1)) (- 0 (+ (* c d) (pow c c)))) (+ a (/ 1 d))) (- (pow d c) (- (/ 0 e) 1)))",
      "output_weight_simple": 30,
      "output_weight_complex": 70,
      "output_depth": 9,
      "simplification_time": 0.005087401
    },
    "speedup": 1.0577921811156619,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (- (- (+ (- (+ (pow (* a a) b) (* b a)) (+ c -1)) (+ b (pow c -1))) (* -1 (/ a d))) (+ (- (- a d) -1) (- b 1))) (- (pow (pow -1 -1) 0) (+ e c))) (- (- a (* (pow e a) c)) (* 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005354566)",
      "output_term": "(+ (* (- (+ b (+ (- (+ (pow (* a a) b) (* a b)) (+ c -1)) (+ (/ 1 c) (/ a d)))) (+ b (- a d))) (- 1 (+ c e))) (- (- a (* c (pow e a))) b))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 10,
      "simplification_time": 0.00535357
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005014408)",
      "output_term": "(+ (* (- (+ (- (+ (pow (* a a) b) (* a b)) (+ c -1)) (+ b (+ (/ 1 c) (/ a d)))) (+ (- a d) b)) (- 1 (+ e c))) (- a (+ (* c (pow e a)) b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.00505879
    },
    "speedup": 1.0582708513300612,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (+ (* (- (- (- (* a (/ 1 b)) (- b d)) (/ d 1)) (- 1 0)) (- (+ c d) -1)) (/ (pow (- b 1) -1) (+ 0 1))) (/ (/ (pow c b) a) (- a 1))) (* (+ (- 0 (/ e e)) (+ -1 c)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005052234)",
      "output_term": "(- (+ (* (+ (- (- (* a (/ 1 b)) (- b d)) d) -1) (+ 1 (+ d c))) (+ (/ 1 (+ b -1)) (/ (/ (pow c b) a) (+ a -1)))) (* (+ c -2) (/ 1 e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.00531037
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005003687)",
      "output_term": "(- (+ (* (- (/ a b) (+ (- b d) (+ d 1))) (+ c (+ d 1))) (+ (/ 1 (- b 1)) (/ (pow c b) (- (pow a 2) a)))) (/ (- c 2) e))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.00501667
    },
    "speedup": 1.0585448115981317,
    "weight_simple_diff": 4,
    "weight_complex_diff": 7,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (/ (pow (+ (* (pow (/ (pow (* a -1) 0) (- -1 b)) (+ b a)) (* 1 (pow 1 a))) (pow (pow 1 0) b)) (pow (* (/ e b) b) (* c c))) (* (* (+ b c) 1) 1)) (- (pow (pow d (pow -1 0)) (* c -1)) (+ -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005075459)",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow e (* c c))) (+ b c)) (- (pow d (* -1 c)) (+ -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.005376827
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005079742)",
      "output_term": "(pow (/ (pow (+ (* (pow 1 a) (pow (/ 1 (- -1 b)) (+ b a))) (pow 1 b)) (pow e (* c c))) (+ b c)) (- (pow d (- 0 c)) (+ -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.005078577
    },
    "speedup": 1.0587270804400524,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (* (pow (+ (- (- (/ 0 1) 0) (* a 0)) (pow b 1)) (* 1 (+ a 0))) (+ (* 1 b) b)) (/ (+ (+ c -1) 0) (/ -1 c))) (pow (/ (pow d 1) d) (/ c 1))) (* (+ (* (+ -1 d) d) (- -1 0)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005209389)",
      "output_term": "(* (+ (- (* (pow b a) (+ b b)) (/ (+ c -1) (/ -1 c))) (pow 1 c)) (* b (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 20,
      "output_weight_complex": 42,
      "output_depth": 6,
      "simplification_time": 0.005543075999999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00519311)",
      "output_term": "(* (+ (- (* b (* (pow b a) 2)) (* c (/ (+ c -1) -1))) (pow 1 c)) (* b (- (pow d 2) (+ d 1))))",
      "output_weight_simple": 21,
      "output_weight_complex": 43,
      "output_depth": 7,
      "simplification_time": 0.005233667
    },
    "speedup": 1.059118969548502,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": -1
  },
  {
    "base_term": "(* (+ (- (pow (* (* a (/ (/ (- a b) b) (pow 1 a))) (pow (* a -1) -1)) (pow (+ b b) b)) (pow (+ (pow c -1) a) (/ 0 c))) (+ (* (pow 1 0) e) (* c 0))) (- (/ (pow 0 (pow -1 0)) (pow d d)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005267085)",
      "output_term": "(* -1 (* (+ (pow (* a (* (/ (/ (- a b) b) (pow 1 a)) (/ 1 (* a -1)))) (pow (+ b b) b)) (+ -1 e)) (- e b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 50,
      "output_depth": 10,
      "simplification_time": 0.005369084
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005003338)",
      "output_term": "(* (+ (- (pow (- 0 (/ (/ (- a b) b) (pow 1 a))) (pow (+ b b) b)) (pow (+ (/ 1 c) a) (/ 0 c))) e) (- (/ 0 (pow d d)) (- e b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.00506882
    },
    "speedup": 1.0592374556602917,
    "weight_simple_diff": -5,
    "weight_complex_diff": -17,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (/ (/ (pow (pow (pow (- (* 1 a) -1) (+ a a)) (* 1 1)) (/ (- c 1) 1)) -1) (- -1 (* (/ -1 c) 0))) (+ (* (pow (/ -1 0) a) (* 0 c)) (+ 0 1))) (pow (+ (* (* b 1) a) (* c 1)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ -1 (pow (pow (+ 1 a) (+ a a)) (+ -1 c))) (+ c (* a b)))",
      "output_weight_simple": 14,
      "output_weight_complex": 28,
      "output_depth": 6,
      "simplification_time": 0.0017441630000000002
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (pow (pow (+ a 1) (+ a a)) (- c 1)) 1) (+ (* a b) c))",
      "output_weight_simple": 13,
      "output_weight_complex": 27,
      "output_depth": 6,
      "simplification_time": 0.001646167
    },
    "speedup": 1.0595298046917476,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (/ (/ (* (- (- -1 (/ 0 -1)) (+ a 0)) (+ a a)) (+ (+ a a) -1)) (pow (pow -1 0) 0)) (/ (- (pow 0 1) a) (- 0 b))) (* (pow (- b -1) b) (pow 1 0))) (+ (* 0 (/ (pow a 0) c)) (- -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005074383)",
      "output_term": "(/ (- (+ (/ (* a (* (- -1 a) 2)) (+ -1 (+ a a))) (/ (- 0 a) (- 0 b))) (pow (+ 1 b) b)) (- -1 a))",
      "output_weight_simple": 20,
      "output_weight_complex": 39,
      "output_depth": 8,
      "simplification_time": 0.005380766
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005027392)",
      "output_term": "(/ (- (+ (* a (* (- -1 a) (/ 2 (+ a (+ a -1))))) (/ (- 0 a) (- 0 b))) (pow (+ b 1) b)) (- -1 a))",
      "output_weight_simple": 20,
      "output_weight_complex": 39,
      "output_depth": 9,
      "simplification_time": 0.005078151
    },
    "speedup": 1.0595915718142292,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(* (- (/ (pow (/ (/ (- (- 0 (- -1 a)) (* a b)) (* a b)) (+ (/ b d) d)) (/ (- b -1) -1)) (/ (* (+ d -1) 1) (pow d b))) (/ (- (+ 0 b) d) (/ d b))) (pow (+ (/ (+ 1 e) 1) 1) (/ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005124664)",
      "output_term": "(* (- (/ (pow (/ (+ -1 (* (+ a 1) (/ 1 (* a b)))) (+ d (/ b d))) (+ -1 (* -1 b))) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ e 2) (* -1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.005330042
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.00500692)",
      "output_term": "(* (- (* (pow (/ (- a (- (* a b) 1)) (* b (* a (+ (/ b d) d)))) (/ (+ b 1) -1)) (/ (pow d b) (- d 1))) (/ b (/ d (- b d)))) (pow (+ e 2) (/ d -1)))",
      "output_weight_simple": 30,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.00502066
    },
    "speedup": 1.0616217788099573,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (- (/ (* (- (/ (- -1 a) a) (* a -1)) (- 1 -1)) (- (* a a) a)) (- 0 (+ 0 d))) (/ (* b (+ -1 d)) (* a 1))) (/ (- (+ c e) -1) (+ b 0))) (/ (/ 0 (- (/ -1 c) 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005157525)",
      "output_term": "(/ (* (+ (/ (* (+ a (/ (- -1 a) a)) 2) (* a (+ -1 a))) (+ d (/ (* b (+ -1 d)) a))) (/ (+ c (+ 1 e)) b)) 0)",
      "output_weight_simple": 26,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.005390135000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005009316)",
      "output_term": "(/ 1 0)",
      "output_weight_simple": 3,
      "output_weight_complex": 7,
      "output_depth": 2,
      "simplification_time": 0.005068595
    },
    "speedup": 1.0634376982181453,
    "weight_simple_diff": 23,
    "weight_complex_diff": 48,
    "depth_diff": 7
  },
  {
    "base_term": "(pow (- (* (+ (- (pow (pow (+ (* 1 a) 1) (- a a)) (pow a -1)) (* b (/ a b))) (pow d (- b -1))) (+ (pow (* d c) -1) (pow c b))) (+ (+ e (+ 0 -1)) (/ -1 1))) (- (+ (pow (pow -1 a) d) -1) (pow e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005020841)",
      "output_term": "(pow (- (* (+ (- (pow 1 (/ 1 a)) a) (pow d (+ 1 b))) (+ (/ 1 (* d c)) (pow c b))) (+ e -2)) (- (+ -1 (pow (pow -1 a) d)) (pow e c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.0056329629999999995
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005100776)",
      "output_term": "(pow (- (* (+ (- (pow 1 (/ 1 a)) a) (pow d (+ b 1))) (+ (/ 1 (* d c)) (pow c b))) (+ e -2)) (- (pow (pow -1 a) d) (+ (pow e c) 1)))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.005279025
    },
    "speedup": 1.067046092791756,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (* (* (- (pow (- (pow (pow a 1) 0) a) (+ a -1)) (+ b (- c a))) (/ 1 (pow 0 -1))) (- (* (/ a -1) d) (* -1 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (pow (- (/ (pow 0 e) 0) (+ 0 1)) (/ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005491462)",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ b (- c a))) (* (/ 1 (pow 0 -1)) (+ -1 (* a (* -1 d))))) (pow (pow -1 (- 1 b)) (pow 1 e))) (+ -1 (/ (pow 0 e) 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.005490485
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005063001)",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (- (+ b c) a)) (/ (- (* (/ a -1) d) 1) (pow 0 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (- (/ (pow 0 e) 0) 1))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.005116505
    },
    "speedup": 1.0730928631947,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (* (+ (* (pow (* (* 1 (* a a)) (+ a 1)) (/ a a)) (+ (pow b a) -1)) (+ (/ -1 a) b)) (* (- (/ a c) 0) (* 0 0))) (+ (pow (- -1 d) e) (+ b a))) (* (- a (+ (+ a e) -1)) (+ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005103334)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.005443938
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00503444)",
      "output_term": "(/ 0 (+ (pow (- -1 d) e) (+ b a)))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 5,
      "simplification_time": 0.005064671
    },
    "speedup": 1.0748848247003606,
    "weight_simple_diff": -10,
    "weight_complex_diff": -21,
    "depth_diff": -4
  },
  {
    "base_term": "(- (- (* (* (* (/ (pow (+ (* a 0) 0) (* -1 0)) (+ 1 0)) (+ (+ 0 b) b)) (- (+ 0 0) c)) (* (* (- a d) c) (+ b -1))) (* 0 (/ (- e -1) d))) (pow (* (+ (+ 0 c) c) (+ d d)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005492709)",
      "output_term": "(- (* (pow 0 0) (* (+ -1 b) (* (* (- a d) (* b (* c -2))) c))) (* c (* d 4)))",
      "output_weight_simple": 20,
      "output_weight_complex": 35,
      "output_depth": 8,
      "simplification_time": 0.005491606
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005031054)",
      "output_term": "(- 0 (* c (+ (* (pow 0 0) (* (* b (* 2 (+ b -1))) (* c (- a d)))) (* d 4))))",
      "output_weight_simple": 20,
      "output_weight_complex": 34,
      "output_depth": 9,
      "simplification_time": 0.0051077679999999995
    },
    "speedup": 1.075147892386655,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (- (pow (+ (- (pow (pow (pow -1 -1) a) (* 0 a)) a) a) (pow (- (+ b b) a) 0)) (/ 1 (/ (pow -1 b) 0))) (pow (/ (pow (pow a a) a) (/ 1 a)) (* -1 -1))) (/ (+ (+ 1 (pow -1 a)) (+ 1 a)) (* 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005299468)",
      "output_term": "(/ (* (- 1 (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ 1 a))) (/ (+ (pow -1 a) (+ a 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.005405154
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.00500405)",
      "output_term": "(* (- (+ (- 1 a) a) (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ (/ (+ (pow -1 a) (+ a 2)) 0) a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.005019061
    },
    "speedup": 1.0769253451990322,
    "weight_simple_diff": -1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (* (/ (+ (+ a (+ (* (+ 1 -1) a) (pow 1 0))) (+ (/ 1 a) a)) (+ (* 0 a) 0)) (pow (* (- 0 b) 0) (+ -1 -1))) (* (- -1 (- 0 0)) (- 1 b))) (/ (/ (- (/ 0 0) a) (/ a 0)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005413111)",
      "output_term": "(* (+ -1 (+ b (* (+ 1 (+ (pow a -1) (+ a a))) (pow 0 -3)))) (/ (- (/ 0 0) a) (/ a 0)))",
      "output_weight_simple": 19,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.00541205
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005002694)",
      "output_term": "(* (+ (* (/ (+ a (+ 1 (+ (/ 1 a) a))) 0) (pow 0 -2)) (- b 1)) (/ (- (/ 0 0) a) (/ a 0)))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 9,
      "simplification_time": 0.0050226609999999994
    },
    "speedup": 1.0775264346926858,
    "weight_simple_diff": 0,
    "weight_complex_diff": -5,
    "depth_diff": -1
  },
  {
    "base_term": "(* (- (pow (+ (/ (+ (+ (- (/ 0 -1) -1) (+ -1 a)) (/ b b)) (- (+ b b) c)) (* b 1)) (* (/ (pow -1 d) c) (- 1 -1))) (/ (- (* -1 d) e) (* -1 0))) (- (* (* (- d 0) -1) (- e 0)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005057093)",
      "output_term": "(* (- (pow (+ b (/ (+ 1 a) (- (+ b b) c))) (* (/ (pow -1 d) c) 2)) (/ (* -1 (+ d e)) 0)) (+ -1 (* -1 (* d e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.005399179
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005010854)",
      "output_term": "(* (- (pow (+ (/ (+ 1 a) (- (+ b b) c)) b) (/ (pow -1 d) (/ c 2))) (/ (- 0 (+ d e)) 0)) (- -1 (* d e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.005008321
    },
    "speedup": 1.0780417229646422,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (* a (/ (* (* (pow (pow 1 b) -1) 1) (/ 0 a)) (+ (- c b) -1))) (* (pow d (+ 1 a)) (- e b))) (* (+ (- (+ -1 d) -1) (* -1 b)) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005368588)",
      "output_term": "(pow (* (+ d (* b -1)) (/ c e)) (/ (+ (/ a (+ 1 e)) (pow -1 e)) (* -1 c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.005628642999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005023374)",
      "output_term": "(pow (+ (/ 0 (* (pow 1 b) (* (+ (- c b) -1) (* (pow d (+ a 1)) (- e b))))) (* (- d b) (/ c e))) (/ (+ (/ a (+ e 1)) (pow -1 e)) (- 0 c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.005210991999999999
    },
    "speedup": 1.0801480792908529,
    "weight_simple_diff": -11,
    "weight_complex_diff": -22,
    "depth_diff": -3
  },
  {
    "base_term": "(pow (/ (pow (pow (+ (* (* (* (+ a 1) -1) (- 1 0)) (pow a b)) (* c (/ d a))) (- (pow 1 -1) a)) (pow (+ (pow 1 a) -1) c)) (+ (* (- b b) b) (/ c c))) (/ (/ (+ (- a 1) a) (pow a e)) (- a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005054661)",
      "output_term": "(pow (pow (pow (+ (* -1 (* (+ a 1) (pow a b))) (* c (/ d a))) (- 1 a)) (pow (+ -1 (pow 1 a)) c)) (/ (/ (+ a (+ a -1)) (pow a e)) a))",
      "output_weight_simple": 26,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.005539035999999999
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005032164)",
      "output_term": "(pow (pow (pow (+ (* (- -1 a) (pow a b)) (/ c (/ a d))) (- 1 a)) (pow (+ (pow 1 a) -1) c)) (/ (- (+ a a) 1) (* a (pow a e))))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 7,
      "simplification_time": 0.005125748
    },
    "speedup": 1.080629792958998,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (/ (* (- (* (+ (pow a (* (* a b) -1)) b) c) (pow d (* (* b e) -1))) (+ (/ d (* 1 a)) (- -1 -1))) (/ (pow (* b (* 1 b)) (/ c 1)) (pow 0 e))) (+ (+ (* (pow b d) 1) (/ c b)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005017521)",
      "output_term": "(+ (/ (* (- (* (+ b (pow a (* a (* b -1)))) c) (pow d (* b (* -1 e)))) (/ d a)) (/ (pow (* b b) c) (pow 0 e))) (+ (pow b d) (+ (/ c b) (- c d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.005503703
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005054748)",
      "output_term": "(+ (* d (/ (- (* (+ (pow a (* b (- 0 a))) b) c) (pow d (* b (- 0 e)))) (* a (/ (pow (* b b) c) (pow 0 e))))) (+ (pow b d) (+ (/ c b) (- c d))))",
      "output_weight_simple": 28,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.005091939
    },
    "speedup": 1.0808658548344747,
    "weight_simple_diff": 1,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (pow 1 (* (/ (* (pow (* a -1) a) (+ a 0)) (pow 1 -1)) (* (- b 0) 0))) (- (+ 1 b) (* b a))) (pow (+ (+ (/ b d) c) (/ 1 -1)) (+ 1 d))) (* (- (+ (/ -1 a) b) (+ 1 b)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005031501)",
      "output_term": "(* (+ (* b (+ a -1)) (pow (+ (/ b d) (+ -1 c)) (+ 1 d))) (- (+ b (/ -1 a)) (+ 1 b)))",
      "output_weight_simple": 19,
      "output_weight_complex": 36,
      "output_depth": 6,
      "simplification_time": 0.005525073
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005039739)",
      "output_term": "(* (+ (- 1 (- b (+ -1 (* a b)))) (pow (+ (/ b d) (+ c -1)) (+ 1 d))) (- (+ (/ -1 a) b) (+ 1 b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 38,
      "output_depth": 7,
      "simplification_time": 0.005108412999999999
    },
    "speedup": 1.0815634914404926,
    "weight_simple_diff": -2,
    "weight_complex_diff": -2,
    "depth_diff": -1
  },
  {
    "base_term": "(* (/ (- (+ (* (+ (* (/ a (/ a a)) (+ b b)) (/ a -1)) (+ b -1)) (- 0 (- 0 b))) (+ (+ (/ a 0) b) (pow d 0))) (pow (- -1 (+ 0 -1)) (pow 0 0))) (/ (+ (+ (* 1 1) 1) (+ -1 e)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005218726)",
      "output_term": "(* (/ (- (+ b (* (* a (+ b (+ b -1))) (+ b -1))) (+ b (+ (/ a 0) 1))) (pow 0 (pow 0 0))) (+ 1 e))",
      "output_weight_simple": 20,
      "output_weight_complex": 40,
      "output_depth": 9,
      "simplification_time": 0.005528766
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005021993)",
      "output_term": "(* (- (+ (* (* a (+ (+ b b) -1)) (+ b -1)) b) (+ (/ a 0) (+ b 1))) (/ (+ 2 (+ -1 e)) (pow 0 (pow 0 0))))",
      "output_weight_simple": 23,
      "output_weight_complex": 43,
      "output_depth": 8,
      "simplification_time": 0.005107080999999999
    },
    "speedup": 1.082568692370456,
    "weight_simple_diff": -3,
    "weight_complex_diff": -3,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (+ (pow (pow a (- -1 (pow (* (- a a) -1) (/ 1 d)))) (+ d (* a (pow 1 -1)))) (* b (- (* a 0) a))) (* (* (/ (- -1 d) a) (- 1 -1)) (- c a))) (pow (* (+ (+ c 0) a) (* b 0)) (+ c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005104939)",
      "output_term": "(/ (pow (+ (pow (pow a (- -1 (pow 0 (pow d -1)))) (+ a d)) (* a (* -1 b))) (* (/ (- -1 d) a) (* 2 (- c a)))) (pow 0 (+ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.0054633319999999996
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00501496)",
      "output_term": "(/ (pow (- (pow (pow a (- -1 (pow 0 (/ 1 d)))) (+ a d)) (* a b)) (* (- -1 d) (* (- c a) (/ 2 a)))) (pow 0 (+ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.005043953
    },
    "speedup": 1.0831449063859238,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (* (- (+ (- (/ (/ a (- 0 0)) (+ -1 0)) 1) (pow 0 (+ -1 -1))) (+ (* a a) a)) (/ (pow (/ -1 -1) 1) (+ 0 b))) (- (- (+ -1 b) a) (* 0 b))) (- (+ (/ (- 0 b) 1) (/ a 0)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005486378)",
      "output_term": "(+ (- (* (+ (+ -1 (pow 0 -2)) (* -1 (+ (/ a 0) (+ a (* a a))))) (/ 1 b)) (- (+ -1 b) a)) (- (+ (/ a 0) (- 0 b)) (pow -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.005485385
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005035713)",
      "output_term": "(+ (- (/ (- (+ (/ (/ a 0) -1) (pow 0 -2)) (+ a (+ (* a a) 1))) b) (- b (+ a 1))) (- (+ (- 0 b) (/ a 0)) (pow -1 b)))",
      "output_weight_simple": 23,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.005061406
    },
    "speedup": 1.0837670402255815,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (* (* (pow (pow (+ (* (* -1 a) -1) (pow 0 0)) (/ a 0)) (pow (+ 0 1) -1)) (* (pow 1 1) a)) (- (+ (- 0 b) 1) 0)) (- (- (+ 0 0) a) (/ -1 b))) (* (* (* (- 0 b) b) (- 1 d)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005136452)",
      "output_term": "(pow (/ (* -1 (* (pow (+ a (pow 0 0)) (/ a 0)) (* a (+ -1 b)))) (+ (- 0 a) (/ 1 b))) (* (* b (+ -1 d)) (* b (/ a b))))",
      "output_weight_simple": 24,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.005502180000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005001984)",
      "output_term": "(pow (/ (pow (+ a (pow 0 0)) (/ a 0)) (/ (- (- 0 a) (/ -1 b)) (* a (- 1 b)))) (/ a (/ 1 (* (- 0 b) (- 1 d)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 61,
      "output_depth": 6,
      "simplification_time": 0.005075804
    },
    "speedup": 1.084001667519077,
    "weight_simple_diff": 1,
    "weight_complex_diff": -3,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (* (pow (/ (/ (/ (+ (pow (+ 1 -1) a) (* 1 a)) (+ a a)) (- (+ a b) 1)) (- (- 1 1) -1)) (/ (- (/ 0 1) -1) (pow a 0))) (/ (* (* 1 -1) 1) b)) (+ (/ (* (- 0 a) -1) (+ -1 0)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005309646)",
      "output_term": "(/ (* (/ (/ (+ a (pow 0 a)) (+ a a)) (+ -1 (+ a b))) (/ -1 b)) (- 0 a))",
      "output_weight_simple": 15,
      "output_weight_complex": 37,
      "output_depth": 7,
      "simplification_time": 0.005528421
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00501481)",
      "output_term": "(/ (+ (pow 0 a) a) (* a (* (* (- (+ a b) 1) 2) (* b a))))",
      "output_weight_simple": 14,
      "output_weight_complex": 27,
      "output_depth": 7,
      "simplification_time": 0.005094945
    },
    "speedup": 1.085079623038129,
    "weight_simple_diff": 1,
    "weight_complex_diff": 10,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (* (+ (/ (* (pow (* (* 0 0) 0) (+ 0 -1)) a) a) (- (pow (pow a a) b) (/ a e))) (* (* (* 1 0) d) (* a 1))) (- (/ (pow a 1) b) (+ -1 b))) (pow (* (* (+ 0 1) b) (pow 1 -1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005389163)",
      "output_term": "(+ (* -1 a) (* b (+ -1 b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.0056671659999999995
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005079726)",
      "output_term": "(- 0 (* b (- (/ a b) (+ -1 b))))",
      "output_weight_simple": 9,
      "output_weight_complex": 16,
      "output_depth": 5,
      "simplification_time": 0.0052052999999999995
    },
    "speedup": 1.0887299483219026,
    "weight_simple_diff": -2,
    "weight_complex_diff": -5,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (/ (+ (+ (/ (+ (* (/ a 0) a) (* 1 a)) (- -1 b)) (- (- b b) 0)) d) (/ e (- (/ c e) d))) (+ (- (* (* 0 d) d) (/ 1 a)) (+ b 0))) (- (* (pow (pow e b) 0) (/ e -1)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005196037)",
      "output_term": "(+ (/ (+ (/ (+ a (* a (/ a 0))) (- -1 b)) d) (/ e (- (/ c e) d))) (+ (pow a -1) (* -1 b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.005942429
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005365116)",
      "output_term": "(- (* (+ (/ (+ (/ a 0) 1) (/ (- -1 b) a)) d) (/ (- (/ c e) d) e)) (+ (- 0 (/ 1 a)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.005450331
    },
    "speedup": 1.0902877274793035,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(* (* (+ (pow (* (* 0 a) (- (* 1 (* b a)) b)) (* (- (- a 1) -1) (- c b))) (pow (/ (pow 1 1) d) 1)) (- (pow (- (/ -1 1) 0) (+ d d)) (+ e -1))) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005224207)",
      "output_term": "(* (+ (pow 0 (* a (- c b))) (/ 1 d)) (* (- (pow -1 (+ d d)) (+ -1 e)) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.005517678999999999
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005001826)",
      "output_term": "(* (- (pow -1 (+ d d)) (+ e -1)) (* (+ (pow 0 (* a (- c b))) (/ 1 d)) (- (/ (pow 0 -1) e) (+ (/ d c) (pow a b)))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.005041858
    },
    "speedup": 1.0943741374707499,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (* (- (/ (pow a (/ (+ 0 0) a)) (* 0 -1)) a) (/ (* (* a 1) a) (- 1 0))) (- (- (+ a -1) 0) (- -1 0))) (/ (* (* 1 a) -1) (/ a c))) (/ (+ (- d (pow a b)) (+ -1 e)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005478478)",
      "output_term": "(* (/ (+ (- d (pow a b)) (+ -1 e)) d) (pow (pow (* (- (/ 1 0) a) (* a a)) a) (/ (* a -1) (/ a c))))",
      "output_weight_simple": 23,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.005600758
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.00501945)",
      "output_term": "(* (pow (pow (* a (* a (- (/ (pow a 0) 0) a))) a) (- 0 c)) (/ (+ (- d (pow a b)) (+ -1 e)) d))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 9,
      "simplification_time": 0.005108152
    },
    "speedup": 1.0964352666091377,
    "weight_simple_diff": 2,
    "weight_complex_diff": 8,
    "depth_diff": -2
  },
  {
    "base_term": "(* (+ (- (/ (pow (* (pow (+ a a) (- -1 b)) (- 0 a)) (* (- c 0) 0)) (* (* a d) c)) (- (- (pow 0 -1) b) (- -1 -1))) (- (/ (/ 0 c) 1) (+ a 0))) (+ (* (- (+ -1 b) 0) (- 0 -1)) (/ e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005345471)",
      "output_term": "(* (+ (/ 1 (* a (* c d))) (* -1 (+ a (- (pow 0 -1) b)))) (+ b (+ -1 (/ e c))))",
      "output_weight_simple": 20,
      "output_weight_complex": 40,
      "output_depth": 7,
      "simplification_time": 0.0058700390000000005
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005271082)",
      "output_term": "(* (+ (- (/ 1 (* a (* c d))) (- (pow 0 -1) b)) (- (/ 0 c) a)) (+ -1 (+ b (/ e c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.005337487
    },
    "speedup": 1.0997757933649301,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (/ (+ (pow (+ (/ (/ (/ a a) a) (* 1 -1)) (* c b)) (- 0 (/ 1 1))) (+ (* d 1) -1)) (pow (+ (pow 1 a) 1) (pow 1 -1))) (+ (- b (- 1 b)) (/ 0 0))) (+ (/ (- (* c -1) 1) (/ d d)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00501566)",
      "output_term": "(+ -1 (+ (/ (+ -1 (+ (/ 1 (+ (* (/ 1 a) -1) (* c b))) d)) (+ 1 (pow 1 a))) (+ b (* -1 (+ (+ c (/ 0 0)) (+ b (+ -1 b)))))))",
      "output_weight_simple": 26,
      "output_weight_complex": 52,
      "output_depth": 10,
      "simplification_time": 0.0055597400000000005
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005024279)",
      "output_term": "(+ (- (/ (+ (/ 1 (+ (/ -1 a) (* c b))) (+ d -1)) (+ (pow 1 a) 1)) (+ (- b (- 1 b)) (/ 0 0))) (+ (- -1 c) b))",
      "output_weight_simple": 24,
      "output_weight_complex": 48,
      "output_depth": 8,
      "simplification_time": 0.005046874999999999
    },
    "speedup": 1.1016203095975234,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (/ (pow (* (pow (* (* (+ 1 -1) a) (pow 1 1)) (- a -1)) (/ (/ a -1) c)) (* (+ c -1) 0)) (- (+ (pow a 1) 1) (+ 0 1))) (/ (* (- e a) e) -1)) (- (- (/ (+ a e) 1) (pow a c)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005054341)",
      "output_term": "(+ (/ 1 a) (+ (* e (- e a)) (- (- (+ a e) (pow a c)) (pow -1 b))))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.005592204
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005004908)",
      "output_term": "(+ (- (/ 1 a) (/ e (/ -1 (- e a)))) (- (+ a e) (+ (pow a c) (pow -1 b))))",
      "output_weight_simple": 17,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.005074705
    },
    "speedup": 1.1019761739844978,
    "weight_simple_diff": -1,
    "weight_complex_diff": -8,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (+ (* (* (/ (+ 0 (+ (* a 0) 0)) a) (pow (- a 0) 1)) (pow (* -1 c) -1)) (* -1 (+ (/ -1 0) 1))) (* (pow (/ (+ 1 b) 1) (+ 1 -1)) (pow 0 -1))) (pow (- (- (pow 1 1) 1) (- b 0)) (* c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.005434401)",
      "output_term": "(pow (+ -1 (* -1 (/ -1 0))) (pow 0 -1))",
      "output_weight_simple": 7,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.0057615719999999995
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005002278)",
      "output_term": "(pow (- -1 (/ -1 0)) (pow 0 -1))",
      "output_weight_simple": 6,
      "output_weight_complex": 16,
      "output_depth": 4,
      "simplification_time": 0.005207704
    },
    "speedup": 1.1063555071486397,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (- (pow (* (- (/ (/ (* -1 a) a) (- a a)) (/ c a)) (pow (* c b) 0)) 1) (- a (pow c (* 1 1)))) (- (- (- (/ 0 1) d) (pow -1 1)) (/ 1 1))) (/ (+ (pow (/ 1 -1) a) (/ 0 a)) (pow a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005455907)",
      "output_term": "(- (+ (- (- (/ -1 0) (/ c a)) (- a c)) d) (pow -1 a))",
      "output_weight_simple": 13,
      "output_weight_complex": 27,
      "output_depth": 6,
      "simplification_time": 0.005597727
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005011665)",
      "output_term": "(- (- (/ -1 0) (/ c a)) (+ (- a (+ c d)) (+ (pow -1 a) (/ 0 a))))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 5,
      "simplification_time": 0.0050527029999999995
    },
    "speedup": 1.1078678085769142,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (/ (+ (* (pow (pow (+ (- a b) b) (pow -1 1)) (* -1 a)) (+ (- 1 -1) -1)) (* (pow -1 b) 1)) (pow -1 1)) (+ (- (+ (/ c 1) -1) (* 0 -1)) (pow 1 -1))) (/ (pow (/ (* d 1) 1) (pow -1 -1)) (+ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.00526113)",
      "output_term": "(pow (/ (* -1 (+ (pow (/ 1 a) (* a -1)) (pow -1 b))) c) (/ (/ 1 d) (+ -1 e)))",
      "output_weight_simple": 18,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.005562877
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.00500007)",
      "output_term": "(pow (/ (+ (pow (/ 1 (+ (- a b) b)) (- 0 a)) (pow -1 b)) (* -1 c)) (/ (/ 1 d) (+ e -1)))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 8,
      "simplification_time": 0.0050122529999999995
    },
    "speedup": 1.1098555878963015,
    "weight_simple_diff": -3,
    "weight_complex_diff": -2,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (* (pow (pow (* (- (+ -1 (pow a b)) (+ -1 b)) (+ a a)) (/ (* a b) 1)) (+ b (- b a))) (/ c (/ (- b a) -1))) (pow (pow (pow c 0) d) (- a c))) (- (+ (+ (/ c -1) b) (pow b 1)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005508306)",
      "output_term": "(/ (* (pow (pow (* a (* (+ (pow a b) (* -1 b)) 2)) (* a b)) (+ b (- b a))) (* (/ c (+ a (* -1 b))) (pow (pow 1 d) (- a c)))) (+ b (+ b (* -1 (+ (* a b) c)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.005610069
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005016138)",
      "output_term": "(/ -1 (* (/ (- (+ (/ c -1) (+ b b)) (* a b)) c) (/ (/ (- b a) (pow (pow 1 d) (- a c))) (pow (pow (* a (* (- (pow a b) b) 2)) (* a b)) (- (+ b b) a)))))",
      "output_weight_simple": 28,
      "output_weight_complex": 71,
      "output_depth": 10,
      "simplification_time": 0.00505355
    },
    "speedup": 1.1101243680185215,
    "weight_simple_diff": 1,
    "weight_complex_diff": -8,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (* (- (* (pow (pow (- (* -1 a) 0) b) (- c 0)) (* (pow b a) 0)) (+ b (* -1 d))) (/ (- (+ d a) d) (* 0 1))) (pow (/ 0 (+ c a)) (* d a))) (* (- (- (* c 1) a) (* a e)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005399867)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.005596257
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.00500078)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.005031051
    },
    "speedup": 1.1123435242457294,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (* (/ (/ (- (+ 0 (- (- 1 -1) a)) (/ b 0)) (+ (pow a a) -1)) c) (+ (+ 0 (* c d)) (* -1 c))) (- (* (pow (pow c 0) c) (/ 1 -1)) (* -1 -1))) (- (pow (- 1 (+ e b)) (/ a e)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00519874)",
      "output_term": "(* (pow (* (/ (- (- 2 a) (/ b 0)) (+ -1 (pow a a))) (+ -1 d)) (+ -1 (* -1 (pow 1 c)))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.005660948
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005013017)",
      "output_term": "(* (pow (* (- 2 (+ a (/ b 0))) (/ (+ d -1) (+ (pow a a) -1))) (- -1 (pow 1 c))) (- (pow (- 1 (+ e b)) (/ a e)) (/ b a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.005077900999999999
    },
    "speedup": 1.1148204740502032,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (+ (* a a) a) (/ (* 1 a) 1)) (pow (/ 1 a) b)) (+ (pow a -1) b)) (+ (pow (/ d 0) 1) (+ -1 c))) (/ (pow (- 0 0) -1) (pow 1 c))) (+ (+ (pow (* e 1) e) (- a d)) (/ b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005095155)",
      "output_term": "(+ (/ (- (- (pow (* a (+ a 2)) (pow (/ 1 a) b)) (+ b (/ 1 a))) (+ (/ d 0) (+ -1 c))) (/ (pow 0 -1) (pow 1 c))) (+ b (+ (pow e e) (- a d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.005602050000000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005000789)",
      "output_term": "(+ (/ (- (pow (* a (+ a 2)) (pow (/ 1 a) b)) (+ (/ 1 a) (+ b (+ (/ d 0) (+ -1 c))))) (/ (pow 0 -1) (pow 1 c))) (+ (pow e e) (+ (- a d) b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.005013404
    },
    "speedup": 1.117414435381629,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (- (+ 0 (/ (- (/ (- 0 a) a) (- 1 0)) a)) (+ -1 (- b (- a -1)))) (+ (pow 1 b) (+ 1 1))) (* (* (* (/ 1 a) 0) (pow d 0)) (- 1 1))) (/ (/ (/ (* -1 -1) d) (/ d 1)) (pow a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005206357)",
      "output_term": "(* (+ (/ -2 a) (+ (pow 1 b) (+ (* -1 b) (+ 4 a)))) (/ (pow d -2) (pow a a)))",
      "output_weight_simple": 18,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.005655487
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005026954)",
      "output_term": "(/ (+ (- (/ (- (/ (- 0 a) a) 1) a) (- b (+ a 2))) (+ (pow 1 b) 2)) (* d (* d (pow a a))))",
      "output_weight_simple": 20,
      "output_weight_complex": 43,
      "output_depth": 8,
      "simplification_time": 0.005057943
    },
    "speedup": 1.1181397259716055,
    "weight_simple_diff": -2,
    "weight_complex_diff": -3,
    "depth_diff": -2
  },
  {
    "base_term": "(/ (* (* (- (* (pow (/ (+ 0 (/ a a)) a) (pow 1 a)) (+ (* -1 a) 1)) (pow (* 1 1) -1)) (+ (pow (+ 1 -1) -1) (pow a 1))) (* (/ 0 (+ d d)) (/ e c))) (- (* (+ (/ d b) a) (* e -1)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00521422)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.005662314
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005013136)",
      "output_term": "(/ 0 (* (+ (- 0 (* e (+ (/ d b) a))) c) (/ d (* (- (* (pow (/ 1 a) (pow 1 a)) (+ (- 0 a) 1)) 1) (* (+ (pow 0 -1) a) (/ e (* c 2)))))))",
      "output_weight_simple": 30,
      "output_weight_complex": 70,
      "output_depth": 9,
      "simplification_time": 0.0050595629999999996
    },
    "speedup": 1.1191310395779241,
    "weight_simple_diff": -29,
    "weight_complex_diff": -69,
    "depth_diff": -8
  },
  {
    "base_term": "(- (+ (- (/ (/ (* (- 1 (pow (+ 0 a) 1)) (* -1 a)) (/ (/ 0 a) 0)) (/ b (* 1 -1))) (/ (+ (/ 0 0) a) (* a 1))) (+ (pow (- 0 b) 0) (* 0 0))) (/ (- (* (pow d c) 1) (pow a a)) (- e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.00545171)",
      "output_term": "(+ (/ (/ (* a (+ a -1)) (/ 0 0)) (- 0 b)) (* -1 (+ (/ (- (pow d c) (pow a a)) (- e d)) (* (/ 0 0) (/ 1 a)))))",
      "output_weight_simple": 24,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.005705662
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005021389)",
      "output_term": "(- (/ a (/ (/ (/ 0 a) 0) (/ (- 1 a) b))) (+ (/ (+ (/ 0 0) a) a) (- (/ (- (pow d c) (pow a a)) (- e d)) 1)))",
      "output_weight_simple": 24,
      "output_weight_complex": 67,
      "output_depth": 7,
      "simplification_time": 0.005067083
    },
    "speedup": 1.126024973342651,
    "weight_simple_diff": 0,
    "weight_complex_diff": -9,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (/ (+ (- (+ (* (- 0 -1) -1) a) (- 0 -1)) (* (- 1 b) -1)) (+ (+ a b) a)) (- (* (+ a -1) -1) (pow 0 1))) (* (* c (/ b a)) (- 1 0))) (pow (pow (/ (pow d c) e) (- e 0)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005507356)",
      "output_term": "(+ 1 (/ (* -1 (* (/ (+ a (+ -3 b)) (+ a (+ a b))) (+ -1 a))) (* c (/ b a))))",
      "output_weight_simple": 18,
      "output_weight_complex": 36,
      "output_depth": 8,
      "simplification_time": 0.006114003
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005154818)",
      "output_term": "(+ (* (- a (- 3 b)) (/ (* (- 1 a) (/ a (* b c))) (+ a (+ b a)))) 1)",
      "output_weight_simple": 16,
      "output_weight_complex": 30,
      "output_depth": 7,
      "simplification_time": 0.005414381
    },
    "speedup": 1.1292155095845673,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 1
  },
  {
    "base_term": "(* (/ (+ (pow (/ (/ (* a (pow (pow a 0) a)) (* a a)) (- (+ -1 0) -1)) (+ (- 1 c) e)) (- (* (/ b a) c) (/ e e))) (+ (* (- c 1) 0) (pow e 1))) (* (- (* (+ b a) a) (- 0 1)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005405589)",
      "output_term": "(* (/ (+ (pow (/ (/ (* a (pow 1 a)) (* a a)) 0) (+ (- 1 c) e)) (+ -1 (* c (/ b a)))) e) (* (+ 1 (* a (+ a b))) (/ 1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.005919505
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005074516)",
      "output_term": "(* (/ (+ (pow (/ (/ (pow 1 a) a) 0) (+ (- 1 c) e)) (- (* c (/ b a)) 1)) e) (/ (+ (* a (+ b a)) 1) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.005230481
    },
    "speedup": 1.1317324353152225,
    "weight_simple_diff": 4,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (/ (- (* (+ (* (- (- (- 1 a) a) (- 1 -1)) (pow -1 b)) (pow (pow 0 1) -1)) (/ (+ b b) 1)) (* (- c (* 1 0)) (* a a))) (* (pow (pow b e) 1) (* 0 1))) (+ (* (* (- a b) a) (- d 1)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005308754)",
      "output_term": "(/ (/ (- (* (+ (* (+ -1 (* a -2)) (pow -1 b)) (pow 0 -1)) (+ b b)) (* a (* a c))) 0) (+ b (* a (* (- a b) (+ -1 d)))))",
      "output_weight_simple": 25,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.005703285000000001
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.0050122)",
      "output_term": "(/ (/ (- (* 2 (* b (+ (* (- 1 (+ (+ a a) 2)) (pow -1 b)) (pow 0 -1)))) (* a (* a c))) 0) (+ (* a (* (- a b) (- d 1))) b))",
      "output_weight_simple": 27,
      "output_weight_complex": 52,
      "output_depth": 11,
      "simplification_time": 0.005035415
    },
    "speedup": 1.1326345494859908,
    "weight_simple_diff": -2,
    "weight_complex_diff": -2,
    "depth_diff": -2
  },
  {
    "base_term": "(pow (/ (/ (* (* (+ 1 (- (* -1 (+ a 0)) (- b b))) -1) (+ (/ (- b 1) -1) (* -1 b))) (* (+ (- a 1) a) (/ -1 b))) (- (- (+ -1 b) 0) (pow 1 0))) (+ (/ (- (/ 0 e) -1) (- d 0)) (pow c a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005363095)",
      "output_term": "(pow (/ (/ (* (+ -1 a) (+ 1 (* -2 b))) (* (+ -1 (+ a a)) (/ -1 b))) (+ -2 b)) (+ (pow c a) (/ 1 d)))",
      "output_weight_simple": 22,
      "output_weight_complex": 51,
      "output_depth": 7,
      "simplification_time": 0.005741764
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005000455)",
      "output_term": "(pow (* (- (/ (+ -1 b) -1) b) (* (- 1 a) (/ b (* (+ -1 (+ a a)) (- b 2))))) (+ (/ (+ (/ 0 e) 1) d) (pow c a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.005069029
    },
    "speedup": 1.1327147664769721,
    "weight_simple_diff": -4,
    "weight_complex_diff": -5,
    "depth_diff": -1
  },
  {
    "base_term": "(* (+ (+ (pow (pow (* (pow (+ (pow a 1) a) (+ a b)) (- -1 a)) (+ a (+ 1 0))) (/ (+ 0 b) 0)) (- (/ (- 0 a) d) (- a -1))) (* (/ (* 1 a) -1) 1)) (pow (* (- (* 1 0) c) (+ -1 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005641994)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.0057713569999999995
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005017601)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.005067928
    },
    "speedup": 1.1388001171287356,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (* (+ (/ (pow a (* (* (* -1 0) 1) b)) 0) (pow (pow (- a a) 0) (/ 0 0))) (/ (+ c (* -1 b)) c)) (* (/ (pow (- a -1) a) (* -1 1)) (/ b 0))) (/ (- (/ (pow 0 -1) 0) (- 0 0)) (- a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005312295)",
      "output_term": "(pow (* -1 (* (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (/ b 0)) (* (/ (+ c (* -1 b)) c) (pow (- a -1) a)))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 72,
      "output_depth": 8,
      "simplification_time": 0.005763044
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005003704)",
      "output_term": "(pow (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (/ (/ (- c b) c) (/ (/ -1 (/ b 0)) (pow (+ a 1) a)))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 79,
      "output_depth": 7,
      "simplification_time": 0.005028922999999999
    },
    "speedup": 1.145979765448785,
    "weight_simple_diff": 1,
    "weight_complex_diff": -7,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (- (- (- 0 (* (+ (+ (- -1 -1) 0) -1) (/ a b))) (pow (- (pow a c) -1) (* -1 a))) (- (+ (pow a a) 1) (- 0 -1))) (/ (- c (* b 1)) (- b -1))) (- (- (+ d (pow -1 1)) (+ -1 b)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 100,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005691986)",
      "output_term": "(/ (pow (- (- (/ a b) (pow (+ (pow a c) 1) (* -1 a))) (pow a a)) (/ (- c b) (+ b 1))) (+ -1 (* -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.005789556
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005007507)",
      "output_term": "(/ (pow (- (/ a b) (+ (pow (+ (pow a c) 1) (- 0 a)) (pow a a))) (/ (- c b) (+ b 1))) (- d (+ b (+ 1 d))))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.005024154
    },
    "speedup": 1.152344454409638,
    "weight_simple_diff": -2,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (+ (* (pow (/ (/ (- (+ a -1) -1) (/ 1 a)) (* 1 a)) (* (pow a 0) b)) (- (/ c -1) -1)) (* (+ (* -1 -1) c) (pow -1 c))) (* (- 1 (* b 0)) (+ b 0))) (/ (/ (pow (pow e 1) d) c) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005839577)",
      "output_term": "(- (pow (+ (* (pow a b) (+ 1 (* -1 c))) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.006016181000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005110877)",
      "output_term": "(- (pow (+ (* (pow a b) (+ (/ c -1) 1)) (* (+ 1 c) (pow -1 c))) b) (/ (pow e d) a))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 7,
      "simplification_time": 0.005177538
    },
    "speedup": 1.1619771791148614,
    "weight_simple_diff": 2,
    "weight_complex_diff": 7,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (pow (/ (* (+ (* (* -1 (+ a 1)) (- -1 b)) (- -1 a)) (* (* b b) 0)) (- (* a 1) 1)) (pow c (pow (- -1 d) 1))) (* (* -1 (- b d)) (+ 1 0))) (pow (* (+ (+ b a) a) (* c a)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005295765)",
      "output_term": "(/ (+ (pow 0 (pow c (- -1 d))) (- b d)) (* c (* a (+ a (+ a b)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.005912783
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005027976)",
      "output_term": "(/ (+ (pow 0 (pow c (- -1 d))) (- b d)) (* a (* c (+ b (+ a a)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.005087441
    },
    "speedup": 1.1622312671537616,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (+ (/ (+ a (/ (- (pow a 1) -1) (/ a 1))) a) (- (pow (+ c 1) d) (/ a -1))) (* (/ 0 (pow c -1)) (* e e))) (+ (+ c (pow c 0)) (pow e -1))) (pow (- (+ (+ -1 -1) d) (- d c)) (pow d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005202748)",
      "output_term": "(* (+ (+ c (pow e -1)) (+ (+ a (+ 2 (pow (+ 1 c) d))) (+ (pow a -1) (pow a -2)))) (pow (- (+ d -2) (- d c)) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.005829023
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.005001214)",
      "output_term": "(* (+ (/ (+ a (/ (- a -1) a)) a) (+ (- (pow (+ c 1) d) (/ a -1)) (+ c (+ 1 (/ 1 e))))) (pow (- (+ -2 d) (- d c)) d))",
      "output_weight_simple": 25,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.005006432000000001
    },
    "speedup": 1.1643068356865727,
    "weight_simple_diff": -1,
    "weight_complex_diff": -8,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (- (* (* (pow (pow (+ (+ a a) 1) (+ 0 a)) (pow -1 b)) (- (* 1 c) a)) (+ (/ b b) b)) (* (/ (+ -1 d) 1) c)) (+ (pow 0 (/ a c)) (+ a e))) (- (/ (+ (+ c a) c) (pow -1 c)) (pow d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005339408)",
      "output_term": "(+ (- (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ 1 b))) (* (+ -1 d) c)) (+ (pow 0 (/ a c)) (+ a e))) (+ -1 (/ (+ a (+ c c)) (pow -1 c))))",
      "output_weight_simple": 31,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.005555429000000001
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ 1 b))) (+ (* c (- d 1)) (+ (pow 0 (/ a c)) (+ a e)))) (- (/ (+ c (+ a c)) (pow -1 c)) 1))",
      "output_weight_simple": 31,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.004731455
    },
    "speedup": 1.1741481214552396,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(* (- (* (+ (+ (- (- 0 (/ (* a b) b)) (pow a b)) -1) (* (/ 0 (* -1 d)) (* -1 a))) (* (+ (/ a a) d) (- -1 e))) (- (+ (- -1 b) 0) (- -1 a))) (* (* (+ (* c d) 1) (/ -1 c)) (+ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005467864)",
      "output_term": "(* (+ (* (+ (+ d 1) (* (+ d 1) (+ (/ (* a b) b) (pow a b)))) (+ e 1)) (+ b (* a -1))) (* (+ (* d c) 1) (* (/ -1 c) (+ -1 e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.0060127029999999995
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005035906)",
      "output_term": "(* (- (* (+ (- -1 (+ a (pow a b))) (* 0 (/ a d))) (* (+ d 1) (- -1 e))) (- -1 (+ b (- -1 a)))) (/ (+ (* d c) 1) (/ c (- 1 e))))",
      "output_weight_simple": 28,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.005099722
    },
    "speedup": 1.179025641005529,
    "weight_simple_diff": -2,
    "weight_complex_diff": -3,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (pow (/ (+ (* (- (- (- a a) 1) 0) (+ 1 1)) (+ (* a a) a)) a) (* (+ (pow a -1) b) (+ a d))) (pow (+ (* (* -1 -1) d) (* 1 e)) (* d d))) (* (pow (+ (+ b 1) d) (* 1 -1)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005814995)",
      "output_term": "(+ (- (pow (+ a (* (pow a -1) (+ a -2))) (* (+ (pow a -1) b) (+ a d))) (pow (+ d e) (* d d))) (* (/ 1 (+ 1 (+ b d))) (/ b a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.006109555
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005083969)",
      "output_term": "(+ (- (pow (/ (+ -2 (+ (* a a) a)) a) (* (+ (/ 1 a) b) (+ a d))) (pow (+ d e) (* d d))) (/ b (* a (+ b (+ 1 d)))))",
      "output_weight_simple": 24,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.005117801
    },
    "speedup": 1.1937851823468713,
    "weight_simple_diff": 1,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (pow (- (/ (- (- (- a (+ a 1)) (+ a 0)) (* c -1)) (pow (/ d c) 0)) c) (- (* a d) (- 0 1))) (+ (+ (* (- 1 -1) 1) (* d 1)) (- d c))) (+ (* (/ (/ -1 d) -1) (+ a 1)) (- 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.006091132)",
      "output_term": "(/ (* (pow (- -1 a) (+ 1 (* a d))) (+ 2 (+ d (- d c)))) (+ (* (+ a 1) (/ 1 d)) (- 1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 37,
      "output_depth": 6,
      "simplification_time": 0.006459072
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005097127)",
      "output_term": "(/ (pow (- -1 a) (+ 1 (* a d))) (/ (+ (/ (+ a 1) d) (- 1 c)) (+ (+ 2 d) (- d c))))",
      "output_weight_simple": 19,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.005333921
    },
    "speedup": 1.210942569265649,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (* (+ (+ (- (+ a (pow a 1)) (pow a (/ b a))) 0) (* 1 (+ (* d d) d))) (+ 1 (- (+ 0 -1) b))) (+ (/ (- (+ b 1) c) (- 0 0)) (/ d -1))) (+ (pow (pow (* 1 -1) -1) (pow a d)) (pow 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005496436)",
      "output_term": "(+ (* b (* (+ (/ (- (+ 1 b) c) 0) (* d -1)) (* (+ (- (+ a a) (pow a (/ b a))) (+ d (* d d))) -1))) (+ (pow -1 (pow a d)) (pow 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 58,
      "output_depth": 9,
      "simplification_time": 0.006111821
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005012198)",
      "output_term": "(+ (- 0 (* b (* (+ (- (+ a a) (pow a (/ b a))) (+ (* d d) d)) (+ (/ (- b (- c 1)) 0) (/ d -1))))) (+ (pow -1 (pow a d)) (pow 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.005026049
    },
    "speedup": 1.21602893246763,
    "weight_simple_diff": 0,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (/ (- (+ (* (- (* 1 0) a) (+ -1 a)) (pow 1 -1)) a) (/ (+ 1 0) 0)) (- 0 (+ (+ 0 0) a))) (+ (- (* (- 1 1) b) (+ 0 a)) (* a 0))) (* (pow (/ (- -1 -1) b) (* a -1)) (+ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 95,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005920898)",
      "output_term": "(+ (pow (/ (+ 1 (* a (- 0 a))) (/ 1 0)) (- 0 a)) (+ (- 0 a) (* (pow 0 (- 0 a)) (+ d c))))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 7,
      "simplification_time": 0.0062169009999999995
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.005013633)",
      "output_term": "(+ (- (pow (/ (- 1 (* a a)) (/ 1 0)) (- 0 a)) a) (* (pow (/ 0 b) (- 0 a)) (+ d c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.005063693
    },
    "speedup": 1.2277405048054848,
    "weight_simple_diff": -2,
    "weight_complex_diff": -7,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (- (- (pow (* (+ (+ (/ a a) -1) (/ a b)) (pow 0 0)) (* (pow a -1) 1)) (- 1 a)) (+ a (* d b))) (/ (- (+ (- -1 -1) 0) (pow c 0)) (/ 0 d))) (/ (pow (+ (- 1 c) 1) (+ b 1)) (+ e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005856127)",
      "output_term": "(+ (pow (* (/ a b) (pow 0 0)) (/ 1 a)) (+ (/ (pow (+ 1 (- 1 c)) (+ b 1)) (+ 1 e)) (+ -1 (+ (/ 1 0) (* -1 (* b d))))))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.006244192
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.00500963)",
      "output_term": "(+ (- (pow (* a (/ (pow 0 0) b)) (/ 1 a)) (+ (- 1 a) (+ a (+ (* b d) (/ -1 (/ 0 d)))))) (/ (pow (+ (- 1 c) 1) (+ b 1)) (+ e 1)))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.005027383
    },
    "speedup": 1.242036264195507,
    "weight_simple_diff": -2,
    "weight_complex_diff": -5,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (- (+ a (+ (- 1 (/ (+ (* a 0) a) (* 0 b))) (- a (+ a -1)))) (- (* (pow 1 0) a) (pow 1 e))) (pow (pow (- (/ e 1) a) (pow 1 b)) (pow 0 -1))) (* (* (+ (pow d -1) e) (- -1 -1)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.0061117)",
      "output_term": "(+ 2 (+ (* -1 (+ (pow (pow (- e a) (pow 1 b)) (pow 0 -1)) (/ a 0))) (pow 1 e)))",
      "output_weight_simple": 18,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.006305012999999999
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005000702)",
      "output_term": "(- (+ a (+ (- 1 (/ a 0)) 1)) (+ (- a (pow 1 e)) (pow (pow (- e a) (pow 1 b)) (pow 0 -1))))",
      "output_weight_simple": 19,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.005020717
    },
    "speedup": 1.2557993210929832,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 2
  },
  {
    "base_term": "(/ (- (- (+ (- (* (/ (/ (- a a) -1) b) (pow 1 -1)) (+ (* 1 a) 0)) (* (pow -1 1) c)) (pow (- (pow c c) 0) (* 1 c))) (+ (* -1 (pow e d)) (+ c b))) (* (* (- (/ b b) -1) (+ d c)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005099952)",
      "output_term": "(/ (+ (pow e d) (* -1 (+ (+ b c) (+ (pow (pow c c) c) (+ a c))))) (* 2 (* (+ c d) (pow 0 0))))",
      "output_weight_simple": 22,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.005466082000000001
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(/ (- 0 (+ a (+ (+ c (pow (pow c c) c)) (+ (- 0 (pow e d)) (+ c b))))) (* (+ d c) (* 2 (pow 0 0))))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 8,
      "simplification_time": 0.004144727
    },
    "speedup": 1.3188038681437886,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (- (+ (/ (+ -1 (pow (pow (pow a b) -1) (+ -1 b))) (pow (pow 1 -1) b)) (* (/ a 0) -1)) (- (- (+ 0 b) 1) (pow b c))) (/ (/ (* a d) -1) (* -1 1))) (pow (- (/ b (/ -1 a)) (pow e -1)) (/ e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005348782)",
      "output_term": "(* (+ (/ (+ -1 (pow (/ 1 (pow a b)) (+ -1 b))) (pow 1 b)) (* -1 (+ (* a d) (+ (/ a 0) (- (+ -1 b) (pow b c)))))) (- (/ b (/ -1 a)) (/ 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 8,
      "simplification_time": 0.005467219
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(* (- (/ (+ -1 (pow (/ 1 (pow a b)) (+ -1 b))) (pow 1 b)) (+ (/ a 0) (+ (- b (+ 1 (pow b c))) (* a d)))) (- (/ a (/ -1 b)) (/ 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.00400456
    },
    "speedup": 1.3652483668617776,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (- (- (- (- (pow (/ (* -1 a) a) (- -1 1)) (/ a -1)) (pow (* 1 0) 1)) (/ (+ b -1) -1)) (* -1 (+ (- 0 a) 1))) (/ (* (/ 0 0) 0) (* b 1))) (* (* (- (pow b 1) a) (* a 1)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.006085696)",
      "output_term": "(* (/ (+ (pow -1 -2) (+ a (- b a))) 0) (* a (- b a)))",
      "output_weight_simple": 12,
      "output_weight_complex": 23,
      "output_depth": 6,
      "simplification_time": 0.00685958
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005002618)",
      "output_term": "(* (/ (- (pow -1 -2) (+ (/ (+ b -1) -1) -1)) (/ 0 b)) (* a (- b a)))",
      "output_weight_simple": 15,
      "output_weight_complex": 34,
      "output_depth": 7,
      "simplification_time": 0.005015917
    },
    "speedup": 1.367562501532621,
    "weight_simple_diff": -3,
    "weight_complex_diff": -11,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (/ (pow (pow (pow (pow (/ (* (pow a 1) a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c (/ 1 -1))) (+ (+ (/ e a) c) (pow -1 d))) (- (- (pow -1 a) -1) 0)) (/ (+ (+ (/ e a) -1) (* -1 e)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (* -1 c)) (+ c (+ (/ e a) (pow -1 d)))) (+ 1 (pow -1 a))) (/ (+ -1 (+ (/ e a) (* -1 e))) 0))",
      "output_weight_simple": 30,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.0029118780000000006
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c -1)) (+ (/ e a) (+ c (pow -1 d)))) (* (+ (pow -1 a) 1) (/ (+ (/ e a) (- -1 e)) 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 77,
      "output_depth": 8,
      "simplification_time": 0.002096601
    },
    "speedup": 1.3888565349344013,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (* (- (+ (+ (pow (* (+ 1 a) a) 0) (pow a 1)) (* -1 (/ a 1))) (* (* 1 -1) a)) (+ (- a (* -1 b)) (- -1 1))) (- (* (+ 0 -1) -1) (* -1 0))) (* (pow (* (+ a -1) a) (+ 0 0)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.006232888)",
      "output_term": "(* (+ 1 a) (+ a (+ b -2)))",
      "output_weight_simple": 8,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.007228501
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005092372)",
      "output_term": "(* (+ 1 a) (+ a (+ b -2)))",
      "output_weight_simple": 8,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.005127929
    },
    "speedup": 1.4096335967210154,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (- (* (+ (+ 1 a) (+ (pow (- 0 1) 0) (pow -1 b))) (/ (+ b -1) c)) (+ (+ (/ a -1) 1) (+ a b))) (* (+ (pow (* d -1) -1) (- d d)) (+ -1 d))) (* (pow (pow (/ c -1) e) (/ -1 b)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.006505181)",
      "output_term": "(+ (/ (- (* (+ a (+ (pow -1 b) 2)) (/ (+ -1 b) c)) (+ 1 b)) (* (/ 1 (* -1 d)) (+ -1 d))) (pow (pow (* -1 c) e) (/ -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.007189466
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005000642)",
      "output_term": "(+ (* (- (* (+ a (+ (pow -1 b) 2)) (/ (+ b -1) c)) (+ (/ a -1) (+ a (+ b 1)))) (/ d (- 1 d))) (pow (pow (/ c -1) e) (/ -1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.00500873
    },
    "speedup": 1.4353870142730791,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (* (/ (+ (pow (- (pow -1 0) a) (pow -1 -1)) a) (+ (+ 1 1) a)) (- (+ a b) 0)) (/ (* 0 (pow 0 d)) (+ -1 -1))) (+ (- a (* -1 0)) (/ 1 c))) (/ (+ (/ (/ c 1) -1) (- e b)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005041335)",
      "output_term": "(+ (* (/ (+ a (/ 1 (- 1 a))) (+ a 2)) (* (+ a b) (+ a (/ 1 c)))) (/ (+ (* -1 c) (- e b)) (* -1 a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.005643469
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (+ (/ 1 (- 1 a)) a) (/ (/ (+ 2 a) (+ a b)) (+ a (/ 1 c)))) (/ (+ (/ c -1) (- e b)) (- 0 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 6,
      "simplification_time": 0.003872078
    },
    "speedup": 1.4574781293145438,
    "weight_simple_diff": -1,
    "weight_complex_diff": -9,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (- (- (+ (* (* (pow (* (/ 1 a) a) (- 1 -1)) (+ a 0)) (* 0 (- a 0))) (* (* -1 a) 0)) (pow (+ a (pow -1 -1)) (- a 1))) (pow (/ (/ c a) b) -1)) (- (+ (- (- 1 0) e) (/ 1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.005633994)",
      "output_term": "(/ (- (- 0 (pow (+ a -1) (+ a -1))) (/ 1 (/ (/ c a) b))) (+ -1 (* -1 e)))",
      "output_weight_simple": 17,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.005723619
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (- 0 (+ (pow (+ a -1) (+ a -1)) (* a (/ b c)))) (- -1 e))",
      "output_weight_simple": 14,
      "output_weight_complex": 30,
      "output_depth": 6,
      "simplification_time": 0.003277822
    },
    "speedup": 1.7461652890242363,
    "weight_simple_diff": 3,
    "weight_complex_diff": 11,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (* (* (- (- (/ (pow -1 a) a) (/ 0 c)) (/ 1 a)) (pow (/ a -1) 0)) (/ (+ c a) c)) (+ b (* (+ 1 0) d))) (* (* (- a a) a) (pow a 0))) (- (* (* (- b e) 1) (/ a 1)) (/ 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.00518316)",
      "output_term": "(+ (pow (* (+ (/ 1 a) (pow c -1)) (+ -1 (pow -1 a))) (+ b d)) (- (* a (- b e)) (pow c -1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.005357039
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* (- (/ (pow -1 a) a) (+ (/ 0 c) (/ 1 a))) (/ (+ c a) c)) (+ b d)) (- (* a (- b e)) (/ 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.002963728
    },
    "speedup": 1.8075339572322426,
    "weight_simple_diff": -5,
    "weight_complex_diff": -18,
    "depth_diff": -1
  },
  {
    "base_term": "(- (* (- (/ (- (+ (pow (- (* -1 -1) -1) (* a b)) (pow b -1)) (+ (- -1 c) -1)) (+ d 1)) (* (+ (+ 1 0) d) (+ -1 a))) (- (- (+ 1 c) -1) (/ b -1))) (* (* (* -1 (/ 0 c)) (/ b d)) (+ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005490802)",
      "output_term": "(* (- (/ (+ (pow 2 (* a b)) (+ (pow b -1) (+ 2 c))) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (+ b (+ 2 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 37,
      "output_depth": 7,
      "simplification_time": 0.005757079
    },
    "Extended": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(* (- (/ (- (+ (pow 2 (* a b)) (pow b -1)) (+ (- -1 c) -1)) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (- (+ c 2) (/ b -1)))",
      "output_weight_simple": 23,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.003138415
    },
    "speedup": 1.8343906079979864,
    "weight_simple_diff": -3,
    "weight_complex_diff": -7,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (pow (/ (* (* (* (pow (+ a a) a) (- -1 a)) (/ a a)) 0) (pow (pow b 1) -1)) (/ b (+ a (+ b a)))) (/ (+ (* (+ -1 -1) b) (+ -1 a)) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005029295)",
      "output_term": "(/ (* (pow 0 (/ b (+ a (+ a b)))) (/ (+ a (+ -1 (* b -2))) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.005065941
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow 0 (/ b (+ a (+ b a)))) (* (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)) (/ (- -1 d) (+ (* b -2) (- a 1)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.002687689
    },
    "speedup": 1.8848687478350359,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (+ (* (pow (* (- (+ 0 a) b) (pow 1 -1)) (pow 1 -1)) (* (pow a 1) 1)) (+ (pow a 0) 0)) (- (* b (pow c -1)) (* 1 c))) (* (pow (* -1 0) 1) c)) (+ (pow (- (pow c c) 1) (/ 0 b)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.006257963)",
      "output_term": "(+ -1 (+ c (+ (* a a) (* (* b -1) (+ a (/ 1 c))))))",
      "output_weight_simple": 13,
      "output_weight_complex": 23,
      "output_depth": 7,
      "simplification_time": 0.006648012
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (* a (- a b)) (+ (- (/ b c) (+ c 1)) 2))",
      "output_weight_simple": 12,
      "output_weight_complex": 20,
      "output_depth": 5,
      "simplification_time": 0.0034383409999999997
    },
    "speedup": 1.9334940891552062,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 2
  },
  {
    "base_term": "(- (+ (* (+ (- (+ (- (/ (+ a b) -1) (+ -1 0)) (+ 1 a)) (pow (+ 0 -1) b)) d) (- (+ (* b d) a) 0)) (* (* (* (+ d 1) c) (/ -1 a)) (* 0 d))) (* (+ (- (- c 1) 0) (* b c)) (/ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005027707)",
      "output_term": "(+ (* (+ (+ (* -1 (+ (pow -1 b) (+ a b))) (+ a 2)) d) (+ a (* b d))) (* (+ -1 (+ c (* b c))) (/ 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 39,
      "output_depth": 8,
      "simplification_time": 0.005217457
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (* (+ (- (+ (/ (+ a b) -1) (+ a 2)) (pow -1 b)) d) (+ (* b d) a)) (* (+ (- c 1) (* b c)) (/ -1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 42,
      "output_depth": 8,
      "simplification_time": 0.002304965
    },
    "speedup": 2.2635731995930524,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (/ (/ (/ (- (pow (- a (pow b 1)) (pow b -1)) (/ 1 -1)) (/ (- b b) 0)) (- (/ 1 1) d)) (+ (pow 0 (* 0 -1)) (/ -1 -1))) (- (- (* b b) 0) 0)) (- (* (* (* 1 0) a) (pow e e)) (/ a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.00500081)",
      "output_term": "(+ a (/ (/ (/ (/ (+ 1 (pow (- a b) (/ 1 b))) (/ 0 0)) (- 1 d)) (+ 1 (pow 0 0))) (* b b)))",
      "output_weight_simple": 19,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.005030758
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (+ (pow (- a b) (/ 1 b)) 1) (* (- 1 d) (* (/ 0 0) (* (+ (pow 0 0) 1) (* b b))))) (/ a -1))",
      "output_weight_simple": 21,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.002198796
    },
    "speedup": 2.287960320102456,
    "weight_simple_diff": -2,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (+ (+ a (- (- (/ -1 (pow (/ 0 a) 1)) (+ 0 0)) (pow (* a b) 1))) (/ (- (pow a c) 0) (* -1 0))) (/ (pow (* a (- c 0)) (+ d b)) (/ 1 b))) (- (* (- a (* c c)) (* a 0)) (pow e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (- (/ -1 0) (* a b)) (+ a (/ (pow a c) 0))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (- 0 (pow e d)))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.002028529
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (+ (- (/ -1 (/ 0 a)) (* a b)) (/ (pow a c) 0))) (* b (pow (* a c) (+ d b)))) (pow e d))",
      "output_weight_simple": 22,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.0008555379999999999
    },
    "speedup": 2.371056574927122,
    "weight_simple_diff": 2,
    "weight_complex_diff": 5,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (* (/ (- (/ (pow (pow (- 0 1) a) (* 1 0)) (* a 0)) (+ a (+ b 0))) (* -1 (* c d))) (+ (* (/ 0 d) c) b)) (pow (* (/ a 0) c) (pow 0 d))) (/ (pow (pow (- 1 d) e) (* 1 1)) (/ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005004925)",
      "output_term": "(pow (- (* b (/ (- (/ 1 0) (+ a b)) (* c (* -1 d)))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.005086885
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (* (/ (- (/ 1 0) (+ a b)) (* c (- 0 d))) (+ (* c (/ 0 d)) b)) (pow (* c (/ a 0)) (pow 0 d))) (/ c (/ d (pow (- 1 d) e))))",
      "output_weight_simple": 27,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.001942962
    },
    "speedup": 2.6181083315062263,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (pow (* (/ (pow (pow (* (pow -1 1) a) -1) (* 0 a)) (pow (* 1 b) 0)) b) (/ (* 1 (* 0 b)) (pow 1 a))) (+ (/ (+ (pow d -1) 1) (* 1 b)) (* 0 0))) (/ (+ (- (+ 0 c) 0) (* c -1)) (+ 0 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.005126469)",
      "output_term": "(pow 1 (/ (+ 1 (/ 1 d)) b))",
      "output_weight_simple": 7,
      "output_weight_complex": 20,
      "output_depth": 5,
      "simplification_time": 0.005175678
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (pow b (/ 0 (pow 1 a))) (/ (+ (/ 1 d) 1) b)) (/ 0 e))",
      "output_weight_simple": 15,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.0019206190000000001
    },
    "speedup": 2.694796833729126,
    "weight_simple_diff": -8,
    "weight_complex_diff": -24,
    "depth_diff": -1
  },
  {
    "base_term": "(* (* (pow (* (+ (+ 0 (pow (+ (/ a 0) a) (pow -1 a))) (+ 0 (/ -1 1))) (pow (/ -1 0) b)) (- (pow (* a b) d) (pow a 0))) (- (/ (* b a) 1) (- -1 a))) (+ (- (- (+ 1 b) b) (* a 1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.006189329)",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (+ -1 (pow (* a b) d))) (* (+ a (+ 1 (* a b))) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.006770762
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (* (+ (pow (+ (/ a 0) a) (pow -1 a)) -1) (pow (/ -1 0) b)) (- (pow (* a b) d) 1)) (* (- (* a b) (- -1 a)) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.002431831
    },
    "speedup": 2.784223903716993,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (/ (- (+ (* (- (* 1 a) b) (/ (- b a) 1)) (/ 1 (+ d c))) (* (/ d 1) a)) (- (/ (/ 1 -1) 1) (- c 0))) (+ (+ (+ -1 c) e) (/ 1 c))) (/ (+ (+ (/ -1 -1) e) (+ 0 1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005430426)",
      "output_term": "(/ (+ c (+ (/ (- (+ (* (- a b) (- b a)) (/ 1 (+ d c))) (* a d)) (- -1 c)) (+ e (+ -1 (/ 1 c))))) (/ (+ e 2) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.005912489
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (+ (* (- a b) (- b a)) (/ 1 (+ d c))) (* a d)) (- -1 c)) (+ -1 (+ (+ c e) (/ 1 c)))) (/ (+ e 2) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.002084761
    },
    "speedup": 2.8360512308125485,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (pow (/ (/ (+ (pow a 0) b) (- 1 0)) b) (/ (- 0 0) a)) (/ (- b 1) 0)) (- (pow (pow 1 a) 1) (pow 1 -1))) (- (* (- 1 0) -1) (* a 1))) (/ (pow (+ (+ c 1) 0) (* 0 -1)) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.005000791)",
      "output_term": "(/ (+ (/ (- 1 (/ (+ b -1) 0)) (+ (pow 1 a) -1)) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 15,
      "output_weight_complex": 36,
      "output_depth": 7,
      "simplification_time": 0.005015825
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (pow (/ (+ b 1) b) (/ 0 a)) (/ (- b 1) 0)) (- (pow 1 a) 1)) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 19,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.0016376939999999999
    },
    "speedup": 3.0627363842085273,
    "weight_simple_diff": -4,
    "weight_complex_diff": -15,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (+ (+ (+ (+ (- (pow (/ (pow a 0) b) -1) (pow 0 b)) (pow (- a b) -1)) (- (pow -1 c) -1)) (pow (pow (* d d) e) (/ 1 1))) (/ (/ (+ d 0) d) (pow 1 e))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005142543)",
      "output_term": "(pow (+ (- (/ 1 (/ 1 b)) (pow 0 b)) (+ (pow -1 c) (+ 1 (+ (/ 1 (- a b)) (+ (pow (* d d) e) (/ 1 (pow 1 e))))))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 31,
      "output_weight_complex": 83,
      "output_depth": 9,
      "simplification_time": 0.005224459999999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (+ (+ (- b (pow 0 b)) (/ 1 (- a b))) (+ (+ (pow -1 c) 1) (pow (* d d) e))) (/ 1 (pow 1 e))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.001588305
    },
    "speedup": 3.289330449756186,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (pow (* (+ (+ (+ (* (pow 0 (pow 1 a)) (+ b b)) (- 1 b)) (/ (* b 0) 0)) (- (- -1 a) c)) (* (+ (pow 0 1) a) (+ d 1))) (/ (- -1 (+ a -1)) (/ 1 0))) (* (* (* (pow 0 e) e) 0) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005820467)",
      "output_term": "(pow (* (+ (/ 0 0) (+ (* (pow 0 (pow 1 a)) (+ b b)) (* -1 (+ (+ a c) b)))) (+ a (* a d))) (/ (* a -1) (/ 1 0)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.006045151
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (+ (* (pow 0 (pow 1 a)) (+ b b)) (+ (- 1 b) (+ (/ 0 0) (- -1 (+ a c))))) (* a (+ d 1))) (/ (- -1 (+ a -1)) (/ 1 0)))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.0015482520000000002
    },
    "speedup": 3.9045006885184064,
    "weight_simple_diff": -2,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (- (/ (+ (- (- (+ a a) 1) a) (* -1 a)) (pow a (/ a 0))) d) (/ (* (pow 0 0) -1) (* a 0))) (* (+ (* (/ b 0) d) (* -1 1)) (/ a -1))) (* (+ (/ (+ b c) -1) (- 1 -1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005511949)",
      "output_term": "(pow (* a (* -1 (* (pow (- (/ -1 (pow a (/ a 0))) d) (* -1 (pow 0 -1))) (+ -1 (* d (/ b 0)))))) (* (+ (* -1 (+ b c)) 2) (pow -1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.005678866
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (pow (- (/ -1 (pow a (/ a 0))) d) (/ (- 0 (pow 0 0)) 0)) (* (+ (* d (/ b 0)) -1) (/ a -1))) (* (+ (/ (+ b c) -1) 2) (pow -1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.0014371479999999999
    },
    "speedup": 3.951483076203704,
    "weight_simple_diff": -1,
    "weight_complex_diff": -10,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (- (pow (pow (+ (/ (+ (+ (+ a a) b) (+ -1 b)) (pow b c)) (- -1 (pow c c))) (* (/ -1 b) a)) (- (* (+ 0 -1) c) (/ 0 1))) (- a (* (- e 0) e))) (+ (+ (/ (pow 1 -1) 1) (+ c c)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005518594)",
      "output_term": "(+ c (+ (- (pow (pow (+ (/ (+ -1 (* (+ a b) 2)) (pow b c)) (- -1 (pow c c))) (* a (/ -1 b))) (* -1 c)) (- a (* e e))) (+ c 1)))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 11,
      "simplification_time": 0.005729256
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (pow (pow (+ (/ (- (* 2 (+ a b)) 1) (pow b c)) (- -1 (pow c c))) (* a (/ -1 b))) (- 0 c)) (- a (* e e))) (+ c (+ c 1)))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 10,
      "simplification_time": 0.0013932410000000001
    },
    "speedup": 4.112178725719383,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (+ (+ (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) d)) (+ (+ 1 c) a)) (/ (+ (* d e) 1) -1)) (+ (- (* (/ d e) d) (/ c 1)) (/ -1 -1))) (+ (- (pow (pow -1 -1) 1) (* d d)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 9,
    "Baseline": {
      "iterations": 5,
      "stop_reason": "TimeLimit(0.005176538)",
      "output_term": "(+ (* (+ a (+ (+ -1 (* (* d e) -1)) (+ (pow (- (pow 1 a) (+ b c)) c) (+ (+ (pow 1 c) d) (+ 1 c))))) (+ 1 (- (* d (/ d e)) c))) (+ c (- -1 (* d d))))",
      "output_weight_simple": 30,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.00551368
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) (+ (+ d (+ 1 (+ c a))) (/ (+ (* d e) 1) -1)))) (+ (- (* d (/ d e)) c) 1)) (+ (- -1 (* d d)) c))",
      "output_weight_simple": 30,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.0012110920000000002
    },
    "speedup": 4.552651656521552,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (- (+ (- (- (- -1 (/ 1 (- 0 0))) (pow 1 -1)) (* (/ 0 -1) 1)) a) (pow (pow (pow 0 1) 0) (/ 0 0))) (pow (pow (pow (- -1 1) b) (pow 1 0)) (* b -1))) (* (+ (- (- a 0) 0) (- e e)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005131329)",
      "output_term": "(pow (* (- (+ (* -1 (/ 1 0)) (+ -2 a)) (pow 1 (/ 0 0))) (pow (pow -2 b) (* -1 b))) (* -1 (* a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.005187926000000001
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (- (+ (- -1 (+ (/ 1 0) 1)) a) (pow (pow 0 0) (/ 0 0))) (pow (pow -2 b) (- 0 b))) (* c (- 0 a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.0011208869999999999
    },
    "speedup": 4.6284112493052385,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 (/ 0 -1))) (- (+ (+ d c) 0) (+ a 1))) (- (- (* -1 (+ d -1)) (pow d 1)) (+ -1 -1))) (* (- (+ (- 1 b) 0) (- e 0)) (* d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.00544029)",
      "output_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 0)) (+ -1 (+ (- c a) d))) (+ (* d -2) 3)) (* d (* d (- (- 1 b) e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.005783066
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* (- (+ a (/ (- c a) (/ (pow c b) (+ a a)))) (/ 1 0)) (- (+ d c) (+ a 1))) (- 1 (+ d (+ d -2)))) (* d (* d (- 1 (+ b e)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.001080884
    },
    "speedup": 5.350311411770365,
    "weight_simple_diff": 0,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (/ (- (+ (pow (- 0 (+ (+ -1 a) a)) (+ b -1)) (+ 0 a)) (+ (- 0 b) 0)) (- (* (/ 1 a) 0) 0)) (* (- (+ b (pow 1 1)) (* -1 c)) (pow d 1))) (- (* (pow b (* b -1)) (pow a 1)) (- -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.005006634)",
      "output_term": "(- (* (/ (+ b (+ a (pow (+ 1 (* a -2)) (+ -1 b)))) 0) (* (+ (+ b 1) c) d)) (+ c (+ 1 (* a (pow b (- 0 b))))))",
      "output_weight_simple": 25,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.005643229
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (* (/ (+ (pow (- 1 (+ a a)) (+ -1 b)) (+ a b)) 0) (* (+ (+ b 1) c) d)) (+ (* a (pow b (- 0 b))) (+ 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.000927685
    },
    "speedup": 6.083130588507952,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) (+ 0 1)) (/ 0 0)) (/ (+ 1 b) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ b (+ a c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (pow e -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005005316)",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ a (+ b c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (/ 1 e))))",
      "output_weight_simple": 34,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.0050556870000000005
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ b (+ a c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (/ 1 e))))",
      "output_weight_simple": 34,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.000793546
    },
    "speedup": 6.371006847744177,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (/ (- (* (pow (+ (+ -1 0) (/ 0 0)) (/ a 0)) (+ (* a b) a)) (* (+ 1 1) e)) (pow (/ 0 (pow 1 -1)) (- d 0))) (/ (pow (/ 0 d) b) (pow e -1))) (- (* (pow (/ d b) a) (- d d)) (/ 0 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005342633)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.005464694
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (/ (- (* a (* (pow (+ -1 (/ 0 0)) (/ a 0)) (+ b 1))) (* 2 e)) (pow 0 d)) (* e (pow (/ 0 d) b))) (- 0 (/ 0 c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.000724878
    },
    "speedup": 7.538777559810065,
    "weight_simple_diff": -26,
    "weight_complex_diff": -65,
    "depth_diff": -9
  },
  {
    "base_term": "(* (- (pow (/ (pow (* -1 (+ (+ -1 (pow a 1)) (+ a a))) b) (+ 1 (* (+ 0 a) -1))) (pow (pow 1 (pow a b)) c)) (+ (- (pow b (pow -1 a)) (* 0 1)) (+ a 0))) (- (- (+ (* c c) d) (- 0 d)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005582689)",
      "output_term": "(* (- (pow (/ (pow (+ 1 (* a -3)) b) (+ 1 (* -1 a))) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ (* c c) (+ 1 (+ d d))))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.0057751930000000005
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (- (pow (/ (pow (- 1 (* a 3)) b) (- 1 a)) (pow (pow 1 (pow a b)) c)) (+ (pow b (pow -1 a)) a)) (+ (* c c) (+ d (+ d 1))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.0007426459999999999
    },
    "speedup": 7.776508592249876,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (+ (/ a (- (- (/ (- (- 1 a) 0) (* 0 a)) 1) (+ (/ b 0) a))) (/ (* (- 1 c) a) (/ 0 e))) (- (pow (* (- a -1) d) (+ d b)) (pow d e))) (* (pow (+ (* 0 a) c) (* -1 -1)) (pow b e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.00500693)",
      "output_term": "(* (pow (+ (/ a (- (+ (/ (- 1 a) 0) -1) (+ a (/ b 0)))) (/ (* a (- 1 c)) 0)) (- (pow (+ d (* a d)) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.005042094
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ (/ a (- (/ (- 1 a) 0) (+ (/ b 0) (+ a 1)))) (/ a (/ 0 (* (- 1 c) e)))) (- (pow (* (+ a 1) d) (+ d b)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.000591029
    },
    "speedup": 8.531043315979419,
    "weight_simple_diff": 1,
    "weight_complex_diff": -3,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (- (/ a 0) (pow 0 a)) (- a 0)) (* (* -1 a) c)) c) (+ (+ (* c 0) -1) (- c c))) (+ (/ (+ (pow 1 d) 0) (- -1 -1)) (+ 1 -1))) (- (- (+ (pow 0 0) -1) (pow 1 c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.005004056)",
      "output_term": "(+ (/ (+ (- (pow (+ a (- (/ a 0) (pow 0 a))) (* a (* -1 c))) c) 1) (/ (pow 1 d) 0)) (- (+ -1 (pow 0 0)) (pow 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.00502875
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (- (pow (+ (- (/ a 0) (pow 0 a)) a) (- 0 (* a c))) (+ -1 c)) (/ (pow 1 d) 0)) (- (pow 0 0) (+ 1 (pow 1 c))))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.000589288
    },
    "speedup": 8.533603263599463,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (pow (+ (- (- (- 0 1) a) (/ a -1)) (pow 1 -1)) (/ (- 0 -1) 1)) (* 0 0)) (pow (* (- a a) 1) (pow c d))) (+ (pow (- a 1) c) (* 0 b))) (/ (- (- (/ -1 c) d) (- 1 -1)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005183842)",
      "output_term": "(/ (pow (+ -1 a) c) (/ (+ (- (/ -1 c) d) -2) 0))",
      "output_weight_simple": 13,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.005317231
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (+ (- (- -1 a) (/ a -1)) 1) (pow 0 (pow c d))) (pow (- a 1) c)) (/ (- (/ -1 c) (+ d 2)) 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.000596121
    },
    "speedup": 8.919717641217137,
    "weight_simple_diff": -9,
    "weight_complex_diff": -23,
    "depth_diff": -1
  },
  {
    "base_term": "(- (* (+ (* (* (pow (pow (+ -1 (/ a a)) (+ 1 a)) (pow 1 a)) (pow (+ -1 b) a)) (/ (* 1 0) -1)) (- (- (pow 0 0) 1) (- 1 b))) (pow 1 (/ (pow 0 d) d))) (* (* (pow (- -1 0) c) (/ b d)) (- d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.005042142)",
      "output_term": "(* (+ (pow 0 0) (+ b -2)) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.005122299
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (- (pow 0 0) (- 2 b)) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.000549124
    },
    "speedup": 9.32812807307639,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (pow (/ (pow (+ (+ (* a a) a) (/ b -1)) (/ a 0)) (* (pow -1 1) a)) (/ (- -1 -1) a)) (+ (+ (* 1 1) a) b)) (pow (- (* a a) 0) (+ e e))) (* (+ (+ (/ -1 e) 0) (pow -1 0)) (* e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.00528916)",
      "output_term": "(/ (- (/ 1 (+ a (+ b 1))) (pow (* a a) (+ e e))) (* d (+ -1 e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.005344233
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (pow (/ (pow (+ a (+ (* a a) (/ b -1))) (/ a 0)) (- 0 a)) (/ 0 a)) (+ 1 (+ a b))) (pow (* a a) (+ e e))) (* (+ (/ -1 e) 1) (* e d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.000505171
    },
    "speedup": 10.579057388488255,
    "weight_simple_diff": -12,
    "weight_complex_diff": -39,
    "depth_diff": -4
  },
  {
    "base_term": "(- (+ (/ (- (/ (+ (- (* (* 0 0) 1) (/ 1 a)) (/ b b)) (- (- b a) 0)) (- -1 (+ -1 -1))) (pow (- 0 (- d 0)) (/ d -1))) (pow (/ (* 0 c) 1) (pow b 0))) (* d (* (- (+ -1 b) 0) (* e d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.005028101)",
      "output_term": "(- (/ (+ (/ (+ 1 (- 0 (/ 1 a))) (- b a)) -1) (pow (- 0 d) (- 0 d))) (* e (* d (* d (+ b -1)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 43,
      "output_depth": 8,
      "simplification_time": 0.005080907999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (/ (+ (- 0 (/ 1 a)) 1) (- b a)) 1) (pow (- 0 d) (/ d -1))) (* (+ -1 b) (* d (* d e))))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 8,
      "simplification_time": 0.00046123400000000004
    },
    "speedup": 11.015900822575958,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (+ (/ (/ (+ (- (+ 1 1) 1) (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow (- 0 1) a)) (- (/ (+ c 1) b) (/ e c))) (- (/ (- d b) -1) (- 0 -1))) (* (+ (pow -1 c) (* b -1)) (- 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005257259)",
      "output_term": "(/ (+ 1 (+ (/ (+ (/ (/ (- 1 a) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (- d b))) (* (+ (pow -1 c) (* -1 b)) (- 1 a)))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.0054818950000000005
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (+ (/ (+ 1 (/ a -1)) (* (/ a 0) (pow (- 0 a) c))) (pow -1 a)) (- (/ (+ c 1) b) (/ e c))) (- (/ (- d b) -1) 1)) (* (- (pow -1 c) b) (- 1 a)))",
      "output_weight_simple": 31,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.000491952
    },
    "speedup": 11.143150144729567,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (- (pow (/ (+ (pow (pow (- a a) -1) -1) (* 0 b)) (- b (* d a))) (pow (+ 0 0) -1)) (- (* (pow d 1) 0) (* a c))) (/ (- (- a b) 0) (pow -1 c))) (/ (- (+ (+ 0 -1) d) (/ a e)) (- e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.005011478)",
      "output_term": "(- (pow (+ (pow (/ (/ 1 (pow 0 -1)) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- (+ -1 d) (/ a e)) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.005022747
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (pow (/ (/ 1 (pow 0 -1)) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- d (+ 1 (/ a e))) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.000418625
    },
    "speedup": 11.998201254105703,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (/ (pow (/ (* (* (- a -1) -1) (- a a)) (pow -1 -1)) (* (/ 0 a) a)) (* (/ 0 a) b)) (+ (- (/ 0 1) 0) (/ -1 a))) (+ (- (/ b -1) c) (/ 1 -1))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.005022081)",
      "output_term": "(/ (* (+ (/ 1 0) (/ -1 a)) (+ -1 (- (* -1 b) c))) (+ b (+ b (* (/ 1 0) (pow -1 b)))))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.005142375
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (pow 0 0) (/ 0 (/ a b))) (/ -1 a)) (/ (+ (* (/ 1 0) (pow -1 b)) (+ b b)) (+ (- (/ b -1) c) -1)))",
      "output_weight_simple": 22,
      "output_weight_complex": 64,
      "output_depth": 6,
      "simplification_time": 0.000420134
    },
    "speedup": 12.239844906625029,
    "weight_simple_diff": -4,
    "weight_complex_diff": -25,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (/ (pow (/ (- (pow (* (- 0 1) a) (* b c)) (* c -1)) (+ (* d d) d)) (/ (- d 1) 0)) (- (- (pow -1 0) c) (+ -1 -1))) (- a (pow (* c c) 0))) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (pow (/ (+ c (pow (* -1 a) (* c b))) (+ d (* d d))) (/ (+ -1 d) 0)) (+ (* -1 c) 3)) (+ -1 a)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.004080918
    },
    "Extended": {
      "iterations": 3,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (pow (/ (+ (pow (- 0 a) (* b c)) c) (+ (* d d) d)) (/ (- d 1) 0)) (- 1 (+ c -2))) (- a 1)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.00033069299999999996
    },
    "speedup": 12.340503125255148,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (/ (/ (- (pow (- 0 (+ (- a a) -1)) (* a b)) (/ (+ 0 1) 0)) (- (* b a) c)) (+ (+ (+ 1 1) 1) (* 1 -1))) (- (* (* 0 1) -1) (pow a 0))) (pow (+ (/ d (- a 1)) (pow 0 0)) (+ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.005049727)",
      "output_term": "(* (+ -1 (* (/ (- (pow 1 (* a b)) (/ 1 0)) (- (* a b) c)) 0.5)) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.005070388
    },
    "Extended": {
      "iterations": 3,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (/ (- (pow 1 (* a b)) (/ 1 0)) (* (- (* a b) c) 2)) -1) (pow (+ (/ d (- a 1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.000223276
    },
    "speedup": 22.709059639190958,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  }
]