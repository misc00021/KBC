[
  {
    "base_term": "(+ (pow (+ (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (* (/ 0 (/ a -1)) (+ -1 c))) (pow (* (/ a 0) 0) (- 0 c))) (* (pow (- 1 -1) 0) (pow c a))) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (* (/ (* (pow 0 a) (* -1 (pow 1 a))) 0) c) (pow 0 (- 0 c))) (pow c a)) (/ (pow (+ (- 0 e) b) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.000982463
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.119366142)",
      "output_term": "(+ (pow (+ (* (/ (* (/ (pow 0 a) -1) (pow 1 a)) 0) c) (+ (/ 0 (/ a -1)) (pow 0 (- 0 c)))) (pow c a)) (/ (pow (- b e) (pow 0 b)) (pow 1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.12365926299999999
    },
    "speedup": 0.007944920389829593,
    "weight_simple_diff": -2,
    "weight_complex_diff": -13,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (- (pow (pow (- (/ (pow (/ a 1) a) (- -1 b)) a) (/ c (/ 0 1))) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ (/ (+ 0 a) 1) (/ 0 0))) (pow (/ (* (/ e e) d) (+ 0 e)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow a a) (- -1 b)) a) (/ c 0)) (+ a 1)) (pow (/ (* b b) c) (pow e d))) (+ a (/ 0 0))) (pow (/ d e) (* a a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.001905467
    },
    "Extended": {
      "iterations": 32,
      "stop_reason": "TimeLimit(0.100019589)",
      "output_term": "(- (/ (- (pow (pow (- (/ (pow a a) (- -1 b)) a) (/ c 0)) (- 1 (/ a -1))) (pow (/ (* b b) c) (pow e d))) (+ a (/ 0 0))) (pow (/ d e) (* a a)))",
      "output_weight_simple": 29,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.100114389
    },
    "speedup": 0.019032898457783127,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (- (* (* (pow (pow 1 0) (pow -1 a)) (/ 0 0)) -1) (+ (* (pow 1 b) b) (- 0 0))) (/ (* (- a -1) a) (- c 0))) (* (pow -1 (+ -1 c)) (+ 1 0))) (/ (+ (/ d (+ 0 a)) (- c c)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (- (* (pow 1 (pow -1 a)) (* -1 (/ 0 0))) (* b (pow 1 b))) (/ (+ a (* a a)) c)) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.002037258
    },
    "Extended": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.102633778)",
      "output_term": "(+ (pow (- (/ (+ a (pow a 2)) c) (+ (* (pow 1 (pow -1 a)) (/ 0 0)) (* b (pow 1 b)))) (pow -1 (+ -1 c))) (/ (/ d a) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.104580888
    },
    "speedup": 0.019480213248906437,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (* (/ (- 1 (pow (/ (/ 1 a) 0) (/ 0 1))) (/ (/ a 1) 0)) (* (- a b) b)) (/ (pow c (/ 0 a)) (pow c d))) (+ (- (+ c b) 0) (pow a e))) (/ (/ (+ d (/ 1 -1)) (pow e c)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 143,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (pow 0 (/ 1 (pow c d))) (+ b (+ c (pow a e)))) (/ (/ (+ d -1) (pow e c)) (- e b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 54,
      "output_depth": 6,
      "simplification_time": 0.0027982780000000004
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.104614191)",
      "output_term": "(pow (* (pow (/ 0 (/ a 0)) (/ (pow c (/ 0 a)) (pow c d))) (+ c (+ b (pow a e)))) (/ (/ (+ d -1) (- e b)) (pow e c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.10678375500000001
    },
    "speedup": 0.02620509083989414,
    "weight_simple_diff": -3,
    "weight_complex_diff": -18,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (/ (pow (pow (/ (/ (/ (pow a 1) b) (/ 0 b)) (+ c c)) (/ -1 (+ -1 b))) (/ 0 (pow e c))) (+ 0 (/ d (pow e 1)))) (+ (- (+ b e) d) (* 1 e))) (/ (* (pow 1 (pow c -1)) (pow c 0)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 140,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ 1 (/ d e)) (+ e (- (+ b e) d))) (/ (pow 1 (pow c -1)) (* a -1)))",
      "output_weight_simple": 18,
      "output_weight_complex": 45,
      "output_depth": 6,
      "simplification_time": 0.003610439
    },
    "Extended": {
      "iterations": 49,
      "stop_reason": "TimeLimit(0.101947901)",
      "output_term": "(pow (- (/ (pow (pow (/ (/ (/ a b) (/ 0 b)) (+ c c)) (/ -1 (+ b -1))) (/ 0 (pow e c))) (/ d e)) (- (+ e (+ b e)) d)) (/ (pow 1 (pow c -1)) (* a -1)))",
      "output_weight_simple": 30,
      "output_weight_complex": 90,
      "output_depth": 9,
      "simplification_time": 0.101989586
    },
    "speedup": 0.035400075062565706,
    "weight_simple_diff": -12,
    "weight_complex_diff": -45,
    "depth_diff": -3
  },
  {
    "base_term": "(- (pow (- (- (* (pow (pow (* (/ -1 a) a) -1) (pow 1 -1)) (* (pow 1 a) a)) (- (pow 1 0) 0)) (- (/ (+ b -1) 0) (/ a -1))) (/ (+ b (* 1 a)) (- 0 d))) (pow (/ (pow (/ 1 1) -1) (+ a 0)) (/ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ -1 (* -1 (+ (/ (+ -1 b) 0) (* a (+ 1 (pow 1 a)))))) (/ (+ a b) (- 0 d))) (pow (/ 1 a) (/ b 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.003559217
    },
    "Extended": {
      "iterations": 45,
      "stop_reason": "TimeLimit(0.100226256)",
      "output_term": "(- (pow (- (/ a -1) (+ (* a (pow 1 a)) (+ 1 (/ (+ -1 b) 0)))) (/ (+ a b) (- 0 d))) (pow (/ 1 a) (/ b 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.10028157700000001
    },
    "speedup": 0.03549223203779493,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (pow (pow (* (- (+ 1 (+ (pow (pow a b) 1) (* 0 0))) (* (- 0 0) a)) (/ 0 (/ a 1))) (+ (* 1 (+ c 1)) (pow -1 b))) (- (+ (* 0 1) -1) (pow c 1))) (* (- (pow (* 1 e) e) (/ a b)) (+ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (pow 0 (+ 1 (+ c (pow -1 b)))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 19,
      "output_weight_complex": 43,
      "output_depth": 7,
      "simplification_time": 0.004279947
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.114170638)",
      "output_term": "(pow (pow (pow (/ 0 a) (+ 1 (+ c (pow -1 b)))) (- -1 c)) (* (- (pow e e) (/ a b)) (+ a e)))",
      "output_weight_simple": 20,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.11797948
    },
    "speedup": 0.03627704580491455,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (* (pow (+ (/ (/ (* -1 (/ a 1)) (pow 0 a)) -1) (/ a (* a a))) a) (/ (+ b (- c c)) (- 0 c))) (- (* (+ (- b -1) 0) (/ 0 1)) (/ 1 1))) (- (pow (- (+ a -1) b) (* 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(* (/ 1 (* (pow (+ (* a (/ 1 (pow 0 a))) (/ a (* a a))) a) (/ b (- 0 c)))) (- 1 (pow -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.005991562
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.101717448)",
      "output_term": "(/ (- 1 (pow -1 b)) (* (pow (+ (/ a (pow 0 a)) (/ a (* a a))) a) (/ b (- 0 c))))",
      "output_weight_simple": 18,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.10819374500000001
    },
    "speedup": 0.05537808123750591,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (/ (/ (- (- (pow (+ a (* 0 (* b 0))) (+ -1 b)) (pow (- -1 0) b)) 0) (+ (pow (/ a c) a) (/ e 1))) (- (/ (/ (+ b -1) c) (pow -1 0)) (/ 1 -1))) (- (* (- 0 (pow -1 a)) (/ 0 b)) (/ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ (pow (/ a c) a) e)) (+ 1 (/ (+ b -1) c))) (- 0 (/ 1 a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.007966434
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.127918333)",
      "output_term": "(pow (/ (/ (- (pow a (+ b -1)) (pow -1 b)) (+ 1 (/ (+ b -1) c))) (+ (pow (/ a c) a) e)) (- (/ 0 b) (/ 1 a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.132308989
    },
    "speedup": 0.06021082966630484,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (- (* (pow (* (- (/ (* a 0) b) (pow 1 c)) (+ b b)) (/ (+ d e) d)) (- (- a 1) 1)) (/ (+ (pow d -1) b) (/ a a))) (* b (pow e (* e e)))) (* (+ (pow (+ 0 0) e) (/ a e)) (- d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (- (* (pow (* b (* (pow 1 c) -2)) (/ (+ d e) d)) (+ a -2)) (+ b (/ 1 d))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.0069393680000000004
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.105004607)",
      "output_term": "(+ (pow (- (* (pow (* b (- (/ 0 b) (* (pow 1 c) 2))) (/ (+ d e) d)) (- a 2)) (+ b (/ 1 d))) (* b (pow e (* e e)))) (* (+ (pow 0 e) (/ a e)) (- d c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 73,
      "output_depth": 10,
      "simplification_time": 0.11377627900000001
    },
    "speedup": 0.06099134249240125,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (+ (* -1 (pow (pow (/ a (* (/ 0 b) a)) (pow 1 c)) (/ (* -1 a) 0))) (/ (pow (+ b d) 1) (pow b 0))) (pow (- (* d (+ b -1)) (+ 1 -1)) (/ c 1))) (- (pow (pow (+ e 0) d) (/ 0 b)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(+ (+ b (+ d (* -1 (+ (pow (pow (/ a 0) (pow 1 c)) (/ (* -1 a) 0)) (pow (* d (+ -1 b)) c))))) (- 1 (/ b a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.007530493
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.115486857)",
      "output_term": "(- (- (+ d (+ b (pow (pow e d) (/ 0 b)))) (+ (pow (pow (/ a (/ 0 b)) (pow 1 c)) (/ (- 0 a) 0)) (/ b a))) (pow (* d (+ -1 b)) c))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.119113679
    },
    "speedup": 0.06322105960642858,
    "weight_simple_diff": -3,
    "weight_complex_diff": -12,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (* (- (+ (- (- (- -1 (/ 1 (- 0 0))) (pow 1 -1)) (* (/ 0 -1) 1)) a) (pow (pow (pow 0 1) 0) (/ 0 0))) (pow (pow (pow (- -1 1) b) (pow 1 0)) (* b -1))) (* (+ (- (- a 0) 0) (- e e)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (- (+ (* -1 (/ 1 0)) (+ -2 a)) (pow 1 (/ 0 0))) (pow (pow -2 b) (* -1 b))) (* -1 (* a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.007129543
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100446286)",
      "output_term": "(pow (* (- a (+ (pow (pow 0 0) (/ 0 0)) (+ (/ 1 0) 2))) (pow (pow -2 b) (- 0 b))) (- 0 (* a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.10224639299999999
    },
    "speedup": 0.06972904168854153,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (- (- (- (- (* (* (/ a a) b) (pow a 0)) (/ 1 b)) (pow (/ d b) c)) (+ (/ a a) 1)) (- (pow c (pow 0 1)) (/ -1 a))) (/ (pow (- -1 -1) 0) e)) (- (- (pow -1 (+ b 0)) (/ e 1)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (- (- b (/ 1 b)) (pow (/ d b) c)) (+ (/ -1 a) -3)) (/ (pow 0 0) e)) (+ a (- (pow -1 b) e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.007523323
    },
    "Extended": {
      "iterations": 32,
      "stop_reason": "TimeLimit(0.100016589)",
      "output_term": "(+ (pow (- b (+ (/ 1 b) (+ (pow (/ d b) c) (- 3 (/ -1 a))))) (/ (pow 0 0) e)) (- (pow -1 b) (- e a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.10010343699999999
    },
    "speedup": 0.07515549141434576,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (pow (/ (* (* (* (pow (+ a a) a) (- -1 a)) (/ a a)) 0) (pow (pow b 1) -1)) (/ b (+ a (+ b a)))) (/ (+ (* (+ -1 -1) b) (+ -1 a)) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow 0 (/ b (+ a (+ a b)))) (/ (+ a (+ -1 (* b -2))) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.008550101999999999
    },
    "Extended": {
      "iterations": 24,
      "stop_reason": "TimeLimit(0.100114484)",
      "output_term": "(/ (* (pow (/ 0 (/ 1 b)) (/ b (+ a (+ a b)))) (/ (+ a (+ -1 (* b -2))) (- -1 d))) (+ (pow (- 0 (pow b b)) (- c e)) (/ a c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.100274851
    },
    "speedup": 0.08526666372209318,
    "weight_simple_diff": -3,
    "weight_complex_diff": -11,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (- (/ (- (* (pow (/ a a) 0) (/ 0 b)) (- a b)) (* (pow 1 c) a)) (* (+ 0 a) 1)) (pow d (* (* a d) a))) (/ (/ (- e c) 0) (+ -1 c))) (- (+ (/ (- 0 d) 0) (pow e a)) (* a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 17,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (- (/ (+ b (* a -1)) (* a (pow 1 c))) a) (pow d (* d (* a a)))) (+ (/ (/ (- e c) 0) (+ c -1)) (- (+ (/ (* d -1) 0) (pow e a)) (* a c))))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 7,
      "simplification_time": 0.009234190000000001
    },
    "Extended": {
      "iterations": 47,
      "stop_reason": "TimeLimit(0.100145696)",
      "output_term": "(+ (pow (- (/ (- (/ 0 b) (- a b)) (* a (pow 1 c))) a) (pow d (* d (* a a)))) (- (+ (/ (/ (- e c) 0) (+ c -1)) (+ (/ (- 0 d) 0) (pow e a))) (* a c)))",
      "output_weight_simple": 31,
      "output_weight_complex": 72,
      "output_depth": 7,
      "simplification_time": 0.10024176600000001
    },
    "speedup": 0.09211918712605283,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (* (/ (- (/ (pow (pow (- 0 1) a) (* 1 0)) (* a 0)) (+ a (+ b 0))) (* -1 (* c d))) (+ (* (/ 0 d) c) b)) (pow (* (/ a 0) c) (pow 0 d))) (/ (pow (pow (- 1 d) e) (* 1 1)) (/ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (* b (/ (- (/ 1 0) (+ a b)) (* -1 (* c d)))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.012193101000000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.110243909)",
      "output_term": "(pow (- (* (/ (- (/ 1 0) (+ a b)) (- 0 (* c d))) (+ b (/ 0 d))) (pow (* c (/ a 0)) (pow 0 d))) (/ (pow (- 1 d) e) (/ d c)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 7,
      "simplification_time": 0.114159012
    },
    "speedup": 0.10680804595610902,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (/ (- (+ (+ (/ (* (pow 1 0) a) (- 1 -1)) (- a a)) (* (/ a c) d)) (/ (/ e 1) 0)) (/ (* (pow 0 b) e) (pow b c))) (* (pow (pow c 0) 1) (+ 0 b))) (+ (/ -1 (pow (pow a 0) -1)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (- (+ (* a 0.5) (* (/ a c) d)) (/ e 0)) (/ (* e (pow 0 b)) (pow b c))) b) (+ -1 d))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.011808009
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.101837279)",
      "output_term": "(+ d (+ (* b (/ (- (+ (/ a 2) (* (/ a c) d)) (/ e 0)) (/ (* e (pow 0 b)) (pow b c)))) -1))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.103680328
    },
    "speedup": 0.11388861539867041,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (pow (pow (+ (/ (+ (+ (+ a a) b) (+ -1 b)) (pow b c)) (- -1 (pow c c))) (* (/ -1 b) a)) (- (* (+ 0 -1) c) (/ 0 1))) (- a (* (- e 0) e))) (+ (+ (/ (pow 1 -1) 1) (+ c c)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ c (+ (- (pow (pow (+ (/ (+ -1 (* (+ a b) 2)) (pow b c)) (- -1 (pow c c))) (* a (/ -1 b))) (* -1 c)) (- a (* e e))) (+ c 1)))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 11,
      "simplification_time": 0.012841859999999998
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.101601914)",
      "output_term": "(+ 1 (- (+ c (+ c (pow (pow (+ (/ (+ -1 (* 2 (+ a b))) (pow b c)) (- -1 (pow c c))) (* a (/ -1 b))) (- 0 c)))) (- a (* e e))))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 12,
      "simplification_time": 0.105944447
    },
    "speedup": 0.12121314862307034,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (* (- (* (pow (/ (+ 0 (/ a a)) a) (pow 1 a)) (+ (* -1 a) 1)) (pow (* 1 1) -1)) (+ (pow (+ 1 -1) -1) (pow a 1))) (* (/ 0 (+ d d)) (/ e c))) (- (* (+ (/ d b) a) (* e -1)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.133353104)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.16660350899999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(1.108195503)",
      "output_term": "(/ (/ 0 (+ d d)) (- c (* e (+ a (/ d b)))))",
      "output_weight_simple": 13,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 1.267307191
    },
    "speedup": 0.1314626084213547,
    "weight_simple_diff": -12,
    "weight_complex_diff": -30,
    "depth_diff": -5
  },
  {
    "base_term": "(- (* (- (/ (- (+ (pow (- (* -1 -1) -1) (* a b)) (pow b -1)) (+ (- -1 c) -1)) (+ d 1)) (* (+ (+ 1 0) d) (+ -1 a))) (- (- (+ 1 c) -1) (/ b -1))) (* (* (* -1 (/ 0 c)) (/ b d)) (+ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.121445481)",
      "output_term": "(* (- (/ (+ (pow 2 (* a b)) (+ 2 (+ (pow b -1) c))) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (+ 2 (+ b c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 38,
      "output_depth": 8,
      "simplification_time": 0.132211841
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.705571569)",
      "output_term": "(* (- (/ (- (+ (pow 2 (* a b)) (pow b -1)) (- -2 c)) (+ 1 d)) (* (+ 1 d) (+ -1 a))) (+ (+ 2 c) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 39,
      "output_depth": 8,
      "simplification_time": 0.792860296
    },
    "speedup": 0.16675301016712785,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (- (- (* -1 -1) (pow (pow (pow 0 a) 0) (/ 1 -1))) (- (+ (- b -1) 0) (/ a -1))) (- (+ 0 (/ -1 1)) (* b 1))) (pow (* (/ 0 d) c) (/ e 1))) (* (* (* (- 0 e) 1) (- 1 c)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 9,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(/ (* -1 (+ (pow 0 e) (+ b (+ b (+ a 2))))) (* e (* e (- 1 c))))",
      "output_weight_simple": 18,
      "output_weight_complex": 32,
      "output_depth": 7,
      "simplification_time": 0.024367075000000002
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.137525762)",
      "output_term": "(/ (- (/ a -1) (+ b (+ 2 (+ b (pow (/ 0 d) e))))) (* (- 0 e) (* (- 1 c) (/ e -1))))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 8,
      "simplification_time": 0.142594698
    },
    "speedup": 0.17088345739194316,
    "weight_simple_diff": -4,
    "weight_complex_diff": -16,
    "depth_diff": -1
  },
  {
    "base_term": "(* (+ (/ (- (* (pow (+ (+ -1 0) (/ 0 0)) (/ a 0)) (+ (* a b) a)) (* (+ 1 1) e)) (pow (/ 0 (pow 1 -1)) (- d 0))) (/ (pow (/ 0 d) b) (pow e -1))) (- (* (pow (/ d b) a) (- d d)) (/ 0 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 9,
    "Baseline": {
      "iterations": 15,
      "stop_reason": "Saturated",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.043865083
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.12909312)",
      "output_term": "(- 0 (/ 0 c))",
      "output_weight_simple": 4,
      "output_weight_complex": 9,
      "output_depth": 3,
      "simplification_time": 0.140284211
    },
    "speedup": 0.31268724175951634,
    "weight_simple_diff": -3,
    "weight_complex_diff": -8,
    "depth_diff": -2
  },
  {
    "base_term": "(pow (/ (pow (* (+ (pow (+ (* -1 (- 0 a)) (* a b)) (- 1 b)) (+ 1 (* -1 1))) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ (* 0 (* a 0)) (+ 0 b))) (pow (+ (+ (pow a d) e) (+ e d)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (* (pow (+ a (* a b)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) 0) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.003781392
    },
    "Extended": {
      "iterations": 14,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (* (pow (* a (- b -1)) (- 1 b)) (/ b (pow b c))) (/ d (- 1 (pow d b)))) (/ 0 b)) (pow (+ (pow a d) (+ d (+ e e))) (+ 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 8,
      "simplification_time": 0.00795591
    },
    "speedup": 0.47529346108741805,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (/ (pow (+ (+ (+ (- (/ -1 a) a) (* 1 1)) (pow 1 a)) (* -1 (* a 1))) (/ (pow 1 a) b)) (pow (+ (pow a c) c) b)) (/ (- (pow a 0) -1) (/ b c))) (+ (pow (- (pow -1 1) 1) (+ 1 1)) (pow b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow (+ (/ -1 a) (+ 1 (+ (pow 1 a) (* a -2)))) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) -5)",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.0023223239999999997
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (/ (pow (+ (/ -1 a) (+ 1 (+ (pow 1 a) (* a -2)))) (/ (pow 1 a) b)) (pow (+ c (pow a c)) b)) (/ 2 (/ b c))) (+ 1 (pow -2 2)))",
      "output_weight_simple": 25,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.003447178
    },
    "speedup": 0.6736884489283698,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (+ (/ (+ a (/ (- (pow a 1) -1) (/ a 1))) a) (- (pow (+ c 1) d) (/ a -1))) (* (/ 0 (pow c -1)) (* e e))) (+ (+ c (pow c 0)) (pow e -1))) (pow (- (+ (+ -1 -1) d) (- d c)) (pow d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.101423037)",
      "output_term": "(* (+ (pow (+ 1 c) d) (+ (/ 1 e) (+ (+ a (/ 1 a)) (+ (+ c 2) (pow a -2))))) (pow (+ c -2) d))",
      "output_weight_simple": 21,
      "output_weight_complex": 43,
      "output_depth": 7,
      "simplification_time": 0.105906217
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.131352837)",
      "output_term": "(* (+ (+ (/ (+ a (/ (+ a 1) a)) a) (+ (/ 0 (pow c -1)) (pow e -1))) (- (+ c (pow (+ 1 c) d)) (- (/ a -1) 1))) (pow (- (+ d -2) (- d c)) d))",
      "output_weight_simple": 29,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.13645822300000002
    },
    "speedup": 0.776107255918172,
    "weight_simple_diff": -8,
    "weight_complex_diff": -19,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (+ (/ (* a (/ (* (* (pow (pow 1 b) -1) 1) (/ 0 a)) (+ (- c b) -1))) (* (pow d (+ 1 a)) (- e b))) (* (+ (- (+ -1 d) -1) (* -1 b)) (/ c e))) (/ (+ (/ a (- e -1)) (pow -1 e)) (* c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.10037436)",
      "output_term": "(pow (* (+ d (* b -1)) (/ c e)) (/ (+ (/ a (+ 1 e)) (pow -1 e)) (* -1 c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.124544725
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.138560918)",
      "output_term": "(pow (+ (/ (/ 0 (+ -1 (- c b))) (* (pow d (+ a 1)) (- e b))) (* (- d b) (/ c e))) (/ (+ (/ a (+ 1 e)) (pow -1 e)) (- 0 c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.153300371
    },
    "speedup": 0.8124228544756751,
    "weight_simple_diff": -9,
    "weight_complex_diff": -19,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (+ (/ (+ (/ (- (+ (pow a 1) 0) 0) (* a 1)) (- (pow a 1) -1)) (pow (- 0 a) 0)) (pow (pow (- a a) a) (+ a a))) (* (pow -1 (* b 1)) (pow 1 0))) (/ (- (/ (- b 1) a) (pow c c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (+ (pow (pow 0 a) (+ a a)) 2)) (pow -1 b)) (/ (- (/ (+ -1 b) a) (pow c c)) 0))",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.001206832
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ a (+ (pow (pow 0 a) (+ a a)) 2)) (pow -1 b)) (/ (- (/ (- b 1) a) (pow c c)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 46,
      "output_depth": 7,
      "simplification_time": 0.001475967
    },
    "speedup": 0.8176551372761044,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (* (pow (* (* (/ (* a a) -1) b) (* b 1)) (* d (* 0 b))) (+ (+ e 1) c)) (pow (+ (pow a d) c) (/ b 0))) (- (pow (- e -1) -1) (* a e))) (pow (- (+ (/ a a) 0) (* 1 1)) (* d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ e (+ 1 c)) (pow (+ c (pow a d)) (/ b 0))) (+ (- (/ 1 (+ 1 e)) (* a e)) (pow 0 (* b d))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.0019435720000000002
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (/ 1 (+ 1 e)) (* a e)) (+ (pow (+ (+ 1 e) c) (pow (+ c (pow a d)) (/ b 0))) (pow 0 (* b d))))",
      "output_weight_simple": 21,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.0021486359999999998
    },
    "speedup": 0.9045608469745459,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (+ (* (pow (/ (/ (- (+ a -1) -1) (/ 1 a)) (* 1 a)) (* (pow a 0) b)) (- (/ c -1) -1)) (* (+ (* -1 -1) c) (pow -1 c))) (* (- 1 (* b 0)) (+ b 0))) (/ (/ (pow (pow e 1) d) c) (/ a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.102978321)",
      "output_term": "(- (pow (+ (* (pow a b) (+ 1 (* -1 c))) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.11464234799999999
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.118398271)",
      "output_term": "(- (pow (+ (* (pow a b) (+ 1 (/ c -1))) (* (+ 1 c) (pow -1 c))) b) (/ (/ (pow e d) c) (/ a c)))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.126332522
    },
    "speedup": 0.9074650468863432,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (/ (/ (* (+ (* a (/ a 1)) (/ 1 0)) (+ a 0)) (- (* a -1) b)) (- (- b -1) 1)) (/ (- (* 1 -1) b) (/ -1 0))) (+ (* (+ -1 a) a) (/ -1 b))) (+ (/ (+ d (/ d d)) (- a -1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.106035753)",
      "output_term": "(+ (* (+ (/ (/ (* a (+ (* a a) (/ 1 0))) (- (* a -1) b)) b) (/ (- -1 b) (/ -1 0))) (+ (* a (+ a -1)) (/ -1 b))) (+ (/ (+ 1 d) (- a -1)) e))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.11064344699999999
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.110678044)",
      "output_term": "(+ (* (+ (/ (/ (* a (+ (* a a) (/ 1 0))) (- (- 0 a) b)) b) (/ (- -1 b) (/ -1 0))) (+ (- (* a a) a) (/ -1 b))) (+ (/ (+ 1 d) (- a -1)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.117273902
    },
    "speedup": 0.943461802780298,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (* (pow (* (+ (+ (+ (pow 0 a) 1) (- a a)) (pow c b)) (pow (pow 1 b) a)) (+ -1 -1)) (* (/ (+ 0 e) c) (- c -1))) (* (- (pow b -1) 1) (/ d d))) (/ (* (- (+ b -1) b) (- 0 -1)) (pow -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100309312)",
      "output_term": "(/ (* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (+ e (/ e c))) (+ -1 (/ 1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.102815431
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.103113812)",
      "output_term": "(/ (* (pow (* (+ (pow 0 a) (+ 1 (pow c b))) (pow (pow 1 b) a)) -2) (* (/ e c) (+ 1 c))) (- (/ 1 b) 1))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.108705137
    },
    "speedup": 0.9458194326179821,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (* (- (+ (+ (pow (* (+ 1 a) a) 0) (pow a 1)) (* -1 (/ a 1))) (* (* 1 -1) a)) (+ (- a (* -1 b)) (- -1 1))) (- (* (+ 0 -1) -1) (* -1 0))) (* (pow (* (+ a -1) a) (+ 0 0)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.112206261)",
      "output_term": "(* (+ 1 a) (+ a (+ b -2)))",
      "output_weight_simple": 8,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.11220466999999999
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.115465785)",
      "output_term": "(* (+ 1 a) (+ a (+ b -2)))",
      "output_weight_simple": 8,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.118418732
    },
    "speedup": 0.9475246703367841,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (pow (/ (* (+ (* (* -1 (+ a 1)) (- -1 b)) (- -1 a)) (* (* b b) 0)) (- (* a 1) 1)) (pow c (pow (- -1 d) 1))) (* (* -1 (- b d)) (+ 1 0))) (pow (* (+ (+ b a) a) (* c a)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100299901)",
      "output_term": "(/ (+ (pow 0 (pow c (- -1 d))) (- b d)) (* a (* c (+ a (+ a b)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.106137625
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.105635251)",
      "output_term": "(/ (+ (pow (/ 0 (+ -1 a)) (pow c (- -1 d))) (- b d)) (* a (* c (+ a (+ a b)))))",
      "output_weight_simple": 18,
      "output_weight_complex": 38,
      "output_depth": 6,
      "simplification_time": 0.110981969
    },
    "speedup": 0.9563501707200743,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (pow (* (- (* (* (+ (/ a -1) a) (/ 0 1)) (* b b)) (+ (+ b b) 0)) (pow 0 (/ b d))) (- (pow (* -1 -1) -1) 0)) (pow (* (+ -1 b) 1) (/ 0 e))) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (* b (* (pow 0 (/ b d)) -2)) (/ (pow (+ d (- e a)) (* -1 e)) (/ c b)))",
      "output_weight_simple": 19,
      "output_weight_complex": 45,
      "output_depth": 6,
      "simplification_time": 0.0021033159999999996
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (* (* b -2) (* (pow 0 (/ b d)) (pow (+ -1 b) (/ 0 e)))) (/ (pow (+ d (- e a)) (- 0 e)) (/ c b)))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 6,
      "simplification_time": 0.00219796
    },
    "speedup": 0.9569400717028516,
    "weight_simple_diff": -4,
    "weight_complex_diff": -11,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (pow (pow (pow a (+ (* 1 (/ b b)) (+ (+ a -1) a))) (/ (- (- c 0) c) (- 0 0))) (/ (* (+ -1 0) 0) (+ b 0))) (pow (pow (- 1 d) a) (+ a e))) (* (+ (+ (+ b 0) c) (- 0 0)) (- b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100176829)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.10072974600000001
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.101624401)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.103870909
    },
    "speedup": 0.9697589726494067,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (- (- (pow (* (+ (+ (/ a a) -1) (/ a b)) (pow 0 0)) (* (pow a -1) 1)) (- 1 a)) (+ a (* d b))) (/ (- (+ (- -1 -1) 0) (pow c 0)) (/ 0 d))) (/ (pow (+ (- 1 c) 1) (+ b 1)) (+ e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100046899)",
      "output_term": "(+ (+ -1 (+ (pow (* (/ a b) (pow 0 0)) (/ 1 a)) (+ (/ 1 0) (* -1 (* b d))))) (/ (pow (+ 1 (- 1 c)) (+ b 1)) (+ 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.103191474
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.101544292)",
      "output_term": "(+ (- (pow (* (/ a b) (pow 0 0)) (/ 1 a)) (+ 1 (+ (* b d) (/ -1 (/ 0 d))))) (/ (pow (- 2 c) (+ b 1)) (+ 1 e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.103842933
    },
    "speedup": 0.993726496534916,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (* (- (* (/ (/ (pow (* -1 1) 1) (* -1 1)) (- 1 -1)) (/ (* a a) 0)) (pow (- b -1) 1)) (pow (- (+ c a) a) (* b c))) (/ (pow (/ b 1) b) (/ 0 d))) (+ (* (* e d) -1) (pow (/ b -1) d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.100226361)",
      "output_term": "(/ (* (- (* 0.5 (/ (* a a) 0)) (+ 1 b)) (* (pow c (* b c)) (/ (pow b b) 0))) (+ (* -1 (* d e)) (pow (* -1 b) d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.10279311199999999
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.101321151)",
      "output_term": "(/ (* (- (* 0.5 (/ (* a a) 0)) (+ 1 b)) (* (pow c (* b c)) (/ (pow b b) (/ 0 d)))) (- (pow (/ b -1) d) (* d e)))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 7,
      "simplification_time": 0.10309493
    },
    "speedup": 0.9970724263550108,
    "weight_simple_diff": 0,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (* (* (pow (pow (+ (* (* -1 a) -1) (pow 0 0)) (/ a 0)) (pow (+ 0 1) -1)) (* (pow 1 1) a)) (- (+ (- 0 b) 1) 0)) (- (- (+ 0 0) a) (/ -1 b))) (* (* (* (- 0 b) b) (- 1 d)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100062995)",
      "output_term": "(pow (/ (* -1 (* (pow (+ a (pow 0 0)) (/ a 0)) (* a (+ -1 b)))) (+ (- 0 a) (/ 1 b))) (* a (* b (+ -1 d))))",
      "output_weight_simple": 22,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.102305276
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.101228242)",
      "output_term": "(pow (/ (* a (* (pow (+ a (pow 0 0)) (/ a 0)) (- 1 b))) (- (- 0 a) (/ -1 b))) (* a (* b (- d 1))))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.10211969299999998
    },
    "speedup": 1.0018173086360533,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (/ (/ (/ (+ (/ (pow (- a 0) a) (/ a a)) (pow a 1)) (pow (/ 0 0) b)) (pow -1 (+ -1 a))) (/ (* (pow -1 -1) d) (* b 1))) (+ (+ (- -1 c) 1) (pow c -1))) (/ a (/ (pow (/ 0 b) 1) (- 0 d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100778014)",
      "output_term": "(* (/ (/ (/ (+ a (pow a a)) (pow (/ 0 0) b)) (pow -1 (+ a -1))) (/ (- 0 d) b)) (* (+ (* -1 c) (/ 1 c)) (/ a 0)))",
      "output_weight_simple": 24,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.104356749
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.102119978)",
      "output_term": "(/ (* (- (/ 1 c) c) (/ (/ (/ (* a (+ a (pow a a))) (pow -1 (+ a -1))) (/ (- 0 d) b)) (/ (/ 0 b) (- 0 d)))) (pow (/ 0 0) b))",
      "output_weight_simple": 25,
      "output_weight_complex": 76,
      "output_depth": 9,
      "simplification_time": 0.103800199
    },
    "speedup": 1.005361743092612,
    "weight_simple_diff": -1,
    "weight_complex_diff": -8,
    "depth_diff": -2
  },
  {
    "base_term": "(pow (- (* (+ (- (pow (pow (+ (* 1 a) 1) (- a a)) (pow a -1)) (* b (/ a b))) (pow d (- b -1))) (+ (pow (* d c) -1) (pow c b))) (+ (+ e (+ 0 -1)) (/ -1 1))) (- (+ (pow (pow -1 a) d) -1) (pow e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100412968)",
      "output_term": "(pow (- (* (+ (- (pow 1 (/ 1 a)) a) (pow d (+ 1 b))) (+ (pow c b) (/ 1 (* d c)))) (+ e -2)) (- (+ -1 (pow (pow -1 a) d)) (pow e c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.101012789
    },
    "Extended": {
      "iterations": 32,
      "stop_reason": "TimeLimit(0.100333499)",
      "output_term": "(pow (- (* (+ (- (pow 1 (/ 1 a)) a) (pow d (+ 1 b))) (+ (/ 1 (* d c)) (pow c b))) (+ e -2)) (- (pow (pow -1 a) d) (+ 1 (pow e c))))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.10045764600000001
    },
    "speedup": 1.0055261398420583,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (* (+ (+ (* a (/ (/ a 0) a)) (* a a)) (+ (pow -1 a) -1)) (* (- 0 a) c)) (- (pow (* -1 a) b) (+ a a))) (* (* (/ 0 b) 0) (+ a 0))) (+ (/ (* (+ -1 b) 0) (/ -1 -1)) (* d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.102335578)",
      "output_term": "(pow (+ (pow (- 0 a) b) (* a (+ (* (+ (pow -1 a) (+ (/ a 0) (+ (* a a) -1))) (* -1 c)) -2))) (* c d))",
      "output_weight_simple": 22,
      "output_weight_complex": 44,
      "output_depth": 10,
      "simplification_time": 0.102333321
    },
    "Extended": {
      "iterations": 33,
      "stop_reason": "TimeLimit(0.100037007)",
      "output_term": "(pow (- (pow (- 0 a) b) (* a (+ 2 (* (+ (/ a 0) (+ (pow -1 a) (+ (* a a) -1))) c)))) (* c d))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 10,
      "simplification_time": 0.10013787699999999
    },
    "speedup": 1.0219242115548348,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (- (* a (+ (/ (+ (pow -1 -1) 1) (+ a 0)) 1)) (/ (+ 0 (/ -1 1)) (/ b b))) (+ (* 1 (pow b c)) (pow b 0))) (pow (* (* -1 -1) -1) (- b c))) (+ (+ (* (+ -1 a) a) (* a c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.104690047)",
      "output_term": "(+ (+ 1 (pow -1 (- b c))) (* -1 (+ (+ (* a (+ (+ a c) -2)) d) (pow b c))))",
      "output_weight_simple": 18,
      "output_weight_complex": 30,
      "output_depth": 8,
      "simplification_time": 0.10468850499999999
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.102199318)",
      "output_term": "(- (+ (- (* a (+ 1 (/ 0 a))) (pow b c)) (pow -1 (- b c))) (+ (* a (+ -1 (+ a c))) (+ -1 d)))",
      "output_weight_simple": 21,
      "output_weight_complex": 37,
      "output_depth": 7,
      "simplification_time": 0.102197757
    },
    "speedup": 1.0243718460474625,
    "weight_simple_diff": -3,
    "weight_complex_diff": -7,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (* (* (* (/ (pow (+ (* a 0) 0) (* -1 0)) (+ 1 0)) (+ (+ 0 b) b)) (- (+ 0 0) c)) (* (* (- a d) c) (+ b -1))) (* 0 (/ (- e -1) d))) (pow (* (+ (+ 0 c) c) (+ d d)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.101299792)",
      "output_term": "(* c (+ (* (pow 0 0) (* c (* (+ -1 b) (* b (* (- a d) -2))))) (* d -4)))",
      "output_weight_simple": 19,
      "output_weight_complex": 33,
      "output_depth": 9,
      "simplification_time": 0.10431879100000001
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100541386)",
      "output_term": "(- 0 (* c (+ (* d 4) (* (* b (- a d)) (* (* c (+ -1 b)) (* (pow 0 0) 2))))))",
      "output_weight_simple": 20,
      "output_weight_complex": 34,
      "output_depth": 8,
      "simplification_time": 0.10065775700000001
    },
    "speedup": 1.0363711065010122,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (* (+ (+ (- (* (* (+ a b) c) (/ 0 b)) b) a) (/ (pow (* 1 -1) b) (- 1 e))) (- (* (+ b e) a) (+ d a))) (/ (+ (pow 0 -1) 0) (* b 1))) (/ (+ (+ c (+ e c)) (* d 1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.107024959)",
      "output_term": "(/ (pow (* (+ a (+ (/ (pow -1 b) (- 1 e)) (- 0 b))) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (+ c (+ c (+ e d))))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.114204222
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.107631435)",
      "output_term": "(/ (pow (* (+ a (+ (- (/ 0 b) b) (/ (pow -1 b) (- 1 e)))) (- (* a (+ b e)) (+ a d))) (/ (pow 0 -1) b)) (+ c (+ c (+ e d))))",
      "output_weight_simple": 27,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.109794638
    },
    "speedup": 1.0401621070056262,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (+ (pow (/ (- (+ (* (- (* 1 0) a) (+ -1 a)) (pow 1 -1)) a) (/ (+ 1 0) 0)) (- 0 (+ (+ 0 0) a))) (+ (- (* (- 1 1) b) (+ 0 a)) (* a 0))) (* (pow (/ (- -1 -1) b) (* a -1)) (+ d c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 95,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.107965043)",
      "output_term": "(+ (pow (/ (+ 1 (* a (- 0 a))) (/ 1 0)) (- 0 a)) (+ (- 0 a) (* (pow 0 (- 0 a)) (+ d c))))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 7,
      "simplification_time": 0.11452388100000001
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.101896188)",
      "output_term": "(+ (pow (/ (- 1 (* a a)) (/ 1 0)) (- 0 a)) (- (* (pow (/ 0 b) (- 0 a)) (+ d c)) a))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 6,
      "simplification_time": 0.109908745
    },
    "speedup": 1.0419906168521895,
    "weight_simple_diff": -2,
    "weight_complex_diff": -7,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (/ (* (/ (- (- (- (* 0 a) a) (pow a -1)) (+ 0 -1)) (* (pow 1 a) 0)) (/ a (- -1 c))) (* (/ (pow d b) c) 1)) (/ (pow -1 (/ e 1)) (pow -1 e))) (- (+ (pow 1 (+ 1 a)) (+ d -1)) (* -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.101997285)",
      "output_term": "(+ d (+ (/ (* (/ (+ (- (- 0 a) (/ 1 a)) 1) 0) (/ a (- -1 c))) (/ (pow d b) c)) (pow 1 (+ a 1))))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.10948347
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.101677097)",
      "output_term": "(+ (/ (* (/ (- 1 (+ a (/ 1 a))) 0) (/ a (- -1 c))) (/ (pow d b) c)) (+ d (pow 1 a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.104378089
    },
    "speedup": 1.0489123823679125,
    "weight_simple_diff": 2,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (- (* (+ (+ (- (- 0 (/ (* a b) b)) (pow a b)) -1) (* (/ 0 (* -1 d)) (* -1 a))) (* (+ (/ a a) d) (- -1 e))) (- (+ (- -1 b) 0) (- -1 a))) (* (* (+ (* c d) 1) (/ -1 c)) (+ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.112969052)",
      "output_term": "(* (+ d (/ 1 c)) (* (+ -1 e) (+ (+ a (* b -1)) (* (* (+ d 1) (- -1 e)) (+ (+ a 1) (pow a b))))))",
      "output_weight_simple": 22,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.119951928
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.111582718)",
      "output_term": "(* (+ (* (+ (- (- -1 a) (pow a b)) (/ 0 (- 0 d))) (* (+ d 1) (- -1 e))) (- b a)) (* (+ (* d c) 1) (/ (- 1 e) c)))",
      "output_weight_simple": 26,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.113486877
    },
    "speedup": 1.05696738839681,
    "weight_simple_diff": -4,
    "weight_complex_diff": -8,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (- (- (+ (pow a a) (+ (pow b (- 1 c)) (/ 0 -1))) (- (- (* 1 0) -1) (/ b a))) (- (pow (* 0 1) 0) (pow 0 e))) (/ (/ a (* a 1)) (/ 1 1))) (* (/ (* (/ e c) -1) (+ e e)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 9,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.10458639)",
      "output_term": "(pow (- (+ (pow b (- 1 c)) (+ -1 (+ (pow a a) (/ b a)))) (- (pow 0 0) (pow 0 e))) (* e (* -1 (/ 1 (+ e e)))))",
      "output_weight_simple": 23,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.10775090500000001
    },
    "Extended": {
      "iterations": 20,
      "stop_reason": "TimeLimit(0.10174105)",
      "output_term": "(pow (- (+ (pow a a) (pow b (- 1 c))) (- (pow 0 0) (- (+ (/ b a) (pow 0 e)) 1))) (/ (- 0 e) (+ e e)))",
      "output_weight_simple": 21,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.101931662
    },
    "speedup": 1.0570896509074874,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (* (* (pow (/ (* (* a (- 0 a)) a) a) (/ (/ b -1) 0)) (/ (pow a 1) b)) (pow b (pow c (- -1 d)))) (/ (pow (pow (pow -1 e) e) (* c 1)) (/ e d))) (/ (- (pow (/ 1 -1) 1) (+ 1 -1)) (+ d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 136,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100139668)",
      "output_term": "(+ (* (pow (* a (- 0 a)) (/ (* b -1) 0)) (* (/ (pow (pow (pow -1 e) e) c) (/ e d)) (* (/ a b) (pow b (pow c (- -1 d)))))) (/ 1 (+ d e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 76,
      "output_depth": 8,
      "simplification_time": 0.106164417
    },
    "Extended": {
      "iterations": 31,
      "stop_reason": "TimeLimit(0.10002464)",
      "output_term": "(- (* (pow (- 0 (* a a)) (/ (/ b -1) 0)) (* (/ a b) (* (pow b (pow c (- -1 d))) (/ (pow (pow (pow -1 e) e) c) (/ e d))))) (/ -1 (+ d e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 78,
      "output_depth": 9,
      "simplification_time": 0.100077728
    },
    "speedup": 1.0608196161287753,
    "weight_simple_diff": 1,
    "weight_complex_diff": -2,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (+ (pow (+ -1 (+ 1 a)) (pow (+ (* -1 (- a a)) (* a 0)) (- a a))) (- (/ -1 (* 0 1)) (* 0 1))) (* (* (+ (+ 1 1) 0) (pow b -1)) (* 0 1))) (/ (- (- 1 (pow -1 b)) (/ 1 1)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 9,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.112453611)",
      "output_term": "(+ (pow a (pow 0 0)) (+ (/ -1 0) (* -1 (pow -1 b))))",
      "output_weight_simple": 11,
      "output_weight_complex": 27,
      "output_depth": 5,
      "simplification_time": 0.11245138
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.104231375)",
      "output_term": "(+ (pow a (pow 0 0)) (- (/ -1 0) (pow -1 b)))",
      "output_weight_simple": 10,
      "output_weight_complex": 25,
      "output_depth": 4,
      "simplification_time": 0.105202347
    },
    "speedup": 1.068905620518143,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (pow (/ (/ (/ (* (- (pow -1 a) b) b) (* b b)) 1) (* (/ (+ 0 b) b) (/ 0 0))) (/ (+ a (* 1 0)) (- b -1))) (pow (pow (* d a) -1) (- 1 -1))) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.104424548)",
      "output_term": "(pow (/ (pow (/ (+ -1 (* (pow -1 a) (pow b -1))) (/ 0 0)) (/ a (- b -1))) (pow (* a d) -2)) (- (pow (pow (/ -1 0) d) (pow d -1)) (+ 1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 75,
      "output_depth": 8,
      "simplification_time": 0.10748870199999999
    },
    "Extended": {
      "iterations": 33,
      "stop_reason": "TimeLimit(0.100023098)",
      "output_term": "(pow (/ (pow (/ (/ (* b (- (pow -1 a) b)) (* b b)) (/ 0 0)) (/ a (+ b 1))) (pow (/ 1 (* a d)) 2)) (- (pow (pow (/ -1 0) d) (/ 1 d)) (+ 1 d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 84,
      "output_depth": 9,
      "simplification_time": 0.100187234
    },
    "speedup": 1.0728782271801214,
    "weight_simple_diff": -2,
    "weight_complex_diff": -9,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (- (/ (+ (+ (/ (+ (* (/ a 0) a) (* 1 a)) (- -1 b)) (- (- b b) 0)) d) (/ e (- (/ c e) d))) (+ (- (* (* 0 d) d) (/ 1 a)) (+ b 0))) (- (* (pow (pow e b) 0) (/ e -1)) (/ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.103774297)",
      "output_term": "(+ (/ (+ (/ (+ a (* a (/ a 0))) (- -1 b)) d) (/ e (- (/ c e) d))) (+ (/ 1 a) (* -1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.110039675
    },
    "Extended": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.100127464)",
      "output_term": "(- (/ (+ (/ (+ a (* a (/ a 0))) (- -1 b)) d) (/ e (- (/ c e) d))) (- b (/ 1 a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.101630162
    },
    "speedup": 1.0827462323635773,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (/ (- (/ (* a b) a) (- a (+ b (* 0 1)))) (- 1 (pow (/ 1 c) 0))) (+ (- (* b 0) 1) -1)) (/ (* (* (* -1 0) c) (/ a 1)) (/ 0 -1))) (* (* (- (+ -1 1) d) (/ d c)) (pow c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 9,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.102641767)",
      "output_term": "(pow (+ (/ (- b (- a b)) 0) (+ -2 (/ 0 0))) (* d (* (- 0 d) (pow c (+ c -1)))))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.109840293
    },
    "Extended": {
      "iterations": 33,
      "stop_reason": "TimeLimit(0.100602221)",
      "output_term": "(pow (+ (/ (- b (- a b)) 0) (+ -2 (/ 0 0))) (* (- 0 d) (* (/ d c) (pow c c))))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 6,
      "simplification_time": 0.100648588
    },
    "speedup": 1.091324728768177,
    "weight_simple_diff": 1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (* (pow (pow (* (- (+ -1 (pow a b)) (+ -1 b)) (+ a a)) (/ (* a b) 1)) (+ b (- b a))) (/ c (/ (- b a) -1))) (pow (pow (pow c 0) d) (- a c))) (- (+ (+ (/ c -1) b) (pow b 1)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.110739532)",
      "output_term": "(/ (* (pow (pow (* (+ (pow a b) (* -1 b)) (+ a a)) (* a b)) (+ b (- b a))) (* (/ c (+ a (* -1 b))) (pow (pow 1 d) (- a c)))) (* -1 (+ (* b (+ a -2)) c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.115312238
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100112833)",
      "output_term": "(/ (* (pow (pow (* a (* (- (pow a b) b) 2)) (* a b)) (+ b (- b a))) (* (/ c (/ (- b a) -1)) (pow (pow 1 d) (- a c)))) (- (+ (/ c -1) (+ b b)) (* a b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.10560335400000001
    },
    "speedup": 1.091937269340896,
    "weight_simple_diff": 1,
    "weight_complex_diff": -5,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (* (pow (+ 0 (/ (* (/ (pow (/ a a) -1) (- 1 a)) (pow a a)) (* a (- a b)))) (/ (* (+ 0 1) -1) b)) (* (* (pow 0 (* 1 1)) (- -1 c)) (* b e))) (+ (- (+ (/ a 0) 0) (- 1 a)) (- a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.110309808)",
      "output_term": "(+ (/ a 0) (+ a a))",
      "output_weight_simple": 5,
      "output_weight_complex": 10,
      "output_depth": 3,
      "simplification_time": 0.110306716
    },
    "Extended": {
      "iterations": 15,
      "stop_reason": "TimeLimit(0.100163027)",
      "output_term": "(+ (/ a 0) (+ a a))",
      "output_weight_simple": 5,
      "output_weight_complex": 10,
      "output_depth": 3,
      "simplification_time": 0.10052196499999999
    },
    "speedup": 1.0973394322325474,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (- (+ (/ (/ (pow (/ (- 1 1) -1) 0) -1) (* a a)) (pow (- b (- a 1)) (- b a))) (/ (+ (/ e 0) -1) (+ 0 d))) (+ (+ (- a 0) -1) (- 0 -1))) (- (pow (pow (pow e 0) 1) (* -1 1)) (pow b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.121273564)",
      "output_term": "(* (pow (- (+ (/ (* -1 (pow 0 0)) (* a a)) (pow (+ 1 (- b a)) (- b a))) (/ (+ -1 (/ e 0)) d)) a) (- 1 (pow b c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.12127236
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.107231265)",
      "output_term": "(* (pow (- (+ (/ (/ (pow 0 0) -1) (* a a)) (pow (- b (+ -1 a)) (- b a))) (/ (+ -1 (/ e 0)) d)) a) (- 1 (pow b c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.110007226
    },
    "speedup": 1.1024035821065064,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (pow (* (/ (* (pow a 1) b) (+ 1 a)) (+ (pow b (+ 1 0)) (* 0 -1))) (* (- -1 (* c -1)) (pow b 0))) (* (pow (* (* a 0) b) (pow a 0)) (/ a 0))) (- (+ (- 1 (+ e e)) (- a 1)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 8,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.107298534)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- (+ a (* -2 e)) (pow -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.116595493
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.102681519)",
      "output_term": "(- (/ (pow (* b (/ (* a b) (+ a 1))) (+ -1 c)) 0) (- (- a (+ e e)) (pow -1 b)))",
      "output_weight_simple": 19,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.10503599899999999
    },
    "speedup": 1.1100526877456558,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (pow (- (pow (pow (pow (/ (/ 1 a) a) (* -1 -1)) (/ -1 a)) (pow (pow a -1) 1)) (- (* b 0) a)) (+ c (+ (- a d) d))) (* (+ (pow 1 1) e) (/ 1 b))) (- (* (* (* 1 -1) b) (pow 0 a)) (+ e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.11367298)",
      "output_term": "(+ (pow (+ a (pow (pow (pow a -2) (/ -1 a)) (/ 1 a))) (+ a c)) (* -1 (+ (+ e (* b (pow 0 a))) (+ b (* (+ 1 e) (/ 1 b))))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.11366979199999999
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.10087801)",
      "output_term": "(- (pow (+ a (pow (pow (/ (/ 1 a) a) (/ -1 a)) (/ 1 a))) (+ a c)) (+ b (+ (/ (+ 1 e) b) (+ e (* b (pow 0 a))))))",
      "output_weight_simple": 23,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.101189896
    },
    "speedup": 1.123331444080148,
    "weight_simple_diff": 3,
    "weight_complex_diff": 4,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (/ (+ (- (+ (- (* (pow (/ -1 a) 1) (* 1 -1)) (* -1 -1)) (pow (* b -1) 1)) (* (/ a b) b)) (- (+ (+ b 0) c) (+ 0 1))) (- (* (pow 0 b) 0) (/ d d))) (+ (* (- (- 0 a) c) d) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.120512107)",
      "output_term": "(+ (/ -1 a) (+ (+ a 2) (* -1 (+ c (* (+ a c) d)))))",
      "output_weight_simple": 13,
      "output_weight_complex": 22,
      "output_depth": 7,
      "simplification_time": 0.124925234
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.105518282)",
      "output_term": "(- (/ (+ c (- -2 (+ a (/ -1 a)))) -1) (* d (+ a c)))",
      "output_weight_simple": 13,
      "output_weight_complex": 25,
      "output_depth": 7,
      "simplification_time": 0.10744284300000001
    },
    "speedup": 1.1627134066063385,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (+ (* (pow (/ (pow (* a -1) 0) (- -1 b)) (+ b a)) (* 1 (pow 1 a))) (pow (pow 1 0) b)) (pow (* (/ e b) b) (* c c))) (* (* (+ b c) 1) 1)) (- (pow (pow d (pow -1 0)) (* c -1)) (+ -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.1106573)",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow e (* c c))) (+ b c)) (- (pow d (* -1 c)) (+ -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.118823282
    },
    "Extended": {
      "iterations": 31,
      "stop_reason": "TimeLimit(0.100315051)",
      "output_term": "(pow (/ (pow (+ (* (pow (/ 1 (- -1 b)) (+ a b)) (pow 1 a)) (pow 1 b)) (pow e (* c c))) (+ b c)) (- (pow d (- 0 c)) (+ -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.10044297099999999
    },
    "speedup": 1.1829925062650726,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (- (+ (* (+ (* (/ a (/ a a)) (+ b b)) (/ a -1)) (+ b -1)) (- 0 (- 0 b))) (+ (+ (/ a 0) b) (pow d 0))) (pow (- -1 (+ 0 -1)) (pow 0 0))) (/ (+ (+ (* 1 1) 1) (+ -1 e)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.118923029)",
      "output_term": "(* (/ (+ a (+ (+ -1 (* -1 (/ a 0))) (* b (* a (+ -3 (+ b b)))))) (pow 0 (pow 0 0))) (+ 1 e))",
      "output_weight_simple": 21,
      "output_weight_complex": 42,
      "output_depth": 9,
      "simplification_time": 0.12484346499999999
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.103013815)",
      "output_term": "(* (/ (- (* (+ (* a (+ b b)) (/ a -1)) (+ b -1)) (+ (/ a 0) 1)) (pow 0 (pow 0 0))) (+ 1 e))",
      "output_weight_simple": 20,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.10532366
    },
    "speedup": 1.1853316244422192,
    "weight_simple_diff": 1,
    "weight_complex_diff": -2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (pow (+ (* (* (/ (+ 0 (+ (* a 0) 0)) a) (pow (- a 0) 1)) (pow (* -1 c) -1)) (* -1 (+ (/ -1 0) 1))) (* (pow (/ (+ 1 b) 1) (+ 1 -1)) (pow 0 -1))) (pow (- (- (pow 1 1) 1) (- b 0)) (* c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 14,
      "stop_reason": "TimeLimit(0.110536625)",
      "output_term": "(pow (+ -1 (* -1 (/ -1 0))) (pow 0 -1))",
      "output_weight_simple": 7,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.121316403
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.100772779)",
      "output_term": "(pow (+ (/ 0 a) (- -1 (/ -1 0))) (pow 0 -1))",
      "output_weight_simple": 9,
      "output_weight_complex": 24,
      "output_depth": 5,
      "simplification_time": 0.101229958
    },
    "speedup": 1.1984239191327137,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (+ (* (- (- (- (* a (/ 1 b)) (- b d)) (/ d 1)) (- 1 0)) (- (+ c d) -1)) (/ (pow (- b 1) -1) (+ 0 1))) (/ (/ (pow c b) a) (- a 1))) (* (+ (- 0 (/ e e)) (+ -1 c)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.125248469)",
      "output_term": "(- (+ (/ 1 (+ b -1)) (+ (* (+ (* a (/ 1 b)) (+ -1 (* b -1))) (+ 1 (+ d c))) (/ (/ (pow c b) a) (+ a -1)))) (* (+ c -2) (/ 1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.125246695
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.101167771)",
      "output_term": "(- (+ (* (- (/ a b) (+ 1 b)) (+ 1 (+ d c))) (+ (/ 1 (- b 1)) (/ (/ (pow c b) (- a 1)) a))) (/ (+ c -2) e))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.102975424
    },
    "speedup": 1.2162775362789475,
    "weight_simple_diff": 4,
    "weight_complex_diff": 7,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (+ (+ (pow (* (/ (+ -1 (+ a a)) (pow b 1)) (* b c)) (- (* c b) a)) (* (+ d -1) 1)) (- (+ 0 c) (+ c b))) (* (* (+ a c) -1) (pow -1 -1))) (/ (pow (- (/ c 0) a) (- a a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.115262703)",
      "output_term": "(pow (/ (+ (pow (* (+ -1 (+ a a)) c) (- (* b c) a)) (+ -1 (+ d (* -1 b)))) (+ a c)) (/ 1 (pow -1 e)))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.12313848799999999
    },
    "Extended": {
      "iterations": 25,
      "stop_reason": "TimeLimit(0.100745509)",
      "output_term": "(pow (/ (+ (pow (* (+ a (+ -1 a)) c) (- (* b c) a)) (+ -1 (- d b))) (+ a c)) (/ 1 (pow -1 e)))",
      "output_weight_simple": 21,
      "output_weight_complex": 45,
      "output_depth": 8,
      "simplification_time": 0.100948806
    },
    "speedup": 1.2198112377872006,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (+ (- a (+ (+ (/ a a) 1) (/ a 1))) (- (pow a -1) b)) (/ (* b b) 0)) (- (+ (/ -1 1) 1) (+ 0 1))) (- (- (pow 0 a) 1) (- d d))) (- (+ (/ -1 (- 0 d)) (/ 1 a)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.101268915)",
      "output_term": "(pow (+ (- (/ 1 a) b) (+ (/ (* b b) 0) (* -1 (pow 0 a)))) (+ (/ 1 a) (/ -1 (- 0 d))))",
      "output_weight_simple": 18,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.128104412
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100242905)",
      "output_term": "(pow (- (+ (- (/ 1 a) b) (/ (* b b) 0)) (pow 0 a)) (+ (/ 1 a) (/ -1 (- 0 d))))",
      "output_weight_simple": 17,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.10346293799999999
    },
    "speedup": 1.238167158949227,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (/ (+ (pow (- a (+ (pow -1 0) b)) (pow a c)) (* (* 1 a) -1)) (- -1 (* 0 1))) (+ 1 (* -1 1))) (pow (pow (* (+ 1 c) -1) (- 0 a)) (* e e))) (+ (* (* (* e -1) 1) (+ b 0)) (/ -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (pow (pow (+ -1 (* -1 c)) (- 0 a)) (* e e))) (+ (* b e) (* -1 (/ -1 0))))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.001727673
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (pow 0 (pow (pow (- -1 c) (- 0 a)) (* e e))) (- (/ -1 0) (* b e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 35,
      "output_depth": 6,
      "simplification_time": 0.00138732
    },
    "speedup": 1.2453312862209152,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(* (+ (- (pow 1 (* (/ (* (pow (* a -1) a) (+ a 0)) (pow 1 -1)) (* (- b 0) 0))) (- (+ 1 b) (* b a))) (pow (+ (+ (/ b d) c) (/ 1 -1)) (+ 1 d))) (* (- (+ (/ -1 a) b) (+ 1 b)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.11992391)",
      "output_term": "(* (+ (* b (+ a -1)) (pow (+ -1 (+ (/ b d) c)) (+ 1 d))) (+ -1 (/ -1 a)))",
      "output_weight_simple": 17,
      "output_weight_complex": 34,
      "output_depth": 7,
      "simplification_time": 0.129244671
    },
    "Extended": {
      "iterations": 15,
      "stop_reason": "TimeLimit(0.101236484)",
      "output_term": "(* (- (pow (+ (/ b d) (+ -1 c)) (+ 1 d)) (- b (* a b))) (- (/ -1 a) 1))",
      "output_weight_simple": 17,
      "output_weight_complex": 34,
      "output_depth": 6,
      "simplification_time": 0.103667598
    },
    "speedup": 1.2467219603178228,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (/ (+ (* (pow (pow (+ (- a b) b) (pow -1 1)) (* -1 a)) (+ (- 1 -1) -1)) (* (pow -1 b) 1)) (pow -1 1)) (+ (- (+ (/ c 1) -1) (* 0 -1)) (pow 1 -1))) (/ (pow (/ (* d 1) 1) (pow -1 -1)) (+ e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.122660207)",
      "output_term": "(pow (/ (* -1 (+ (pow (pow a -1) (* a -1)) (pow -1 b))) c) (/ (pow d -1) (+ -1 e)))",
      "output_weight_simple": 17,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.1299874
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100002886)",
      "output_term": "(pow (/ (/ (+ (pow (pow a -1) (- 0 a)) (pow -1 b)) -1) c) (/ (/ 1 d) (+ -1 e)))",
      "output_weight_simple": 19,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.101688995
    },
    "speedup": 1.2782838496928797,
    "weight_simple_diff": -2,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (* (+ (/ (* (pow (* (* 0 0) 0) (+ 0 -1)) a) a) (- (pow (pow a a) b) (/ a e))) (* (* (* 1 0) d) (* a 1))) (- (/ (pow a 1) b) (+ -1 b))) (pow (* (* (+ 0 1) b) (pow 1 -1)) (+ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.128369517)",
      "output_term": "(+ (* -1 a) (* b (+ -1 b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.128367414
    },
    "Extended": {
      "iterations": 31,
      "stop_reason": "TimeLimit(0.100252623)",
      "output_term": "(* b (- (+ -1 b) (/ a b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 14,
      "output_depth": 4,
      "simplification_time": 0.10037676400000002
    },
    "speedup": 1.2788558714644356,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (- (- (pow (+ (+ (+ a 1) -1) (- 0 1)) (* a -1)) (/ (* 0 c) d)) (pow (pow c d) a)) (- d (- (pow e b) e))) (- (- (+ c 1) -1) (+ -1 c))) (* (pow (* (/ 1 a) -1) (* e c)) (/ a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.122480021)",
      "output_term": "(/ (* (pow (- (pow (+ a -1) (* a -1)) (pow (pow c d) a)) (- d (- (pow e b) e))) 3) (* (pow (* -1 (pow a -1)) (* c e)) (/ a b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.131805112
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.102675967)",
      "output_term": "(/ (* (pow (- (pow (+ a -1) (- 0 a)) (+ (/ 0 d) (pow (pow c d) a))) (- d (- (pow e b) e))) 3) (* (pow (/ -1 a) (* c e)) (/ a b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.10267317399999999
    },
    "speedup": 1.283734658870096,
    "weight_simple_diff": -2,
    "weight_complex_diff": -5,
    "depth_diff": -1
  },
  {
    "base_term": "(* (pow (pow (/ (* (/ 1 (* (- (- 0 1) a) (- b b))) (pow (pow 0 -1) 1)) (/ (* a b) b)) (/ (- (pow 1 0) a) (pow b e))) (/ (/ (* 0 1) -1) (pow d 0))) (- (- (+ (- b b) -1) (+ 0 c)) (- c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.127548668)",
      "output_term": "(+ -1 (* c -2))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.133344514
    },
    "Extended": {
      "iterations": 33,
      "stop_reason": "TimeLimit(0.100043019)",
      "output_term": "(- -1 (+ c c))",
      "output_weight_simple": 4,
      "output_weight_complex": 5,
      "output_depth": 3,
      "simplification_time": 0.10015557500000001
    },
    "speedup": 1.3313738551248893,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (- (* (+ (* (- (- (- 1 a) a) (- 1 -1)) (pow -1 b)) (pow (pow 0 1) -1)) (/ (+ b b) 1)) (* (- c (* 1 0)) (* a a))) (* (pow (pow b e) 1) (* 0 1))) (+ (* (* (- a b) a) (- d 1)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.16038519)",
      "output_term": "(/ (/ (- (* (+ (* (+ -1 (* a -2)) (pow -1 b)) (pow 0 -1)) (+ b b)) (* a (* a c))) 0) (+ b (* a (* (- a b) (+ -1 d)))))",
      "output_weight_simple": 25,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.164259543
    },
    "Extended": {
      "iterations": 17,
      "stop_reason": "TimeLimit(0.115006467)",
      "output_term": "(/ (/ (- (* (+ (* (+ -1 (* a -2)) (pow -1 b)) (pow 0 -1)) (+ b b)) (* a (* a c))) 0) (+ b (* a (* (- a b) (- d 1)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 51,
      "output_depth": 9,
      "simplification_time": 0.117093449
    },
    "speedup": 1.4028072825833322,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (pow (* -1 (pow (- (/ (pow (* 1 a) 1) (/ 0 a)) a) (pow (* -1 1) 0))) (pow (+ (- 0 a) b) (/ 0 0))) (+ (+ (* -1 (- 1 b)) (pow c b)) (* 1 1))) (* (/ (* 1 (pow -1 a)) (* -1 1)) (+ c -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.117204707)",
      "output_term": "(+ b (+ (pow (+ a (* -1 (/ a 0))) (pow (+ (- 0 a) b) (/ 0 0))) (+ (pow c b) (* (pow -1 a) (+ -1 c)))))",
      "output_weight_simple": 20,
      "output_weight_complex": 45,
      "output_depth": 7,
      "simplification_time": 0.148179468
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.101508075)",
      "output_term": "(- (+ (pow (- a (/ a (/ 0 a))) (pow (- b a) (/ 0 0))) (pow c b)) (- (* (/ (pow -1 a) -1) (+ -1 c)) b))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.10350348000000001
    },
    "speedup": 1.4316375449405179,
    "weight_simple_diff": 0,
    "weight_complex_diff": -7,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (* (+ (/ (pow a (pow (/ (* b b) 0) (+ d a))) 1) (+ (* (- b e) 1) 0)) (* (+ e a) (* 0 1))) (+ (pow (pow (* d e) 0) (+ 1 d)) (+ a b))) (* (+ (- (+ 0 c) c) (pow c c)) (/ -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.1285732)",
      "output_term": "(pow (pow 0 (+ a (+ b (pow 1 (+ d 1))))) (pow c c))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 7,
      "simplification_time": 0.150870929
    },
    "Extended": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.100961718)",
      "output_term": "(pow (pow 0 (+ b (+ a (pow 1 d)))) (pow c c))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 6,
      "simplification_time": 0.102864607
    },
    "speedup": 1.4666942634603173,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (* (pow (- (/ (+ (- (- (+ a a) 1) a) (* -1 a)) (pow a (/ a 0))) d) (/ (* (pow 0 0) -1) (* a 0))) (* (+ (* (/ b 0) d) (* -1 1)) (/ a -1))) (* (+ (/ (+ b c) -1) (- 1 -1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.147466668)",
      "output_term": "(pow (* a (* -1 (* (pow (- (/ -1 (pow a (/ a 0))) d) (* -1 (pow 0 -1))) (+ -1 (* d (/ b 0)))))) (* (+ (* -1 (+ b c)) 2) (pow -1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.15389181
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.101140748)",
      "output_term": "(pow (* (pow (- (/ -1 (pow a (/ a 0))) d) (/ (- 0 (pow 0 0)) 0)) (* a (- 1 (* d (/ b 0))))) (* (+ (/ (+ b c) -1) 2) (pow -1 e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 8,
      "simplification_time": 0.103028227
    },
    "speedup": 1.4936859002727474,
    "weight_simple_diff": -1,
    "weight_complex_diff": -6,
    "depth_diff": 2
  },
  {
    "base_term": "(- (* (- (- (/ (/ (/ (pow (+ -1 a) 1) (* -1 a)) (- 0 1)) (pow (- b a) b)) (* (pow 0 -1) 0)) (pow (/ b (+ c a)) (/ 1 a))) (pow (+ (+ 1 a) -1) c)) (pow (- (+ -1 (- 0 -1)) (/ -1 0)) (* 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.110254399)",
      "output_term": "(+ (* (- (/ (+ 1 (/ 1 (* -1 a))) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.156732816
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.101953007)",
      "output_term": "(+ (* (- (/ (/ (/ (+ -1 a) (- 0 a)) -1) (pow (- b a) b)) (pow (/ b (+ a c)) (/ 1 a))) (pow a c)) (/ -1 0))",
      "output_weight_simple": 22,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.10345262499999999
    },
    "speedup": 1.5150201940260095,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (+ (* (pow (* (- (+ 0 a) b) (pow 1 -1)) (pow 1 -1)) (* (pow a 1) 1)) (+ (pow a 0) 0)) (- (* b (pow c -1)) (* 1 c))) (* (pow (* -1 0) 1) c)) (+ (pow (- (pow c c) 1) (/ 0 b)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.152662638)",
      "output_term": "(+ (* a (- a b)) (+ (* b (* -1 (/ 1 c))) (+ -1 c)))",
      "output_weight_simple": 13,
      "output_weight_complex": 23,
      "output_depth": 6,
      "simplification_time": 0.17102261600000002
    },
    "Extended": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.108381317)",
      "output_term": "(- (* a (- a b)) (+ (- (/ b c) c) (pow (- (pow c c) 1) (/ 0 b))))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.109680636
    },
    "speedup": 1.5592781208890876,
    "weight_simple_diff": -2,
    "weight_complex_diff": -10,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (+ (+ (+ (* (pow 0 (pow 1 a)) (+ b b)) (- 1 b)) (/ (* b 0) 0)) (- (- -1 a) c)) (* (+ (pow 0 1) a) (+ d 1))) (/ (- -1 (+ a -1)) (/ 1 0))) (* (* (* (pow 0 e) e) 0) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.126451433)",
      "output_term": "(pow (* (+ (* (pow 0 (pow 1 a)) (+ b b)) (+ (/ 0 0) (* -1 (+ b (+ a c))))) (* a (+ 1 d))) (/ (* a -1) (/ 1 0)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.160308076
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100457141)",
      "output_term": "(pow (* (+ (* (pow 0 (pow 1 a)) (+ b b)) (- (/ 0 0) (+ a (+ b c)))) (* a (+ 1 d))) (/ (- 0 a) (/ 1 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.102758456
    },
    "speedup": 1.5600475351634322,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(* (/ (pow (pow (* (/ a (- (* (pow a b) 1) (pow b 1))) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow (pow (pow 1 -1) 0) (- d c))) (/ (* (pow c -1) 1) (- a 0))) (pow (+ (+ (* e b) b) (+ a c)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (* (/ a (- (pow a b) b)) (pow 0 b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (/ 1 c) a))",
      "output_weight_simple": 20,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.0014737589999999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (* (/ a (- (pow a b) b)) (pow (/ 0 b) b)) (/ b (- 0 b))) (pow 1 (- d c))) (/ (/ 1 c) a))",
      "output_weight_simple": 21,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.0009382319999999999
    },
    "speedup": 1.5707831325301205,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (* (- (* (* (pow (pow -1 1) 1) (pow -1 a)) (- b b)) (/ (- 0 d) -1)) (- (+ 1 -1) 0)) (- (* 1 (pow e c)) (+ b 1))) (- (+ (* -1 -1) 1) (* b -1))) (* (- (pow (* d c) a) (* 0 b)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.001076797
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow 0 (+ b 2)) (* e (pow (* d c) a)))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.000636147
    },
    "speedup": 1.6926858100407611,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (* (/ (/ (- (+ 0 (- (- 1 -1) a)) (/ b 0)) (+ (pow a a) -1)) c) (+ (+ 0 (* c d)) (* -1 c))) (- (* (pow (pow c 0) c) (/ 1 -1)) (* -1 -1))) (- (pow (- 1 (+ e b)) (/ a e)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.1672799)",
      "output_term": "(* (pow (* (/ (- (- 2 a) (/ b 0)) (+ -1 (pow a a))) (+ -1 d)) (+ -1 (* -1 (pow 1 c)))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 7,
      "simplification_time": 0.170936504
    },
    "Extended": {
      "iterations": 24,
      "stop_reason": "TimeLimit(0.100163576)",
      "output_term": "(* (pow (* (+ -1 d) (/ (- (- 2 a) (/ b 0)) (+ -1 (pow a a)))) (- -1 (pow 1 c))) (- (pow (- 1 (+ b e)) (/ a e)) (/ b a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 62,
      "output_depth": 7,
      "simplification_time": 0.10027425599999999
    },
    "speedup": 1.704689825871159,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (+ (- (+ (+ (pow a (+ (* a a) 0)) (+ a 1)) (/ (+ a -1) -1)) (* (+ a -1) -1)) (+ (pow (* 0 1) c) (/ b 0))) (- (- 1 (pow 1 b)) (pow 1 0))) (* (+ (/ c (pow -1 -1)) (pow a 0)) (pow 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.176842702)",
      "output_term": "(pow (+ (pow a (* a a)) (+ 1 (+ (+ (/ b 0) (pow 1 b)) (+ a (pow 0 c))))) (* (+ 1 (* -1 c)) (pow 1 d)))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.19214303
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.106728104)",
      "output_term": "(pow (+ a (+ (pow a (* a a)) (+ (/ (+ a -1) -1) (+ a (+ (/ b 0) (+ (pow 0 c) (pow 1 b))))))) (* (+ 1 (/ c -1)) (pow 1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 58,
      "output_depth": 9,
      "simplification_time": 0.110679989
    },
    "speedup": 1.7360232119285808,
    "weight_simple_diff": -3,
    "weight_complex_diff": -10,
    "depth_diff": -2
  },
  {
    "base_term": "(* (* (/ (- (pow (- (- 1 (+ (/ a 1) b)) (/ 0 b)) (- (pow 0 a) a)) (+ (- 0 0) 0)) (/ -1 (- a 0))) (+ (- (+ (* -1 1) 1) (/ 1 1)) (- 0 0))) (pow (- (pow (+ a a) b) (+ -1 0)) (/ 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (* -1 (/ (pow (- 1 (+ a b)) (- (pow 0 a) a)) (/ -1 a))) (pow (+ 1 (pow (+ a a) b)) (/ 1 e)))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.001101385
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- 0 (/ (* (pow (- 1 (+ a (+ b (/ 0 b)))) (- (pow 0 a) a)) (pow (+ 1 (pow (+ a a) b)) (/ 1 e))) (/ -1 a)))",
      "output_weight_simple": 22,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.00060745
    },
    "speedup": 1.8131286525639971,
    "weight_simple_diff": -2,
    "weight_complex_diff": -5,
    "depth_diff": -2
  },
  {
    "base_term": "(- (pow (* (/ (/ (+ (* (pow (+ 0 0) a) (- -1 b)) a) a) (/ (/ (* 1 c) -1) (/ 1 1))) (pow (* a (- a c)) (* 1 0))) (* (/ (* a e) e) (- c c))) (/ (+ (+ (/ b 1) c) (/ -1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.168307221)",
      "output_term": "(* -1 (+ b c))",
      "output_weight_simple": 5,
      "output_weight_complex": 8,
      "output_depth": 3,
      "simplification_time": 0.181615982
    },
    "Extended": {
      "iterations": 25,
      "stop_reason": "TimeLimit(0.100002782)",
      "output_term": "(- 0 (+ c b))",
      "output_weight_simple": 5,
      "output_weight_complex": 7,
      "output_depth": 3,
      "simplification_time": 0.10015197899999999
    },
    "speedup": 1.8134038269977675,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (- (/ (+ a (* (- (* 0 a) -1) (* b a))) (+ (/ a c) c)) (pow (* 1 c) 0)) (+ (* (* -1 a) 1) (/ 0 0))) (/ (+ (pow c 1) 0) (- -1 d))) (/ (pow (+ (/ e 1) -1) (- a c)) (- -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (+ -1 (/ (+ a (* a b)) (+ c (/ a c)))) (+ (* a -1) (/ 0 0))) (/ c (- -1 d))) (/ (pow (+ -1 e) (- a c)) (- -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.002059297
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (- (/ (+ a (* a b)) (+ c (/ a c))) 1) (- (/ 0 0) a)) (/ c (- -1 d))) (/ (pow (+ -1 e) (- a c)) (- -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.00112786
    },
    "speedup": 1.825844519709893,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (pow (+ (/ (/ (/ (* (pow -1 a) b) b) (/ a -1)) a) (- b (+ (/ -1 c) c))) (* (* (* 1 -1) 0) 1)) (pow (/ (pow (* c b) b) (* -1 b)) (pow 1 a))) (+ (* (/ (* b 1) d) (* 1 b)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.168299827)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (* -1 b)) (pow 1 a)) (+ -1 (* b (/ b d))))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.183344285
    },
    "Extended": {
      "iterations": 31,
      "stop_reason": "TimeLimit(0.100206632)",
      "output_term": "(pow (pow (/ (pow (* b c) b) (- 0 b)) (pow 1 a)) (+ -1 (/ (* b b) d)))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.10026333999999999
    },
    "speedup": 1.8286273427555875,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (* (pow (- 1 (pow (pow (* 0 a) (pow a b)) (- c -1))) (/ 1 (* (pow a d) 0))) (pow (* (* a d) -1) a)) (+ (pow (* (* 1 0) e) (- -1 e)) (* 1 b))) (- (- (pow 0 (* c 1)) (* d c)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (* a (* -1 d)) a)) (+ b (pow 0 (- -1 e)))) (- (- (pow 0 c) (* c d)) d))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.0018595789999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (* (pow (- 1 (pow (pow 0 (pow a b)) (+ 1 c))) (/ 1 0)) (pow (- 0 (* a d)) a)) (+ b (pow 0 (- -1 e)))) (- (pow 0 c) (+ d (* c d))))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.001014334
    },
    "speedup": 1.8333004710479979,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (* (- (* (* (/ (* 1 0) -1) (+ -1 -1)) (pow 1 a)) (pow (- 0 a) 0)) 1) (- (pow a a) (/ 0 1))) (+ (- (pow 1 (* c -1)) (- 0 b)) (/ d a))) (+ (pow (+ (+ 1 0) -1) (- c d)) (+ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* -1 (pow a a)) (+ (pow 1 (* -1 c)) (+ (/ d a) b))) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 20,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.000878384
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (- 0 (pow a a)) (+ (pow 1 (- 0 c)) (+ b (/ d a)))) (+ (pow 0 (- c d)) 2))",
      "output_weight_simple": 19,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.00047409200000000007
    },
    "speedup": 1.8527711920892989,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (pow (pow (* (- (pow (+ (pow 0 1) a) (pow 1 a)) (- 0 a)) (* (pow 1 0) 1)) (* (- -1 -1) 0)) (/ (+ (+ a -1) -1) (+ a 1))) (+ (/ (pow a a) b) 0)) (+ (+ (* (pow b 0) 1) (/ c 0)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.171365277)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.188254552
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100270346)",
      "output_term": "(* (pow (pow 1 (/ (+ a -2) (+ 1 a))) (/ (pow a a) b)) (+ (/ c 0) d))",
      "output_weight_simple": 17,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.100578761
    },
    "speedup": 1.8717127764180748,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (- (pow (+ 1 (pow (pow (+ -1 1) a) (pow 0 1))) (/ (/ a a) a)) -1) (/ (- b (- b b)) (+ b 0))) (* (pow (+ (* a d) c) (+ -1 1)) (/ b 1))) (+ (* (* (+ -1 a) -1) (/ 0 1)) (+ d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (+ 1 (pow 2 (/ 1 a))) b) d)",
      "output_weight_simple": 10,
      "output_weight_complex": 24,
      "output_depth": 6,
      "simplification_time": 0.0012414409999999998
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (pow 2 (/ 1 a)) (+ -1 b)) d)",
      "output_weight_simple": 11,
      "output_weight_complex": 25,
      "output_depth": 5,
      "simplification_time": 0.0006519879999999999
    },
    "speedup": 1.9040856580182457,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (/ (pow (* (pow (* (* (+ 1 -1) a) (pow 1 1)) (- a -1)) (/ (/ a -1) c)) (* (+ c -1) 0)) (- (+ (pow a 1) 1) (+ 0 1))) (/ (* (- e a) e) -1)) (- (- (/ (+ a e) 1) (pow a c)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.136307186)",
      "output_term": "(+ (/ 1 a) (+ (* e (- e a)) (- (- (+ a e) (pow a c)) (pow -1 b))))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.19636402
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100787677)",
      "output_term": "(+ (- (/ 1 a) (/ (* e (- e a)) -1)) (- (+ a e) (+ (pow a c) (pow -1 b))))",
      "output_weight_simple": 17,
      "output_weight_complex": 36,
      "output_depth": 6,
      "simplification_time": 0.10127355799999999
    },
    "speedup": 1.9389465905799421,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (* (- (* (pow (pow (- (* -1 a) 0) b) (- c 0)) (* (pow b a) 0)) (+ b (* -1 d))) (/ (- (+ d a) d) (* 0 1))) (pow (/ 0 (+ c a)) (* d a))) (* (- (- (* c 1) a) (* a e)) (* 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.169543775)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.211182189
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.105340935)",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.107610108
    },
    "speedup": 1.9624753931108405,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (+ (+ (+ (- (pow (/ (pow a 0) b) -1) (pow 0 b)) (pow (- a b) -1)) (- (pow -1 c) -1)) (pow (pow (* d d) e) (/ 1 1))) (/ (/ (+ d 0) d) (pow 1 e))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (- (/ 1 (/ 1 b)) (pow 0 b)) (+ (pow -1 c) (+ 1 (+ (/ 1 (- a b)) (+ (pow (* d d) e) (/ 1 (pow 1 e))))))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 31,
      "output_weight_complex": 83,
      "output_depth": 9,
      "simplification_time": 0.017800403
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (+ (/ 1 (- a b)) (+ (pow (* d d) e) (- (+ b 1) (pow 0 b)))) (+ (pow -1 c) (/ 1 (pow 1 e)))) (- (+ (/ (/ b 0) c) (pow 0 d)) (/ c 0)))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.00863787
    },
    "speedup": 2.0607398583215537,
    "weight_simple_diff": 2,
    "weight_complex_diff": 10,
    "depth_diff": 2
  },
  {
    "base_term": "(* (pow (pow (* (- (/ (pow a (/ (+ 0 0) a)) (* 0 -1)) a) (/ (* (* a 1) a) (- 1 0))) (- (- (+ a -1) 0) (- -1 0))) (/ (* (* 1 a) -1) (/ a c))) (/ (+ (- d (pow a b)) (+ -1 e)) (+ 0 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.147374133)",
      "output_term": "(* (/ (+ (- d (pow a b)) (+ -1 e)) d) (pow (pow (* a (* a (- (/ 1 0) a))) a) (/ (* a -1) (/ a c))))",
      "output_weight_simple": 23,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.215196245
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.101380427)",
      "output_term": "(* (pow (pow (* (- (/ (pow a (/ 0 a)) 0) a) (* a a)) a) (/ (- 0 a) (/ a c))) (/ (+ -1 (+ (- d (pow a b)) e)) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.10305212100000001
    },
    "speedup": 2.0882272282391936,
    "weight_simple_diff": -1,
    "weight_complex_diff": -7,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (pow (pow (* (pow (+ 0 (pow a (+ 1 a))) (/ 1 1)) (/ (pow 1 1) b)) (pow (* c 1) 0)) (- (+ -1 (- d 0)) (* a e))) (* (* (- -1 d) 1) (pow 0 0))) (* (* (pow (+ 0 c) 0) (/ c 0)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (pow (* (pow a (+ a 1)) (/ 1 b)) (- (+ -1 d) (* a e))) (* (pow 0 0) (+ 1 d))) (* -1 (/ c 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.001577773
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (/ (pow a (+ a 1)) b) (- (+ -1 d) (* a e))) (* (- -1 d) (pow 0 0))) (- 0 (/ c 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.000731276
    },
    "speedup": 2.1575615772977645,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (* (pow 1 (pow (- (pow (pow a 1) 1) 0) (+ 1 0))) (pow (- (pow a a) a) (+ 1 b))) (pow (+ (/ 0 1) 1) (- 1 b))) (- (* (- a -1) b) (+ a -1))) (/ (pow (- b (- 1 1)) (/ c 1)) (- c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ a (- 1 b)))) (+ 1 (+ b (* a (+ b -1))))) (/ (pow b c) (- c b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.002072174
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (pow (- (pow a a) a) (+ 1 b)) (pow 1 (+ a (- 1 b)))) (- (* b (+ 1 a)) (+ a -1))) (/ (pow b c) (- c b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.0009195200000000001
    },
    "speedup": 2.2535388028536625,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (+ (pow (* (* 0 a) (- (* 1 (* b a)) b)) (* (- (- a 1) -1) (- c b))) (pow (/ (pow 1 1) d) 1)) (- (pow (- (/ -1 1) 0) (+ d d)) (+ e -1))) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.186424302)",
      "output_term": "(* (* (+ (pow 0 (* a (- c b))) (/ 1 d)) (- (pow -1 (+ d d)) (+ -1 e))) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.23124561700000001
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100151344)",
      "output_term": "(* (+ (pow 0 (* a (- c b))) (/ 1 d)) (* (- (pow -1 (+ d d)) (- e 1)) (- (- (/ (pow 0 -1) e) (/ d c)) (pow a b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.102187679
    },
    "speedup": 2.2629500861840692,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (- (/ (- (- (- a (+ a 1)) (+ a 0)) (* c -1)) (pow (/ d c) 0)) c) (- (* a d) (- 0 1))) (+ (+ (* (- 1 -1) 1) (* d 1)) (- d c))) (+ (* (/ (/ -1 d) -1) (+ a 1)) (- 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.206437877)",
      "output_term": "(/ (* (pow (- -1 a) (+ 1 (* a d))) (+ d (+ 2 (- d c)))) (+ (* (+ a 1) (/ 1 d)) (- 1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 37,
      "output_depth": 6,
      "simplification_time": 0.258723497
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.102025011)",
      "output_term": "(/ (* (pow (- -1 a) (+ 1 (* a d))) (+ d (+ d (- 2 c)))) (+ 1 (- (/ (+ a 1) d) c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 35,
      "output_depth": 6,
      "simplification_time": 0.104675466
    },
    "speedup": 2.471672750900388,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (pow (/ (+ (pow (* (pow (pow 0 a) a) (+ 1 1)) (pow a -1)) (* a (* -1 b))) (+ 1 (/ 0 c))) (+ (pow (- 0 -1) 0) (pow a 1))) (+ (- (pow a d) -1) (- -1 b))) (* (pow (- (* 0 d) c) (- a 0)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.225456133)",
      "output_term": "(/ (+ (* -1 b) (+ (pow (+ (pow (* (pow (pow 0 a) a) 2) (/ 1 a)) (* a (* -1 b))) (+ a 1)) (pow a d))) (pow (- 0 c) a))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 10,
      "simplification_time": 0.28121046299999997
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.110763074)",
      "output_term": "(/ (+ (pow (/ (- (pow (* (pow (pow 0 a) a) 2) (/ 1 a)) (* a b)) (+ 1 (/ 0 c))) (+ a 1)) (- (pow a d) b)) (pow (- 0 c) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 10,
      "simplification_time": 0.11288553100000001
    },
    "speedup": 2.491111664257485,
    "weight_simple_diff": -1,
    "weight_complex_diff": -8,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (pow (- (* (* (pow (pow (+ -1 (/ 0 a)) (/ -1 1)) 0) (+ (/ -1 -1) 0)) (+ a (pow 0 -1))) (/ (- a (- a a)) (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ (pow (/ a a) e) (pow -1 1)) (/ 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (* (/ 1 (* b b)) (pow d e))) (* (+ -1 (pow 1 e)) (/ 1 0)))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 6,
      "simplification_time": 0.0013549819999999998
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (- (+ a (pow 0 -1)) (/ a (+ -1 a))) (/ (pow d e) (* b b))) (* (+ -1 (pow 1 e)) (/ 1 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 54,
      "output_depth": 6,
      "simplification_time": 0.0005259660000000001
    },
    "speedup": 2.576177927850849,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (pow (+ (/ (+ (* (+ (pow a a) 0) (* -1 b)) (+ -1 a)) (- (pow -1 1) 0)) (* (/ 1 -1) b)) (/ (pow (- -1 c) b) (+ 1 0))) (/ (pow a (/ -1 1)) (pow 1 1))) (/ (pow a (pow (/ -1 d) 1)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (+ (* (pow a a) b) (+ 1 (* -1 (+ a b)))) (pow (- -1 c) b)) (/ 1 a)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.0024689710000000004
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (pow (- (/ (+ a (- -1 (* (pow a a) b))) -1) b) (pow (- -1 c) b)) (/ 1 a)) (/ (pow a (/ -1 d)) (pow 0 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.00094658
    },
    "speedup": 2.6083067463922758,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": -2
  },
  {
    "base_term": "(/ (- (/ (/ (pow (pow (pow (- (* 1 a) -1) (+ a a)) (* 1 1)) (/ (- c 1) 1)) -1) (- -1 (* (/ -1 c) 0))) (+ (* (pow (/ -1 0) a) (* 0 c)) (+ 0 1))) (pow (+ (* (* b 1) a) (* c 1)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ -1 (pow (pow (+ 1 a) (+ a a)) (+ -1 c))) (+ c (* a b)))",
      "output_weight_simple": 14,
      "output_weight_complex": 28,
      "output_depth": 6,
      "simplification_time": 0.0017347640000000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (/ (pow (pow (pow (+ 1 a) a) 2) (- c 1)) -1) -1) 1) (+ c (* a b)))",
      "output_weight_simple": 17,
      "output_weight_complex": 42,
      "output_depth": 9,
      "simplification_time": 0.0006616389999999999
    },
    "speedup": 2.621919203674512,
    "weight_simple_diff": -3,
    "weight_complex_diff": -14,
    "depth_diff": -3
  },
  {
    "base_term": "(- (- (- (pow (* (- (/ (/ (* -1 a) a) (- a a)) (/ c a)) (pow (* c b) 0)) 1) (- a (pow c (* 1 1)))) (- (- (- (/ 0 1) d) (pow -1 1)) (/ 1 1))) (/ (+ (pow (/ 1 -1) a) (/ 0 a)) (pow a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.230909977)",
      "output_term": "(- (+ (- (- (/ -1 0) (/ c a)) (- a c)) d) (pow -1 a))",
      "output_weight_simple": 13,
      "output_weight_complex": 27,
      "output_depth": 6,
      "simplification_time": 0.30364563099999997
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.104837313)",
      "output_term": "(- (- (/ -1 0) (/ c a)) (+ (pow -1 a) (+ (/ 0 a) (- a (+ c d)))))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.114785467
    },
    "speedup": 2.6453316690343733,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (/ (/ (/ 0 (- (* a (* a (pow a a))) (pow a c))) (* 1 (/ (/ 0 -1) 0))) (/ (- 1 1) (- 0 1))) (* (pow (* 1 (* b 1)) (* 1 d)) (/ c -1))) (* (/ (- b (/ a 1)) (* -1 0)) (pow -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 0 0) (* c (* -1 (pow b d)))) (* -1 (/ (- b a) 0)))",
      "output_weight_simple": 15,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.001194488
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ (/ (/ 0 (- (pow a (+ a 2)) (pow a c))) (/ 0 0)) 0) (/ (* c (pow b d)) -1)) (- 0 (/ (- b a) 0)))",
      "output_weight_simple": 23,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.00044896
    },
    "speedup": 2.6605666429080546,
    "weight_simple_diff": -8,
    "weight_complex_diff": -28,
    "depth_diff": -3
  },
  {
    "base_term": "(pow (/ (pow (pow (- (/ (/ (- a a) (+ 0 a)) (- 0 -1)) -1) (/ (/ (* a a) 1) (* 1 b))) (- (pow (pow a a) b) (/ d -1))) (/ (- (- -1 0) b) (/ 0 -1))) (/ (pow (- (- 0 1) d) (- c c)) (* c b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow 1 (/ (* a a) b)) (+ (pow (pow a a) b) d)) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.000806094
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (+ 1 (/ 0 a)) (/ (* a a) b)) (- (pow (pow a a) b) (/ d -1))) (/ (- -1 b) 0)) (/ 1 (* b c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 68,
      "output_depth": 7,
      "simplification_time": 0.00029246000000000003
    },
    "speedup": 2.7562538466798876,
    "weight_simple_diff": -3,
    "weight_complex_diff": -11,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (pow (- (pow a (+ b (pow a (- (pow c d) b)))) (- (* (pow -1 -1) d) 1)) (* (pow (* b a) -1) (* 0 1))) (- (pow (* (* c 1) b) (* d 1)) (/ 1 -1))) (+ (- (/ (- 1 e) b) (* 0 a)) (* 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.002881447
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (/ 1 (+ 1 (pow (* b c) d))) (+ e (/ (- 1 e) b)))",
      "output_weight_simple": 13,
      "output_weight_complex": 29,
      "output_depth": 6,
      "simplification_time": 0.001045303
    },
    "speedup": 2.7565662779117632,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (+ a (- (- (/ -1 (pow (/ 0 a) 1)) (+ 0 0)) (pow (* a b) 1))) (/ (- (pow a c) 0) (* -1 0))) (/ (pow (* a (- c 0)) (+ d b)) (/ 1 b))) (- (* (- a (* c c)) (* a 0)) (pow e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ (- (/ -1 0) (* a b)) (+ a (/ (pow a c) 0))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (- 0 (pow e d)))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.0020174430000000003
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (- (/ -1 (/ 0 a)) (* a b)) (+ a (/ (pow a c) 0))) (/ (pow (* a c) (+ b d)) (/ 1 b))) (pow e d))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.000685733
    },
    "speedup": 2.942024082259422,
    "weight_simple_diff": 0,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (+ (+ (+ (+ (* (pow (/ -1 1) 0) (/ 0 -1)) (+ a 0)) (pow (pow a a) b)) (/ (+ c b) -1)) (/ (pow 1 a) (/ -1 1))) (pow (- (pow 0 a) 0) (* 1 b))) (pow (/ (* (pow -1 e) c) (pow 1 c)) (pow e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (+ a (pow (pow a a) b)) (* -1 (+ b (+ c (pow 1 a))))) (pow (pow 0 a) b)) (/ (* c (pow -1 e)) (pow 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.002588988
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (pow (pow a a) b) (+ a (+ (/ (+ b c) -1) (/ (pow 1 a) -1)))) (pow (pow 0 a) b)) (/ (* c (pow -1 e)) (pow 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.00086217
    },
    "speedup": 3.002874143150423,
    "weight_simple_diff": -1,
    "weight_complex_diff": -8,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (pow (pow (pow (pow (/ (* (pow a 1) a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c (/ 1 -1))) (+ (+ (/ e a) c) (pow -1 d))) (- (- (pow -1 a) -1) 0)) (/ (+ (+ (/ e a) -1) (* -1 e)) (* e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (* -1 c)) (+ c (+ (/ e a) (pow -1 d)))) (+ 1 (pow -1 a))) (/ (+ -1 (+ (/ e a) (* -1 e))) 0))",
      "output_weight_simple": 30,
      "output_weight_complex": 79,
      "output_depth": 9,
      "simplification_time": 0.002914281
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow (pow (pow (/ (* a a) (- a b)) (- a b)) (+ (pow 1 a) -1)) (/ c -1)) (+ (+ c (/ e a)) (pow -1 d))) (+ 1 (pow -1 a))) (/ (+ -1 (- (/ e a) e)) 0))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 9,
      "simplification_time": 0.0009219389999999999
    },
    "speedup": 3.1610345152987347,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (- (* (+ (+ 1 a) (+ (pow (- 0 1) 0) (pow -1 b))) (/ (+ b -1) c)) (+ (+ (/ a -1) 1) (+ a b))) (* (+ (pow (* d -1) -1) (- d d)) (+ -1 d))) (* (pow (pow (/ c -1) e) (/ -1 b)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.246838161)",
      "output_term": "(+ (/ (- (* (+ (pow -1 b) (+ a 2)) (/ (+ -1 b) c)) (+ 1 b)) (* (/ 1 (* -1 d)) (+ -1 d))) (pow (pow (* -1 c) e) (/ -1 b)))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 7,
      "simplification_time": 0.32571427099999994
    },
    "Extended": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.10000474)",
      "output_term": "(+ (/ (- (* (+ a (+ (pow -1 b) 2)) (/ (+ -1 b) c)) (+ 1 (+ a (+ b (/ a -1))))) (/ (+ -1 d) (- 0 d))) (pow (pow (/ c -1) e) (/ -1 b)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.101890357
    },
    "speedup": 3.196713414204643,
    "weight_simple_diff": -3,
    "weight_complex_diff": -8,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (/ (pow (+ (- (pow (* (pow (+ a 1) a) (* b 0)) (* b a)) (/ (- a a) b)) (pow (/ -1 -1) b)) (- (- (/ 0 -1) e) (- 1 a))) (- (pow -1 (pow 1 1)) (+ c a))) (pow (+ (+ d (* 1 0)) a) (* 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (+ (pow 0 (* a b)) (pow 1 b)) (+ a (+ -1 (- 0 e)))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 7,
      "simplification_time": 0.002794842
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (+ (- (pow 0 (* a b)) (/ 0 b)) (pow 1 b)) (- a (+ 1 e))) (- -1 (+ a c))) (pow (+ a d) a))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.0008373300000000001
    },
    "speedup": 3.3378023001683923,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": -1
  },
  {
    "base_term": "(* (+ (+ (pow (+ (* a (* (/ (/ 1 1) -1) a)) (/ (/ -1 a) b)) (+ (/ b b) -1)) (/ 1 (- (+ c a) c))) (* (* (+ (+ -1 d) -1) (- d c)) (/ c d))) (* (+ (/ (- 1 c) 1) (* 1 -1)) (/ b c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.252369932)",
      "output_term": "(* -1 (* (+ 1 (+ (/ 1 a) (* (- d c) (+ c (* (/ c d) -2))))) (* c (/ b c))))",
      "output_weight_simple": 19,
      "output_weight_complex": 40,
      "output_depth": 9,
      "simplification_time": 0.347274178
    },
    "Extended": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.100461068)",
      "output_term": "(- 0 (* b (+ (+ 1 (/ 1 a)) (* (- d 2) (* (- d c) (/ c d))))))",
      "output_weight_simple": 17,
      "output_weight_complex": 32,
      "output_depth": 7,
      "simplification_time": 0.10226294699999999
    },
    "speedup": 3.395894487570361,
    "weight_simple_diff": 2,
    "weight_complex_diff": 8,
    "depth_diff": 2
  },
  {
    "base_term": "(* (+ (- (pow (pow (/ (+ (pow (* a -1) 0) (- 0 a)) (/ 0 b)) (+ (+ b 1) b)) -1) (* 1 (/ (* -1 -1) 1))) (/ (/ (/ (pow 0 a) 0) (* 0 -1)) (pow c a))) (pow (pow (- (/ a c) b) (/ d d)) (- 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (/ 1 (pow (/ (+ (- 0 a) 1) 0) (+ b (+ b 1)))) (+ -1 (/ (/ (/ (pow 0 a) 0) 0) (pow c a)))) (/ 1 (- (/ a c) b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.001799456
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (- (/ 1 (pow (/ (- 1 a) (/ 0 b)) (+ b (+ b 1)))) 1) (/ (/ (/ (pow 0 a) 0) 0) (pow c a))) (- (/ a c) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.000525444
    },
    "speedup": 3.4246389719932093,
    "weight_simple_diff": 2,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (* (+ (+ -1 a) 1) (+ (- a b) a)) (/ (* d d) b)) (* (+ 0 c) 1)) (+ (+ 1 (pow -1 b)) (+ -1 1))) (pow (+ (- c 1) b) (* 0 e))) (- (* (+ 1 (pow e a)) (pow c 0)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.244716279)",
      "output_term": "(/ (+ (pow (pow (* a (+ a (- a b))) (/ (* d d) b)) c) (+ 1 (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.358889949
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.100061354)",
      "output_term": "(/ (+ 1 (+ (pow (pow (* a (+ a (- a b))) (/ (* d d) b)) c) (pow -1 b))) (+ 1 (pow e a)))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.10270196699999999
    },
    "speedup": 3.494479799009108,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(- (- (pow (/ (pow (pow (- (/ (* 1 0) a) (* 1 -1)) (- -1 -1)) (/ a (+ 1 -1))) (* (+ a 1) a)) (pow (* (pow -1 1) 0) (+ a a))) (pow (pow (/ a 0) a) (* 1 a))) (- (pow (* (* a 1) a) (- 1 b)) 1))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (- (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (pow (pow (/ a 0) a) a)) (+ -1 (pow (* a a) (- 1 b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.0015456130000000002
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (/ (pow 1 (/ a 0)) (+ a (* a a))) (pow 0 (+ a a))) (+ (pow (pow (/ a 0) a) a) (- (pow (* a a) (- 1 b)) 1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.00043139099999999994
    },
    "speedup": 3.582858705907171,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (- (- (- 0 (* (+ (+ (- -1 -1) 0) -1) (/ a b))) (pow (- (pow a c) -1) (* -1 a))) (- (+ (pow a a) 1) (- 0 -1))) (/ (- c (* b 1)) (- b -1))) (- (- (+ d (pow -1 1)) (+ -1 b)) (+ 1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 100,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.322081663)",
      "output_term": "(/ (pow (- (- (/ a b) (pow (- (pow a c) -1) (* -1 a))) (pow a a)) (/ (- c b) (+ b 1))) (+ -1 (* -1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.42297822
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.108741824)",
      "output_term": "(/ (pow (- (/ a b) (+ (pow (+ (pow a c) 1) (- 0 a)) (pow a a))) (/ (- c b) (+ b 1))) (- -1 b))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.111515004
    },
    "speedup": 3.7930162294573386,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (pow (+ (* (pow (+ (pow 1 (pow a 1)) (+ b a)) (* b c)) (* c (- 1 c))) (+ (pow e b) a)) (* (pow 0 (- c 0)) (- -1 0))) (* (/ d (pow c e)) -1)) (/ (- (- c (- 0 0)) (/ -1 1)) (* e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ a (+ (* c (* (pow (+ a (+ (pow 1 a) b)) (* b c)) (- 1 c))) (pow e b))) (* (pow 0 c) -1)) (* -1 (* (/ d (pow c e)) (/ (+ 1 c) (* c e)))))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 11,
      "simplification_time": 0.011875272
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ (* (pow (+ a (+ (pow 1 a) b)) (* b c)) (- c (pow c 2))) (+ a (pow e b))) (- 0 (pow 0 c))) (/ (* (/ d (pow c e)) (- -1 c)) (* c e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.0030090000000000004
    },
    "speedup": 3.9465842472582247,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 2
  },
  {
    "base_term": "(* (pow (pow (+ (* (pow (* (pow (pow 0 -1) a) (- -1 a)) (/ a a)) (- 0 (- 0 1))) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) (pow b 1))) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ e a)) (/ 0 b)) (+ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (pow (+ (* (pow (pow 0 -1) a) (- -1 a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (+ -1 d))",
      "output_weight_simple": 24,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.001908409
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (pow (+ (* (pow (pow 0 -1) a) (- -1 a)) (/ (pow -1 c) 0)) (pow (+ c (/ c 0)) b)) (/ -1 (/ (pow 1 c) c))) (* (pow (pow c (+ a e)) (/ 0 b)) (+ -1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 85,
      "output_depth": 8,
      "simplification_time": 0.00047338599999999996
    },
    "speedup": 4.031401435614911,
    "weight_simple_diff": -6,
    "weight_complex_diff": -18,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (- (+ (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (pow (* d 1) 0)) (/ b (+ 0 0))) (+ (* 0 (/ -1 -1)) (pow e c))) (/ (pow (pow 0 c) -1) (/ e a))) (pow 1 (/ (pow (/ 1 1) c) (pow 0 -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ 1 (+ (* (+ (pow (+ a b) c) (* c c)) (/ 1 a)) (/ b 0))) (pow e c)) (/ (/ 1 (pow 0 c)) (/ e a))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 28,
      "output_weight_complex": 79,
      "output_depth": 10,
      "simplification_time": 0.002500227
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ (/ (+ (pow (+ a b) c) (* c c)) a) (/ b 0)) (- (pow e c) 1)) (/ (/ 1 (pow 0 c)) (/ e a))) (pow 1 (/ (pow 1 c) (pow 0 -1))))",
      "output_weight_simple": 27,
      "output_weight_complex": 77,
      "output_depth": 9,
      "simplification_time": 0.000610606
    },
    "speedup": 4.094664972175183,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (/ (pow (- (pow 1 (pow -1 a)) (+ (- (+ (* a 1) 0) (* b c)) (* -1 c))) (pow (- (/ b d) 1) (/ c 1))) (/ (* (pow (/ -1 e) b) (* 1 1)) (- b 1))) (+ (pow (* (* -1 d) e) (* b e)) (- -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 9,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (pow (+ (pow 1 (pow -1 a)) (+ (* -1 a) (+ c (* b c)))) (pow (+ -1 (/ b d)) c)) (/ (pow (/ -1 e) b) (+ -1 b))) (+ -1 (pow (* -1 (* d e)) (* b e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 8,
      "simplification_time": 0.004455622000000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ -1 (+ (/ (pow (- (pow 1 (pow -1 a)) (- (- a c) (* b c))) (pow (- (/ b d) 1) c)) (/ (pow (/ -1 e) b) (- b 1))) (pow (- 0 (* d e)) (* b e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.001028019
    },
    "speedup": 4.334182539427774,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (/ (pow (pow a (/ (pow (* a (pow (- a b) b)) (- d c)) (- (* 0 0) -1))) (/ (+ a (- -1 1)) (* 1 d))) (* (+ (+ (pow 0 c) -1) (* d d)) (pow d a))) (pow (pow (/ -1 (+ 1 -1)) (/ c c)) (+ c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow a (pow (* a (pow (- a b) b)) (- d c))) (/ (+ a -2) d)) (* (+ -1 (+ (pow 0 c) (* d d))) (pow d a))) (pow (/ -1 0) (+ c e)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.001571605
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (pow (pow a (pow (* a (pow (- a b) b)) (- d c))) (/ (+ a -2) d)) (pow (/ -1 0) (+ c e))) (* (+ (+ -1 (pow 0 c)) (* d d)) (pow d a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.00036186700000000004
    },
    "speedup": 4.343045925713038,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (/ (pow (/ (+ (/ (pow a b) 1) 0) (/ 0 1)) (pow (pow -1 1) 0)) a) (- (pow (* a -1) 1) (- c 1))) (/ (+ (+ (+ 1 -1) -1) (* d 0)) (+ a b))) (pow (* (pow (+ 0 -1) e) (+ 0 e)) (- e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (/ (/ (pow a b) 0) a) (* -1 (+ c (+ a -1)))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 7,
      "simplification_time": 0.0016324940000000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (pow (/ (/ (pow a b) 0) a) (- 1 (+ a c))) (/ -1 (+ a b))) (pow (* e (pow -1 e)) (- e a)))",
      "output_weight_simple": 21,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.00036664600000000004
    },
    "speedup": 4.452507323140032,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (+ (* (/ (pow (* a (* (- 1 b) -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (- (* (- 0 e) 1) (/ d e))) (+ (pow (pow 1 b) 1) (/ 1 c))) (pow (* (+ (- 1 c) a) (/ a -1)) (pow c e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (/ (pow (* a (+ b -1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (* -1 (+ (+ (/ d e) (/ 1 c)) (+ e (pow 1 b))))) (pow (* a (+ c (* -1 (+ a 1)))) (pow c e)))",
      "output_weight_simple": 33,
      "output_weight_complex": 84,
      "output_depth": 8,
      "simplification_time": 0.0061499250000000005
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (* (/ (pow (* a (- b 1)) (/ 1 0)) (pow (pow c a) b)) (pow b (* d e))) (+ e (+ (/ d e) (+ (pow 1 b) (/ 1 c))))) (pow (* (+ a (- 1 c)) (/ a -1)) (pow c e)))",
      "output_weight_simple": 32,
      "output_weight_complex": 85,
      "output_depth": 8,
      "simplification_time": 0.0013503739999999999
    },
    "speedup": 4.5542383073133825,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (pow (+ (/ (+ (+ (- (/ 0 -1) -1) (+ -1 a)) (/ b b)) (- (+ b b) c)) (* b 1)) (* (/ (pow -1 d) c) (- 1 -1))) (/ (- (* -1 d) e) (* -1 0))) (- (* (* (- d 0) -1) (- e 0)) (pow 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.362956958)",
      "output_term": "(* (- (pow (+ b (/ (+ 1 a) (- (+ b b) c))) (* (/ (pow -1 d) c) 2)) (/ (- (* -1 d) e) 0)) (+ -1 (* -1 (* d e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.522639391
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.105400571)",
      "output_term": "(* (- (pow (+ b (/ (+ 1 a) (- (+ b b) c))) (* (/ (pow -1 d) c) 2)) (/ (- 0 (+ d e)) 0)) (- -1 (* d e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.112239326
    },
    "speedup": 4.656472999490393,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (/ (/ (pow (pow (* (+ (* a a) b) (* c d)) c) (* 0 (pow e c))) a) (+ (/ 0 (- a d)) (* c b))) (/ (* (/ (pow b 1) b) (+ 1 1)) (+ e 0))) (pow (- (* (/ -1 1) a) (- 0 -1)) (pow e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (pow a -1) (* b c)) (/ 2 e)) (pow (+ -1 (* a -1)) (pow e b)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 5,
      "simplification_time": 0.001722844
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (/ 1 (+ (/ 0 (- a d)) (* b c))) a) (/ 2 e)) (pow (- -1 a) (pow e b)))",
      "output_weight_simple": 21,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.000360253
    },
    "speedup": 4.782316871754017,
    "weight_simple_diff": -5,
    "weight_complex_diff": -10,
    "depth_diff": -3
  },
  {
    "base_term": "(- (- (+ (- (/ 0 (+ (- (pow (- -1 0) -1) (* a a)) -1)) (pow (- (/ a -1) 0) (/ a 0))) (* (+ (+ 0 b) a) (* 0 e))) (/ (+ (* 1 a) 1) (pow 1 e))) (* (* (pow (- 0 1) 1) (pow d -1)) (- d e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 16,
      "stop_reason": "Saturated",
      "output_term": "(* -1 (+ (/ (+ a 1) (pow 1 e)) (+ -1 (+ (pow (* -1 a) (/ a 0)) (* e (/ 1 d))))))",
      "output_weight_simple": 18,
      "output_weight_complex": 42,
      "output_depth": 7,
      "simplification_time": 0.011754815999999998
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (/ 0 (- -2 (* a a))) (+ (pow (/ a -1) (/ a 0)) (/ (+ a 1) (pow 1 e)))) (/ (- d e) d))",
      "output_weight_simple": 21,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.002391912
    },
    "speedup": 4.914401533166771,
    "weight_simple_diff": -3,
    "weight_complex_diff": -9,
    "depth_diff": 1
  },
  {
    "base_term": "(- (* (+ (pow (* (/ (/ (+ 1 (/ a -1)) (+ -1 1)) (* a b)) (+ (pow b b) b)) (/ 0 (- c d))) (/ (* (* 0 e) -1) (- 0 -1))) (+ c (/ (/ 0 -1) 0))) (+ (- (/ (* 1 a) a) (* e d)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (* d e) (+ c (+ -1 (/ 0 0))))",
      "output_weight_simple": 10,
      "output_weight_complex": 18,
      "output_depth": 5,
      "simplification_time": 0.00200383
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (* (pow (* (/ (/ (+ 1 (/ a -1)) 0) (* a b)) (+ b (pow b b))) (/ 0 (- c d))) (+ c (/ 0 0))) (- 1 (* d e)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.0003651160000000001
    },
    "speedup": 5.488201010089942,
    "weight_simple_diff": -15,
    "weight_complex_diff": -42,
    "depth_diff": -4
  },
  {
    "base_term": "(/ (* (+ (pow (pow (pow (pow (+ (pow a 1) 0) (- a -1)) (- 1 a)) (- (- 1 0) -1)) (- (* -1 1) -1)) (/ (- a (* a 0)) (- 0 b))) (pow 1 (pow 1 (pow c -1)))) (/ (/ (+ (pow 0 -1) -1) (pow a 1)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ 1 (/ a (- 0 b))) (pow 1 (pow 1 (/ 1 c)))) (* -1 (/ (+ -1 (pow 0 -1)) a)))",
      "output_weight_simple": 18,
      "output_weight_complex": 48,
      "output_depth": 6,
      "simplification_time": 0.002539801
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ 1 (/ a (- 0 b))) (pow 1 (pow 1 (/ 1 c)))) (/ (/ (+ -1 (pow 0 -1)) a) -1))",
      "output_weight_simple": 18,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.00046164299999999997
    },
    "speedup": 5.50165604157325,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (+ (* (* (* a (+ (/ a a) 0)) (pow b b)) (/ a (+ a a))) (pow 0 1)) (- b (* 1 (/ c b)))) (* (/ (/ (+ -1 a) c) (+ -1 -1)) (* 1 a))) (pow (- (/ (/ 0 -1) -1) (/ d e)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* a (* (- b (/ c b)) (* (pow b b) (/ a (+ a a))))) (* (/ (+ a -1) c) (* a -0.5))) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 26,
      "output_weight_complex": 61,
      "output_depth": 8,
      "simplification_time": 0.015840937
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* (pow b b) (* a (* (/ a (+ a a)) (- b (/ c b))))) (/ (* a (/ (- a 1) c)) -2)) (pow (- 0 (/ d e)) (- -1 d)))",
      "output_weight_simple": 27,
      "output_weight_complex": 65,
      "output_depth": 8,
      "simplification_time": 0.002746823
    },
    "speedup": 5.767003188774813,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (+ (/ (- (/ (pow (* 0 a) 0) (+ 0 0)) (+ b b)) (+ (/ 1 -1) c)) (+ (* -1 1) a)) (* (* (pow d 0) -1) (* a 0))) (pow (/ (- 1 -1) c) (* a e))) (pow (+ (+ d (pow e c)) b) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ d (+ b (pow e c))) (/ 1 a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.0029190820000000004
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (/ 2 c) (* a e)) (pow (+ d (+ b (pow e c))) (/ 1 a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 43,
      "output_depth": 6,
      "simplification_time": 0.000504938
    },
    "speedup": 5.781070151186879,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (- (- (+ (- (+ (pow (* a a) b) (* b a)) (+ c -1)) (+ b (pow c -1))) (* -1 (/ a d))) (+ (- (- a d) -1) (- b 1))) (- (pow (pow -1 -1) 0) (+ e c))) (- (- a (* (pow e a) c)) (* 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.432788788)",
      "output_term": "(+ (* (- (+ b (+ (- (+ (pow (* a a) b) (* a b)) (+ -1 c)) (+ (/ 1 c) (/ a d)))) (+ b (- a d))) (- 1 (+ e c))) (- (- a (* (pow e a) c)) b))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 10,
      "simplification_time": 0.605116694
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.101027081)",
      "output_term": "(+ (* (- (+ (* a b) (+ (pow (* a a) b) (/ 1 c))) (+ (- a d) (- (- c 1) (/ a d)))) (- 1 (+ c e))) (- a (+ b (* c (pow e a)))))",
      "output_weight_simple": 26,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.10405624699999999
    },
    "speedup": 5.815284631589683,
    "weight_simple_diff": 3,
    "weight_complex_diff": 3,
    "depth_diff": 2
  },
  {
    "base_term": "(pow (/ (pow (- (/ (pow (* (pow (+ a -1) a) (* b a)) (+ e a)) (+ (* 0 1) 1)) (+ (- 1 1) 0)) (/ c (* (* -1 a) d))) (- (- (- a -1) -1) (* d e))) (- (- (/ (+ a -1) 0) (- -1 e)) (* d a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 15,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (* a (* (pow (+ a -1) a) b)) (+ a e)) (/ c (* a (* -1 d)))) (- (+ a 2) (* e d))) (- (+ e (+ 1 (/ (+ a -1) 0))) (* a d)))",
      "output_weight_simple": 29,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.005266908999999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (pow (* (pow (+ a -1) a) (* a b)) (+ a e)) (/ c (- 0 (* a d)))) (- (+ a 2) (* e d))) (- (/ (+ a -1) 0) (+ (- -1 e) (* a d))))",
      "output_weight_simple": 27,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.0008907769999999999
    },
    "speedup": 5.912713282897964,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 1
  },
  {
    "base_term": "(- (pow (/ (- (+ (* a (- -1 (* (+ 1 b) 1))) (pow (+ a b) b)) (/ (* -1 a) 0)) (pow (* b a) (* c 0))) (- (/ (/ (pow a c) 1) (* -1 -1)) (+ a c))) (- (+ (* -1 (/ c 1)) (/ -1 b)) (pow a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ c (+ (pow (+ (pow (+ a b) b) (* -1 (+ (/ (* a -1) 0) (* a (+ b 2))))) (- (pow a c) (+ a c))) (+ (/ 1 a) (/ 1 b))))",
      "output_weight_simple": 25,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.0037887419999999995
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (- (+ (* a (- -1 (+ 1 b))) (pow (+ a b) b)) (/ (- 0 a) 0)) (- (pow a c) (+ a c))) (- (- (/ -1 b) c) (/ 1 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.0006356210000000001
    },
    "speedup": 5.960693557953559,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (/ (- (pow (* (* (/ (pow 0 -1) 1) (- a 0)) (- -1 b)) (pow (+ c 1) -1)) (pow (- -1 -1) c)) (+ (* (+ 1 b) c) (* a -1))) (/ (- (+ a 1) 0) (/ a e))) (+ (* (- (+ -1 d) a) d) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (- (pow (* (pow 0 -1) (* a (- -1 b))) (/ 1 (+ 1 c))) (pow 0 c)) (+ c (+ (* -1 a) (* b c)))) (/ (+ 1 a) (/ a e))) (* d (- (+ -1 d) a)))",
      "output_weight_simple": 30,
      "output_weight_complex": 68,
      "output_depth": 9,
      "simplification_time": 0.004178539
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (- (pow (* a (* (pow 0 -1) (- -1 b))) (/ 1 (+ 1 c))) (pow 0 c)) (- (* c (+ 1 b)) a)) (/ (+ 1 a) (/ a e))) (* d (- d (+ 1 a))))",
      "output_weight_simple": 28,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.000695416
    },
    "speedup": 6.008689762674428,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (/ (* (pow (* (* (/ (/ 1 1) 0) (- 1 -1)) (- a a)) (* a (/ -1 -1))) (- (pow b 1) a)) (pow (* (/ -1 1) 0) (pow 1 -1))) (+ (pow (pow a a) b) (/ 0 a))) (pow (pow (- c -1) (pow b 0)) (- a c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (* (- b a) (pow 0 (+ -1 a))) (pow (pow a a) b)) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 17,
      "output_weight_complex": 37,
      "output_depth": 6,
      "simplification_time": 0.001627494
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (/ (* (pow 0 a) (- b a)) 0) (+ (pow (pow a a) b) (/ 0 a))) (pow (+ 1 c) (- a c)))",
      "output_weight_simple": 18,
      "output_weight_complex": 46,
      "output_depth": 6,
      "simplification_time": 0.000270693
    },
    "speedup": 6.012323924150236,
    "weight_simple_diff": -1,
    "weight_complex_diff": -9,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (/ (- (/ (pow (/ (- (/ a 0) a) (- -1 1)) (/ -1 a)) (pow (pow b c) 0)) (* (/ -1 1) 0)) (pow (pow (- b d) 1) (- -1 b))) (+ (/ (/ a 1) b) (* b b))) (/ d (pow (+ (- 1 e) 0) (pow 1 1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (+ (/ (pow (* (- (/ a 0) a) -0.5) (/ -1 a)) (pow (- b d) (- -1 b))) (+ (/ a b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.001600669
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (+ (/ (pow (/ (- (/ a 0) a) -2) (/ -1 a)) (pow (- b d) (- -1 b))) (+ (/ a b) (* b b))) (/ d (- 1 e)))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.000260779
    },
    "speedup": 6.138028752315179,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (- (pow (- (/ (/ (/ (- 1 1) 0) (- -1 a)) (+ -1 a)) (* (- 0 c) a)) (+ (/ d c) 1)) (pow (pow -1 (- d d)) (+ e e))) (- (/ 1 (* 1 c)) d)) (- (* (- (- 1 e) 0) (pow 1 e)) (+ e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ e (+ (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (+ -1 a)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (* (pow 1 e) (+ -1 e))))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 10,
      "simplification_time": 0.0049634
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (pow (+ (/ (/ (/ 0 0) (- -1 a)) (- a 1)) (* a c)) (+ 1 (/ d c))) (pow 1 (+ e e))) (- (/ 1 c) d)) (- (* (- 1 e) (pow 1 e)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.000715692
    },
    "speedup": 6.935106162986313,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (pow (* (/ (pow a (pow (* (/ 1 -1) (pow a 1)) (+ 1 -1))) (* (pow (- a -1) a) (* a d))) (- (- (* b a) -1) (+ 0 a))) (/ (+ (pow b -1) e) (pow -1 0))) (/ (pow (- (pow d 0) 1) (pow b 0)) (/ b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 130,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (/ a (* (pow (+ a 1) a) (* a d))) (+ 1 (* a (+ -1 b)))) (+ (/ 1 b) e)) 0)",
      "output_weight_simple": 20,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.002961074
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* (/ a (* (pow (+ a 1) a) (* a d))) (- (* a b) (+ a -1))) (+ (/ 1 b) e)) (/ 0 (/ b -1)))",
      "output_weight_simple": 22,
      "output_weight_complex": 56,
      "output_depth": 8,
      "simplification_time": 0.000400138
    },
    "speedup": 7.400131954475706,
    "weight_simple_diff": -2,
    "weight_complex_diff": -10,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (/ (- (/ (* (+ (+ 1 1) (* a 1)) (+ 0 a)) 1) (* 0 (+ (+ a 1) 1))) (* (* (pow a a) a) b)) (+ (/ (pow (- b 0) 0) (/ b 0)) (pow -1 c))) (+ (pow (+ -1 (/ 1 -1)) (- b 0)) (/ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (* a (+ 2 a)) (* a (* (pow a a) b))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ 1 (pow -2 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.0069175059999999995
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (* a (+ 2 a)) (* a (* (pow a a) b))) (+ (/ 1 (/ b 0)) (pow -1 c))) (+ 1 (pow -2 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.000812266
    },
    "speedup": 8.516306234657119,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (- (/ (+ (pow 1 (* a (pow a 0))) (* -1 -1)) (- (* a 0) a)) (- (/ 1 a) 0)) (* (pow (- b d) d) (* 0 1))) (- (/ b (pow 0 0)) (* 1 1))) (- (* (+ (+ e 1) a) (+ 0 a)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (pow 0 (+ -1 (/ b (pow 0 0)))) (- (+ a (* a (+ a e))) (pow -1 e)))",
      "output_weight_simple": 15,
      "output_weight_complex": 32,
      "output_depth": 6,
      "simplification_time": 0.004808474
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- (pow 0 (- (/ b (pow 0 0)) 1)) (- (* a (+ 1 (+ a e))) (pow -1 e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.0005542
    },
    "speedup": 8.676423673763983,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (- (/ a 0) (pow 0 a)) (- a 0)) (* (* -1 a) c)) c) (+ (+ (* c 0) -1) (- c c))) (+ (/ (+ (pow 1 d) 0) (- -1 -1)) (+ 1 -1))) (- (- (+ (pow 0 0) -1) (pow 1 c)) (- -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 9,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (+ (- (pow (+ a (- (/ a 0) (pow 0 a))) (* a (* -1 c))) c) 1) (/ (pow 1 d) 0)) (- (+ -1 (pow 0 0)) (pow 1 c)))",
      "output_weight_simple": 23,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.006124643
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (- (pow (+ a (- (/ a 0) (pow 0 a))) (- 0 (* a c))) (+ -1 c)) (/ (pow 1 d) 0)) (- (pow 0 0) (+ 1 (pow 1 c))))",
      "output_weight_simple": 23,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.0006187160000000001
    },
    "speedup": 9.89895687197357,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (pow (/ (pow (* (- (* (pow -1 (/ a a)) (pow a b)) (- 0 a)) (+ (- 1 0) b)) (* (pow 0 a) a)) (pow c (/ (- -1 1) a))) (+ (+ (* 0 c) c) (pow a 1))) (pow (/ (- (- a 1) c) (/ d c)) (* 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 15,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow (* (+ a (* -1 (pow a b))) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (/ 1 (/ (- (+ -1 a) c) (/ d c))))",
      "output_weight_simple": 27,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.009211082999999998
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (pow (* (- a (pow a b)) (+ b 1)) (* a (pow 0 a))) (pow c (/ -2 a))) (+ a c)) (/ 1 (/ (- a (+ 1 c)) (/ d c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 66,
      "output_depth": 8,
      "simplification_time": 0.00085871
    },
    "speedup": 10.726651605314947,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (+ (- (pow (/ (* (- (- 0 1) -1) -1) (+ a b)) (+ 1 (- a -1))) (/ (pow c d) 1)) (pow (pow (/ d -1) -1) (pow -1 0))) (* (- (+ c e) 1) (- 0 d))) (* (pow (pow (- c a) c) (pow 0 1)) (* -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (pow 0 (+ a 2)) (+ (/ 1 (- 0 d)) (+ d (* -1 (+ (pow c d) (* (+ c e) d)))))) (* -1 c))",
      "output_weight_simple": 22,
      "output_weight_complex": 42,
      "output_depth": 9,
      "simplification_time": 0.01080205
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (+ (- (pow (/ 0 (+ a b)) (+ a 2)) (pow c d)) (/ 1 (/ d -1))) (* d (- (+ c e) 1))) (- 0 c))",
      "output_weight_simple": 24,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.0009840159999999999
    },
    "speedup": 10.977514593258649,
    "weight_simple_diff": -2,
    "weight_complex_diff": -9,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (/ (+ (- (/ (/ (pow (/ (- a -1) a) (+ 1 -1)) (pow b c)) (pow (+ a d) a)) (* (* e -1) b)) (pow (/ a (pow 1 c)) (pow 1 -1))) (* (/ (* 1 d) 0) (pow c b))) (/ (/ (pow (+ 0 0) c) d) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 137,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (/ a (pow 1 c)) (* b e))) (* (/ d 0) (pow c b))) (/ (pow 0 c) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.006465201
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (+ (/ (/ 1 (pow b c)) (pow (+ a d) a)) (+ (/ a (pow 1 c)) (* b e))) (* (/ d 0) (pow c b))) (/ (pow 0 c) d))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.000583913
    },
    "speedup": 11.072199111853992,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (+ (+ (pow 1 (/ (/ a (/ (- 0 1) 0)) (/ 0 1))) (pow (/ (+ -1 b) 1) (- -1 b))) (/ (/ (/ -1 b) 1) (/ b a))) (+ (/ (- 1 -1) b) (* 1 1))) (* (pow (- a (+ 0 -1)) (pow b a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(+ -1 (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (+ (pow (+ -1 b) (- -1 b)) (* (/ 1 b) (+ (pow (+ 1 a) (pow b a)) (+ -2 (* -1 (/ 1 (/ b a)))))))))",
      "output_weight_simple": 26,
      "output_weight_complex": 66,
      "output_depth": 10,
      "simplification_time": 0.008008488
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (+ (pow (+ -1 b) (- -1 b)) (+ (pow 1 (/ (/ a (/ -1 0)) 0)) (/ (/ -1 b) (/ b a)))) (+ 1 (/ 2 b))) (/ (pow (+ 1 a) (pow b a)) b))",
      "output_weight_simple": 26,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.000713705
    },
    "speedup": 11.221005877778632,
    "weight_simple_diff": 0,
    "weight_complex_diff": -6,
    "depth_diff": 1
  },
  {
    "base_term": "(- (- (+ (* (- (/ (* (pow (+ a -1) a) (- b 1)) 1) (pow (/ 0 a) b)) -1) (* (- (+ 1 1) a) (+ 0 0))) (pow (pow (- (- -1 1) a) (/ c 0)) (* 0 1))) (/ (* (* (+ 0 c) b) (pow 0 a)) (pow b -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(- (+ -1 (+ (pow 0 b) (* (pow (+ a -1) a) (+ 1 (* -1 b))))) (/ (* b (* c (pow 0 a))) (/ 1 b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.009457315
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- -1 (+ (- (* (pow (+ a -1) a) (- b 1)) (pow (/ 0 a) b)) (/ (* b (* c (pow 0 a))) (/ 1 b))))",
      "output_weight_simple": 20,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.000839963
    },
    "speedup": 11.259204274473996,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (+ (+ (pow (- (pow 1 a) (+ b c)) c) (+ (pow 1 c) d)) (+ (+ 1 c) a)) (/ (+ (* d e) 1) -1)) (+ (- (* (/ d e) d) (/ c 1)) (/ -1 -1))) (+ (- (pow (pow -1 -1) 1) (* d d)) (* c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 9,
    "Baseline": {
      "iterations": 6,
      "stop_reason": "TimeLimit(0.122505481)",
      "output_term": "(+ c (+ (* (+ a (+ (pow 1 c) (+ (pow (- (pow 1 a) (+ b c)) c) (+ d (+ c (* d (* e -1))))))) (+ 1 (- (* d (/ d e)) c))) (- -1 (* d d))))",
      "output_weight_simple": 28,
      "output_weight_complex": 51,
      "output_depth": 11,
      "simplification_time": 0.16454343
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ c (+ (* (+ (pow (- (pow 1 a) (+ b c)) c) (+ d (+ (pow 1 c) (+ c (+ a (+ 1 (/ (+ 1 (* d e)) -1))))))) (- (/ (* d d) e) (+ c -1))) (- -1 (* d d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 54,
      "output_depth": 13,
      "simplification_time": 0.014538058000000001
    },
    "speedup": 11.318116216072324,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": -2
  },
  {
    "base_term": "(+ (- (+ (pow (- (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) (- (- 0 c) 1)) (pow (- a 1) b)) (- (* (/ 0 -1) b) (/ 1 b))) (+ -1 (/ (/ a 0) c))) (/ (- (/ (+ a 0) 1) (pow b b)) (+ 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ 1 (+ (/ (/ (- (/ 1 a) a) (pow a a)) (pow 0 b)) c)) (pow (+ a -1) b)) (+ 1 (+ (/ (- a (pow b b)) (+ 1 a)) (* -1 (+ (/ 1 b) (/ (/ a 0) c))))))",
      "output_weight_simple": 29,
      "output_weight_complex": 76,
      "output_depth": 9,
      "simplification_time": 0.009874276
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (pow (+ (/ (/ (- (/ 1 a) a) (pow 0 b)) (pow a a)) (+ 1 c)) (pow (- a 1) b)) (+ -1 (+ (/ 1 b) (/ (/ a 0) c)))) (/ (- a (pow b b)) (+ 1 a)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 9,
      "simplification_time": 0.0008659189999999999
    },
    "speedup": 11.403232865891614,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(* (pow (+ (/ a (- (- (/ (- (- 1 a) 0) (* 0 a)) 1) (+ (/ b 0) a))) (/ (* (- 1 c) a) (/ 0 e))) (- (pow (* (- a -1) d) (+ d b)) (pow d e))) (* (pow (+ (* 0 a) c) (* -1 -1)) (pow b e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ (/ a (- (+ (/ (- 1 a) 0) -1) (+ a (/ b 0)))) (/ (* a (- 1 c)) 0)) (- (pow (+ d (* a d)) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.005921048999999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ (/ a (- (/ (- 1 a) 0) (+ a (+ 1 (/ b 0))))) (/ (* a (- 1 c)) (/ 0 e))) (- (pow (* (+ a 1) d) (+ b d)) (pow d e))) (* c (pow b e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 70,
      "output_depth": 9,
      "simplification_time": 0.000496947
    },
    "speedup": 11.914850074555234,
    "weight_simple_diff": 0,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (/ (/ (/ (- (pow (- a (pow b 1)) (pow b -1)) (/ 1 -1)) (/ (- b b) 0)) (- (/ 1 1) d)) (+ (pow 0 (* 0 -1)) (/ -1 -1))) (- (- (* b b) 0) 0)) (- (* (* (* 1 0) a) (pow e e)) (/ a -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ a (/ (/ (/ (/ (+ 1 (pow (- a b) (/ 1 b))) (/ 0 0)) (- 1 d)) (+ 1 (pow 0 0))) (* b b)))",
      "output_weight_simple": 19,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.005918334
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (/ (/ (/ (+ 1 (pow (- a b) (/ 1 b))) (/ 0 0)) (* b b)) (- 1 d)) (+ 1 (pow 0 0))) (/ a -1))",
      "output_weight_simple": 21,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.000495672
    },
    "speedup": 11.940020820219823,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (/ (pow (/ (- (pow (* (- 0 1) a) (* b c)) (* c -1)) (+ (* d d) d)) (/ (- d 1) 0)) (- (- (pow -1 0) c) (+ -1 -1))) (- a (pow (* c c) 0))) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (pow (/ (+ c (pow (* -1 a) (* c b))) (+ d (* d d))) (/ (+ -1 d) 0)) (+ (* -1 c) 3)) (+ -1 a)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 73,
      "output_depth": 9,
      "simplification_time": 0.004224483
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (pow (/ (+ c (pow (- 0 a) (* b c))) (+ d (* d d))) (/ (- d 1) 0)) (- 1 (+ c -2))) (- a 1)) (pow (+ (- (/ a e) c) (/ b 0)) (/ a 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 71,
      "output_depth": 9,
      "simplification_time": 0.000351167
    },
    "speedup": 12.029840503236352,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (- (+ (- (* (/ (/ (- a a) -1) b) (pow 1 -1)) (+ (* 1 a) 0)) (* (pow -1 1) c)) (pow (- (pow c c) 0) (* 1 c))) (+ (* -1 (pow e d)) (+ c b))) (* (* (- (/ b b) -1) (+ d c)) (pow 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 20,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (+ (pow e d) (* c -2)) (* -1 (+ a (+ b (pow (pow c c) c))))) (* (pow 0 0) (* 2 (+ c d))))",
      "output_weight_simple": 23,
      "output_weight_complex": 48,
      "output_depth": 8,
      "simplification_time": 0.07742576500000001
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (- (/ 0 b) (+ a c)) (+ (pow (pow c c) c) (- (+ b c) (pow e d)))) (* 2 (* (+ c d) (pow 0 0))))",
      "output_weight_simple": 22,
      "output_weight_complex": 49,
      "output_depth": 6,
      "simplification_time": 0.006368459000000001
    },
    "speedup": 12.157692308296244,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 2
  },
  {
    "base_term": "(+ (pow (* (- (pow (pow (* (+ (pow 1 1) a) (* a a)) (+ a 1)) (- a (pow b c))) (+ (- b d) 1)) (pow (/ (pow 1 d) d) (* 1 -1))) (- (/ e (/ b b)) (pow -1 b))) (pow d (- (pow (- 0 b) c) (- c c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* (/ 1 (/ (pow 1 d) d)) (- (pow (pow (* a (+ a (* a a))) (+ 1 a)) (- a (pow b c))) (+ 1 (- b d)))) (- e (pow -1 b))) (pow d (pow (* b -1) c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.007292871
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (/ (- (pow (pow (* a (+ a (* a a))) (+ 1 a)) (- a (pow b c))) (- (+ 1 b) d)) (/ (pow 1 d) d)) (- e (pow -1 b))) (pow d (pow (- 0 b) c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.000576401
    },
    "speedup": 12.652426002036776,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (* (- (* (+ (pow (* (+ a 1) -1) (+ 1 a)) (- 1 1)) (+ 0 0)) (+ (pow a 1) 0)) (/ (pow (* -1 c) a) (/ 1 b))) (* (- (/ a -1) e) (+ d 0))) (pow (/ (pow (- d -1) c) (- 0 a)) (- b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (* -1 (* a (/ (pow (* -1 c) a) (/ 1 b)))) (* -1 (* d (+ a e)))) (pow (/ (pow (+ 1 d) c) (- 0 a)) (+ -1 b)))",
      "output_weight_simple": 25,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.005161494
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (- 0 (* a (/ (pow (- 0 c) a) (/ 1 b)))) (* (- (/ a -1) e) d)) (pow (/ (pow (+ 1 d) c) (- 0 a)) (- b 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.000373603
    },
    "speedup": 13.815451160724082,
    "weight_simple_diff": 0,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (/ (/ (* (+ 0 (* -1 a)) (- (+ a a) -1)) (pow (+ -1 (/ a a)) -1)) (- (/ (+ a -1) a) (- c 0))) (pow (+ (pow (pow -1 1) -1) (pow -1 e)) (* a c))) (- (- (* c (pow e -1)) (+ -1 b)) (/ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 8,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100210244)",
      "output_term": "(* (/ (/ (* a (+ -1 (* a -2))) (/ 1 0)) (- (/ (+ -1 a) a) c)) (* (pow (+ -1 (pow -1 e)) (* a c)) (- (* c (/ 1 e)) (+ -1 b))))",
      "output_weight_simple": 27,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.1041474
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (+ -1 (pow -1 e)) (* a c)) (/ (/ (* (+ a (+ a 1)) (* a (- b (+ 1 (/ c e))))) (- (/ (+ -1 a) a) c)) (/ 1 0)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.007411813
    },
    "speedup": 14.051541775271449,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": -2
  },
  {
    "base_term": "(/ (+ (/ (- (pow (/ (/ (+ (pow a 0) b) (- 1 0)) b) (/ (- 0 0) a)) (/ (- b 1) 0)) (- (pow (pow 1 a) 1) (pow 1 -1))) (- (* (- 1 0) -1) (* a 1))) (/ (pow (+ (+ c 1) 0) (* 0 -1)) (- 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- 1 (/ (+ b -1) 0)) (+ (pow 1 a) -1)) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 15,
      "output_weight_complex": 36,
      "output_depth": 7,
      "simplification_time": 0.005055205000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (pow (/ (+ b 1) b) (/ 0 a)) (/ (- b 1) 0)) (- (pow 1 a) 1)) (- -1 a)) (/ 1 0))",
      "output_weight_simple": 19,
      "output_weight_complex": 51,
      "output_depth": 8,
      "simplification_time": 0.00033391400000000004
    },
    "speedup": 15.139242439670095,
    "weight_simple_diff": -4,
    "weight_complex_diff": -15,
    "depth_diff": -1
  },
  {
    "base_term": "(* (* (* (+ (/ (+ (* (- (- a b) 0) (/ -1 1)) (* c c)) (- (pow -1 -1) -1)) (- (* a a) a)) (- (- 0 (- -1 0)) (+ c 1))) (/ (/ (- a b) d) (* 1 -1))) (pow (pow a (+ d 1)) (* (* c 1) b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 106,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.122830505)",
      "output_term": "(* (+ (/ (+ (+ b (* a -1)) (* c c)) 0) (- (* a a) a)) (* (pow (pow a (+ 1 d)) (* b c)) (* c (/ (- a b) d))))",
      "output_weight_simple": 24,
      "output_weight_complex": 49,
      "output_depth": 7,
      "simplification_time": 0.161280042
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (/ (+ (- b a) (* c c)) 0) (- (* a a) a)) (* (- 0 c) (/ (* (/ (- a b) d) (pow (pow a (+ 1 d)) (* b c))) -1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.01039902
    },
    "speedup": 15.509157786022145,
    "weight_simple_diff": -1,
    "weight_complex_diff": -4,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (+ (- (pow (+ (* (* -1 (* a a)) (/ b -1)) (pow b 0)) (+ (/ 0 -1) 1)) (pow (/ a a) d)) (+ (* (- 0 1) 0) (+ -1 1))) (+ (pow b (+ 0 1)) (/ d 1))) (+ (- (/ 1 (* -1 -1)) (* 0 1)) d))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (- (+ (* a (* a b)) 1) (pow 1 d)) (+ b d)) (+ 1 d))",
      "output_weight_simple": 13,
      "output_weight_complex": 26,
      "output_depth": 7,
      "simplification_time": 0.092790631
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (- (* a (* a b)) (+ -1 (pow 1 d))) (+ b d)) (+ 1 d))",
      "output_weight_simple": 14,
      "output_weight_complex": 27,
      "output_depth": 6,
      "simplification_time": 0.005978776
    },
    "speedup": 15.520004596258499,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (- (/ (pow (- (* (- (- (* a 1) b) (- 0 -1)) (* 1 c)) (pow c (+ a b))) (pow (/ -1 -1) c)) (- (pow (+ e b) e) (pow b 1))) (pow (- (pow -1 c) e) 0)) (/ (+ (* (- b c) 0) (* -1 a)) (- -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ -1 (/ (pow (- (* (+ (- a b) -1) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b))) (/ (* a -1) (- -1 d)))",
      "output_weight_simple": 24,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.007117459
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ (pow (- (* (- a (+ 1 b)) c) (pow c (+ a b))) (pow 1 c)) (- (pow (+ b e) e) b)) 1) (/ (- 0 a) (- -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 9,
      "simplification_time": 0.00045665699999999996
    },
    "speedup": 15.586006565102473,
    "weight_simple_diff": -1,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(- (pow (* (pow (/ (- (+ (* (* a 1) b) (/ b -1)) (/ -1 b)) (/ (* c -1) 0)) (/ -1 (- 1 b))) (- 0 (pow (+ 1 0) d))) (pow (* (/ 0 1) c) (pow 1 1))) (/ (* (- (+ 1 0) 1) (pow 0 e)) (/ d b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 124,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "1",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.005365432
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (/ 0 (/ d b)))",
      "output_weight_simple": 7,
      "output_weight_complex": 17,
      "output_depth": 4,
      "simplification_time": 0.00033272799999999996
    },
    "speedup": 16.125580053376932,
    "weight_simple_diff": -6,
    "weight_complex_diff": -16,
    "depth_diff": -3
  },
  {
    "base_term": "(/ (- (* (- (/ (pow (+ (- (/ 1 a) 0) (* 1 0)) (- a 0)) (+ (* 0 a) a)) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow (* b 0) -1) (+ e d))) (* (pow e (+ (+ 0 a) 0)) (- 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (* (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.0047778479999999995
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (* (- (/ (pow (/ 1 a) a) a) (/ a (- 1 d))) (pow (/ (pow 1 a) -1) (/ b 0))) (pow (pow 0 -1) (+ d e))) (pow e a))",
      "output_weight_simple": 24,
      "output_weight_complex": 71,
      "output_depth": 8,
      "simplification_time": 0.000284404
    },
    "speedup": 16.799510555407096,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (/ (pow (- 1 1) (pow 0 (/ (+ 0 1) a))) (pow (/ (- b -1) 1) (* b a))) (* (- a 1) (pow b 1))) (pow (- (pow (+ a b) 1) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 9,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (+ 1 b) (* a b))) (* b (+ a -1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- (- b d) a) (pow b d)) (* a e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.002985379
    },
    "Extended": {
      "iterations": 3,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (pow (/ (pow 0 (pow 0 (/ 1 a))) (pow (+ 1 b) (* a b))) (* b (- a 1))) (pow (- (+ a b) (pow e e)) (/ 1 e))) (+ (/ (- b (+ a d)) (pow b d)) (* a e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 8,
      "simplification_time": 0.000172908
    },
    "speedup": 17.26570777523307,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (+ (* (* (pow (pow (+ -1 (/ a a)) (+ 1 a)) (pow 1 a)) (pow (+ -1 b) a)) (/ (* 1 0) -1)) (- (- (pow 0 0) 1) (- 1 b))) (pow 1 (/ (pow 0 d) d))) (* (* (pow (- -1 0) c) (/ b d)) (- d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (pow 0 0) (+ b -2)) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.005883985999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(* (- (pow 0 0) (- 2 b)) (pow 1 (/ (pow 0 d) d)))",
      "output_weight_simple": 12,
      "output_weight_complex": 28,
      "output_depth": 5,
      "simplification_time": 0.000340564
    },
    "speedup": 17.27718138147308,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (+ (- 1 (- (* a (+ (pow 1 (/ a a)) (- 1 a))) (- (- 1 0) b))) (/ (+ (* 0 b) 0) (/ b -1))) (+ (+ (* (* d 1) 0) (/ e a)) (/ c e))) (pow (/ (pow (+ 1 -1) 1) (+ 1 c)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (+ 1 (+ (- 1 b) (* a (+ a -2)))) (+ (/ e a) (/ c e))) (pow 0 (+ -1 d)))",
      "output_weight_simple": 21,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.008582392
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (- (/ 0 (/ b -1)) (- (* a (- 2 a)) (- 2 b))) (+ (/ e a) (/ c e))) (pow (/ 0 (+ 1 c)) (- d 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.00047158300000000003
    },
    "speedup": 18.19911235137823,
    "weight_simple_diff": -4,
    "weight_complex_diff": -16,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (- (+ a (+ (- 1 (/ (+ (* a 0) a) (* 0 b))) (- a (+ a -1)))) (- (* (pow 1 0) a) (pow 1 e))) (pow (pow (- (/ e 1) a) (pow 1 b)) (pow 0 -1))) (* (* (+ (pow d -1) e) (- -1 -1)) (* a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.294326502)",
      "output_term": "(- (+ (- 1 (/ a 0)) (+ 1 (pow 1 e))) (pow (pow (- e a) (pow 1 b)) (pow 0 -1)))",
      "output_weight_simple": 17,
      "output_weight_complex": 39,
      "output_depth": 5,
      "simplification_time": 0.37836616599999995
    },
    "Extended": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(- (- a (+ (/ a 0) -2)) (+ (- a (pow 1 e)) (pow (pow (- e a) (pow 1 b)) (pow 0 -1))))",
      "output_weight_simple": 19,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.020227176000000003
    },
    "speedup": 18.705832489913565,
    "weight_simple_diff": -2,
    "weight_complex_diff": -2,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (/ (/ (* (* (+ 1 (- (* -1 (+ a 0)) (- b b))) -1) (+ (/ (- b 1) -1) (* -1 b))) (* (+ (- a 1) a) (/ -1 b))) (- (- (+ -1 b) 0) (pow 1 0))) (+ (/ (- (/ 0 e) -1) (- d 0)) (pow c a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.10027181)",
      "output_term": "(pow (/ (/ (* (+ -1 a) (+ 1 (* -2 b))) (* (+ -1 (+ a a)) (/ -1 b))) (+ -2 b)) (+ (pow c a) (/ 1 d)))",
      "output_weight_simple": 22,
      "output_weight_complex": 51,
      "output_depth": 7,
      "simplification_time": 0.10067027
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (/ (* (- 1 a) (- b (/ (- b 1) -1))) (/ (- 1 (+ a a)) b)) (- b 2)) (+ (/ (+ 1 (/ 0 e)) d) (pow c a)))",
      "output_weight_simple": 26,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.004979567
    },
    "speedup": 20.216671449545714,
    "weight_simple_diff": -4,
    "weight_complex_diff": -11,
    "depth_diff": -1
  },
  {
    "base_term": "(* (+ (/ (/ (- (pow (- 0 (+ (- a a) -1)) (* a b)) (/ (+ 0 1) 0)) (- (* b a) c)) (+ (+ (+ 1 1) 1) (* 1 -1))) (- (* (* 0 1) -1) (pow a 0))) (pow (+ (/ d (- a 1)) (pow 0 0)) (+ b 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(* (+ -1 (* (/ (- (pow 1 (* a b)) (/ 1 0)) (- (* a b) c)) 0.5)) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.005761408000000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (+ -1 (/ (/ (- (pow 1 (* a b)) (/ 1 0)) (- (* a b) c)) 2)) (pow (+ (/ d (+ a -1)) (pow 0 0)) b))",
      "output_weight_simple": 22,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.00027648099999999997
    },
    "speedup": 20.838350555734397,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (- (+ (pow (pow (+ (- 1 (* 1 1)) (/ 0 1)) (pow -1 a)) (+ (- a a) 0)) (* (+ a 0) 1)) (* (- (/ 0 0) a) (/ c 1))) (/ 1 (* (/ d 0) d))) (+ (+ (/ (- c 0) 1) (/ -1 e)) (+ a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.100883739)",
      "output_term": "(+ a (+ a (+ (/ (- (+ 1 a) (* (- (/ 0 0) a) c)) (/ 1 (* d (/ d 0)))) (+ c (/ -1 e)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 9,
      "simplification_time": 0.101375359
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ a (+ (/ (- (+ 1 a) (* (- (/ 0 0) a) c)) (/ 1 (* d (/ d 0)))) (+ (/ -1 e) (+ a c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 8,
      "simplification_time": 0.004530613
    },
    "speedup": 22.375638572528704,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (- (pow (* (* a (- b (pow (/ 1 a) -1))) (- (* -1 -1) -1)) (pow (* c b) 0)) (pow (- (/ a 0) -1) b)) (+ (* (* (* a d) b) (* e e)) (pow 0 e))) (- (- (* (+ -1 0) -1) (* 1 0)) (- e -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 14,
      "stop_reason": "TimeLimit(0.100056325)",
      "output_term": "(/ (+ (- (* a (* (- b (/ 1 (/ 1 a))) 2)) (pow (+ 1 (/ a 0)) b)) (+ (* a (* b (* d (* e e)))) (pow 0 e))) (* -1 e))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.105811348
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (+ (pow 0 e) (* a (+ (* (- b a) 2) (* b (* d (* e e)))))) (pow (+ 1 (/ a 0)) b)) (- 0 e))",
      "output_weight_simple": 22,
      "output_weight_complex": 45,
      "output_depth": 9,
      "simplification_time": 0.004697772
    },
    "speedup": 22.523729972420966,
    "weight_simple_diff": 4,
    "weight_complex_diff": 14,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (pow (/ (/ (/ (+ (pow (+ 1 -1) a) (* 1 a)) (+ a a)) (- (+ a b) 1)) (- (- 1 1) -1)) (/ (- (/ 0 1) -1) (pow a 0))) (/ (* (* 1 -1) 1) b)) (+ (/ (* (- 0 a) -1) (+ -1 0)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.102200082)",
      "output_term": "(/ (* (/ (/ (+ a (pow 0 a)) (+ a a)) (+ a (+ -1 b))) (/ -1 b)) (- 0 a))",
      "output_weight_simple": 15,
      "output_weight_complex": 37,
      "output_depth": 7,
      "simplification_time": 0.10808372200000001
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (/ (/ (- (- 0 a) (pow 0 a)) (+ a a)) (+ a (+ -1 b))) b) (- 0 a))",
      "output_weight_simple": 14,
      "output_weight_complex": 35,
      "output_depth": 7,
      "simplification_time": 0.0047136999999999995
    },
    "speedup": 22.929698962598387,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (/ (+ (pow (+ (/ (/ (/ a a) a) (* 1 -1)) (* c b)) (- 0 (/ 1 1))) (+ (* d 1) -1)) (pow (+ (pow 1 a) 1) (pow 1 -1))) (+ (- b (- 1 b)) (/ 0 0))) (+ (/ (- (* c -1) 1) (/ d d)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.115967688)",
      "output_term": "(+ (/ (+ (/ 1 (+ (* (/ 1 a) -1) (* c b))) (+ -1 d)) (+ 1 (pow 1 a))) (* -1 (+ c (+ b (/ 0 0)))))",
      "output_weight_simple": 22,
      "output_weight_complex": 48,
      "output_depth": 8,
      "simplification_time": 0.12435051
    },
    "Extended": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (+ -1 (+ (/ 1 (+ (/ -1 a) (* c b))) d)) (+ 1 (pow 1 a))) (+ c (+ b (/ 0 0))))",
      "output_weight_simple": 20,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.00537189
    },
    "speedup": 23.148372360565833,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (/ (- (+ (* (- (* 1 a) b) (/ (- b a) 1)) (/ 1 (+ d c))) (* (/ d 1) a)) (- (/ (/ 1 -1) 1) (- c 0))) (+ (+ (+ -1 c) e) (/ 1 c))) (/ (+ (+ (/ -1 -1) e) (+ 0 1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.100251493)",
      "output_term": "(/ (+ (/ (- (+ (* (- a b) (- b a)) (/ 1 (+ d c))) (* a d)) (- -1 c)) (+ -1 (+ e (+ c (/ 1 c))))) (/ (+ e 2) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.10330294500000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (+ (* (- a b) (- b a)) (/ 1 (+ d c))) (* a d)) (- -1 c)) (+ c (+ e (+ -1 (/ 1 c))))) (/ (+ e 2) 0))",
      "output_weight_simple": 27,
      "output_weight_complex": 54,
      "output_depth": 8,
      "simplification_time": 0.004350017
    },
    "speedup": 23.747710641130826,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (+ (+ (- (- (/ (* a (pow a 1)) (* -1 0)) a) 0) (pow (* a (* b a)) (* 1 -1))) (* (+ (pow a 1) a) (+ -1 b))) (* (- (* 0 c) 0) (* a a))) (pow (+ (* 0 (/ 1 d)) (/ c 1)) (+ c 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (+ (/ (* a a) 0) (+ (/ 1 (* b (* a a))) (* a (+ b (+ b -3))))) 0) (pow c (+ 1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 40,
      "output_depth": 8,
      "simplification_time": 0.027200124
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (+ (- (/ (* a a) 0) a) (+ (/ 1 (* b (* a a))) (* a (+ b (+ b -2))))) 0) (pow c (+ 1 c)))",
      "output_weight_simple": 20,
      "output_weight_complex": 41,
      "output_depth": 8,
      "simplification_time": 0.001132433
    },
    "speedup": 24.019190539307843,
    "weight_simple_diff": -1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (- (* (+ (pow a (* (* a b) -1)) b) c) (pow d (* (* b e) -1))) (+ (/ d (* 1 a)) (- -1 -1))) (/ (pow (* b (* 1 b)) (/ c 1)) (pow 0 e))) (+ (+ (* (pow b d) 1) (/ c b)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* (- (* (+ b (pow a (* a (* b -1)))) c) (pow d (* b (* -1 e)))) (/ d a)) (/ (pow (* b b) c) (pow 0 e))) (+ (/ c b) (+ (pow b d) (- c d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.043920181999999995
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (/ (* d (- (* (+ b (pow a (* a (- 0 b)))) c) (pow d (* e (- 0 b))))) (/ (pow (* b b) c) (pow 0 e))) a) (- (+ (pow b d) (+ c (/ c b))) d))",
      "output_weight_simple": 27,
      "output_weight_complex": 68,
      "output_depth": 11,
      "simplification_time": 0.00173723
    },
    "speedup": 25.28173126183637,
    "weight_simple_diff": 2,
    "weight_complex_diff": 4,
    "depth_diff": -1
  },
  {
    "base_term": "(- (+ (/ (- (/ (+ (- (* (* 0 0) 1) (/ 1 a)) (/ b b)) (- (- b a) 0)) (- -1 (+ -1 -1))) (pow (- 0 (- d 0)) (/ d -1))) (pow (/ (* 0 c) 1) (pow b 0))) (* d (* (- (+ -1 b) 0) (* e d))))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (+ (/ (+ 1 (- 0 (/ 1 a))) (- b a)) -1) (pow (- 0 d) (- 0 d))) (* e (* d (* d (+ b -1)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 43,
      "output_depth": 8,
      "simplification_time": 0.011157877
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (- (/ (- 1 (/ 1 a)) (- b a)) 1) (pow (- 0 d) (/ d -1))) (* (+ b -1) (* e (* d d))))",
      "output_weight_simple": 21,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.000428007
    },
    "speedup": 26.06937970640667,
    "weight_simple_diff": 0,
    "weight_complex_diff": -4,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (- (* (* (pow (pow (+ (+ a a) 1) (+ 0 a)) (pow -1 b)) (- (* 1 c) a)) (+ (/ b b) b)) (* (/ (+ -1 d) 1) c)) (+ (pow 0 (/ a c)) (+ a e))) (- (/ (+ (+ c a) c) (pow -1 c)) (pow d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.10021119)",
      "output_term": "(+ (- (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ 1 b))) (* (+ -1 d) c)) (+ a (+ (pow 0 (/ a c)) e))) (+ -1 (/ (+ a (+ c c)) (pow -1 c))))",
      "output_weight_simple": 31,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.10516940899999999
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (* (pow (pow (+ a (+ a 1)) a) (pow -1 b)) (* (- c a) (+ 1 b))) (+ (* c (- d 1)) (+ a (+ (pow 0 (/ a c)) e)))) (- (/ (+ a (+ c c)) (pow -1 c)) 1))",
      "output_weight_simple": 31,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.003510976
    },
    "speedup": 29.954465368034413,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (+ (/ (* (* (- (+ (+ (* 1 a) a) (* a 1)) (/ 0 a)) (- c (/ d b))) (* (* d -1) d)) (/ (- (- -1 1) c) (* a d))) (/ (- (- a b) d) 1)) (- (- (* (pow 0 b) 1) (+ 1 e)) (+ c c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.113840963)",
      "output_term": "(pow (+ (/ (* d (* a (* (- c (/ d b)) (* d -3)))) (/ (- -2 c) (* a d))) (- (- a b) d)) (+ (- (pow 0 b) (+ 1 e)) (* c -2)))",
      "output_weight_simple": 28,
      "output_weight_complex": 57,
      "output_depth": 9,
      "simplification_time": 0.115457542
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (* (- (* a 3) (/ 0 a)) (* (* d d) (- (/ d b) c))) (/ (- -2 c) (* a d))) (- a (+ d b))) (- (pow 0 b) (+ e (+ 1 (+ c c)))))",
      "output_weight_simple": 30,
      "output_weight_complex": 62,
      "output_depth": 8,
      "simplification_time": 0.003572972
    },
    "speedup": 32.31414687828508,
    "weight_simple_diff": -2,
    "weight_complex_diff": -5,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (/ (/ (+ (/ (* (- (/ 1 (+ -1 -1)) (pow a a)) (- a -1)) (pow (pow 1 b) -1)) (+ (* b 0) 1)) (* (* (* c -1) c) (* d a))) (- (* (* c 0) c) 1)) (/ (* (* (- 1 1) a) (+ -1 1)) (* -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(* -1 (/ (+ 1 (/ (* (- -0.5 (pow a a)) (+ 1 a)) (/ 1 (pow 1 b)))) (* (* -1 (* c c)) (* a d))))",
      "output_weight_simple": 21,
      "output_weight_complex": 49,
      "output_depth": 8,
      "simplification_time": 0.050857974
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (/ (+ 1 (/ (* (- -0.5 (pow a a)) (+ 1 a)) (/ 1 (pow 1 b)))) -1) (- 0 (* a (* d (* c c))))) (/ 0 (- 0 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001549343
    },
    "speedup": 32.8255099096843,
    "weight_simple_diff": -4,
    "weight_complex_diff": -10,
    "depth_diff": -1
  },
  {
    "base_term": "(pow (- (+ (/ (- (/ (pow (- (+ 0 a) -1) (/ a -1)) (pow b 1)) (- (* a a) c)) (* a (* b 1))) (pow (+ (+ 0 b) d) (pow -1 -1))) (* (+ (pow -1 1) -1) (* c d))) (pow (* (* 0 1) a) (pow (/ d c) a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 19,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (/ (- (/ (pow (+ a 1) (* a -1)) b) (- (* a a) c)) (* a b)) (+ (/ 1 (+ b d)) (* c (* d 2)))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.017210435999999996
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (+ (/ (- (/ (pow (+ a 1) (/ a -1)) b) (- (* a a) c)) (* a b)) (/ 1 (+ b d))) (* d (* c -2))) (pow 0 (pow (/ d c) a)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.000522451
    },
    "speedup": 32.94172276443149,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(- (/ (pow (/ (pow (pow (- (- (+ -1 0) a) (pow 1 a)) (* a a)) (pow (- 0 1) a)) (- (- 1 0) 0)) (+ 1 (/ a (/ b 0)))) (+ (pow (- a d) a) (* 0 1))) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (pow (pow (pow (- (- -1 a) (pow 1 a)) (* a a)) (pow -1 a)) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (* (/ 1 (/ 0 0)) (+ d (+ c -2))))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 8,
      "simplification_time": 0.006300529000000001
    },
    "Extended": {
      "iterations": 3,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (pow (pow (pow (- -1 (+ a (pow 1 a))) (* a a)) (pow -1 a)) (+ 1 (/ a (/ b 0)))) (pow (- a d) a)) (/ (+ (/ (+ -1 d) -1) (- 1 c)) (/ 0 0)))",
      "output_weight_simple": 28,
      "output_weight_complex": 75,
      "output_depth": 9,
      "simplification_time": 0.0001868
    },
    "speedup": 33.72874197002142,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (- (pow (/ (+ (pow (pow (- a a) -1) -1) (* 0 b)) (- b (* d a))) (pow (+ 0 0) -1)) (- (* (pow d 1) 0) (* a c))) (/ (- (- a b) 0) (pow -1 c))) (/ (- (+ (+ 0 -1) d) (/ a e)) (- e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 15,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (pow (/ (/ 1 (pow 0 -1)) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- (+ -1 d) (/ a e)) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.008407996000000001
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (+ (pow (/ (/ 1 (pow 0 -1)) (- b (* a d))) (pow 0 -1)) (* a c)) (/ (- a b) (pow -1 c))) (/ (- d (+ 1 (/ a e))) 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.000245459
    },
    "speedup": 34.25417686864201,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (* (/ (+ (- (+ (* (- 0 -1) -1) a) (- 0 -1)) (* (- 1 b) -1)) (+ (+ a b) a)) (- (* (+ a -1) -1) (pow 0 1))) (* (* c (/ b a)) (- 1 0))) (pow (pow (/ (pow d c) e) (- e 0)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.110114993)",
      "output_term": "(+ 1 (/ (* -1 (* (/ (+ (+ a b) -3) (+ a (+ a b))) (+ -1 a))) (* c (/ b a))))",
      "output_weight_simple": 17,
      "output_weight_complex": 35,
      "output_depth": 8,
      "simplification_time": 0.112688766
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ 1 (/ (* (/ (+ a (+ b -3)) (+ b (+ a a))) (- 1 a)) (/ (* b c) a)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 7,
      "simplification_time": 0.003212591
    },
    "speedup": 35.07722147014668,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(* (/ (/ (pow (pow (+ (pow (/ (* 0 a) 0) (pow b 1)) (- c -1)) (+ c (pow -1 1))) (+ a (* d d))) (/ (+ (- 0 -1) c) (pow a 0))) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* b a)) (/ e b))))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "Saturated",
      "output_term": "(* (/ (/ (pow (pow (+ 1 (+ (pow (/ 0 0) b) c)) (+ c -1)) (+ a (* d d))) (+ 1 c)) (* (/ (* a b) d) (- c b))) (* b (/ (- 1 (* a b)) (/ e b))))",
      "output_weight_simple": 29,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.049976967000000004
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (/ (/ (pow (pow (+ c (+ 1 (pow (/ 0 0) b))) (+ c -1)) (+ a (* d d))) (+ 1 c)) (/ (* b (* a (- c b))) d)) (* b (/ (- 1 (* a b)) (/ e b))))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.001416367
    },
    "speedup": 35.285322942429474,
    "weight_simple_diff": -1,
    "weight_complex_diff": -2,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (- (* (+ (/ (pow (/ 0 (* a a)) a) (+ b 0)) (* (+ -1 b) c)) (+ (/ 0 1) 1)) (* (+ 0 (- 1 a)) (- c d))) (+ (pow (+ c 1) e) (+ b 1))) (* (+ (- (* c 0) e) (/ 0 b)) (/ -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.101994801)",
      "output_term": "(+ b (+ (* (- 1 a) d) (+ (+ (/ (pow 0 a) b) (pow (+ c 1) e)) (* c (+ (+ -2 b) a)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 38,
      "output_depth": 7,
      "simplification_time": 0.10727487699999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (+ b (+ (pow (+ c 1) e) (- (+ (/ (pow (/ 0 (* a a)) a) b) (* (+ b -1) c)) (- (* (- 1 a) (- c d)) 1)))) (/ (- e (/ 0 b)) e))",
      "output_weight_simple": 28,
      "output_weight_complex": 58,
      "output_depth": 10,
      "simplification_time": 0.002983427
    },
    "speedup": 35.95693040252032,
    "weight_simple_diff": -7,
    "weight_complex_diff": -20,
    "depth_diff": -3
  },
  {
    "base_term": "(pow (+ (- (- (* 1 (+ (/ 1 (pow (+ a 1) b)) -1)) (/ (- (+ a a) d) 0)) (pow (+ (+ -1 e) -1) (* 1 e))) (/ (- (+ (pow -1 c) -1) (- 0 d)) (- e c))) (/ (* (pow (* -1 1) e) (- c a)) (- c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (- (- (+ (/ 1 (pow (+ 1 a) b)) -1) (/ (- (+ a a) d) 0)) (pow (+ e -2) e)) (/ (+ (pow -1 c) (+ -1 d)) (- e c))) (/ (* (pow -1 e) (- c a)) (- c d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.029034385000000003
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (- (/ 1 (pow (+ 1 a) b)) (+ 1 (+ (/ (- (+ a a) d) 0) (pow (- e 2) e)))) (/ (- (pow -1 c) (- 1 d)) (- e c))) (/ (* (pow -1 e) (- c a)) (- c d)))",
      "output_weight_simple": 32,
      "output_weight_complex": 69,
      "output_depth": 9,
      "simplification_time": 0.0007913719999999999
    },
    "speedup": 36.68866854020613,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (/ (- (- (pow (+ (+ (* a a) a) (/ (* 1 a) 1)) (pow (/ 1 a) b)) (+ (pow a -1) b)) (+ (pow (/ d 0) 1) (+ -1 c))) (/ (pow (- 0 0) -1) (pow 1 c))) (+ (+ (pow (* e 1) e) (- a d)) (/ b 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.113958746)",
      "output_term": "(+ b (+ (/ (- (- (pow (* a (+ a 2)) (pow (/ 1 a) b)) (+ b (/ 1 a))) (+ -1 (+ (/ d 0) c))) (/ (pow 0 -1) (pow 1 c))) (+ (pow e e) (- a d))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.118134073
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (- (pow (* a (+ a 2)) (pow (/ 1 a) b)) (+ b (+ (/ 1 a) (+ c (+ -1 (/ d 0)))))) (/ (pow 0 -1) (pow 1 c))) (+ (- a d) (+ b (pow e e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.002846689
    },
    "speedup": 41.49876330010058,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (- (* (/ (+ (* (- (+ 0 0) a) (+ 1 a)) (- -1 c)) (* (- 1 c) -1)) (* (/ 1 e) 0)) (* (/ b (+ -1 1)) (* -1 -1))) (+ (/ (* 1 b) -1) (* 1 0))) (- (- -1 (* d (+ 0 c))) (+ a e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 94,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.100216759)",
      "output_term": "(* (+ b (- 0 (/ b 0))) (- (- -1 (* c d)) (+ a e)))",
      "output_weight_simple": 15,
      "output_weight_complex": 26,
      "output_depth": 5,
      "simplification_time": 0.102142661
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(* (- (- 0 (/ b 0)) (/ b -1)) (- -1 (+ a (+ e (* c d)))))",
      "output_weight_simple": 16,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.002431165
    },
    "speedup": 42.01387441823159,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": -1
  },
  {
    "base_term": "(+ (/ (* (- (pow (pow (pow (/ (pow 1 a) 0) (- 0 1)) 0) 1) (- (pow 0 (* 1 b)) (* b -1))) (/ (- (pow 0 1) a) (/ b c))) (pow (/ (/ a a) d) (pow 0 0))) (pow (+ (/ (+ d 1) 1) (pow 0 d)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 133,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* a (* (/ 1 (/ b c)) (+ -1 (+ b (pow 0 b))))) (pow (/ 1 d) (pow 0 0))) (pow (+ 1 (+ d (pow 0 d))) (pow -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 64,
      "output_depth": 8,
      "simplification_time": 0.01854142
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(+ (/ (* (- 1 (+ b (pow 0 b))) (/ (- 0 a) (/ b c))) (pow (/ 1 d) (pow 0 0))) (pow (+ 1 (+ d (pow 0 d))) (pow -1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 63,
      "output_depth": 7,
      "simplification_time": 0.00038710799999999994
    },
    "speedup": 47.89727931223329,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (- (* (- (+ (- (/ (/ a (- 0 0)) (+ -1 0)) 1) (pow 0 (+ -1 -1))) (+ (* a a) a)) (/ (pow (/ -1 -1) 1) (+ 0 b))) (- (- (+ -1 b) a) (* 0 b))) (- (+ (/ (- 0 b) 1) (/ a 0)) (pow -1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.129871796)",
      "output_term": "(+ a (+ (* (+ (pow 0 -2) (* -1 (+ (+ a (* a a)) (+ (/ a 0) 1)))) (/ 1 b)) (+ (/ a 0) (+ 1 (* -1 (+ (pow -1 b) (+ b b)))))))",
      "output_weight_simple": 24,
      "output_weight_complex": 44,
      "output_depth": 9,
      "simplification_time": 0.134865821
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (/ (- (+ (- (/ (/ a 0) -1) 1) (pow 0 -2)) (+ a (* a a))) b) (- (+ -1 b) a)) (- (/ a 0) (+ b (pow -1 b))))",
      "output_weight_simple": 22,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.002769095
    },
    "speedup": 48.70393431789086,
    "weight_simple_diff": 2,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(- (+ (* (+ (- (+ (- (/ (+ a b) -1) (+ -1 0)) (+ 1 a)) (pow (+ 0 -1) b)) d) (- (+ (* b d) a) 0)) (* (* (* (+ d 1) c) (/ -1 a)) (* 0 d))) (* (+ (- (- c 1) 0) (* b c)) (/ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 96,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.102654922)",
      "output_term": "(+ 1 (+ (* (+ (+ 2 (* -1 (+ (pow -1 b) b))) d) (+ a (* d b))) (+ (/ -1 c) b)))",
      "output_weight_simple": 19,
      "output_weight_complex": 33,
      "output_depth": 9,
      "simplification_time": 0.11106986599999999
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (* (+ (- (+ (/ (+ a b) -1) (+ a 2)) (pow -1 b)) d) (+ a (* b d))) (/ (- 1 (* c (+ b 1))) c))",
      "output_weight_simple": 22,
      "output_weight_complex": 40,
      "output_depth": 8,
      "simplification_time": 0.002191881
    },
    "speedup": 50.673310275512215,
    "weight_simple_diff": -3,
    "weight_complex_diff": -7,
    "depth_diff": 1
  },
  {
    "base_term": "(- (+ (pow (- (/ (* a (* 0 (+ (- 1 1) a))) (- (- a b) d)) (pow (+ c c) 0)) (pow (/ -1 0) (* e 1))) (+ (/ (- (- e d) 0) (+ 1 0)) (* 0 d))) (* (- (* (pow -1 1) e) (* -1 c)) (+ -1 d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.107992463)",
      "output_term": "(+ c (+ (pow -1 (pow (/ -1 0) e)) (* d (+ e (+ -1 (* c -1))))))",
      "output_weight_simple": 14,
      "output_weight_complex": 29,
      "output_depth": 7,
      "simplification_time": 0.10799023499999999
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (- (/ 0 (- a (+ b d))) 1) (pow (/ -1 0) e)) (+ (- e d) (* (- d 1) (- e c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 41,
      "output_depth": 7,
      "simplification_time": 0.002086189
    },
    "speedup": 51.764358358710545,
    "weight_simple_diff": -7,
    "weight_complex_diff": -12,
    "depth_diff": 0
  },
  {
    "base_term": "(- (/ (* (+ (* (pow (* (* 1 (* a a)) (+ a 1)) (/ a a)) (+ (pow b a) -1)) (+ (/ -1 a) b)) (* (- (/ a c) 0) (* 0 0))) (+ (pow (- -1 d) e) (+ b a))) (* (- a (+ (+ a e) -1)) (+ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.10170741)",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.11529223
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ 0 (+ a (+ b (pow (- -1 d) e))))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 6,
      "simplification_time": 0.0021757129999999997
    },
    "speedup": 52.990550683844795,
    "weight_simple_diff": -10,
    "weight_complex_diff": -21,
    "depth_diff": -5
  },
  {
    "base_term": "(* (+ (+ (pow (pow (* (pow (+ (pow a 1) a) (+ a b)) (- -1 a)) (+ a (+ 1 0))) (/ (+ 0 b) 0)) (- (/ (- 0 a) d) (- a -1))) (* (/ (* 1 a) -1) 1)) (pow (* (- (* 1 0) c) (+ -1 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.04969506700000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "0",
      "output_weight_simple": 1,
      "output_weight_complex": 1,
      "output_depth": 1,
      "simplification_time": 0.000931002
    },
    "speedup": 53.37804537476827,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (- (- (- (- (pow (/ (* -1 a) a) (- -1 1)) (/ a -1)) (pow (* 1 0) 1)) (/ (+ b -1) -1)) (* -1 (+ (- 0 a) 1))) (/ (* (/ 0 0) 0) (* b 1))) (* (* (- (pow b 1) a) (* a 1)) (- 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.178577983)",
      "output_term": "(* a (* (/ (+ (pow -1 -2) b) 0) (- b a)))",
      "output_weight_simple": 11,
      "output_weight_complex": 22,
      "output_depth": 6,
      "simplification_time": 0.230678619
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(* a (* (/ (- (- (+ (pow -1 -2) (- 1 a)) (/ a -1)) (/ (+ -1 b) -1)) (/ 0 b)) (- b a)))",
      "output_weight_simple": 19,
      "output_weight_complex": 42,
      "output_depth": 8,
      "simplification_time": 0.004267875
    },
    "speedup": 54.049994200861086,
    "weight_simple_diff": -8,
    "weight_complex_diff": -20,
    "depth_diff": -2
  },
  {
    "base_term": "(pow (- (- (+ (* (- (* (+ (pow a 1) 1) (* -1 a)) (pow a b)) (+ (- 0 a) a)) (+ (+ 0 0) 0)) (/ (+ (pow 0 0) 0) (pow b 1))) (* a (* (- c b) 1))) (- (- (- (- c 0) -1) (pow a -1)) (* d 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 98,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.144174314)",
      "output_term": "(pow (- (- 0 (/ (pow 0 0) b)) (* a (- c b))) (- (+ 1 c) (/ 1 a)))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.144172833
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (- 0 (/ (pow 0 0) b)) (* a (- c b))) (- (+ 1 c) (/ 1 a)))",
      "output_weight_simple": 15,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.0025535490000000004
    },
    "speedup": 56.45978714330525,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (pow (- (* (* (* (+ (/ a 0) a) (/ b a)) (+ -1 a)) (+ (- 1 1) c)) (- (pow 1 a) 1)) (- (* (* d -1) c) (pow c c))) (- (+ a (pow d -1)) (/ 0 1))) (+ 1 (- (pow (/ d 1) c) (/ 0 e))))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.103611724)",
      "output_term": "(+ (pow (pow (- (* (+ a (/ a 0)) (* (+ a -1) (* (/ b a) c))) (+ -1 (pow 1 a))) (* -1 (+ (pow c c) (* c d)))) (+ a (/ 1 d))) (+ 1 (pow d c)))",
      "output_weight_simple": 28,
      "output_weight_complex": 64,
      "output_depth": 9,
      "simplification_time": 0.113384861
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ 1 (+ (pow (pow (- (* (+ a (/ a 0)) (* (/ b a) (* (- a 1) c))) (- (pow 1 a) 1)) (- 0 (+ (pow c c) (* c d)))) (+ a (/ 1 d))) (- (pow d c) (/ 0 e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 70,
      "output_depth": 10,
      "simplification_time": 0.0019308340000000002
    },
    "speedup": 58.72325689313529,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": -1
  },
  {
    "base_term": "(* (+ (- (* (pow (+ (- (- (/ 0 1) 0) (* a 0)) (pow b 1)) (* 1 (+ a 0))) (+ (* 1 b) b)) (/ (+ (+ c -1) 0) (/ -1 c))) (pow (/ (pow d 1) d) (/ c 1))) (* (+ (* (+ -1 d) d) (- -1 0)) b))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.111910939)",
      "output_term": "(* (+ (- (* b (* (pow b a) 2)) (/ (+ c -1) (/ -1 c))) (pow 1 c)) (* b (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.111909026
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* b (* (+ (- (* b (* (pow b a) 2)) (/ (+ c -1) (/ -1 c))) (pow 1 c)) (+ -1 (* d (+ -1 d)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 8,
      "simplification_time": 0.001845969
    },
    "speedup": 60.623459007166424,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": -1
  },
  {
    "base_term": "(- (+ (+ (/ (/ (* (/ (pow (pow a a) a) (* 1 -1)) (pow 1 b)) (- (- b 0) -1)) (+ (/ 1 a) 0)) (+ (/ (- b -1) a) (+ -1 d))) (/ (- (+ c b) -1) (/ e c))) (- (* (- (+ a 0) 1) (+ d 1)) e))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.107706579)",
      "output_term": "(+ (+ (/ (/ (* (* (pow (pow a a) a) -1) (pow 1 b)) (+ 1 b)) (/ 1 a)) (/ (+ 1 b) a)) (+ (* -1 (+ a (* d (+ a -1)))) (+ (/ (+ b (+ 1 c)) (/ e c)) (+ d e))))",
      "output_weight_simple": 30,
      "output_weight_complex": 72,
      "output_depth": 9,
      "simplification_time": 0.117888489
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (+ -1 (+ (/ (/ (* (/ (pow (pow a a) a) -1) (pow 1 b)) (+ 1 b)) (/ 1 a)) (+ (/ (+ b (+ 1 c)) (/ e c)) (+ (/ (+ 1 b) a) d)))) (- (* (- a 1) (+ 1 d)) e))",
      "output_weight_simple": 30,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.0019255449999999999
    },
    "speedup": 61.2234401169539,
    "weight_simple_diff": 0,
    "weight_complex_diff": -2,
    "depth_diff": -1
  },
  {
    "base_term": "(- (* (/ (- (+ (pow (- 0 (+ (+ -1 a) a)) (+ b -1)) (+ 0 a)) (+ (- 0 b) 0)) (- (* (/ 1 a) 0) 0)) (* (- (+ b (pow 1 1)) (* -1 c)) (pow d 1))) (- (* (pow b (* b -1)) (pow a 1)) (- -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.107878712)",
      "output_term": "(- (* (/ (+ a (+ b (pow (+ 1 (* a -2)) (+ -1 b)))) 0) (+ d (* d (+ b c)))) (+ 1 (+ c (* a (pow b (- 0 b))))))",
      "output_weight_simple": 25,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.111389452
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(- (* (/ (+ b (+ a (pow (- 1 (+ a a)) (+ -1 b)))) 0) (* (+ (+ b 1) c) d)) (+ 1 (+ c (* a (pow b (- 0 b))))))",
      "output_weight_simple": 24,
      "output_weight_complex": 41,
      "output_depth": 9,
      "simplification_time": 0.001758067
    },
    "speedup": 63.359048318408796,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (* (+ (+ (- (+ a (pow a 1)) (pow a (/ b a))) 0) (* 1 (+ (* d d) d))) (+ 1 (- (+ 0 -1) b))) (+ (/ (- (+ b 1) c) (- 0 0)) (/ d -1))) (+ (pow (pow (* 1 -1) -1) (pow a d)) (pow 1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 9,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.139102429)",
      "output_term": "(+ (* b (* (+ (- (+ a a) (pow a (/ b a))) (+ d (* d d))) (+ d (* -1 (/ (- (+ 1 b) c) 0))))) (+ (pow -1 (pow a d)) (pow 1 e)))",
      "output_weight_simple": 27,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.151556301
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(- (+ (pow -1 (pow a d)) (pow 1 e)) (* (+ (* d d) (- (+ a (+ a d)) (pow a (/ b a)))) (* b (+ (/ (- b (- c 1)) 0) (/ d -1)))))",
      "output_weight_simple": 27,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.002306846
    },
    "speedup": 65.69849092657248,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 1
  },
  {
    "base_term": "(pow (* (* (+ (/ (pow a (* (* (* -1 0) 1) b)) 0) (pow (pow (- a a) 0) (/ 0 0))) (/ (+ c (* -1 b)) c)) (* (/ (pow (- a -1) a) (* -1 1)) (/ b 0))) (/ (- (/ (pow 0 -1) 0) (- 0 0)) (- a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 123,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.142884021)",
      "output_term": "(pow (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (* (pow (+ a 1) a) (* (/ b 0) (+ -1 (* b (/ 1 c)))))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 70,
      "output_depth": 8,
      "simplification_time": 0.146495514
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (+ (/ 1 0) (pow (pow 0 0) (/ 0 0))) (* (/ (pow (+ a 1) a) -1) (* (/ (- c b) c) (/ b 0)))) (/ (/ (pow 0 -1) 0) 0))",
      "output_weight_simple": 24,
      "output_weight_complex": 73,
      "output_depth": 7,
      "simplification_time": 0.0022025480000000004
    },
    "speedup": 66.5118371994617,
    "weight_simple_diff": 0,
    "weight_complex_diff": -3,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (* (+ (* (/ (/ (* (- (* a a) c) (* -1 1)) (- -1 c)) (+ (/ b 1) e)) (pow (- b c) b)) (* (- (+ -1 e) 0) (- b -1))) (* (- (- c a) -1) (pow -1 1))) (+ (/ 1 (+ (* -1 b) b)) (* 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 103,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.101774253)",
      "output_term": "(+ (* (+ (* (/ (/ (+ c (* (* a a) -1)) (- -1 c)) (+ b e)) (pow (- b c) b)) (* (+ -1 e) (+ 1 b))) (+ a (- -1 c))) (/ 1 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 49,
      "output_depth": 10,
      "simplification_time": 0.10724052
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (+ (* (/ (/ (- c (* a a)) (+ b e)) (- -1 c)) (pow (- b c) b)) (* (- e 1) (+ 1 b))) (- a (+ c 1))) (/ 1 0))",
      "output_weight_simple": 25,
      "output_weight_complex": 48,
      "output_depth": 9,
      "simplification_time": 0.0015368290000000002
    },
    "speedup": 69.78038545602666,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 1
  },
  {
    "base_term": "(* (/ (/ (+ (pow a (* (- a (* (- -1 a) 0)) (+ 1 0))) (+ (pow (* a -1) a) (pow 1 1))) (pow (* 0 (* b b)) (* a c))) (- (pow (/ -1 -1) 0) (pow 0 e))) (+ (pow (- (- b 0) -1) (+ -1 a)) (* a b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(* (/ (/ (+ (pow (* a -1) a) (+ 1 (pow a a))) (pow 0 (* a c))) (- 1 (pow 0 e))) (+ (pow (+ 1 b) (+ a -1)) (* a b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 55,
      "output_depth": 7,
      "simplification_time": 0.065390591
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (* (+ (pow (- 0 a) a) (+ 1 (pow a a))) (+ (pow (+ 1 b) (- a 1)) (* a b))) (pow 0 (* a c))) (- 1 (pow 0 e)))",
      "output_weight_simple": 23,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.0009296230000000001
    },
    "speedup": 70.34097800936507,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (- (/ (pow a (+ 0 (- (+ -1 a) 1))) 0) (- (+ (* 0 0) b) b)) (+ (pow 0 (* a 1)) (/ a b))) (- (pow (pow (pow 1 1) b) (pow 0 d)) (- a e))) (+ (* (pow (- e 1) -1) (- e 1)) (* -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (+ (/ (pow a (+ a -2)) 0) (+ (pow 0 a) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) 0)",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.043753284
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (+ (/ (pow a (- a 2)) 0) (+ (pow 0 a) (/ a b))) (- (pow (pow 1 b) (pow 0 d)) (- a e))) 0)",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.000614766
    },
    "speedup": 71.17063077658817,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (+ (- (pow (- (/ 0 -1) (- (pow 1 -1) -1)) (- a (- 1 b))) (- a c)) (- (+ (* 1 d) a) (* e a))) (* (pow (pow (* b 0) 0) (/ -1 0)) (* e 0))) (- (pow (pow -1 (* 0 0)) (* 0 -1)) (+ -1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 105,
    "input_depth": 9,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.112242252)",
      "output_term": "(/ (+ (pow -2 (+ -1 (+ a b))) (+ c (+ d (* -1 (* a e))))) (+ 2 (* -1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 34,
      "output_depth": 7,
      "simplification_time": 0.11532897
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (- (pow -2 (- a (- 1 b))) (- a c)) (- (+ a d) (* a e))) (- 1 (- c 1)))",
      "output_weight_simple": 19,
      "output_weight_complex": 32,
      "output_depth": 7,
      "simplification_time": 0.0015747860000000001
    },
    "speedup": 73.23469347581195,
    "weight_simple_diff": 0,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (- (- (+ (- (/ (+ (/ (/ -1 a) a) (* a -1)) (/ a a)) (* (+ 1 1) b)) (- b (pow -1 a))) (/ (+ (pow 0 c) -1) (+ b d))) (* (pow (- 1 e) 0) (/ -1 -1))) (- 0 (pow (/ d (pow d 0)) (* 0 c))))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.168494801)",
      "output_term": "(/ 1 (+ -1 (* -1 (+ (+ a (/ (+ -1 (pow 0 c)) (+ b d))) (+ b (+ (pow -1 a) (pow a -2)))))))",
      "output_weight_simple": 21,
      "output_weight_complex": 43,
      "output_depth": 9,
      "simplification_time": 0.20505548
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(/ 1 (- (- (+ (/ (/ -1 a) a) (- b a)) (+ (* 2 b) (+ (pow -1 a) (/ (+ -1 (pow 0 c)) (+ b d))))) 1))",
      "output_weight_simple": 23,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.0026267290000000004
    },
    "speedup": 78.06495454993643,
    "weight_simple_diff": -2,
    "weight_complex_diff": -7,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (+ (- (+ 0 (/ (- (/ (- 0 a) a) (- 1 0)) a)) (+ -1 (- b (- a -1)))) (+ (pow 1 b) (+ 1 1))) (* (* (* (/ 1 a) 0) (pow d 0)) (- 1 1))) (/ (/ (/ (* -1 -1) d) (/ d 1)) (pow a a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 111,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.103962791)",
      "output_term": "(* (+ a (+ 4 (+ (+ (/ -2 a) (pow 1 b)) (* -1 b)))) (/ (pow d -2) (pow a a)))",
      "output_weight_simple": 18,
      "output_weight_complex": 40,
      "output_depth": 7,
      "simplification_time": 0.10605641799999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (/ (+ (- (/ (- (/ (- 0 a) a) 1) a) (- b (+ a 2))) (+ (pow 1 b) 2)) d) d) (pow a a))",
      "output_weight_simple": 20,
      "output_weight_complex": 49,
      "output_depth": 10,
      "simplification_time": 0.0013574540000000001
    },
    "speedup": 78.12892223235555,
    "weight_simple_diff": -2,
    "weight_complex_diff": -9,
    "depth_diff": -3
  },
  {
    "base_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) (+ 0 1)) (/ 0 0)) (/ (+ 1 b) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ b (+ a c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (pow e -1))))",
    "input_weight_simple": 57,
    "input_weight_complex": 132,
    "input_depth": 10,
    "Baseline": {
      "iterations": 20,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ a (+ b c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (/ 1 e))))",
      "output_weight_simple": 34,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.021957853
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (- (/ (/ (+ (* a (pow 0 b)) 1) (/ 0 0)) (/ (+ b 1) a)) (- (pow 0 c) b)) (/ (pow b (* b e)) (- e c))) (/ (+ a (+ b c)) (pow 0 a))) (- 1 (- (/ e (/ b d)) (/ 1 e))))",
      "output_weight_simple": 34,
      "output_weight_complex": 96,
      "output_depth": 10,
      "simplification_time": 0.000260171
    },
    "speedup": 84.39777300314023,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (+ (- (pow (+ (- (+ (/ a a) -1) (+ 1 -1)) (* 0 b)) (/ (pow 1 0) a)) (- (pow 1 e) a)) (* (/ (/ c e) 1) (pow e -1))) (+ (+ b (pow -1 e)) (+ 1 e))) (- (pow 0 (+ (- 1 c) -1)) (/ -1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.10274542)",
      "output_term": "(pow (* (+ (- (pow 0 (/ 1 a)) (- (pow 1 e) a)) (* c (pow e -2))) (+ 1 (+ b (+ e (pow -1 e))))) (+ 1 (pow 0 (* -1 c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 54,
      "output_depth": 7,
      "simplification_time": 0.10987897499999999
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (+ (- (pow 0 (/ 1 a)) (- (pow 1 e) a)) (* c (pow e -2))) (+ 1 (+ b (+ e (pow -1 e))))) (+ 1 (pow 0 (- 0 c))))",
      "output_weight_simple": 25,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.001250685
    },
    "speedup": 87.85503544057855,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (- (- (+ (/ (+ -1 (pow (pow (pow a b) -1) (+ -1 b))) (pow (pow 1 -1) b)) (* (/ a 0) -1)) (- (- (+ 0 b) 1) (pow b c))) (/ (/ (* a d) -1) (* -1 1))) (pow (- (/ b (/ -1 a)) (pow e -1)) (/ e e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.123566446)",
      "output_term": "(* (+ (/ (+ -1 (pow (/ 1 (pow a b)) (+ -1 b))) (pow 1 b)) (+ (+ 1 (pow b c)) (* -1 (+ b (+ (/ a 0) (* a d)))))) (- (/ b (/ -1 a)) (/ 1 e)))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 8,
      "simplification_time": 0.128569718
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(* (- (/ (+ -1 (pow (/ 1 (pow a b)) (+ -1 b))) (pow 1 b)) (+ (/ a 0) (+ (- b (+ 1 (pow b c))) (/ (/ (* a d) -1) -1)))) (- (/ b (/ -1 a)) (/ 1 e)))",
      "output_weight_simple": 30,
      "output_weight_complex": 81,
      "output_depth": 8,
      "simplification_time": 0.0014419600000000002
    },
    "speedup": 89.16316541374239,
    "weight_simple_diff": -1,
    "weight_complex_diff": -8,
    "depth_diff": 0
  },
  {
    "base_term": "(* (* (pow (* (+ (+ 0 (pow (+ (/ a 0) a) (pow -1 a))) (+ 0 (/ -1 1))) (pow (/ -1 0) b)) (- (pow (* a b) d) (pow a 0))) (- (/ (* b a) 1) (- -1 a))) (+ (- (- (+ 1 b) b) (* a 1)) (pow -1 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.102170514)",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (+ -1 (pow (* a b) d))) (* (+ a (+ 1 (* a b))) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.111713851
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (pow (* (+ -1 (pow (+ a (/ a 0)) (pow -1 a))) (pow (/ -1 0) b)) (- (pow (* a b) d) 1)) (* (- (* a b) (- -1 a)) (+ (- 1 a) (pow -1 e))))",
      "output_weight_simple": 26,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.001199044
    },
    "speedup": 93.16910055010491,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (* (* (- (* (+ (* (- (+ -1 a) a) (pow a 1)) (- -1 b)) (/ (pow a 0) d)) (pow (* b e) a)) (- (* (+ c 1) d) (* -1 a))) (- (* (/ 1 0) 1) (* a d))) (* (+ (+ 0 -1) (pow 1 a)) (pow 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 7,
      "stop_reason": "TimeLimit(0.145531114)",
      "output_term": "(pow (* (- (* (+ (- -1 b) (* -1 a)) (pow d -1)) (pow (* b e) a)) (* (+ (* d c) (+ a d)) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 29,
      "output_weight_complex": 61,
      "output_depth": 7,
      "simplification_time": 0.19907102899999998
    },
    "Extended": {
      "iterations": 10,
      "stop_reason": "Saturated",
      "output_term": "(pow (* (- (/ (- -1 (+ a b)) d) (pow (* b e) a)) (* (+ a (* d (+ 1 c))) (- (/ 1 0) (* a d)))) (* (+ -1 (pow 1 a)) (pow 1 c)))",
      "output_weight_simple": 27,
      "output_weight_complex": 58,
      "output_depth": 7,
      "simplification_time": 0.002129708
    },
    "speedup": 93.47339118789992,
    "weight_simple_diff": 2,
    "weight_complex_diff": 3,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (/ (* (- (/ a (+ (pow (- a b) -1) (pow 0 1))) (pow (pow a b) 1)) (+ (/ 1 0) b)) (/ (- (* 0 1) b) (pow b d))) (+ (- 0 (* b -1)) (/ 0 d))) (pow (- (/ (+ 0 e) 1) (* d 0)) (- e 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow e e) (* b (/ (* (- (/ a (/ 1 (- a b))) (pow a b)) (+ b (/ 1 0))) (/ (- 0 b) (pow b d)))))",
      "output_weight_simple": 21,
      "output_weight_complex": 56,
      "output_depth": 9,
      "simplification_time": 0.09822736000000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (* (- (/ a (/ 1 (- a b))) (pow a b)) (+ b (/ 1 0))) (/ (- 0 b) (pow b d))) (+ b (/ 0 d))) (pow e e))",
      "output_weight_simple": 23,
      "output_weight_complex": 62,
      "output_depth": 9,
      "simplification_time": 0.001050002
    },
    "speedup": 93.54968847678387,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (pow (pow a (- -1 (pow (* (- a a) -1) (/ 1 d)))) (+ d (* a (pow 1 -1)))) (* b (- (* a 0) a))) (* (* (/ (- -1 d) a) (- 1 -1)) (- c a))) (pow (* (+ (+ c 0) a) (* b 0)) (+ c d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 113,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.10379672)",
      "output_term": "(/ (pow (+ (pow (pow a (- -1 (pow 0 (/ 1 d)))) (+ a d)) (* a (* -1 b))) (* (* (/ (- -1 d) a) 2) (- c a))) (pow 0 (+ d c)))",
      "output_weight_simple": 26,
      "output_weight_complex": 61,
      "output_depth": 9,
      "simplification_time": 0.114938751
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (- (pow (pow a (- -1 (pow 0 (/ 1 d)))) (+ a d)) (* a b)) (* (/ (- -1 d) a) (* 2 (- c a)))) (pow 0 (+ d c)))",
      "output_weight_simple": 25,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.001178773
    },
    "speedup": 97.50711205635012,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (- (pow (/ (+ (* (- (- (- a a) 1) 0) (+ 1 1)) (+ (* a a) a)) a) (* (+ (pow a -1) b) (+ a d))) (pow (+ (* (* -1 -1) d) (* 1 e)) (* d d))) (* (pow (+ (+ b 1) d) (* 1 -1)) (/ b a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 104,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.108297005)",
      "output_term": "(+ (- (pow (/ (+ -2 (+ a (* a a))) a) (* (+ (/ 1 a) b) (+ a d))) (pow (+ d e) (* d d))) (* (/ b a) (/ 1 (+ d (+ 1 b)))))",
      "output_weight_simple": 25,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.11201337
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (- (pow (/ (+ a (+ -2 (* a a))) a) (* (+ (/ 1 a) b) (+ a d))) (pow (+ d e) (* d d))) (/ (/ b a) (+ 1 (+ b d))))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 8,
      "simplification_time": 0.0010946250000000001
    },
    "speedup": 102.3303597122302,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 (/ 0 -1))) (- (+ (+ d c) 0) (+ a 1))) (- (- (* -1 (+ d -1)) (pow d 1)) (+ -1 -1))) (* (- (+ (- 1 b) 0) (- e 0)) (* d d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 99,
    "input_depth": 9,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.167309208)",
      "output_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 0)) (+ (- c a) (+ -1 d))) (+ (* d -2) 3)) (* d (* d (- (- 1 b) e))))",
      "output_weight_simple": 29,
      "output_weight_complex": 53,
      "output_depth": 9,
      "simplification_time": 0.21349748
    },
    "Extended": {
      "iterations": 9,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* (- (+ a (* (/ (+ a a) (pow c b)) (- c a))) (/ 1 0)) (- (+ c d) (+ a 1))) (- (- 1 (+ d d)) -2)) (* d (* d (- 1 (+ b e)))))",
      "output_weight_simple": 29,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.002003602
    },
    "speedup": 106.55683114710405,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (/ (pow (* (pow (+ a a) (- -1 b)) (- 0 a)) (* (- c 0) 0)) (* (* a d) c)) (- (- (pow 0 -1) b) (- -1 -1))) (- (/ (/ 0 c) 1) (+ a 0))) (+ (* (- (+ -1 b) 0) (- 0 -1)) (/ e c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 9,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.132197017)",
      "output_term": "(* (+ (- 0 a) (- (/ 1 (* d (* a c))) (- (pow 0 -1) b))) (+ -1 (+ b (/ e c))))",
      "output_weight_simple": 20,
      "output_weight_complex": 39,
      "output_depth": 7,
      "simplification_time": 0.138760803
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (- (/ 1 (* a (* c d))) (- (pow 0 -1) b)) (- (/ 0 c) a)) (+ -1 (+ b (/ e c))))",
      "output_weight_simple": 21,
      "output_weight_complex": 44,
      "output_depth": 7,
      "simplification_time": 0.001243826
    },
    "speedup": 111.55965786211254,
    "weight_simple_diff": -1,
    "weight_complex_diff": -5,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (pow (pow (+ (* (* (* (+ a 1) -1) (- 1 0)) (pow a b)) (* c (/ d a))) (- (pow 1 -1) a)) (pow (+ (pow 1 a) -1) c)) (+ (* (- b b) b) (/ c c))) (/ (/ (+ (- a 1) a) (pow a e)) (- a 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.127184979)",
      "output_term": "(pow (pow (pow (+ (* -1 (* (+ a 1) (pow a b))) (* c (/ d a))) (- 1 a)) (pow (+ -1 (pow 1 a)) c)) (/ (/ (+ a (+ a -1)) (pow a e)) a))",
      "output_weight_simple": 26,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.140153258
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(pow (pow (pow (+ (* (- -1 a) (pow a b)) (* c (/ d a))) (- 1 a)) (pow (+ -1 (pow 1 a)) c)) (/ (/ (- (+ a a) 1) (pow a e)) a))",
      "output_weight_simple": 25,
      "output_weight_complex": 65,
      "output_depth": 7,
      "simplification_time": 0.001198701
    },
    "speedup": 116.92094859351916,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (* (+ (- (/ (* (- (/ (- -1 a) a) (* a -1)) (- 1 -1)) (- (* a a) a)) (- 0 (+ 0 d))) (/ (* b (+ -1 d)) (* a 1))) (/ (- (+ c e) -1) (+ b 0))) (/ (/ 0 (- (/ -1 c) 1)) (pow -1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 112,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.100706662)",
      "output_term": "(/ (* (+ (/ (* (+ a (/ (- -1 a) a)) 2) (- (* a a) a)) (+ d (/ (* b (+ -1 d)) a))) (/ (+ c (+ 1 e)) b)) 0)",
      "output_weight_simple": 26,
      "output_weight_complex": 55,
      "output_depth": 9,
      "simplification_time": 0.10448347599999999
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (/ (* (+ a (/ (- -1 a) a)) 2) (- (* a a) a)) (+ d (/ (* b (+ -1 d)) a))) (/ (+ c (+ 1 e)) b)) (/ 0 (- (/ -1 c) 1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 66,
      "output_depth": 9,
      "simplification_time": 0.0008862830000000001
    },
    "speedup": 117.88951835925995,
    "weight_simple_diff": -3,
    "weight_complex_diff": -11,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (/ (* (* (* (+ (pow (* (- a 1) 1) (* b -1)) 1) (+ (/ 1 -1) a)) (+ a (pow a 0))) (pow (/ (+ 0 1) -1) (/ b a))) (pow (* (pow a b) 0) (- 0 c))) (/ (- (+ (/ c a) 1) (/ 0 -1)) (- d 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.135317155)",
      "output_term": "(pow (/ (* (+ 1 (pow (+ a -1) (* b -1))) (* (pow -1 (/ b a)) (+ -1 (* a a)))) (pow 0 (- 0 c))) (/ (+ 1 (/ c a)) (+ -1 d)))",
      "output_weight_simple": 25,
      "output_weight_complex": 61,
      "output_depth": 7,
      "simplification_time": 0.177888057
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(pow (/ (* (+ a -1) (* (+ 1 (pow (+ a -1) (- 0 b))) (* (+ a 1) (pow -1 (/ b a))))) (pow 0 (- 0 c))) (/ (+ 1 (/ c a)) (- d 1)))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 8,
      "simplification_time": 0.0014818639999999998
    },
    "speedup": 120.0434432579508,
    "weight_simple_diff": 0,
    "weight_complex_diff": 1,
    "depth_diff": -1
  },
  {
    "base_term": "(- (+ (- (/ (/ (* (- 1 (pow (+ 0 a) 1)) (* -1 a)) (/ (/ 0 a) 0)) (/ b (* 1 -1))) (/ (+ (/ 0 0) a) (* a 1))) (+ (pow (- 0 b) 0) (* 0 0))) (/ (- (* (pow d c) 1) (pow a a)) (- e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 120,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.120877293)",
      "output_term": "(+ (/ (/ (* a (+ a -1)) (/ 0 0)) (* -1 b)) (* -1 (+ (/ (- (pow d c) (pow a a)) (- e d)) (* (/ 0 0) (/ 1 a)))))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.12736597
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(- (/ (/ (* a (- a 1)) (/ b -1)) (/ (/ 0 a) 0)) (+ (/ (+ a (/ 0 0)) a) (- (/ (- (pow d c) (pow a a)) (- e d)) 1)))",
      "output_weight_simple": 26,
      "output_weight_complex": 70,
      "output_depth": 7,
      "simplification_time": 0.001060336
    },
    "speedup": 120.1185001735299,
    "weight_simple_diff": -2,
    "weight_complex_diff": -11,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ -1 a))) (+ (pow -1 c) -1)) (- (* -1 c) 1)) (/ (- (+ (* b 1) 0) (/ 0 0)) (/ e 1))) (/ (/ (+ (* d 1) a) (* 0 c)) (/ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 121,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.105038946)",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 0) (/ b 0)) (* c (+ a -1))) (+ -1 (pow -1 c))) (+ -1 (* c -1))) (/ (- b (/ 0 0)) e)) (/ (+ a d) 0))",
      "output_weight_simple": 26,
      "output_weight_complex": 63,
      "output_depth": 8,
      "simplification_time": 0.118525172
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (- (* (pow (pow 0 (/ 0 (+ a 1))) (/ b 0)) (* c (+ a -1))) (+ -1 (pow -1 c))) (- -1 c)) (/ (- b (/ 0 0)) e)) (/ (+ a d) 0))",
      "output_weight_simple": 28,
      "output_weight_complex": 68,
      "output_depth": 10,
      "simplification_time": 0.0009764300000000001
    },
    "speedup": 121.386245813832,
    "weight_simple_diff": -2,
    "weight_complex_diff": -5,
    "depth_diff": -2
  },
  {
    "base_term": "(* (+ (* (/ (+ (+ a (+ (* (+ 1 -1) a) (pow 1 0))) (+ (/ 1 a) a)) (+ (* 0 a) 0)) (pow (* (- 0 b) 0) (+ -1 -1))) (* (- -1 (- 0 0)) (- 1 b))) (/ (/ (- (/ 0 0) a) (/ a 0)) (+ 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 102,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.102823545)",
      "output_term": "(* (+ -1 (+ b (* (+ (+ a 1) (+ a (/ 1 a))) (pow 0 -3)))) (/ (- (/ 0 0) a) (/ a 0)))",
      "output_weight_simple": 19,
      "output_weight_complex": 42,
      "output_depth": 8,
      "simplification_time": 0.10580484700000001
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (* (/ (+ (+ 1 (/ 1 a)) (+ a a)) 0) (pow 0 -2)) (- b 1)) (/ (- (/ 0 0) a) (/ a 0)))",
      "output_weight_simple": 19,
      "output_weight_complex": 46,
      "output_depth": 8,
      "simplification_time": 0.000828892
    },
    "speedup": 127.64611915665732,
    "weight_simple_diff": 0,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(* (/ (+ (pow (/ (/ (* a (pow (pow a 0) a)) (* a a)) (- (+ -1 0) -1)) (+ (- 1 c) e)) (- (* (/ b a) c) (/ e e))) (+ (* (- c 1) 0) (pow e 1))) (* (- (* (+ b a) a) (- 0 1)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.136289589)",
      "output_term": "(* (/ (+ (pow (/ (/ (* a (pow 1 a)) (* a a)) 0) (+ (- 1 c) e)) (+ -1 (* c (/ b a)))) e) (+ a (* (/ 1 b) (+ (* a a) 1))))",
      "output_weight_simple": 25,
      "output_weight_complex": 60,
      "output_depth": 9,
      "simplification_time": 0.140055005
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (pow (/ (/ (* a (pow 1 a)) (* a a)) 0) (+ (- 1 c) e)) (- (* c (/ b a)) 1)) (/ (+ 1 (* a (+ a b))) b)) e)",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 9,
      "simplification_time": 0.0009532449999999999
    },
    "speedup": 146.92445803544737,
    "weight_simple_diff": 1,
    "weight_complex_diff": 1,
    "depth_diff": 0
  },
  {
    "base_term": "(* (+ (- (pow (* (* a (/ (/ (- a b) b) (pow 1 a))) (pow (* a -1) -1)) (pow (+ b b) b)) (pow (+ (pow c -1) a) (/ 0 c))) (+ (* (pow 1 0) e) (* c 0))) (- (/ (pow 0 (pow -1 0)) (pow d d)) (- e b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 127,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.292404845)",
      "output_term": "(* -1 (* (+ -1 (+ (pow (* (/ (/ (- a b) b) (pow 1 a)) -1) (pow (+ b b) b)) e)) (- e b)))",
      "output_weight_simple": 18,
      "output_weight_complex": 41,
      "output_depth": 10,
      "simplification_time": 0.324356341
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(* (+ (- (pow (/ (/ (/ (* a (- a b)) (pow 1 a)) (- 0 a)) b) (pow (+ b b) b)) (pow (+ a (/ 1 c)) (/ 0 c))) e) (- (/ 0 (pow d d)) (- e b)))",
      "output_weight_simple": 28,
      "output_weight_complex": 74,
      "output_depth": 10,
      "simplification_time": 0.002169428
    },
    "speedup": 149.51237883903036,
    "weight_simple_diff": -10,
    "weight_complex_diff": -33,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (- (/ (* (+ (pow (/ a (- -1 1)) (pow -1 0)) (+ -1 a)) (pow -1 (pow b 1))) (- (* b 0) a)) (- (* a (pow -1 b)) (* b 1))) (pow (pow (/ c c) c) (pow -1 -1))) (+ (/ (- (- -1 -1) -1) (* 0 d)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 119,
    "input_depth": 10,
    "Baseline": {
      "iterations": 11,
      "stop_reason": "TimeLimit(0.106151378)",
      "output_term": "(/ (* (- (/ (* (+ -1 (* a 0.5)) (pow -1 b)) (- 0 a)) (- (* a (pow -1 b)) b)) (/ 1 (pow 1 c))) (/ 1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 50,
      "output_depth": 8,
      "simplification_time": 0.10900362200000001
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (/ (- (/ (* (+ a (- (/ a -2) 1)) (pow -1 b)) (- 0 a)) (- (* a (pow -1 b)) b)) (pow 1 c)) (/ 1 0))",
      "output_weight_simple": 21,
      "output_weight_complex": 52,
      "output_depth": 9,
      "simplification_time": 0.000704235
    },
    "speedup": 154.78302271258886,
    "weight_simple_diff": 0,
    "weight_complex_diff": -2,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (- (/ (- (* (* a (pow (/ (- 0 a) 1) (pow a a))) (- (/ 1 -1) b)) (+ -1 (+ 0 b))) (* (pow (* c c) b) (* -1 -1))) (pow (/ (* 1 c) a) (+ 0 d))) (- (/ (/ (* 1 -1) -1) (- 1 e)) (/ 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (- (* a (* (pow (- 0 a) (pow a a)) (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 9,
      "simplification_time": 0.062235798999999994
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (- (* (pow (- 0 a) (pow a a)) (* a (- -1 b))) (+ -1 b)) (pow (* c c) b)) (pow (/ c a) d)) (- (/ 1 (- 1 e)) (/ 1 b)))",
      "output_weight_simple": 27,
      "output_weight_complex": 67,
      "output_depth": 8,
      "simplification_time": 0.00040132599999999997
    },
    "speedup": 155.07542247449703,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 1
  },
  {
    "base_term": "(+ (+ (pow (* (* (- (- (/ (pow -1 a) a) (/ 0 c)) (/ 1 a)) (pow (/ a -1) 0)) (/ (+ c a) c)) (+ b (* (+ 1 0) d))) (* (* (- a a) a) (pow a 0))) (- (* (* (- b e) 1) (/ a 1)) (/ 1 c)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.119748331)",
      "output_term": "(+ (pow (* (+ (/ 1 a) (/ 1 c)) (+ -1 (pow -1 a))) (+ b d)) (- (* a (- b e)) (/ 1 c)))",
      "output_weight_simple": 19,
      "output_weight_complex": 40,
      "output_depth": 6,
      "simplification_time": 0.12381939400000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(+ (pow (* (- (/ (pow -1 a) a) (+ (/ 0 c) (/ 1 a))) (/ (+ a c) c)) (+ b d)) (- (* a (- b e)) (/ 1 c)))",
      "output_weight_simple": 24,
      "output_weight_complex": 57,
      "output_depth": 7,
      "simplification_time": 0.000796237
    },
    "speedup": 155.5057024478893,
    "weight_simple_diff": -5,
    "weight_complex_diff": -17,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (+ (* (/ -1 (/ (/ (* (/ a (/ b -1)) (- a c)) d) (+ 0 (pow b a)))) (- (pow (pow 0 d) 0) (- a 0))) (/ (- (+ b (- a e)) (pow 1 -1)) (pow 1 0))) (pow (/ (/ (+ -1 0) 1) (pow -1 0)) (/ e a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 134,
    "input_depth": 10,
    "Baseline": {
      "iterations": 16,
      "stop_reason": "TimeLimit(0.100489288)",
      "output_term": "(/ (+ (* (/ -1 (/ (/ (* (/ a (* -1 b)) (- a c)) d) (pow b a))) (- 1 a)) (+ -1 (+ b (- a e)))) (pow -1 (/ e a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 62,
      "output_depth": 10,
      "simplification_time": 0.100649443
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- a 1) (/ (/ (* (/ a (/ b -1)) (- a c)) d) (pow b a))) (- (- (+ a b) e) 1)) (pow -1 (/ e a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 63,
      "output_depth": 9,
      "simplification_time": 0.0006428909999999999
    },
    "speedup": 156.55755485766642,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 1
  },
  {
    "base_term": "(* (- (pow (/ (pow (* -1 (+ (+ -1 (pow a 1)) (+ a a))) b) (+ 1 (* (+ 0 a) -1))) (pow (pow 1 (pow a b)) c)) (+ (- (pow b (pow -1 a)) (* 0 1)) (+ a 0))) (- (- (+ (* c c) d) (- 0 d)) (/ 1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 109,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.153601495)",
      "output_term": "(* (- (pow (/ (pow (+ 1 (* a -3)) b) (+ 1 (* -1 a))) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ (+ d d) (+ 1 (* c c))))",
      "output_weight_simple": 26,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.18844088
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(* (- (pow (/ (pow (- 1 (* a 3)) b) (- 1 a)) (pow (pow 1 (pow a b)) c)) (+ a (pow b (pow -1 a)))) (+ (* c c) (+ 1 (+ d d))))",
      "output_weight_simple": 25,
      "output_weight_complex": 57,
      "output_depth": 8,
      "simplification_time": 0.001084095
    },
    "speedup": 173.82321660002123,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (- (+ (* (* (pow (* (/ 1 a) a) (- 1 -1)) (+ a 0)) (* 0 (- a 0))) (* (* -1 a) 0)) (pow (+ a (pow -1 -1)) (- a 1))) (pow (/ (/ c a) b) -1)) (- (+ (- (- 1 0) e) (/ 1 -1)) (* -1 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 107,
    "input_depth": 10,
    "Baseline": {
      "iterations": 14,
      "stop_reason": "TimeLimit(0.152568033)",
      "output_term": "(/ (- (- 0 (pow (+ a -1) (+ a -1))) (/ 1 (/ (/ c a) b))) (+ -1 (* -1 e)))",
      "output_weight_simple": 17,
      "output_weight_complex": 41,
      "output_depth": 6,
      "simplification_time": 0.1630619
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (- 0 (pow (+ a -1) (+ a -1))) (/ 1 (/ (/ c a) b))) (- -1 e))",
      "output_weight_simple": 16,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.0008691209999999999
    },
    "speedup": 187.6170291593461,
    "weight_simple_diff": 1,
    "weight_complex_diff": 2,
    "depth_diff": 0
  },
  {
    "base_term": "(pow (+ (* (* (- (pow (- (pow (pow a 1) 0) a) (+ a -1)) (+ b (- c a))) (/ 1 (pow 0 -1))) (- (* (/ a -1) d) (* -1 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (pow (- (/ (pow 0 e) 0) (+ 0 1)) (/ 1 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.104813872)",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ b (- c a))) (* (/ 1 (pow 0 -1)) (+ -1 (* a (* -1 d))))) (pow (pow -1 (- 1 b)) (pow 1 e))) (+ -1 (/ (pow 0 e) 0)))",
      "output_weight_simple": 30,
      "output_weight_complex": 68,
      "output_depth": 8,
      "simplification_time": 0.12153493900000001
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (+ (* (- (pow (- 1 a) (+ a -1)) (+ b (- c a))) (/ (- (* (/ a -1) d) 1) (pow 0 -1))) (pow (pow -1 (- 1 b)) (pow 1 e))) (- (/ (pow 0 e) 0) 1))",
      "output_weight_simple": 29,
      "output_weight_complex": 69,
      "output_depth": 8,
      "simplification_time": 0.000636328
    },
    "speedup": 190.9941712450183,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (+ (/ (/ (* (- (- -1 (/ 0 -1)) (+ a 0)) (+ a a)) (+ (+ a a) -1)) (pow (pow -1 0) 0)) (/ (- (pow 0 1) a) (- 0 b))) (* (pow (- b -1) b) (pow 1 0))) (+ (* 0 (/ (pow a 0) c)) (- -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 114,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.202103435)",
      "output_term": "(/ (- (+ (/ (* (- -1 a) (+ a a)) (+ -1 (+ a a))) (/ (- 0 a) (- 0 b))) (pow (+ 1 b) b)) (- -1 a))",
      "output_weight_simple": 18,
      "output_weight_complex": 36,
      "output_depth": 7,
      "simplification_time": 0.20966859300000001
    },
    "Extended": {
      "iterations": 8,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (+ (/ (* (- -1 a) (+ a a)) (+ -1 (+ a a))) (/ (- 0 a) (- 0 b))) (pow (+ 1 b) b)) (- -1 a))",
      "output_weight_simple": 18,
      "output_weight_complex": 36,
      "output_depth": 7,
      "simplification_time": 0.001075313
    },
    "speedup": 194.98377960649597,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(+ (* (+ (* (/ (+ (pow (- (pow -1 0) a) (pow -1 -1)) a) (+ (+ 1 1) a)) (- (+ a b) 0)) (/ (* 0 (pow 0 d)) (+ -1 -1))) (+ (- a (* -1 0)) (/ 1 c))) (/ (+ (/ (/ c 1) -1) (- e b)) (* -1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.120854649)",
      "output_term": "(+ (* (/ (+ a (/ 1 (- 1 a))) (+ a 2)) (* (+ a b) (+ a (/ 1 c)))) (/ (+ e (* -1 (+ b c))) (* -1 a)))",
      "output_weight_simple": 23,
      "output_weight_complex": 47,
      "output_depth": 7,
      "simplification_time": 0.144406356
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(+ (* (/ (+ a (/ 1 (- 1 a))) (+ a 2)) (* (+ a b) (+ a (/ 1 c)))) (/ (+ (/ c -1) (- e b)) (- 0 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 50,
      "output_depth": 7,
      "simplification_time": 0.0006611630000000001
    },
    "speedup": 218.4126395457701,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(- (* (* (- (+ (/ (* (/ (- a -1) -1) (+ -1 a)) (/ a -1)) (pow (pow b 0) a)) (- (- b b) 1)) (- (/ 1 (+ 1 1)) (- 1 1))) (pow (+ (pow 0 b) 1) -1)) (/ (- (+ c (/ c 0)) (* 0 c)) (+ 0 -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 108,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.198998666)",
      "output_term": "(+ (* (+ a (+ (pow 1 a) (+ 1 (/ 1 (* a -1))))) (* 0.5 (/ 1 (+ 1 (pow 0 b))))) (+ c (/ c 0)))",
      "output_weight_simple": 21,
      "output_weight_complex": 45,
      "output_depth": 8,
      "simplification_time": 0.20454901800000003
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (* (+ (/ (* (/ (+ a 1) -1) (+ a -1)) (/ a -1)) (+ (pow 1 a) 1)) (/ 0.5 (+ 1 (pow 0 b)))) (/ (+ c (/ c 0)) -1))",
      "output_weight_simple": 24,
      "output_weight_complex": 59,
      "output_depth": 8,
      "simplification_time": 0.000900463
    },
    "speedup": 227.15982555640824,
    "weight_simple_diff": -3,
    "weight_complex_diff": -14,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (+ (/ (/ (+ (- (+ 1 1) 1) (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow (- 0 1) a)) (- (/ (+ c 1) b) (/ e c))) (- (/ (- d b) -1) (- 0 -1))) (* (+ (pow -1 c) (* b -1)) (- 1 a)))",
    "input_weight_simple": 57,
    "input_weight_complex": 118,
    "input_depth": 10,
    "Baseline": {
      "iterations": 14,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (+ (/ (/ (- 1 a) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (+ 1 (- d b))) (* (+ (pow -1 c) (* -1 b)) (- 1 a)))",
      "output_weight_simple": 29,
      "output_weight_complex": 73,
      "output_depth": 8,
      "simplification_time": 0.09050643299999998
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (+ (/ (/ (+ 1 (/ a -1)) (/ a 0)) (pow (- 0 a) c)) (pow -1 a)) (- (/ (+ 1 c) b) (/ e c))) (- (/ (- d b) -1) 1)) (* (- (pow -1 c) b) (- 1 a)))",
      "output_weight_simple": 31,
      "output_weight_complex": 82,
      "output_depth": 9,
      "simplification_time": 0.000380625
    },
    "speedup": 237.7837320197044,
    "weight_simple_diff": -2,
    "weight_complex_diff": -9,
    "depth_diff": -1
  },
  {
    "base_term": "(- (* (/ (- (+ (/ (- (/ (pow 1 a) a) (pow -1 0)) -1) 1) (+ (+ (/ a 1) b) (pow a b))) (* (* (/ 0 -1) -1) (/ 1 a))) (* (* (/ a d) 0) (- a 1))) (+ (pow (* 0 (* e -1)) (+ -1 0)) (- e 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.107667898)",
      "output_term": "(+ 1 (* -1 (+ e (/ 1 0))))",
      "output_weight_simple": 8,
      "output_weight_complex": 14,
      "output_depth": 5,
      "simplification_time": 0.11134927
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- 1 (+ e (pow 0 -1)))",
      "output_weight_simple": 7,
      "output_weight_complex": 11,
      "output_depth": 4,
      "simplification_time": 0.000463337
    },
    "speedup": 240.32026365258977,
    "weight_simple_diff": 1,
    "weight_complex_diff": 3,
    "depth_diff": 1
  },
  {
    "base_term": "(/ (+ (/ (- (/ (- (+ (/ (pow 1 1) a) (/ -1 1)) (+ b c)) (+ (/ 1 a) 0)) (pow 1 (+ c d))) (- (- (pow e 0) e) (* e 0))) (pow (+ (* 1 c) d) (* b d))) (* (/ (- (- 0 c) 1) (- a c)) 0))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.101329116)",
      "output_term": "(/ (+ (/ (- (/ (- (+ -1 (/ 1 a)) (+ b c)) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.114578111
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- (/ (- (+ -1 (/ 1 a)) (+ b c)) (/ 1 a)) (pow 1 (+ c d))) (- 1 e)) (pow (+ c d) (* b d))) 0)",
      "output_weight_simple": 22,
      "output_weight_complex": 50,
      "output_depth": 9,
      "simplification_time": 0.000457927
    },
    "speedup": 250.21042873645797,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) (+ (/ c (* 1 1)) 0)) (* (* (- -1 (+ b b)) (+ c -1)) (- a -1))) (/ (pow (* (- a 1) -1) (* d -1)) (/ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 126,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.112975963)",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (* a -1)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) c) (* (+ -1 (* b -2)) (* (+ -1 c) (+ a 1)))) (/ (pow (* -1 (- a 1)) (* -1 d)) (/ 0 0)))",
      "output_weight_simple": 33,
      "output_weight_complex": 87,
      "output_depth": 10,
      "simplification_time": 0.11690307999999999
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (pow (+ a (pow (* (- (/ a (- 0 a)) (pow a a)) (/ b 0)) (/ b (/ c 0)))) c) (* (- -1 (+ b b)) (* (+ -1 c) (+ a 1)))) (/ (pow (- 1 a) (- 0 d)) (/ 0 0)))",
      "output_weight_simple": 31,
      "output_weight_complex": 81,
      "output_depth": 10,
      "simplification_time": 0.000438184
    },
    "speedup": 266.78993299618423,
    "weight_simple_diff": 2,
    "weight_complex_diff": 6,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (* (+ (/ (pow (/ (* (* (- a -1) -1) (- a a)) (pow -1 -1)) (* (/ 0 a) a)) (* (/ 0 a) b)) (+ (- (/ 0 1) 0) (/ -1 a))) (+ (- (/ b -1) c) (/ 1 -1))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 125,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.103010932)",
      "output_term": "(/ (* -1 (* (+ (/ 1 0) (/ -1 a)) (+ b (+ 1 c)))) (+ b (+ b (* (/ 1 0) (pow -1 b)))))",
      "output_weight_simple": 18,
      "output_weight_complex": 39,
      "output_depth": 6,
      "simplification_time": 0.103442324
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (+ (/ (pow 0 0) 0) (/ -1 a)) (+ -1 (- (/ b -1) c))) (+ (* (/ 1 0) (pow -1 b)) (+ b b)))",
      "output_weight_simple": 20,
      "output_weight_complex": 51,
      "output_depth": 6,
      "simplification_time": 0.00037629699999999994
    },
    "speedup": 274.89542568768826,
    "weight_simple_diff": -2,
    "weight_complex_diff": -12,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (- (/ (pow (/ (pow (+ (+ (* a a) a) (/ b -1)) (/ a 0)) (* (pow -1 1) a)) (/ (- -1 -1) a)) (+ (+ (* 1 1) a) b)) (pow (- (* a a) 0) (+ e e))) (* (+ (+ (/ -1 e) 0) (pow -1 0)) (* e d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 122,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.123695341)",
      "output_term": "(/ (- (/ 1 (+ 1 (+ a b))) (pow (* a a) (+ e e))) (* d (+ -1 e)))",
      "output_weight_simple": 16,
      "output_weight_complex": 33,
      "output_depth": 6,
      "simplification_time": 0.134696553
    },
    "Extended": {
      "iterations": 4,
      "stop_reason": "Saturated",
      "output_term": "(/ (- (/ (pow (/ (pow (+ a (+ (* a a) (/ b -1))) (/ a 0)) (- 0 a)) (/ 0 a)) (+ 1 (+ a b))) (pow (* a a) (+ e e))) (* (+ 1 (/ -1 e)) (* e d)))",
      "output_weight_simple": 28,
      "output_weight_complex": 72,
      "output_depth": 10,
      "simplification_time": 0.000448927
    },
    "speedup": 300.0411046784889,
    "weight_simple_diff": -12,
    "weight_complex_diff": -39,
    "depth_diff": -4
  },
  {
    "base_term": "(pow (- (/ (- (- (pow (+ (* (/ 1 a) a) (/ -1 -1)) (pow 0 1)) (pow 1 (- a 1))) (pow (* b -1) 0)) (- -1 (pow (- a a) 1))) (pow (+ (- 1 a) c) (- b d))) (/ (/ (- (pow 0 d) -1) (- 1 e)) (- 1 b)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 12,
      "stop_reason": "TimeLimit(0.121307413)",
      "output_term": "(pow (- (pow 1 (+ a -1)) (pow (+ (- 1 a) c) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 22,
      "output_weight_complex": 47,
      "output_depth": 6,
      "simplification_time": 0.124421966
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(pow (- (/ (- 0 (pow 1 (- a 1))) -1) (pow (- (+ 1 c) a) (- b d))) (/ (/ (+ 1 (pow 0 d)) (- 1 e)) (- 1 b)))",
      "output_weight_simple": 24,
      "output_weight_complex": 53,
      "output_depth": 7,
      "simplification_time": 0.000411367
    },
    "speedup": 302.4597646383886,
    "weight_simple_diff": -2,
    "weight_complex_diff": -6,
    "depth_diff": -1
  },
  {
    "base_term": "(- (pow (pow (* (/ (pow (pow (* (pow -1 1) a) -1) (* 0 a)) (pow (* 1 b) 0)) b) (/ (* 1 (* 0 b)) (pow 1 a))) (+ (/ (+ (pow d -1) 1) (* 1 b)) (* 0 0))) (/ (+ (- (+ 0 c) 0) (* c -1)) (+ 0 e)))",
    "input_weight_simple": 57,
    "input_weight_complex": 117,
    "input_depth": 10,
    "Baseline": {
      "iterations": 13,
      "stop_reason": "TimeLimit(0.18068696)",
      "output_term": "(pow 1 (/ (+ 1 (/ 1 d)) b))",
      "output_weight_simple": 7,
      "output_weight_complex": 20,
      "output_depth": 5,
      "simplification_time": 0.216065365
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(- (pow (pow b (/ 0 (pow 1 a))) (/ (+ 1 (/ 1 d)) b)) (/ 0 e))",
      "output_weight_simple": 15,
      "output_weight_complex": 44,
      "output_depth": 6,
      "simplification_time": 0.0006933590000000001
    },
    "speedup": 311.62120200357964,
    "weight_simple_diff": -8,
    "weight_complex_diff": -24,
    "depth_diff": -1
  },
  {
    "base_term": "(- (- (* (pow (pow (pow (- a (- (pow 1 a) b)) (/ b 1)) (/ (- b 0) 0)) (* (+ b c) 1)) (- (/ (* -1 1) -1) (+ e -1))) (pow (/ (/ d a) -1) (* d d))) (- (* (- (pow 1 a) -1) (+ 1 b)) (- a d)))",
    "input_weight_simple": 57,
    "input_weight_complex": 116,
    "input_depth": 10,
    "Baseline": {
      "iterations": 9,
      "stop_reason": "TimeLimit(0.133233382)",
      "output_term": "(+ a (* -1 (+ (* (+ 1 (pow 1 a)) (+ 1 b)) (+ (+ d (pow (* -1 (/ d a)) (* d d))) (* (pow (pow (pow (- a (- (pow 1 a) b)) b) (/ b 0)) (+ b c)) (+ e -2))))))",
      "output_weight_simple": 31,
      "output_weight_complex": 64,
      "output_depth": 12,
      "simplification_time": 0.14970476700000002
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(- (* (pow (pow (pow (- a (- (pow 1 a) b)) b) (/ b 0)) (+ b c)) (- 1 (+ -1 e))) (+ (pow (/ (/ d a) -1) (* d d)) (- (* (+ 1 (pow 1 a)) (+ 1 b)) (- a d))))",
      "output_weight_simple": 30,
      "output_weight_complex": 65,
      "output_depth": 9,
      "simplification_time": 0.000456808
    },
    "speedup": 327.71923215004995,
    "weight_simple_diff": 1,
    "weight_complex_diff": -1,
    "depth_diff": 3
  },
  {
    "base_term": "(* (- (/ (pow (/ (/ (- (- 0 (- -1 a)) (* a b)) (* a b)) (+ (/ b d) d)) (/ (- b -1) -1)) (/ (* (+ d -1) 1) (pow d b))) (/ (- (+ 0 b) d) (/ d b))) (pow (+ (/ (+ 1 e) 1) 1) (/ d -1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 128,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.239403405)",
      "output_term": "(* (- (/ (pow (/ (+ -1 (* (+ a 1) (/ 1 (* a b)))) (+ d (/ b d))) (* -1 (+ b 1))) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ e 2) (* -1 d)))",
      "output_weight_simple": 30,
      "output_weight_complex": 76,
      "output_depth": 10,
      "simplification_time": 0.261286133
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(* (- (/ (pow (/ (/ (- a (+ -1 (* a b))) (+ d (/ b d))) (* a b)) (/ (+ b 1) -1)) (/ (+ -1 d) (pow d b))) (/ (- b d) (/ d b))) (pow (+ e 2) (/ d -1)))",
      "output_weight_simple": 29,
      "output_weight_complex": 80,
      "output_depth": 10,
      "simplification_time": 0.00047333499999999997
    },
    "speedup": 552.0110133415023,
    "weight_simple_diff": 1,
    "weight_complex_diff": -4,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (pow (+ (pow (pow (/ (- (- (+ 1 -1) 1) (pow a 0)) -1) a) (- (pow (/ a -1) a) (+ b -1))) (/ (- b (- b -1)) (* c e))) (- (+ (+ e 1) e) (+ -1 d))) (pow (pow (+ d (* b 1)) (* -1 a)) (pow 1 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 115,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.175735633)",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (- (pow (* -1 a) a) (+ -1 b))) (/ -1 (* c e))) (+ e (+ e (+ 2 (* -1 d))))) (pow (+ b d) (* -1 a)))",
      "output_weight_simple": 24,
      "output_weight_complex": 55,
      "output_depth": 8,
      "simplification_time": 0.25516933
    },
    "Extended": {
      "iterations": 5,
      "stop_reason": "Saturated",
      "output_term": "(/ (pow (+ (pow (pow 2 a) (- (pow (/ a -1) a) (+ -1 b))) (/ -1 (* c e))) (- (+ e e) (- d 2))) (pow (+ b d) (- 0 a)))",
      "output_weight_simple": 25,
      "output_weight_complex": 58,
      "output_depth": 8,
      "simplification_time": 0.00046099499999999996
    },
    "speedup": 553.5186498768968,
    "weight_simple_diff": -1,
    "weight_complex_diff": -3,
    "depth_diff": 0
  },
  {
    "base_term": "(/ (+ (/ (- (pow (+ (- (- (- 0 1) a) (/ a -1)) (pow 1 -1)) (/ (- 0 -1) 1)) (* 0 0)) (pow (* (- a a) 1) (pow c d))) (+ (pow (- a 1) c) (* 0 b))) (/ (- (- (/ -1 c) d) (- 1 -1)) (+ 0 0)))",
    "input_weight_simple": 57,
    "input_weight_complex": 110,
    "input_depth": 10,
    "Baseline": {
      "iterations": 10,
      "stop_reason": "TimeLimit(0.328649491)",
      "output_term": "(/ (pow (+ -1 a) c) (/ (+ (- (/ -1 c) d) -2) 0))",
      "output_weight_simple": 13,
      "output_weight_complex": 31,
      "output_depth": 6,
      "simplification_time": 0.411393264
    },
    "Extended": {
      "iterations": 7,
      "stop_reason": "Saturated",
      "output_term": "(/ (+ (/ (- 0 (+ a (/ a -1))) (pow 0 (pow c d))) (pow (+ -1 a) c)) (/ (- (/ -1 c) (+ d 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 52,
      "output_depth": 7,
      "simplification_time": 0.000703998
    },
    "speedup": 584.3670919519658,
    "weight_simple_diff": -7,
    "weight_complex_diff": -21,
    "depth_diff": -1
  },
  {
    "base_term": "(/ (* (- (pow (+ (- (pow (pow (pow -1 -1) a) (* 0 a)) a) a) (pow (- (+ b b) a) 0)) (/ 1 (/ (pow -1 b) 0))) (pow (/ (pow (pow a a) a) (/ 1 a)) (* -1 -1))) (/ (+ (+ 1 (pow -1 a)) (+ 1 a)) (* 0 1)))",
    "input_weight_simple": 57,
    "input_weight_complex": 129,
    "input_depth": 10,
    "Baseline": {
      "iterations": 8,
      "stop_reason": "TimeLimit(0.198203036)",
      "output_term": "(/ (* (- 1 (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ 1 a))) (/ (+ (pow -1 a) (+ a 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.269687078
    },
    "Extended": {
      "iterations": 6,
      "stop_reason": "Saturated",
      "output_term": "(/ (* (- 1 (/ 1 (/ (pow -1 b) 0))) (/ (pow (pow a a) a) (/ 1 a))) (/ (+ a (+ (pow -1 a) 2)) 0))",
      "output_weight_simple": 20,
      "output_weight_complex": 59,
      "output_depth": 7,
      "simplification_time": 0.00043961600000000004
    },
    "speedup": 613.4605610350852,
    "weight_simple_diff": 0,
    "weight_complex_diff": 0,
    "depth_diff": 0
  }
]